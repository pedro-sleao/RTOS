   1               		.file	"chsem.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chSemObjectInit,"ax",@progbits
  11               	.global	chSemObjectInit
  13               	chSemObjectInit:
  14               	.LFB195:
  15               		.file 1 "../../os/rt/src/chsem.c"
   1:../../os/rt/src/chsem.c **** /*
   2:../../os/rt/src/chsem.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/src/chsem.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/src/chsem.c **** 
   5:../../os/rt/src/chsem.c ****     This file is part of ChibiOS.
   6:../../os/rt/src/chsem.c **** 
   7:../../os/rt/src/chsem.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/src/chsem.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/src/chsem.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/src/chsem.c **** 
  11:../../os/rt/src/chsem.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/src/chsem.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/src/chsem.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/src/chsem.c ****     GNU General Public License for more details.
  15:../../os/rt/src/chsem.c **** 
  16:../../os/rt/src/chsem.c ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/src/chsem.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/src/chsem.c **** */
  19:../../os/rt/src/chsem.c **** 
  20:../../os/rt/src/chsem.c **** /**
  21:../../os/rt/src/chsem.c ****  * @file    rt/src/chsem.c
  22:../../os/rt/src/chsem.c ****  * @brief   Semaphores code.
  23:../../os/rt/src/chsem.c ****  *
  24:../../os/rt/src/chsem.c ****  * @addtogroup semaphores
  25:../../os/rt/src/chsem.c ****  * @details Semaphores related APIs and services.
  26:../../os/rt/src/chsem.c ****  *          <h2>Operation mode</h2>
  27:../../os/rt/src/chsem.c ****  *          Semaphores are a flexible synchronization primitive, ChibiOS/RT
  28:../../os/rt/src/chsem.c ****  *          implements semaphores in their "counting semaphores" variant as
  29:../../os/rt/src/chsem.c ****  *          defined by Edsger Dijkstra plus several enhancements like:
  30:../../os/rt/src/chsem.c ****  *          - Wait operation with timeout.
  31:../../os/rt/src/chsem.c ****  *          - Reset operation.
  32:../../os/rt/src/chsem.c ****  *          - Atomic wait+signal operation.
  33:../../os/rt/src/chsem.c ****  *          - Return message from the wait operation (OK, RESET, TIMEOUT).
  34:../../os/rt/src/chsem.c ****  *          .
  35:../../os/rt/src/chsem.c ****  *          The binary semaphores variant can be easily implemented using
  36:../../os/rt/src/chsem.c ****  *          counting semaphores.<br>
  37:../../os/rt/src/chsem.c ****  *          Operations defined for semaphores:
  38:../../os/rt/src/chsem.c ****  *          - <b>Signal</b>: The semaphore counter is increased and if the
  39:../../os/rt/src/chsem.c ****  *            result is non-positive then a waiting thread is removed from
  40:../../os/rt/src/chsem.c ****  *            the semaphore queue and made ready for execution.
  41:../../os/rt/src/chsem.c ****  *          - <b>Wait</b>: The semaphore counter is decreased and if the result
  42:../../os/rt/src/chsem.c ****  *            becomes negative the thread is queued in the semaphore and
  43:../../os/rt/src/chsem.c ****  *            suspended.
  44:../../os/rt/src/chsem.c ****  *          - <b>Reset</b>: The semaphore counter is reset to a non-negative
  45:../../os/rt/src/chsem.c ****  *            value and all the threads in the queue are released.
  46:../../os/rt/src/chsem.c ****  *          .
  47:../../os/rt/src/chsem.c ****  *          Semaphores can be used as guards for mutual exclusion zones
  48:../../os/rt/src/chsem.c ****  *          (note that mutexes are recommended for this kind of use) but
  49:../../os/rt/src/chsem.c ****  *          also have other uses, queues guards and counters for example.<br>
  50:../../os/rt/src/chsem.c ****  *          Semaphores usually use a FIFO queuing strategy but it is possible
  51:../../os/rt/src/chsem.c ****  *          to make them order threads by priority by enabling
  52:../../os/rt/src/chsem.c ****  *          @p CH_CFG_USE_SEMAPHORES_PRIORITY in @p chconf.h.
  53:../../os/rt/src/chsem.c ****  * @pre     In order to use the semaphore APIs the @p CH_CFG_USE_SEMAPHORES
  54:../../os/rt/src/chsem.c ****  *          option must be enabled in @p chconf.h.
  55:../../os/rt/src/chsem.c ****  * @{
  56:../../os/rt/src/chsem.c ****  */
  57:../../os/rt/src/chsem.c **** 
  58:../../os/rt/src/chsem.c **** #include "ch.h"
  59:../../os/rt/src/chsem.c **** 
  60:../../os/rt/src/chsem.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  61:../../os/rt/src/chsem.c **** 
  62:../../os/rt/src/chsem.c **** /*===========================================================================*/
  63:../../os/rt/src/chsem.c **** /* Module exported variables.                                                */
  64:../../os/rt/src/chsem.c **** /*===========================================================================*/
  65:../../os/rt/src/chsem.c **** 
  66:../../os/rt/src/chsem.c **** /*===========================================================================*/
  67:../../os/rt/src/chsem.c **** /* Module local types.                                                       */
  68:../../os/rt/src/chsem.c **** /*===========================================================================*/
  69:../../os/rt/src/chsem.c **** 
  70:../../os/rt/src/chsem.c **** /*===========================================================================*/
  71:../../os/rt/src/chsem.c **** /* Module local variables.                                                   */
  72:../../os/rt/src/chsem.c **** /*===========================================================================*/
  73:../../os/rt/src/chsem.c **** 
  74:../../os/rt/src/chsem.c **** /*===========================================================================*/
  75:../../os/rt/src/chsem.c **** /* Module local functions.                                                   */
  76:../../os/rt/src/chsem.c **** /*===========================================================================*/
  77:../../os/rt/src/chsem.c **** 
  78:../../os/rt/src/chsem.c **** #if CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE
  79:../../os/rt/src/chsem.c **** #define sem_insert(qp, tp) ch_sch_prio_insert(qp, &tp->hdr.queue)
  80:../../os/rt/src/chsem.c **** #else
  81:../../os/rt/src/chsem.c **** #define sem_insert(qp, tp) ch_queue_insert(qp, &tp->hdr.queue)
  82:../../os/rt/src/chsem.c **** #endif
  83:../../os/rt/src/chsem.c **** 
  84:../../os/rt/src/chsem.c **** /*===========================================================================*/
  85:../../os/rt/src/chsem.c **** /* Module exported functions.                                                */
  86:../../os/rt/src/chsem.c **** /*===========================================================================*/
  87:../../os/rt/src/chsem.c **** 
  88:../../os/rt/src/chsem.c **** /**
  89:../../os/rt/src/chsem.c ****  * @brief   Initializes a semaphore with the specified counter value.
  90:../../os/rt/src/chsem.c ****  *
  91:../../os/rt/src/chsem.c ****  * @param[out] sp       pointer to a @p semaphore_t structure
  92:../../os/rt/src/chsem.c ****  * @param[in] n         initial value of the semaphore counter. Must be
  93:../../os/rt/src/chsem.c ****  *                      non-negative.
  94:../../os/rt/src/chsem.c ****  *
  95:../../os/rt/src/chsem.c ****  * @init
  96:../../os/rt/src/chsem.c ****  */
  97:../../os/rt/src/chsem.c **** void chSemObjectInit(semaphore_t *sp, cnt_t n) {
  16               		.loc 1 97 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
  24               	.LVL1:
  25               	.LBB97:
  26               	.LBB98:
  27               		.file 2 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
  28               		.loc 2 224 0
  29 0002 9183      		std Z+1,r25
  30 0004 8083      		st Z,r24
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
  31               		.loc 2 225 0
  32 0006 9383      		std Z+3,r25
  33 0008 8283      		std Z+2,r24
  34               	.LVL2:
  35               	.LBE98:
  36               	.LBE97:
  98:../../os/rt/src/chsem.c **** 
  99:../../os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 100:../../os/rt/src/chsem.c **** 
 101:../../os/rt/src/chsem.c ****   ch_queue_init(&sp->queue);
 102:../../os/rt/src/chsem.c ****   sp->cnt = n;
  37               		.loc 1 102 0
  38 000a 6483      		std Z+4,r22
  39               	/* epilogue start */
 103:../../os/rt/src/chsem.c **** }
  40               		.loc 1 103 0
  41 000c 0895      		ret
  42               		.cfi_endproc
  43               	.LFE195:
  45               		.section	.text.chSemResetWithMessage,"ax",@progbits
  46               	.global	chSemResetWithMessage
  48               	chSemResetWithMessage:
  49               	.LFB196:
 104:../../os/rt/src/chsem.c **** 
 105:../../os/rt/src/chsem.c **** /**
 106:../../os/rt/src/chsem.c ****  * @brief   Performs a reset operation on the semaphore.
 107:../../os/rt/src/chsem.c ****  * @post    After invoking this function all the threads waiting on the
 108:../../os/rt/src/chsem.c ****  *          semaphore, if any, are released and the semaphore counter is set
 109:../../os/rt/src/chsem.c ****  *          to the specified, non negative, value.
 110:../../os/rt/src/chsem.c ****  *
 111:../../os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 112:../../os/rt/src/chsem.c ****  * @param[in] n         the new value of the semaphore counter. The value must
 113:../../os/rt/src/chsem.c ****  *                      be non-negative.
 114:../../os/rt/src/chsem.c ****  * @param[in] msg       message to be sent
 115:../../os/rt/src/chsem.c ****  *
 116:../../os/rt/src/chsem.c ****  * @api
 117:../../os/rt/src/chsem.c ****  */
 118:../../os/rt/src/chsem.c **** void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
  50               		.loc 1 118 0
  51               		.cfi_startproc
  52               	.LVL3:
  53 0000 0F93      		push r16
  54               	.LCFI0:
  55               		.cfi_def_cfa_offset 3
  56               		.cfi_offset 16, -2
  57 0002 1F93      		push r17
  58               	.LCFI1:
  59               		.cfi_def_cfa_offset 4
  60               		.cfi_offset 17, -3
  61 0004 CF93      		push r28
  62               	.LCFI2:
  63               		.cfi_def_cfa_offset 5
  64               		.cfi_offset 28, -4
  65 0006 DF93      		push r29
  66               	.LCFI3:
  67               		.cfi_def_cfa_offset 6
  68               		.cfi_offset 29, -5
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 4 */
  72               	.L__stack_usage = 4
  73 0008 EC01      		movw r28,r24
  74 000a 8A01      		movw r16,r20
  75               	.LBB99:
  76               	.LBB100:
  77               	.LBB101:
  78               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  79               		.loc 3 430 0
  80               	/* #APP */
  81               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
  82 000c F894      		cli
  83               	 ;  0 "" 2
  84               	.LVL4:
  85               	/* #NOAPP */
  86               	.LBE101:
  87               	.LBE100:
  88               	.LBE99:
  89               	.LBB102:
  90               	.LBB103:
 119:../../os/rt/src/chsem.c **** 
 120:../../os/rt/src/chsem.c ****   chSysLock();
 121:../../os/rt/src/chsem.c ****   chSemResetWithMessageI(sp, n, msg);
 122:../../os/rt/src/chsem.c ****   chSchRescheduleS();
 123:../../os/rt/src/chsem.c ****   chSysUnlock();
 124:../../os/rt/src/chsem.c **** }
 125:../../os/rt/src/chsem.c **** 
 126:../../os/rt/src/chsem.c **** /**
 127:../../os/rt/src/chsem.c ****  * @brief   Performs a reset operation on the semaphore.
 128:../../os/rt/src/chsem.c ****  * @post    After invoking this function all the threads waiting on the
 129:../../os/rt/src/chsem.c ****  *          semaphore, if any, are released and the semaphore counter is set
 130:../../os/rt/src/chsem.c ****  *          to the specified, non negative, value.
 131:../../os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 132:../../os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 133:../../os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 134:../../os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 135:../../os/rt/src/chsem.c ****  *
 136:../../os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 137:../../os/rt/src/chsem.c ****  * @param[in] n         the new value of the semaphore counter. The value must
 138:../../os/rt/src/chsem.c ****  *                      be non-negative.
 139:../../os/rt/src/chsem.c ****  * @param[in] msg       message to be sent
 140:../../os/rt/src/chsem.c ****  *
 141:../../os/rt/src/chsem.c ****  * @iclass
 142:../../os/rt/src/chsem.c ****  */
 143:../../os/rt/src/chsem.c **** void chSemResetWithMessageI(semaphore_t *sp, cnt_t n, msg_t msg) {
 144:../../os/rt/src/chsem.c **** 
 145:../../os/rt/src/chsem.c ****   chDbgCheckClassI();
 146:../../os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 147:../../os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 148:../../os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
 149:../../os/rt/src/chsem.c ****               "inconsistent semaphore");
 150:../../os/rt/src/chsem.c **** 
 151:../../os/rt/src/chsem.c ****   sp->cnt = n;
  91               		.loc 1 151 0
  92 000e 6C83      		std Y+4,r22
 152:../../os/rt/src/chsem.c ****   while (ch_queue_notempty(&sp->queue)) {
  93               		.loc 1 152 0
  94 0010 8881      		ld r24,Y
  95 0012 9981      		ldd r25,Y+1
  96               	.LVL5:
  97 0014 C817      		cp r28,r24
  98 0016 D907      		cpc r29,r25
  99 0018 01F0      		breq .L4
 100               	.LVL6:
 101               	.L5:
 102               	.LBB104:
 103               	.LBB105:
 226:../../os/rt/include/chlists.h **** }
 227:../../os/rt/include/chlists.h **** 
 228:../../os/rt/include/chlists.h **** /**
 229:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 230:../../os/rt/include/chlists.h ****  *
 231:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 232:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 233:../../os/rt/include/chlists.h ****  *
 234:../../os/rt/include/chlists.h ****  * @notapi
 235:../../os/rt/include/chlists.h ****  */
 236:../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 237:../../os/rt/include/chlists.h **** 
 238:../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 239:../../os/rt/include/chlists.h **** }
 240:../../os/rt/include/chlists.h **** 
 241:../../os/rt/include/chlists.h **** /**
 242:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 243:../../os/rt/include/chlists.h ****  *
 244:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 245:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 246:../../os/rt/include/chlists.h ****  *
 247:../../os/rt/include/chlists.h ****  * @notapi
 248:../../os/rt/include/chlists.h ****  */
 249:../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 250:../../os/rt/include/chlists.h **** 
 251:../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 252:../../os/rt/include/chlists.h **** }
 253:../../os/rt/include/chlists.h **** 
 254:../../os/rt/include/chlists.h **** /**
 255:../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 256:../../os/rt/include/chlists.h ****  *
 257:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 258:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 259:../../os/rt/include/chlists.h ****  *
 260:../../os/rt/include/chlists.h ****  * @notapi
 261:../../os/rt/include/chlists.h ****  */
 262:../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 263:../../os/rt/include/chlists.h **** 
 264:../../os/rt/include/chlists.h ****   p->next       = qp;
 265:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 266:../../os/rt/include/chlists.h ****   p->prev->next = p;
 267:../../os/rt/include/chlists.h ****   qp->prev      = p;
 268:../../os/rt/include/chlists.h **** }
 269:../../os/rt/include/chlists.h **** 
 270:../../os/rt/include/chlists.h **** /**
 271:../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 272:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 273:../../os/rt/include/chlists.h ****  *          element with the highest priority.
 274:../../os/rt/include/chlists.h ****  *
 275:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 276:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 277:../../os/rt/include/chlists.h ****  *
 278:../../os/rt/include/chlists.h ****  * @notapi
 279:../../os/rt/include/chlists.h ****  */
 280:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 281:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 282:../../os/rt/include/chlists.h **** 
 283:../../os/rt/include/chlists.h ****   qp->next       = p->next;
 284:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 285:../../os/rt/include/chlists.h **** 
 286:../../os/rt/include/chlists.h ****   return p;
 287:../../os/rt/include/chlists.h **** }
 288:../../os/rt/include/chlists.h **** 
 289:../../os/rt/include/chlists.h **** /**
 290:../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 291:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 292:../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 293:../../os/rt/include/chlists.h ****  *
 294:../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 295:../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 296:../../os/rt/include/chlists.h ****  *
 297:../../os/rt/include/chlists.h ****  * @notapi
 298:../../os/rt/include/chlists.h ****  */
 299:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 300:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 104               		.loc 2 300 0
 105 001a 8A81      		ldd r24,Y+2
 106 001c 9B81      		ldd r25,Y+3
 107               	.LVL7:
 301:../../os/rt/include/chlists.h **** 
 302:../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 108               		.loc 2 302 0
 109 001e DC01      		movw r26,r24
 110 0020 1296      		adiw r26,2
 111 0022 ED91      		ld r30,X+
 112 0024 FC91      		ld r31,X
 113 0026 FB83      		std Y+3,r31
 114 0028 EA83      		std Y+2,r30
 303:../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 115               		.loc 2 303 0
 116 002a D183      		std Z+1,r29
 117 002c C083      		st Z,r28
 118               	.LVL8:
 119               	.LBE105:
 120               	.LBE104:
 153:../../os/rt/src/chsem.c ****     chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 121               		.loc 1 153 0
 122 002e 0E94 0000 		call chSchReadyI
 123               	.LVL9:
 124 0032 FC01      		movw r30,r24
 125 0034 138B      		std Z+19,r17
 126 0036 028B      		std Z+18,r16
 152:../../os/rt/src/chsem.c ****     chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 127               		.loc 1 152 0
 128 0038 8881      		ld r24,Y
 129 003a 9981      		ldd r25,Y+1
 130 003c 8C17      		cp r24,r28
 131 003e 9D07      		cpc r25,r29
 132 0040 01F4      		brne .L5
 133               	.L4:
 134               	.LVL10:
 135               	.LBE103:
 136               	.LBE102:
 122:../../os/rt/src/chsem.c ****   chSysUnlock();
 137               		.loc 1 122 0
 138 0042 0E94 0000 		call chSchRescheduleS
 139               	.LVL11:
 140               	.LBB106:
 141               	.LBB107:
 142               	.LBB108:
 143               	.LBB109:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 144               		.loc 3 440 0
 145               	/* #APP */
 146               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 147 0046 7894      		sei
 148               	 ;  0 "" 2
 149               	/* epilogue start */
 150               	/* #NOAPP */
 151               	.LBE109:
 152               	.LBE108:
 153               	.LBE107:
 154               	.LBE106:
 124:../../os/rt/src/chsem.c **** 
 155               		.loc 1 124 0
 156 0048 DF91      		pop r29
 157 004a CF91      		pop r28
 158               	.LVL12:
 159 004c 1F91      		pop r17
 160 004e 0F91      		pop r16
 161               	.LVL13:
 162 0050 0895      		ret
 163               		.cfi_endproc
 164               	.LFE196:
 166               		.section	.text.chSemResetWithMessageI,"ax",@progbits
 167               	.global	chSemResetWithMessageI
 169               	chSemResetWithMessageI:
 170               	.LFB197:
 143:../../os/rt/src/chsem.c **** 
 171               		.loc 1 143 0
 172               		.cfi_startproc
 173               	.LVL14:
 174 0000 0F93      		push r16
 175               	.LCFI4:
 176               		.cfi_def_cfa_offset 3
 177               		.cfi_offset 16, -2
 178 0002 1F93      		push r17
 179               	.LCFI5:
 180               		.cfi_def_cfa_offset 4
 181               		.cfi_offset 17, -3
 182 0004 CF93      		push r28
 183               	.LCFI6:
 184               		.cfi_def_cfa_offset 5
 185               		.cfi_offset 28, -4
 186 0006 DF93      		push r29
 187               	.LCFI7:
 188               		.cfi_def_cfa_offset 6
 189               		.cfi_offset 29, -5
 190               	/* prologue: function */
 191               	/* frame size = 0 */
 192               	/* stack size = 4 */
 193               	.L__stack_usage = 4
 194 0008 EC01      		movw r28,r24
 195 000a 8A01      		movw r16,r20
 151:../../os/rt/src/chsem.c ****   while (ch_queue_notempty(&sp->queue)) {
 196               		.loc 1 151 0
 197 000c 6C83      		std Y+4,r22
 152:../../os/rt/src/chsem.c ****     chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 198               		.loc 1 152 0
 199 000e 8881      		ld r24,Y
 200 0010 9981      		ldd r25,Y+1
 201               	.LVL15:
 202 0012 C817      		cp r28,r24
 203 0014 D907      		cpc r29,r25
 204 0016 01F0      		breq .L7
 205               	.LVL16:
 206               	.L9:
 207               	.LBB110:
 208               	.LBB111:
 300:../../os/rt/include/chlists.h **** 
 209               		.loc 2 300 0
 210 0018 8A81      		ldd r24,Y+2
 211 001a 9B81      		ldd r25,Y+3
 212               	.LVL17:
 302:../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 213               		.loc 2 302 0
 214 001c DC01      		movw r26,r24
 215 001e 1296      		adiw r26,2
 216 0020 ED91      		ld r30,X+
 217 0022 FC91      		ld r31,X
 218 0024 FB83      		std Y+3,r31
 219 0026 EA83      		std Y+2,r30
 220               		.loc 2 303 0
 221 0028 D183      		std Z+1,r29
 222 002a C083      		st Z,r28
 223               	.LVL18:
 224               	.LBE111:
 225               	.LBE110:
 226               		.loc 1 153 0
 227 002c 0E94 0000 		call chSchReadyI
 228               	.LVL19:
 229 0030 FC01      		movw r30,r24
 230 0032 138B      		std Z+19,r17
 231 0034 028B      		std Z+18,r16
 152:../../os/rt/src/chsem.c ****     chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 232               		.loc 1 152 0
 233 0036 8881      		ld r24,Y
 234 0038 9981      		ldd r25,Y+1
 235 003a 8C17      		cp r24,r28
 236 003c 9D07      		cpc r25,r29
 237 003e 01F4      		brne .L9
 238               	.L7:
 239               	/* epilogue start */
 154:../../os/rt/src/chsem.c ****   }
 155:../../os/rt/src/chsem.c **** }
 240               		.loc 1 155 0
 241 0040 DF91      		pop r29
 242 0042 CF91      		pop r28
 243               	.LVL20:
 244 0044 1F91      		pop r17
 245 0046 0F91      		pop r16
 246               	.LVL21:
 247 0048 0895      		ret
 248               		.cfi_endproc
 249               	.LFE197:
 251               		.section	.text.chSemWait,"ax",@progbits
 252               	.global	chSemWait
 254               	chSemWait:
 255               	.LFB198:
 156:../../os/rt/src/chsem.c **** 
 157:../../os/rt/src/chsem.c **** /**
 158:../../os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore.
 159:../../os/rt/src/chsem.c ****  *
 160:../../os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 161:../../os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 162:../../os/rt/src/chsem.c ****  *                      released from the semaphore.
 163:../../os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 164:../../os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 165:../../os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 166:../../os/rt/src/chsem.c ****  *
 167:../../os/rt/src/chsem.c ****  * @api
 168:../../os/rt/src/chsem.c ****  */
 169:../../os/rt/src/chsem.c **** msg_t chSemWait(semaphore_t *sp) {
 256               		.loc 1 169 0
 257               		.cfi_startproc
 258               	.LVL22:
 259 0000 CF93      		push r28
 260               	.LCFI8:
 261               		.cfi_def_cfa_offset 3
 262               		.cfi_offset 28, -2
 263 0002 DF93      		push r29
 264               	.LCFI9:
 265               		.cfi_def_cfa_offset 4
 266               		.cfi_offset 29, -3
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 2 */
 270               	.L__stack_usage = 2
 271 0004 FC01      		movw r30,r24
 272               	.LBB128:
 273               	.LBB129:
 274               	.LBB130:
 430:../../os/common/ports/AVR/chcore.h **** }
 275               		.loc 3 430 0
 276               	/* #APP */
 277               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 278 0006 F894      		cli
 279               	 ;  0 "" 2
 280               	.LVL23:
 281               	/* #NOAPP */
 282               	.LBE130:
 283               	.LBE129:
 284               	.LBE128:
 285               	.LBB131:
 286               	.LBB132:
 170:../../os/rt/src/chsem.c ****   msg_t msg;
 171:../../os/rt/src/chsem.c **** 
 172:../../os/rt/src/chsem.c ****   chSysLock();
 173:../../os/rt/src/chsem.c ****   msg = chSemWaitS(sp);
 174:../../os/rt/src/chsem.c ****   chSysUnlock();
 175:../../os/rt/src/chsem.c **** 
 176:../../os/rt/src/chsem.c ****   return msg;
 177:../../os/rt/src/chsem.c **** }
 178:../../os/rt/src/chsem.c **** 
 179:../../os/rt/src/chsem.c **** /**
 180:../../os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore.
 181:../../os/rt/src/chsem.c ****  *
 182:../../os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 183:../../os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 184:../../os/rt/src/chsem.c ****  *                      released from the semaphore.
 185:../../os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 186:../../os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 187:../../os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 188:../../os/rt/src/chsem.c ****  *
 189:../../os/rt/src/chsem.c ****  * @sclass
 190:../../os/rt/src/chsem.c ****  */
 191:../../os/rt/src/chsem.c **** msg_t chSemWaitS(semaphore_t *sp) {
 192:../../os/rt/src/chsem.c **** 
 193:../../os/rt/src/chsem.c ****   chDbgCheckClassS();
 194:../../os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 195:../../os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 196:../../os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
 197:../../os/rt/src/chsem.c ****               "inconsistent semaphore");
 198:../../os/rt/src/chsem.c **** 
 199:../../os/rt/src/chsem.c ****   if (--sp->cnt < (cnt_t)0) {
 287               		.loc 1 199 0
 288 0008 9481      		ldd r25,Z+4
 289 000a 9150      		subi r25,lo8(-(-1))
 290 000c 9483      		std Z+4,r25
 291 000e 97FD      		sbrc r25,7
 292 0010 00C0      		rjmp .L14
 200:../../os/rt/src/chsem.c ****     thread_t *currtp = chThdGetSelfX();
 201:../../os/rt/src/chsem.c ****     currtp->u.wtsemp = sp;
 202:../../os/rt/src/chsem.c ****     sem_insert(&sp->queue, currtp);
 203:../../os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 204:../../os/rt/src/chsem.c **** 
 205:../../os/rt/src/chsem.c ****     return currtp->u.rdymsg;
 206:../../os/rt/src/chsem.c ****   }
 207:../../os/rt/src/chsem.c **** 
 208:../../os/rt/src/chsem.c ****   return MSG_OK;
 293               		.loc 1 208 0
 294 0012 90E0      		ldi r25,0
 295 0014 80E0      		ldi r24,0
 296               	.LVL24:
 297               	.LBE132:
 298               	.LBE131:
 299               	.LBB141:
 300               	.LBB142:
 301               	.LBB143:
 302               	.LBB144:
 303               		.loc 3 440 0
 304               	/* #APP */
 305               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 306 0016 7894      		sei
 307               	 ;  0 "" 2
 308               	/* epilogue start */
 309               	/* #NOAPP */
 310               	.LBE144:
 311               	.LBE143:
 312               	.LBE142:
 313               	.LBE141:
 177:../../os/rt/src/chsem.c **** 
 314               		.loc 1 177 0
 315 0018 DF91      		pop r29
 316 001a CF91      		pop r28
 317 001c 0895      		ret
 318               	.LVL25:
 319               	.L14:
 320               	.LBB148:
 321               	.LBB140:
 322               	.LBB133:
 323               	.LBB134:
 324               	.LBB135:
 325               	.LBB136:
 326               	.LBB137:
 327               		.file 4 "../../os/rt/include/chthreads.h"
   1:../../os/rt/include/chthreads.h **** /*
   2:../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chthreads.h **** 
   5:../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chthreads.h **** 
   7:../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chthreads.h **** 
  11:../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chthreads.h **** 
  16:../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chthreads.h **** */
  19:../../os/rt/include/chthreads.h **** 
  20:../../os/rt/include/chthreads.h **** /**
  21:../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../os/rt/include/chthreads.h ****  *
  24:../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../os/rt/include/chthreads.h ****  * @{
  26:../../os/rt/include/chthreads.h ****  */
  27:../../os/rt/include/chthreads.h **** 
  28:../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../os/rt/include/chthreads.h **** 
  31:../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../os/rt/include/chthreads.h **** 
  33:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../os/rt/include/chthreads.h **** 
  37:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../os/rt/include/chthreads.h **** 
  41:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../os/rt/include/chthreads.h **** 
  45:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../os/rt/include/chthreads.h **** 
  49:../../os/rt/include/chthreads.h **** /**
  50:../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../os/rt/include/chthreads.h ****  */
  52:../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../os/rt/include/chthreads.h **** 
  54:../../os/rt/include/chthreads.h **** /**
  55:../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../os/rt/include/chthreads.h ****  */
  57:../../os/rt/include/chthreads.h **** typedef struct {
  58:../../os/rt/include/chthreads.h ****   /**
  59:../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../os/rt/include/chthreads.h ****    */
  61:../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../os/rt/include/chthreads.h ****   /**
  63:../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../os/rt/include/chthreads.h ****    */
  65:../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../os/rt/include/chthreads.h ****   /**
  67:../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../os/rt/include/chthreads.h ****    */
  69:../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../os/rt/include/chthreads.h ****   /**
  71:../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../os/rt/include/chthreads.h ****    */
  73:../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../os/rt/include/chthreads.h ****   /**
  75:../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../os/rt/include/chthreads.h ****    */
  77:../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../os/rt/include/chthreads.h ****   /**
  79:../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../os/rt/include/chthreads.h ****    */
  81:../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../os/rt/include/chthreads.h ****   /**
  84:../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../os/rt/include/chthreads.h ****    */
  86:../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../os/rt/include/chthreads.h **** #endif
  88:../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../os/rt/include/chthreads.h **** 
  90:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  91:../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  92:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  93:../../os/rt/include/chthreads.h **** 
  94:../../os/rt/include/chthreads.h **** /**
  95:../../os/rt/include/chthreads.h ****  * @name    Threads queues
  96:../../os/rt/include/chthreads.h ****  * @{
  97:../../os/rt/include/chthreads.h ****  */
  98:../../os/rt/include/chthreads.h **** /**
  99:../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 100:../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 101:../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 102:../../os/rt/include/chthreads.h ****  *
 103:../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 104:../../os/rt/include/chthreads.h ****  */
 105:../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 106:../../os/rt/include/chthreads.h **** 
 107:../../os/rt/include/chthreads.h **** /**
 108:../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 109:../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 110:../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 111:../../os/rt/include/chthreads.h ****  *
 112:../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 113:../../os/rt/include/chthreads.h ****  */
 114:../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 115:../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 116:../../os/rt/include/chthreads.h **** /** @} */
 117:../../os/rt/include/chthreads.h **** 
 118:../../os/rt/include/chthreads.h **** /**
 119:../../os/rt/include/chthreads.h ****  * @name    Working Areas
 120:../../os/rt/include/chthreads.h ****  * @{
 121:../../os/rt/include/chthreads.h ****  */
 122:../../os/rt/include/chthreads.h **** /**
 123:../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 124:../../os/rt/include/chthreads.h ****  *
 125:../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 126:../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 127:../../os/rt/include/chthreads.h ****  *
 128:../../os/rt/include/chthreads.h ****  * @api
 129:../../os/rt/include/chthreads.h ****  */
 130:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 131:../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 132:../../os/rt/include/chthreads.h **** 
 133:../../os/rt/include/chthreads.h **** /**
 134:../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 135:../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 136:../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 137:../../os/rt/include/chthreads.h ****  *
 138:../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 139:../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 140:../../os/rt/include/chthreads.h ****  *
 141:../../os/rt/include/chthreads.h ****  * @api
 142:../../os/rt/include/chthreads.h ****  */
 143:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 144:../../os/rt/include/chthreads.h **** 
 145:../../os/rt/include/chthreads.h **** /**
 146:../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 147:../../os/rt/include/chthreads.h ****  *
 148:../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 149:../../os/rt/include/chthreads.h ****  */
 150:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 151:../../os/rt/include/chthreads.h **** 
 152:../../os/rt/include/chthreads.h **** /**
 153:../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 154:../../os/rt/include/chthreads.h ****  *
 155:../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 156:../../os/rt/include/chthreads.h ****  */
 157:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 158:../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 159:../../os/rt/include/chthreads.h **** /** @} */
 160:../../os/rt/include/chthreads.h **** 
 161:../../os/rt/include/chthreads.h **** /**
 162:../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 163:../../os/rt/include/chthreads.h ****  * @{
 164:../../os/rt/include/chthreads.h ****  */
 165:../../os/rt/include/chthreads.h **** /**
 166:../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 167:../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 168:../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 169:../../os/rt/include/chthreads.h ****  */
 170:../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 171:../../os/rt/include/chthreads.h **** /** @} */
 172:../../os/rt/include/chthreads.h **** 
 173:../../os/rt/include/chthreads.h **** /**
 174:../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 175:../../os/rt/include/chthreads.h ****  * @{
 176:../../os/rt/include/chthreads.h ****  */
 177:../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 178:../../os/rt/include/chthreads.h **** /**
 179:../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 180:../../os/rt/include/chthreads.h ****  *
 181:../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 182:../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 183:../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 184:../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 185:../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 186:../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 187:../../os/rt/include/chthreads.h ****  */
 188:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 189:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 190:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 191:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 192:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 193:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 194:../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 195:../../os/rt/include/chthreads.h ****   NULL                                                                      \
 196:../../os/rt/include/chthreads.h **** }
 197:../../os/rt/include/chthreads.h **** #else
 198:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 199:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 200:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 201:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 202:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 203:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 204:../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 205:../../os/rt/include/chthreads.h **** }
 206:../../os/rt/include/chthreads.h **** #endif
 207:../../os/rt/include/chthreads.h **** 
 208:../../os/rt/include/chthreads.h **** /**
 209:../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../os/rt/include/chthreads.h ****  *
 211:../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 218:../../os/rt/include/chthreads.h ****  */
 219:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 220:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 221:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 222:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 223:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 224:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 225:../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 226:../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 227:../../os/rt/include/chthreads.h **** }
 228:../../os/rt/include/chthreads.h **** /** @} */
 229:../../os/rt/include/chthreads.h **** 
 230:../../os/rt/include/chthreads.h **** /**
 231:../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 232:../../os/rt/include/chthreads.h ****  * @{
 233:../../os/rt/include/chthreads.h ****  */
 234:../../os/rt/include/chthreads.h **** /**
 235:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 236:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 237:../../os/rt/include/chthreads.h ****  *          system tick clock.
 238:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 239:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 240:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 241:../../os/rt/include/chthreads.h ****  *          converted.
 242:../../os/rt/include/chthreads.h ****  *
 243:../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 244:../../os/rt/include/chthreads.h ****  *
 245:../../os/rt/include/chthreads.h ****  * @api
 246:../../os/rt/include/chthreads.h ****  */
 247:../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 248:../../os/rt/include/chthreads.h **** 
 249:../../os/rt/include/chthreads.h **** /**
 250:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 251:../../os/rt/include/chthreads.h ****  *          milliseconds.
 252:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 253:../../os/rt/include/chthreads.h ****  *          system tick clock.
 254:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 255:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 256:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 257:../../os/rt/include/chthreads.h ****  *          converted.
 258:../../os/rt/include/chthreads.h ****  *
 259:../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 260:../../os/rt/include/chthreads.h ****  *
 261:../../os/rt/include/chthreads.h ****  * @api
 262:../../os/rt/include/chthreads.h ****  */
 263:../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 264:../../os/rt/include/chthreads.h **** 
 265:../../os/rt/include/chthreads.h **** /**
 266:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 267:../../os/rt/include/chthreads.h ****  *          microseconds.
 268:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 269:../../os/rt/include/chthreads.h ****  *          system tick clock.
 270:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 271:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 272:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 273:../../os/rt/include/chthreads.h ****  *          converted.
 274:../../os/rt/include/chthreads.h ****  *
 275:../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 276:../../os/rt/include/chthreads.h ****  *
 277:../../os/rt/include/chthreads.h ****  * @api
 278:../../os/rt/include/chthreads.h ****  */
 279:../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 280:../../os/rt/include/chthreads.h **** /** @} */
 281:../../os/rt/include/chthreads.h **** 
 282:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 283:../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 284:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 285:../../os/rt/include/chthreads.h **** 
 286:../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 287:../../os/rt/include/chthreads.h **** extern "C" {
 288:../../os/rt/include/chthreads.h **** #endif
 289:../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 290:../../os/rt/include/chthreads.h ****                                thread_t *tp,
 291:../../os/rt/include/chthreads.h ****                                const char *name,
 292:../../os/rt/include/chthreads.h ****                                tprio_t prio);
 293:../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 294:../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 295:../../os/rt/include/chthreads.h **** #endif
 296:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 297:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 298:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 299:../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 300:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 301:../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 302:../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 303:../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 304:../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 305:../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 306:../../os/rt/include/chthreads.h **** #endif
 307:../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 308:../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 309:../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 310:../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 311:../../os/rt/include/chthreads.h **** #endif
 312:../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 313:../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 314:../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 315:../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 316:../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 317:../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 318:../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 319:../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 320:../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 321:../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 322:../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 323:../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 324:../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 325:../../os/rt/include/chthreads.h ****   void chThdYield(void);
 326:../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 327:../../os/rt/include/chthreads.h **** }
 328:../../os/rt/include/chthreads.h **** #endif
 329:../../os/rt/include/chthreads.h **** 
 330:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 331:../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 332:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 333:../../os/rt/include/chthreads.h **** 
 334:../../os/rt/include/chthreads.h **** /**
 335:../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 336:../../os/rt/include/chthreads.h ****  *
 337:../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 338:../../os/rt/include/chthreads.h ****  *
 339:../../os/rt/include/chthreads.h ****  * @xclass
 340:../../os/rt/include/chthreads.h ****  */
 341:../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 342:../../os/rt/include/chthreads.h **** 
 343:../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
 328               		.loc 4 343 0
 329 001e C091 0000 		lds r28,ch0+5
 330 0022 D091 0000 		lds r29,ch0+5+1
 331               	.LBE137:
 332               	.LBE136:
 201:../../os/rt/src/chsem.c ****     sem_insert(&sp->queue, currtp);
 333               		.loc 1 201 0
 334 0026 FB8B      		std Y+19,r31
 335 0028 EA8B      		std Y+18,r30
 336               	.LVL26:
 337               	.LBB138:
 338               	.LBB139:
 264:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 339               		.loc 2 264 0
 340 002a F983      		std Y+1,r31
 341 002c E883      		st Y,r30
 265:../../os/rt/include/chlists.h ****   p->prev->next = p;
 342               		.loc 2 265 0
 343 002e A281      		ldd r26,Z+2
 344 0030 B381      		ldd r27,Z+3
 345 0032 BB83      		std Y+3,r27
 346 0034 AA83      		std Y+2,r26
 266:../../os/rt/include/chlists.h ****   qp->prev      = p;
 347               		.loc 2 266 0
 348 0036 CD93      		st X+,r28
 349 0038 DC93      		st X,r29
 267:../../os/rt/include/chlists.h **** }
 350               		.loc 2 267 0
 351 003a D383      		std Z+3,r29
 352 003c C283      		std Z+2,r28
 353               	.LVL27:
 354               	.LBE139:
 355               	.LBE138:
 203:../../os/rt/src/chsem.c **** 
 356               		.loc 1 203 0
 357 003e 85E0      		ldi r24,lo8(5)
 358               	.LVL28:
 359 0040 0E94 0000 		call chSchGoSleepS
 360               	.LVL29:
 205:../../os/rt/src/chsem.c ****   }
 361               		.loc 1 205 0
 362 0044 8A89      		ldd r24,Y+18
 363 0046 9B89      		ldd r25,Y+19
 364               	.LVL30:
 365               	.LBE135:
 366               	.LBE134:
 367               	.LBE133:
 368               	.LBE140:
 369               	.LBE148:
 370               	.LBB149:
 371               	.LBB147:
 372               	.LBB146:
 373               	.LBB145:
 374               		.loc 3 440 0
 375               	/* #APP */
 376               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 377 0048 7894      		sei
 378               	 ;  0 "" 2
 379               	/* epilogue start */
 380               	/* #NOAPP */
 381               	.LBE145:
 382               	.LBE146:
 383               	.LBE147:
 384               	.LBE149:
 177:../../os/rt/src/chsem.c **** 
 385               		.loc 1 177 0
 386 004a DF91      		pop r29
 387 004c CF91      		pop r28
 388 004e 0895      		ret
 389               		.cfi_endproc
 390               	.LFE198:
 392               		.section	.text.chSemWaitS,"ax",@progbits
 393               	.global	chSemWaitS
 395               	chSemWaitS:
 396               	.LFB199:
 191:../../os/rt/src/chsem.c **** 
 397               		.loc 1 191 0
 398               		.cfi_startproc
 399               	.LVL31:
 400 0000 CF93      		push r28
 401               	.LCFI10:
 402               		.cfi_def_cfa_offset 3
 403               		.cfi_offset 28, -2
 404 0002 DF93      		push r29
 405               	.LCFI11:
 406               		.cfi_def_cfa_offset 4
 407               		.cfi_offset 29, -3
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 2 */
 411               	.L__stack_usage = 2
 412 0004 FC01      		movw r30,r24
 199:../../os/rt/src/chsem.c ****     thread_t *currtp = chThdGetSelfX();
 413               		.loc 1 199 0
 414 0006 9481      		ldd r25,Z+4
 415 0008 9150      		subi r25,lo8(-(-1))
 416 000a 9483      		std Z+4,r25
 417 000c 97FD      		sbrc r25,7
 418 000e 00C0      		rjmp .L18
 419               		.loc 1 208 0
 420 0010 90E0      		ldi r25,0
 421 0012 80E0      		ldi r24,0
 422               	.LVL32:
 423               	/* epilogue start */
 209:../../os/rt/src/chsem.c **** }
 424               		.loc 1 209 0
 425 0014 DF91      		pop r29
 426 0016 CF91      		pop r28
 427 0018 0895      		ret
 428               	.LVL33:
 429               	.L18:
 430               	.LBB157:
 431               	.LBB158:
 432               	.LBB159:
 433               	.LBB160:
 434               	.LBB161:
 435               		.loc 4 343 0
 436 001a C091 0000 		lds r28,ch0+5
 437 001e D091 0000 		lds r29,ch0+5+1
 438               	.LBE161:
 439               	.LBE160:
 201:../../os/rt/src/chsem.c ****     sem_insert(&sp->queue, currtp);
 440               		.loc 1 201 0
 441 0022 FB8B      		std Y+19,r31
 442 0024 EA8B      		std Y+18,r30
 443               	.LVL34:
 444               	.LBB162:
 445               	.LBB163:
 264:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 446               		.loc 2 264 0
 447 0026 F983      		std Y+1,r31
 448 0028 E883      		st Y,r30
 265:../../os/rt/include/chlists.h ****   p->prev->next = p;
 449               		.loc 2 265 0
 450 002a A281      		ldd r26,Z+2
 451 002c B381      		ldd r27,Z+3
 452 002e BB83      		std Y+3,r27
 453 0030 AA83      		std Y+2,r26
 266:../../os/rt/include/chlists.h ****   qp->prev      = p;
 454               		.loc 2 266 0
 455 0032 CD93      		st X+,r28
 456 0034 DC93      		st X,r29
 267:../../os/rt/include/chlists.h **** }
 457               		.loc 2 267 0
 458 0036 D383      		std Z+3,r29
 459 0038 C283      		std Z+2,r28
 460               	.LVL35:
 461               	.LBE163:
 462               	.LBE162:
 203:../../os/rt/src/chsem.c **** 
 463               		.loc 1 203 0
 464 003a 85E0      		ldi r24,lo8(5)
 465               	.LVL36:
 466 003c 0E94 0000 		call chSchGoSleepS
 467               	.LVL37:
 205:../../os/rt/src/chsem.c ****   }
 468               		.loc 1 205 0
 469 0040 8A89      		ldd r24,Y+18
 470 0042 9B89      		ldd r25,Y+19
 471               	.LVL38:
 472               	/* epilogue start */
 473               	.LBE159:
 474               	.LBE158:
 475               	.LBE157:
 476               		.loc 1 209 0
 477 0044 DF91      		pop r29
 478 0046 CF91      		pop r28
 479 0048 0895      		ret
 480               		.cfi_endproc
 481               	.LFE199:
 483               		.section	.text.chSemWaitTimeout,"ax",@progbits
 484               	.global	chSemWaitTimeout
 486               	chSemWaitTimeout:
 487               	.LFB200:
 210:../../os/rt/src/chsem.c **** 
 211:../../os/rt/src/chsem.c **** /**
 212:../../os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore with timeout specification.
 213:../../os/rt/src/chsem.c ****  *
 214:../../os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 215:../../os/rt/src/chsem.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 216:../../os/rt/src/chsem.c ****  *                      the following special values are allowed:
 217:../../os/rt/src/chsem.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 218:../../os/rt/src/chsem.c ****  *                      - @a TIME_INFINITE no timeout.
 219:../../os/rt/src/chsem.c ****  *                      .
 220:../../os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 221:../../os/rt/src/chsem.c ****  *                      released from the semaphore.
 222:../../os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 223:../../os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 224:../../os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 225:../../os/rt/src/chsem.c ****  * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 226:../../os/rt/src/chsem.c ****  *                      the specified timeout.
 227:../../os/rt/src/chsem.c ****  *
 228:../../os/rt/src/chsem.c ****  * @api
 229:../../os/rt/src/chsem.c ****  */
 230:../../os/rt/src/chsem.c **** msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 488               		.loc 1 230 0
 489               		.cfi_startproc
 490               	.LVL39:
 491 0000 CF93      		push r28
 492               	.LCFI12:
 493               		.cfi_def_cfa_offset 3
 494               		.cfi_offset 28, -2
 495 0002 DF93      		push r29
 496               	.LCFI13:
 497               		.cfi_def_cfa_offset 4
 498               		.cfi_offset 29, -3
 499               	/* prologue: function */
 500               	/* frame size = 0 */
 501               	/* stack size = 2 */
 502               	.L__stack_usage = 2
 503 0004 FC01      		movw r30,r24
 504               	.LBB181:
 505               	.LBB182:
 506               	.LBB183:
 430:../../os/common/ports/AVR/chcore.h **** }
 507               		.loc 3 430 0
 508               	/* #APP */
 509               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 510 0006 F894      		cli
 511               	 ;  0 "" 2
 512               	.LVL40:
 513               	/* #NOAPP */
 514               	.LBE183:
 515               	.LBE182:
 516               	.LBE181:
 517               	.LBB184:
 518               	.LBB185:
 231:../../os/rt/src/chsem.c ****   msg_t msg;
 232:../../os/rt/src/chsem.c **** 
 233:../../os/rt/src/chsem.c ****   chSysLock();
 234:../../os/rt/src/chsem.c ****   msg = chSemWaitTimeoutS(sp, timeout);
 235:../../os/rt/src/chsem.c ****   chSysUnlock();
 236:../../os/rt/src/chsem.c **** 
 237:../../os/rt/src/chsem.c ****   return msg;
 238:../../os/rt/src/chsem.c **** }
 239:../../os/rt/src/chsem.c **** 
 240:../../os/rt/src/chsem.c **** /**
 241:../../os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore with timeout specification.
 242:../../os/rt/src/chsem.c ****  *
 243:../../os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 244:../../os/rt/src/chsem.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 245:../../os/rt/src/chsem.c ****  *                      the following special values are allowed:
 246:../../os/rt/src/chsem.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 247:../../os/rt/src/chsem.c ****  *                      - @a TIME_INFINITE no timeout.
 248:../../os/rt/src/chsem.c ****  *                      .
 249:../../os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 250:../../os/rt/src/chsem.c ****  *                      released from the semaphore.
 251:../../os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 252:../../os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 253:../../os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 254:../../os/rt/src/chsem.c ****  * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 255:../../os/rt/src/chsem.c ****  *                      the specified timeout.
 256:../../os/rt/src/chsem.c ****  *
 257:../../os/rt/src/chsem.c ****  * @sclass
 258:../../os/rt/src/chsem.c ****  */
 259:../../os/rt/src/chsem.c **** msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 260:../../os/rt/src/chsem.c **** 
 261:../../os/rt/src/chsem.c ****   chDbgCheckClassS();
 262:../../os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 263:../../os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 264:../../os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
 265:../../os/rt/src/chsem.c ****               "inconsistent semaphore");
 266:../../os/rt/src/chsem.c **** 
 267:../../os/rt/src/chsem.c ****   if (--sp->cnt < (cnt_t)0) {
 519               		.loc 1 267 0
 520 0008 9481      		ldd r25,Z+4
 521 000a 8FEF      		ldi r24,lo8(-1)
 522               	.LVL41:
 523 000c 890F      		add r24,r25
 524 000e 8483      		std Z+4,r24
 525 0010 87FD      		sbrc r24,7
 526 0012 00C0      		rjmp .L23
 268:../../os/rt/src/chsem.c ****     if (unlikely(TIME_IMMEDIATE == timeout)) {
 269:../../os/rt/src/chsem.c ****       sp->cnt++;
 270:../../os/rt/src/chsem.c **** 
 271:../../os/rt/src/chsem.c ****       return MSG_TIMEOUT;
 272:../../os/rt/src/chsem.c ****     }
 273:../../os/rt/src/chsem.c ****     thread_t *currtp = chThdGetSelfX();
 274:../../os/rt/src/chsem.c ****     currtp->u.wtsemp = sp;
 275:../../os/rt/src/chsem.c ****     sem_insert(&sp->queue, currtp);
 276:../../os/rt/src/chsem.c **** 
 277:../../os/rt/src/chsem.c ****     return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 278:../../os/rt/src/chsem.c ****   }
 279:../../os/rt/src/chsem.c **** 
 280:../../os/rt/src/chsem.c ****   return MSG_OK;
 527               		.loc 1 280 0
 528 0014 90E0      		ldi r25,0
 529 0016 80E0      		ldi r24,0
 530               	.L20:
 531               	.LVL42:
 532               	.LBE185:
 533               	.LBE184:
 534               	.LBB197:
 535               	.LBB198:
 536               	.LBB199:
 537               	.LBB200:
 538               		.loc 3 440 0
 539               	/* #APP */
 540               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 541 0018 7894      		sei
 542               	 ;  0 "" 2
 543               	/* epilogue start */
 544               	/* #NOAPP */
 545               	.LBE200:
 546               	.LBE199:
 547               	.LBE198:
 548               	.LBE197:
 238:../../os/rt/src/chsem.c **** 
 549               		.loc 1 238 0
 550 001a DF91      		pop r29
 551 001c CF91      		pop r28
 552 001e 0895      		ret
 553               	.LVL43:
 554               	.L23:
 555               	.LBB204:
 556               	.LBB195:
 557               	.LBB186:
 268:../../os/rt/src/chsem.c ****     if (unlikely(TIME_IMMEDIATE == timeout)) {
 558               		.loc 1 268 0
 559 0020 6115      		cp r22,__zero_reg__
 560 0022 7105      		cpc r23,__zero_reg__
 561 0024 01F0      		breq .L24
 562               	.LVL44:
 563               	.LBE186:
 564               	.LBB187:
 565               	.LBB188:
 566               	.LBB189:
 567               	.LBB190:
 568               	.LBB191:
 569               		.loc 4 343 0
 570 0026 A091 0000 		lds r26,ch0+5
 571 002a B091 0000 		lds r27,ch0+5+1
 572               	.LBE191:
 573               	.LBE190:
 274:../../os/rt/src/chsem.c ****     sem_insert(&sp->queue, currtp);
 574               		.loc 1 274 0
 575 002e 5396      		adiw r26,18+1
 576 0030 FC93      		st X,r31
 577 0032 EE93      		st -X,r30
 578 0034 5297      		sbiw r26,18
 579               	.LVL45:
 580               	.LBB192:
 581               	.LBB193:
 264:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 582               		.loc 2 264 0
 583 0036 1196      		adiw r26,1
 584 0038 FC93      		st X,r31
 585 003a EE93      		st -X,r30
 265:../../os/rt/include/chlists.h ****   p->prev->next = p;
 586               		.loc 2 265 0
 587 003c C281      		ldd r28,Z+2
 588 003e D381      		ldd r29,Z+3
 589 0040 1396      		adiw r26,2+1
 590 0042 DC93      		st X,r29
 591 0044 CE93      		st -X,r28
 592 0046 1297      		sbiw r26,2
 266:../../os/rt/include/chlists.h ****   qp->prev      = p;
 593               		.loc 2 266 0
 594 0048 B983      		std Y+1,r27
 595 004a A883      		st Y,r26
 267:../../os/rt/include/chlists.h **** }
 596               		.loc 2 267 0
 597 004c B383      		std Z+3,r27
 598 004e A283      		std Z+2,r26
 599               	.LVL46:
 600               	.LBE193:
 601               	.LBE192:
 277:../../os/rt/src/chsem.c ****   }
 602               		.loc 1 277 0
 603 0050 85E0      		ldi r24,lo8(5)
 604 0052 0E94 0000 		call chSchGoSleepTimeoutS
 605               	.LVL47:
 606               	.LBE189:
 607               	.LBE188:
 608               	.LBE187:
 609               	.LBE195:
 610               	.LBE204:
 611               	.LBB205:
 612               	.LBB203:
 613               	.LBB202:
 614               	.LBB201:
 615               		.loc 3 440 0
 616               	/* #APP */
 617               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 618 0056 7894      		sei
 619               	 ;  0 "" 2
 620               	/* epilogue start */
 621               	/* #NOAPP */
 622               	.LBE201:
 623               	.LBE202:
 624               	.LBE203:
 625               	.LBE205:
 238:../../os/rt/src/chsem.c **** 
 626               		.loc 1 238 0
 627 0058 DF91      		pop r29
 628 005a CF91      		pop r28
 629 005c 0895      		ret
 630               	.LVL48:
 631               	.L24:
 632               	.LBB206:
 633               	.LBB196:
 634               	.LBB194:
 269:../../os/rt/src/chsem.c **** 
 635               		.loc 1 269 0
 636 005e 9483      		std Z+4,r25
 271:../../os/rt/src/chsem.c ****     }
 637               		.loc 1 271 0
 638 0060 8FEF      		ldi r24,lo8(-1)
 639 0062 9FEF      		ldi r25,lo8(-1)
 640 0064 00C0      		rjmp .L20
 641               	.LBE194:
 642               	.LBE196:
 643               	.LBE206:
 644               		.cfi_endproc
 645               	.LFE200:
 647               		.section	.text.chSemWaitTimeoutS,"ax",@progbits
 648               	.global	chSemWaitTimeoutS
 650               	chSemWaitTimeoutS:
 651               	.LFB201:
 259:../../os/rt/src/chsem.c **** 
 652               		.loc 1 259 0
 653               		.cfi_startproc
 654               	.LVL49:
 655 0000 CF93      		push r28
 656               	.LCFI14:
 657               		.cfi_def_cfa_offset 3
 658               		.cfi_offset 28, -2
 659 0002 DF93      		push r29
 660               	.LCFI15:
 661               		.cfi_def_cfa_offset 4
 662               		.cfi_offset 29, -3
 663               	/* prologue: function */
 664               	/* frame size = 0 */
 665               	/* stack size = 2 */
 666               	.L__stack_usage = 2
 667 0004 FC01      		movw r30,r24
 267:../../os/rt/src/chsem.c ****     if (unlikely(TIME_IMMEDIATE == timeout)) {
 668               		.loc 1 267 0
 669 0006 9481      		ldd r25,Z+4
 670 0008 8FEF      		ldi r24,lo8(-1)
 671               	.LVL50:
 672 000a 890F      		add r24,r25
 673 000c 8483      		std Z+4,r24
 674 000e 87FD      		sbrc r24,7
 675 0010 00C0      		rjmp .L29
 676               		.loc 1 280 0
 677 0012 90E0      		ldi r25,0
 678 0014 80E0      		ldi r24,0
 679               	.L25:
 680               	/* epilogue start */
 281:../../os/rt/src/chsem.c **** }
 681               		.loc 1 281 0
 682 0016 DF91      		pop r29
 683 0018 CF91      		pop r28
 684 001a 0895      		ret
 685               	.L29:
 686               	.LBB215:
 268:../../os/rt/src/chsem.c ****       sp->cnt++;
 687               		.loc 1 268 0
 688 001c 6115      		cp r22,__zero_reg__
 689 001e 7105      		cpc r23,__zero_reg__
 690 0020 01F0      		breq .L30
 691               	.LVL51:
 692               	.LBE215:
 693               	.LBB216:
 694               	.LBB217:
 695               	.LBB218:
 696               	.LBB219:
 697               	.LBB220:
 698               		.loc 4 343 0
 699 0022 A091 0000 		lds r26,ch0+5
 700 0026 B091 0000 		lds r27,ch0+5+1
 701               	.LBE220:
 702               	.LBE219:
 274:../../os/rt/src/chsem.c ****     sem_insert(&sp->queue, currtp);
 703               		.loc 1 274 0
 704 002a 5396      		adiw r26,18+1
 705 002c FC93      		st X,r31
 706 002e EE93      		st -X,r30
 707 0030 5297      		sbiw r26,18
 708               	.LVL52:
 709               	.LBB221:
 710               	.LBB222:
 264:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 711               		.loc 2 264 0
 712 0032 1196      		adiw r26,1
 713 0034 FC93      		st X,r31
 714 0036 EE93      		st -X,r30
 265:../../os/rt/include/chlists.h ****   p->prev->next = p;
 715               		.loc 2 265 0
 716 0038 C281      		ldd r28,Z+2
 717 003a D381      		ldd r29,Z+3
 718 003c 1396      		adiw r26,2+1
 719 003e DC93      		st X,r29
 720 0040 CE93      		st -X,r28
 721 0042 1297      		sbiw r26,2
 266:../../os/rt/include/chlists.h ****   qp->prev      = p;
 722               		.loc 2 266 0
 723 0044 B983      		std Y+1,r27
 724 0046 A883      		st Y,r26
 267:../../os/rt/include/chlists.h **** }
 725               		.loc 2 267 0
 726 0048 B383      		std Z+3,r27
 727 004a A283      		std Z+2,r26
 728               	.LVL53:
 729               	.LBE222:
 730               	.LBE221:
 277:../../os/rt/src/chsem.c ****   }
 731               		.loc 1 277 0
 732 004c 85E0      		ldi r24,lo8(5)
 733               	/* epilogue start */
 734               	.LBE218:
 735               	.LBE217:
 736               	.LBE216:
 737               		.loc 1 281 0
 738 004e DF91      		pop r29
 739 0050 CF91      		pop r28
 740               	.LBB225:
 741               	.LBB224:
 742               	.LBB223:
 277:../../os/rt/src/chsem.c ****   }
 743               		.loc 1 277 0
 744 0052 0C94 0000 		jmp chSchGoSleepTimeoutS
 745               	.LVL54:
 746               	.L30:
 747               	.LBE223:
 748               	.LBE224:
 749               	.LBE225:
 750               	.LBB226:
 269:../../os/rt/src/chsem.c **** 
 751               		.loc 1 269 0
 752 0056 9483      		std Z+4,r25
 271:../../os/rt/src/chsem.c ****     }
 753               		.loc 1 271 0
 754 0058 8FEF      		ldi r24,lo8(-1)
 755 005a 9FEF      		ldi r25,lo8(-1)
 756 005c 00C0      		rjmp .L25
 757               	.LBE226:
 758               		.cfi_endproc
 759               	.LFE201:
 761               		.section	.text.chSemSignal,"ax",@progbits
 762               	.global	chSemSignal
 764               	chSemSignal:
 765               	.LFB202:
 282:../../os/rt/src/chsem.c **** 
 283:../../os/rt/src/chsem.c **** /**
 284:../../os/rt/src/chsem.c ****  * @brief   Performs a signal operation on a semaphore.
 285:../../os/rt/src/chsem.c ****  *
 286:../../os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 287:../../os/rt/src/chsem.c ****  *
 288:../../os/rt/src/chsem.c ****  * @api
 289:../../os/rt/src/chsem.c ****  */
 290:../../os/rt/src/chsem.c **** void chSemSignal(semaphore_t *sp) {
 766               		.loc 1 290 0
 767               		.cfi_startproc
 768               	.LVL55:
 769 0000 CF93      		push r28
 770               	.LCFI16:
 771               		.cfi_def_cfa_offset 3
 772               		.cfi_offset 28, -2
 773 0002 DF93      		push r29
 774               	.LCFI17:
 775               		.cfi_def_cfa_offset 4
 776               		.cfi_offset 29, -3
 777               	/* prologue: function */
 778               	/* frame size = 0 */
 779               	/* stack size = 2 */
 780               	.L__stack_usage = 2
 781 0004 FC01      		movw r30,r24
 782               	.LBB227:
 783               	.LBB228:
 784               	.LBB229:
 430:../../os/common/ports/AVR/chcore.h **** }
 785               		.loc 3 430 0
 786               	/* #APP */
 787               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 788 0006 F894      		cli
 789               	 ;  0 "" 2
 790               	/* #NOAPP */
 791               	.LBE229:
 792               	.LBE228:
 793               	.LBE227:
 291:../../os/rt/src/chsem.c **** 
 292:../../os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 293:../../os/rt/src/chsem.c **** 
 294:../../os/rt/src/chsem.c ****   chSysLock();
 295:../../os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 296:../../os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
 297:../../os/rt/src/chsem.c ****               "inconsistent semaphore");
 298:../../os/rt/src/chsem.c ****   if (++sp->cnt <= (cnt_t)0) {
 794               		.loc 1 298 0
 795 0008 9481      		ldd r25,Z+4
 796 000a 9F5F      		subi r25,lo8(-(1))
 797 000c 9483      		std Z+4,r25
 798 000e 1916      		cp __zero_reg__,r25
 799 0010 04F4      		brge .L33
 800               	.LBB230:
 801               	.LBB231:
 802               	.LBB232:
 803               	.LBB233:
 804               		.loc 3 440 0
 805               	/* #APP */
 806               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 807 0012 7894      		sei
 808               	 ;  0 "" 2
 809               	/* epilogue start */
 810               	/* #NOAPP */
 811               	.LBE233:
 812               	.LBE232:
 813               	.LBE231:
 814               	.LBE230:
 299:../../os/rt/src/chsem.c ****     chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 300:../../os/rt/src/chsem.c ****   }
 301:../../os/rt/src/chsem.c ****   chSysUnlock();
 302:../../os/rt/src/chsem.c **** }
 815               		.loc 1 302 0
 816 0014 DF91      		pop r29
 817 0016 CF91      		pop r28
 818 0018 0895      		ret
 819               	.L33:
 820               	.LVL56:
 821               	.LBB237:
 822               	.LBB238:
 281:../../os/rt/include/chlists.h **** 
 823               		.loc 2 281 0
 824 001a 8081      		ld r24,Z
 825 001c 9181      		ldd r25,Z+1
 826               	.LVL57:
 283:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 827               		.loc 2 283 0
 828 001e EC01      		movw r28,r24
 829 0020 A881      		ld r26,Y
 830 0022 B981      		ldd r27,Y+1
 831 0024 B183      		std Z+1,r27
 832 0026 A083      		st Z,r26
 284:../../os/rt/include/chlists.h **** 
 833               		.loc 2 284 0
 834 0028 1396      		adiw r26,2+1
 835 002a FC93      		st X,r31
 836 002c EE93      		st -X,r30
 837 002e 1297      		sbiw r26,2
 838               	.LVL58:
 839               	.LBE238:
 840               	.LBE237:
 299:../../os/rt/src/chsem.c ****   }
 841               		.loc 1 299 0
 842 0030 70E0      		ldi r23,0
 843 0032 60E0      		ldi r22,0
 844 0034 0E94 0000 		call chSchWakeupS
 845               	.LVL59:
 846               	.LBB239:
 847               	.LBB236:
 848               	.LBB235:
 849               	.LBB234:
 850               		.loc 3 440 0
 851               	/* #APP */
 852               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 853 0038 7894      		sei
 854               	 ;  0 "" 2
 855               	/* epilogue start */
 856               	/* #NOAPP */
 857               	.LBE234:
 858               	.LBE235:
 859               	.LBE236:
 860               	.LBE239:
 861               		.loc 1 302 0
 862 003a DF91      		pop r29
 863 003c CF91      		pop r28
 864 003e 0895      		ret
 865               		.cfi_endproc
 866               	.LFE202:
 868               		.section	.text.chSemSignalI,"ax",@progbits
 869               	.global	chSemSignalI
 871               	chSemSignalI:
 872               	.LFB203:
 303:../../os/rt/src/chsem.c **** 
 304:../../os/rt/src/chsem.c **** /**
 305:../../os/rt/src/chsem.c ****  * @brief   Performs a signal operation on a semaphore.
 306:../../os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 307:../../os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 308:../../os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 309:../../os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 310:../../os/rt/src/chsem.c ****  *
 311:../../os/rt/src/chsem.c ****  * @param[in] sp    pointer to a @p semaphore_t structure
 312:../../os/rt/src/chsem.c ****  *
 313:../../os/rt/src/chsem.c ****  * @iclass
 314:../../os/rt/src/chsem.c ****  */
 315:../../os/rt/src/chsem.c **** void chSemSignalI(semaphore_t *sp) {
 873               		.loc 1 315 0
 874               		.cfi_startproc
 875               	.LVL60:
 876 0000 CF93      		push r28
 877               	.LCFI18:
 878               		.cfi_def_cfa_offset 3
 879               		.cfi_offset 28, -2
 880 0002 DF93      		push r29
 881               	.LCFI19:
 882               		.cfi_def_cfa_offset 4
 883               		.cfi_offset 29, -3
 884               	/* prologue: function */
 885               	/* frame size = 0 */
 886               	/* stack size = 2 */
 887               	.L__stack_usage = 2
 888 0004 FC01      		movw r30,r24
 316:../../os/rt/src/chsem.c **** 
 317:../../os/rt/src/chsem.c ****   chDbgCheckClassI();
 318:../../os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 319:../../os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 320:../../os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
 321:../../os/rt/src/chsem.c ****               "inconsistent semaphore");
 322:../../os/rt/src/chsem.c **** 
 323:../../os/rt/src/chsem.c ****   if (++sp->cnt <= (cnt_t)0) {
 889               		.loc 1 323 0
 890 0006 9481      		ldd r25,Z+4
 891 0008 9F5F      		subi r25,lo8(-(1))
 892 000a 9483      		std Z+4,r25
 893 000c 1916      		cp __zero_reg__,r25
 894 000e 04F4      		brge .L36
 895               	/* epilogue start */
 324:../../os/rt/src/chsem.c ****     /* Note, it is done this way in order to allow a tail call on
 325:../../os/rt/src/chsem.c ****              chSchReadyI().*/
 326:../../os/rt/src/chsem.c ****     thread_t *tp = threadref(ch_queue_fifo_remove(&sp->queue));
 327:../../os/rt/src/chsem.c ****     tp->u.rdymsg = MSG_OK;
 328:../../os/rt/src/chsem.c ****     (void) chSchReadyI(tp);
 329:../../os/rt/src/chsem.c ****   }
 330:../../os/rt/src/chsem.c **** }
 896               		.loc 1 330 0
 897 0010 DF91      		pop r29
 898 0012 CF91      		pop r28
 899 0014 0895      		ret
 900               	.L36:
 901               	.LVL61:
 902               	.LBB240:
 903               	.LBB241:
 904               	.LBB242:
 281:../../os/rt/include/chlists.h **** 
 905               		.loc 2 281 0
 906 0016 8081      		ld r24,Z
 907 0018 9181      		ldd r25,Z+1
 908               	.LVL62:
 283:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 909               		.loc 2 283 0
 910 001a EC01      		movw r28,r24
 911 001c A881      		ld r26,Y
 912 001e B981      		ldd r27,Y+1
 913 0020 B183      		std Z+1,r27
 914 0022 A083      		st Z,r26
 284:../../os/rt/include/chlists.h **** 
 915               		.loc 2 284 0
 916 0024 1396      		adiw r26,2+1
 917 0026 FC93      		st X,r31
 918 0028 EE93      		st -X,r30
 919 002a 1297      		sbiw r26,2
 920               	.LVL63:
 921               	.LBE242:
 922               	.LBE241:
 327:../../os/rt/src/chsem.c ****     (void) chSchReadyI(tp);
 923               		.loc 1 327 0
 924 002c 1B8A      		std Y+19,__zero_reg__
 925 002e 1A8A      		std Y+18,__zero_reg__
 926               	/* epilogue start */
 927               	.LBE240:
 928               		.loc 1 330 0
 929 0030 DF91      		pop r29
 930 0032 CF91      		pop r28
 931               	.LBB243:
 328:../../os/rt/src/chsem.c ****   }
 932               		.loc 1 328 0
 933 0034 0C94 0000 		jmp chSchReadyI
 934               	.LVL64:
 935               	.LBE243:
 936               		.cfi_endproc
 937               	.LFE203:
 939               		.section	.text.chSemAddCounterI,"ax",@progbits
 940               	.global	chSemAddCounterI
 942               	chSemAddCounterI:
 943               	.LFB204:
 331:../../os/rt/src/chsem.c **** 
 332:../../os/rt/src/chsem.c **** /**
 333:../../os/rt/src/chsem.c ****  * @brief   Adds the specified value to the semaphore counter.
 334:../../os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 335:../../os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 336:../../os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 337:../../os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 338:../../os/rt/src/chsem.c ****  *
 339:../../os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 340:../../os/rt/src/chsem.c ****  * @param[in] n         value to be added to the semaphore counter. The value
 341:../../os/rt/src/chsem.c ****  *                      must be positive.
 342:../../os/rt/src/chsem.c ****  *
 343:../../os/rt/src/chsem.c ****  * @iclass
 344:../../os/rt/src/chsem.c ****  */
 345:../../os/rt/src/chsem.c **** void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 944               		.loc 1 345 0
 945               		.cfi_startproc
 946               	.LVL65:
 947 0000 0F93      		push r16
 948               	.LCFI20:
 949               		.cfi_def_cfa_offset 3
 950               		.cfi_offset 16, -2
 951 0002 1F93      		push r17
 952               	.LCFI21:
 953               		.cfi_def_cfa_offset 4
 954               		.cfi_offset 17, -3
 955 0004 CF93      		push r28
 956               	.LCFI22:
 957               		.cfi_def_cfa_offset 5
 958               		.cfi_offset 28, -4
 959               	/* prologue: function */
 960               	/* frame size = 0 */
 961               	/* stack size = 3 */
 962               	.L__stack_usage = 3
 963 0006 8C01      		movw r16,r24
 964 0008 C62F      		mov r28,r22
 346:../../os/rt/src/chsem.c **** 
 347:../../os/rt/src/chsem.c ****   chDbgCheckClassI();
 348:../../os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n > (cnt_t)0));
 349:../../os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 350:../../os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
 351:../../os/rt/src/chsem.c ****               "inconsistent semaphore");
 352:../../os/rt/src/chsem.c **** 
 353:../../os/rt/src/chsem.c ****   while (n > (cnt_t)0) {
 965               		.loc 1 353 0
 966 000a 1616      		cp __zero_reg__,r22
 967 000c 04F0      		brlt .L40
 968 000e 00C0      		rjmp .L37
 969               	.LVL66:
 970               	.L39:
 971 0010 C150      		subi r28,lo8(-(-1))
 972               	.LVL67:
 973 0012 01F0      		breq .L37
 974               	.L40:
 975               	.LVL68:
 354:../../os/rt/src/chsem.c ****     if (++sp->cnt <= (cnt_t)0) {
 976               		.loc 1 354 0
 977 0014 D801      		movw r26,r16
 978 0016 1496      		adiw r26,4
 979 0018 8C91      		ld r24,X
 980 001a 1497      		sbiw r26,4
 981 001c 8F5F      		subi r24,lo8(-(1))
 982 001e 1496      		adiw r26,4
 983 0020 8C93      		st X,r24
 984 0022 1497      		sbiw r26,4
 985 0024 1816      		cp __zero_reg__,r24
 986 0026 04F0      		brlt .L39
 987               	.LVL69:
 988               	.LBB244:
 989               	.LBB245:
 281:../../os/rt/include/chlists.h **** 
 990               		.loc 2 281 0
 991 0028 8D91      		ld r24,X+
 992 002a 9C91      		ld r25,X
 993               	.LVL70:
 283:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 994               		.loc 2 283 0
 995 002c DC01      		movw r26,r24
 996 002e ED91      		ld r30,X+
 997 0030 FC91      		ld r31,X
 998 0032 D801      		movw r26,r16
 999 0034 ED93      		st X+,r30
 1000 0036 FC93      		st X,r31
 284:../../os/rt/include/chlists.h **** 
 1001               		.loc 2 284 0
 1002 0038 1383      		std Z+3,r17
 1003 003a 0283      		std Z+2,r16
 1004               	.LVL71:
 1005               	.LBE245:
 1006               	.LBE244:
 355:../../os/rt/src/chsem.c ****       chSchReadyI(threadref(ch_queue_fifo_remove(&sp->queue)))->u.rdymsg = MSG_OK;
 1007               		.loc 1 355 0
 1008 003c 0E94 0000 		call chSchReadyI
 1009               	.LVL72:
 1010 0040 FC01      		movw r30,r24
 1011 0042 138A      		std Z+19,__zero_reg__
 1012 0044 128A      		std Z+18,__zero_reg__
 1013 0046 C150      		subi r28,lo8(-(-1))
 1014               	.LVL73:
 353:../../os/rt/src/chsem.c ****     if (++sp->cnt <= (cnt_t)0) {
 1015               		.loc 1 353 0
 1016 0048 01F4      		brne .L40
 1017               	.L37:
 1018               	/* epilogue start */
 356:../../os/rt/src/chsem.c ****     }
 357:../../os/rt/src/chsem.c ****     n--;
 358:../../os/rt/src/chsem.c ****   }
 359:../../os/rt/src/chsem.c **** }
 1019               		.loc 1 359 0
 1020 004a CF91      		pop r28
 1021 004c 1F91      		pop r17
 1022 004e 0F91      		pop r16
 1023               	.LVL74:
 1024 0050 0895      		ret
 1025               		.cfi_endproc
 1026               	.LFE204:
 1028               		.section	.text.chSemSignalWait,"ax",@progbits
 1029               	.global	chSemSignalWait
 1031               	chSemSignalWait:
 1032               	.LFB205:
 360:../../os/rt/src/chsem.c **** 
 361:../../os/rt/src/chsem.c **** /**
 362:../../os/rt/src/chsem.c ****  * @brief   Performs atomic signal and wait operations on two semaphores.
 363:../../os/rt/src/chsem.c ****  *
 364:../../os/rt/src/chsem.c ****  * @param[in] sps       pointer to a @p semaphore_t structure to be signaled
 365:../../os/rt/src/chsem.c ****  * @param[in] spw       pointer to a @p semaphore_t structure to wait on
 366:../../os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 367:../../os/rt/src/chsem.c ****  *                      released from the semaphore.
 368:../../os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 369:../../os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 370:../../os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 371:../../os/rt/src/chsem.c ****  *
 372:../../os/rt/src/chsem.c ****  * @api
 373:../../os/rt/src/chsem.c ****  */
 374:../../os/rt/src/chsem.c **** msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 1033               		.loc 1 374 0
 1034               		.cfi_startproc
 1035               	.LVL75:
 1036 0000 0F93      		push r16
 1037               	.LCFI23:
 1038               		.cfi_def_cfa_offset 3
 1039               		.cfi_offset 16, -2
 1040 0002 1F93      		push r17
 1041               	.LCFI24:
 1042               		.cfi_def_cfa_offset 4
 1043               		.cfi_offset 17, -3
 1044 0004 CF93      		push r28
 1045               	.LCFI25:
 1046               		.cfi_def_cfa_offset 5
 1047               		.cfi_offset 28, -4
 1048 0006 DF93      		push r29
 1049               	.LCFI26:
 1050               		.cfi_def_cfa_offset 6
 1051               		.cfi_offset 29, -5
 1052               	/* prologue: function */
 1053               	/* frame size = 0 */
 1054               	/* stack size = 4 */
 1055               	.L__stack_usage = 4
 1056 0008 FC01      		movw r30,r24
 1057 000a EB01      		movw r28,r22
 1058               	.LBB246:
 1059               	.LBB247:
 1060               	.LBB248:
 430:../../os/common/ports/AVR/chcore.h **** }
 1061               		.loc 3 430 0
 1062               	/* #APP */
 1063               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1064 000c F894      		cli
 1065               	 ;  0 "" 2
 1066               	/* #NOAPP */
 1067               	.LBE248:
 1068               	.LBE247:
 1069               	.LBE246:
 375:../../os/rt/src/chsem.c ****   msg_t msg;
 376:../../os/rt/src/chsem.c **** 
 377:../../os/rt/src/chsem.c ****   chDbgCheck((sps != NULL) && (spw != NULL));
 378:../../os/rt/src/chsem.c **** 
 379:../../os/rt/src/chsem.c ****   chSysLock();
 380:../../os/rt/src/chsem.c ****   chDbgAssert(((sps->cnt >= (cnt_t)0) && ch_queue_isempty(&sps->queue)) ||
 381:../../os/rt/src/chsem.c ****               ((sps->cnt < (cnt_t)0) && ch_queue_notempty(&sps->queue)),
 382:../../os/rt/src/chsem.c ****               "inconsistent semaphore");
 383:../../os/rt/src/chsem.c ****   chDbgAssert(((spw->cnt >= (cnt_t)0) && ch_queue_isempty(&spw->queue)) ||
 384:../../os/rt/src/chsem.c ****               ((spw->cnt < (cnt_t)0) && ch_queue_notempty(&spw->queue)),
 385:../../os/rt/src/chsem.c ****               "inconsistent semaphore");
 386:../../os/rt/src/chsem.c ****   if (++sps->cnt <= (cnt_t)0) {
 1070               		.loc 1 386 0
 1071 000e 9481      		ldd r25,Z+4
 1072 0010 9F5F      		subi r25,lo8(-(1))
 1073 0012 9483      		std Z+4,r25
 1074 0014 1916      		cp __zero_reg__,r25
 1075 0016 04F4      		brge .L46
 1076               	.LVL76:
 1077               	.L43:
 387:../../os/rt/src/chsem.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&sps->queue)))->u.rdymsg = MSG_OK;
 388:../../os/rt/src/chsem.c ****   }
 389:../../os/rt/src/chsem.c ****   if (--spw->cnt < (cnt_t)0) {
 1078               		.loc 1 389 0
 1079 0018 8C81      		ldd r24,Y+4
 1080 001a 8150      		subi r24,lo8(-(-1))
 1081 001c 8C83      		std Y+4,r24
 1082 001e 87FD      		sbrc r24,7
 1083 0020 00C0      		rjmp .L47
 390:../../os/rt/src/chsem.c ****     thread_t *currtp = chThdGetSelfX();
 391:../../os/rt/src/chsem.c ****     sem_insert(&spw->queue, currtp);
 392:../../os/rt/src/chsem.c ****     currtp->u.wtsemp = spw;
 393:../../os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 394:../../os/rt/src/chsem.c ****     msg = currtp->u.rdymsg;
 395:../../os/rt/src/chsem.c ****   }
 396:../../os/rt/src/chsem.c ****   else {
 397:../../os/rt/src/chsem.c ****     chSchRescheduleS();
 1084               		.loc 1 397 0
 1085 0022 0E94 0000 		call chSchRescheduleS
 1086               	.LVL77:
 398:../../os/rt/src/chsem.c ****     msg = MSG_OK;
 1087               		.loc 1 398 0
 1088 0026 90E0      		ldi r25,0
 1089 0028 80E0      		ldi r24,0
 1090               	.LVL78:
 1091               	.LBB249:
 1092               	.LBB250:
 1093               	.LBB251:
 1094               	.LBB252:
 1095               		.loc 3 440 0
 1096               	/* #APP */
 1097               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1098 002a 7894      		sei
 1099               	 ;  0 "" 2
 1100               	/* epilogue start */
 1101               	/* #NOAPP */
 1102               	.LBE252:
 1103               	.LBE251:
 1104               	.LBE250:
 1105               	.LBE249:
 399:../../os/rt/src/chsem.c ****   }
 400:../../os/rt/src/chsem.c ****   chSysUnlock();
 401:../../os/rt/src/chsem.c **** 
 402:../../os/rt/src/chsem.c ****   return msg;
 403:../../os/rt/src/chsem.c **** }
 1106               		.loc 1 403 0
 1107 002c DF91      		pop r29
 1108 002e CF91      		pop r28
 1109               	.LVL79:
 1110 0030 1F91      		pop r17
 1111 0032 0F91      		pop r16
 1112 0034 0895      		ret
 1113               	.LVL80:
 1114               	.L47:
 1115               	.LBB256:
 1116               	.LBB257:
 1117               	.LBB258:
 1118               		.loc 4 343 0
 1119 0036 0091 0000 		lds r16,ch0+5
 1120 003a 1091 0000 		lds r17,ch0+5+1
 1121               	.LVL81:
 1122               	.LBE258:
 1123               	.LBE257:
 1124               	.LBB259:
 1125               	.LBB260:
 264:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 1126               		.loc 2 264 0
 1127 003e D801      		movw r26,r16
 1128 0040 1196      		adiw r26,1
 1129 0042 DC93      		st X,r29
 1130 0044 CE93      		st -X,r28
 265:../../os/rt/include/chlists.h ****   p->prev->next = p;
 1131               		.loc 2 265 0
 1132 0046 EA81      		ldd r30,Y+2
 1133 0048 FB81      		ldd r31,Y+3
 1134 004a 1396      		adiw r26,2+1
 1135 004c FC93      		st X,r31
 1136 004e EE93      		st -X,r30
 1137 0050 1297      		sbiw r26,2
 266:../../os/rt/include/chlists.h ****   qp->prev      = p;
 1138               		.loc 2 266 0
 1139 0052 1183      		std Z+1,r17
 1140 0054 0083      		st Z,r16
 267:../../os/rt/include/chlists.h **** }
 1141               		.loc 2 267 0
 1142 0056 1B83      		std Y+3,r17
 1143 0058 0A83      		std Y+2,r16
 1144               	.LVL82:
 1145               	.LBE260:
 1146               	.LBE259:
 392:../../os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 1147               		.loc 1 392 0
 1148 005a 5396      		adiw r26,18+1
 1149 005c DC93      		st X,r29
 1150 005e CE93      		st -X,r28
 1151 0060 5297      		sbiw r26,18
 393:../../os/rt/src/chsem.c ****     msg = currtp->u.rdymsg;
 1152               		.loc 1 393 0
 1153 0062 85E0      		ldi r24,lo8(5)
 1154 0064 0E94 0000 		call chSchGoSleepS
 1155               	.LVL83:
 394:../../os/rt/src/chsem.c ****   }
 1156               		.loc 1 394 0
 1157 0068 F801      		movw r30,r16
 1158 006a 8289      		ldd r24,Z+18
 1159 006c 9389      		ldd r25,Z+19
 1160               	.LVL84:
 1161               	.LBE256:
 1162               	.LBB261:
 1163               	.LBB255:
 1164               	.LBB254:
 1165               	.LBB253:
 1166               		.loc 3 440 0
 1167               	/* #APP */
 1168               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1169 006e 7894      		sei
 1170               	 ;  0 "" 2
 1171               	/* epilogue start */
 1172               	/* #NOAPP */
 1173               	.LBE253:
 1174               	.LBE254:
 1175               	.LBE255:
 1176               	.LBE261:
 1177               		.loc 1 403 0
 1178 0070 DF91      		pop r29
 1179 0072 CF91      		pop r28
 1180               	.LVL85:
 1181 0074 1F91      		pop r17
 1182 0076 0F91      		pop r16
 1183 0078 0895      		ret
 1184               	.LVL86:
 1185               	.L46:
 1186               	.LBB262:
 1187               	.LBB263:
 281:../../os/rt/include/chlists.h **** 
 1188               		.loc 2 281 0
 1189 007a 8081      		ld r24,Z
 1190 007c 9181      		ldd r25,Z+1
 1191               	.LVL87:
 283:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 1192               		.loc 2 283 0
 1193 007e DC01      		movw r26,r24
 1194 0080 2D91      		ld r18,X+
 1195 0082 3C91      		ld r19,X
 1196 0084 3183      		std Z+1,r19
 1197 0086 2083      		st Z,r18
 284:../../os/rt/include/chlists.h **** 
 1198               		.loc 2 284 0
 1199 0088 D901      		movw r26,r18
 1200 008a 1396      		adiw r26,2+1
 1201 008c FC93      		st X,r31
 1202 008e EE93      		st -X,r30
 1203 0090 1297      		sbiw r26,2
 1204               	.LVL88:
 1205               	.LBE263:
 1206               	.LBE262:
 387:../../os/rt/src/chsem.c ****   }
 1207               		.loc 1 387 0
 1208 0092 0E94 0000 		call chSchReadyI
 1209               	.LVL89:
 1210 0096 FC01      		movw r30,r24
 1211 0098 138A      		std Z+19,__zero_reg__
 1212 009a 128A      		std Z+18,__zero_reg__
 1213 009c 00C0      		rjmp .L43
 1214               		.cfi_endproc
 1215               	.LFE205:
 1217               		.text
 1218               	.Letext0:
 1219               		.file 5 "/usr/lib/avr/include/stdint.h"
 1220               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1221               		.file 7 "../../os/rt/include/chearly.h"
 1222               		.file 8 "../../os/rt/include/chobjects.h"
 1223               		.file 9 "../../os/rt/include/chrfcu.h"
 1224               		.file 10 "../../os/rt/include/chdebug.h"
 1225               		.file 11 "../../os/rt/include/chtime.h"
 1226               		.file 12 "../../os/rt/include/chsem.h"
 1227               		.file 13 "../../os/rt/include/chmtx.h"
 1228               		.file 14 "../../os/rt/include/chsys.h"
 1229               		.file 15 "../../os/rt/include/chregistry.h"
 1230               		.file 16 "../../os/oslib/include/chmemcore.h"
 1231               		.file 17 "../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chsem.c
     /tmp/ccT1QDai.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccT1QDai.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccT1QDai.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccT1QDai.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccT1QDai.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccT1QDai.s:13     .text.chSemObjectInit:0000000000000000 chSemObjectInit
     /tmp/ccT1QDai.s:48     .text.chSemResetWithMessage:0000000000000000 chSemResetWithMessage
     /tmp/ccT1QDai.s:169    .text.chSemResetWithMessageI:0000000000000000 chSemResetWithMessageI
     /tmp/ccT1QDai.s:254    .text.chSemWait:0000000000000000 chSemWait
     /tmp/ccT1QDai.s:395    .text.chSemWaitS:0000000000000000 chSemWaitS
     /tmp/ccT1QDai.s:486    .text.chSemWaitTimeout:0000000000000000 chSemWaitTimeout
     /tmp/ccT1QDai.s:650    .text.chSemWaitTimeoutS:0000000000000000 chSemWaitTimeoutS
     /tmp/ccT1QDai.s:764    .text.chSemSignal:0000000000000000 chSemSignal
     /tmp/ccT1QDai.s:871    .text.chSemSignalI:0000000000000000 chSemSignalI
     /tmp/ccT1QDai.s:942    .text.chSemAddCounterI:0000000000000000 chSemAddCounterI
     /tmp/ccT1QDai.s:1031   .text.chSemSignalWait:0000000000000000 chSemSignalWait

UNDEFINED SYMBOLS
chSchReadyI
chSchRescheduleS
ch0
chSchGoSleepS
chSchGoSleepTimeoutS
chSchWakeupS
