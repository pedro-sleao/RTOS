   1               		.file	"chinstances.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__idle_thread,"ax",@progbits
  12               	__idle_thread:
  13               	.LFB195:
  14               		.file 1 "../../os/rt/src/chinstances.c"
   1:../../os/rt/src/chinstances.c **** /*
   2:../../os/rt/src/chinstances.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/src/chinstances.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/src/chinstances.c **** 
   5:../../os/rt/src/chinstances.c ****     This file is part of ChibiOS.
   6:../../os/rt/src/chinstances.c **** 
   7:../../os/rt/src/chinstances.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/src/chinstances.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/src/chinstances.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/src/chinstances.c **** 
  11:../../os/rt/src/chinstances.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/src/chinstances.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/src/chinstances.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/src/chinstances.c ****     GNU General Public License for more details.
  15:../../os/rt/src/chinstances.c **** 
  16:../../os/rt/src/chinstances.c ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/src/chinstances.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/src/chinstances.c **** */
  19:../../os/rt/src/chinstances.c **** 
  20:../../os/rt/src/chinstances.c **** /**
  21:../../os/rt/src/chinstances.c ****  * @file    rt/src/chinstances.c
  22:../../os/rt/src/chinstances.c ****  * @brief   OS instances code.
  23:../../os/rt/src/chinstances.c ****  *
  24:../../os/rt/src/chinstances.c ****  * @addtogroup instances
  25:../../os/rt/src/chinstances.c ****  * @details OS instances management.
  26:../../os/rt/src/chinstances.c ****  * @{
  27:../../os/rt/src/chinstances.c ****  */
  28:../../os/rt/src/chinstances.c **** 
  29:../../os/rt/src/chinstances.c **** #include "ch.h"
  30:../../os/rt/src/chinstances.c **** 
  31:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  32:../../os/rt/src/chinstances.c **** /* Module local definitions.                                                 */
  33:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  34:../../os/rt/src/chinstances.c **** 
  35:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  36:../../os/rt/src/chinstances.c **** /* Module exported variables.                                                */
  37:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  38:../../os/rt/src/chinstances.c **** 
  39:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  40:../../os/rt/src/chinstances.c **** /* Module local types.                                                       */
  41:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  42:../../os/rt/src/chinstances.c **** 
  43:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  44:../../os/rt/src/chinstances.c **** /* Module local variables.                                                   */
  45:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  46:../../os/rt/src/chinstances.c **** 
  47:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  48:../../os/rt/src/chinstances.c **** /* Module local functions.                                                   */
  49:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  50:../../os/rt/src/chinstances.c **** 
  51:../../os/rt/src/chinstances.c **** #if (CH_CFG_NO_IDLE_THREAD == FALSE) || defined(__DOXYGEN__)
  52:../../os/rt/src/chinstances.c **** /**
  53:../../os/rt/src/chinstances.c ****  * @brief   This function implements the idle thread infinite loop.
  54:../../os/rt/src/chinstances.c ****  * @details The function puts the processor in the lowest power mode capable
  55:../../os/rt/src/chinstances.c ****  *          to serve interrupts.<br>
  56:../../os/rt/src/chinstances.c ****  *          The priority is internally set to the minimum system value so
  57:../../os/rt/src/chinstances.c ****  *          that this thread is executed only if there are no other ready
  58:../../os/rt/src/chinstances.c ****  *          threads in the system.
  59:../../os/rt/src/chinstances.c ****  *
  60:../../os/rt/src/chinstances.c ****  * @param[in] p         the thread parameter, unused in this scenario
  61:../../os/rt/src/chinstances.c ****  */
  62:../../os/rt/src/chinstances.c **** static void __idle_thread(void *p) {
  15               		.loc 1 62 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LVL0:
  22               	.L2:
  23 0000 00C0      		rjmp .L2
  24               		.cfi_endproc
  25               	.LFE195:
  27               		.section	.rodata.chInstanceObjectInit.str1.1,"aMS",@progbits,1
  28               	.LC0:
  29 0000 6964 6C65 		.string	"idle"
  29      00
  30               		.section	.text.chInstanceObjectInit,"ax",@progbits
  31               	.global	chInstanceObjectInit
  33               	chInstanceObjectInit:
  34               	.LFB196:
  63:../../os/rt/src/chinstances.c **** 
  64:../../os/rt/src/chinstances.c ****   (void)p;
  65:../../os/rt/src/chinstances.c **** 
  66:../../os/rt/src/chinstances.c ****   while (true) {
  67:../../os/rt/src/chinstances.c ****     /*lint -save -e522 [2.2] Apparently no side effects because it contains
  68:../../os/rt/src/chinstances.c ****       an asm instruction.*/
  69:../../os/rt/src/chinstances.c ****     port_wait_for_interrupt();
  70:../../os/rt/src/chinstances.c ****     /*lint -restore*/
  71:../../os/rt/src/chinstances.c ****     CH_CFG_IDLE_LOOP_HOOK();
  72:../../os/rt/src/chinstances.c ****   }
  73:../../os/rt/src/chinstances.c **** }
  74:../../os/rt/src/chinstances.c **** #endif /* CH_CFG_NO_IDLE_THREAD == FALSE */
  75:../../os/rt/src/chinstances.c **** 
  76:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  77:../../os/rt/src/chinstances.c **** /* Module exported functions.                                                */
  78:../../os/rt/src/chinstances.c **** /*===========================================================================*/
  79:../../os/rt/src/chinstances.c **** 
  80:../../os/rt/src/chinstances.c **** /**
  81:../../os/rt/src/chinstances.c ****  * @brief   Initializes a system instance.
  82:../../os/rt/src/chinstances.c ****  * @note    The system instance is in I-Lock state after initialization.
  83:../../os/rt/src/chinstances.c ****  *
  84:../../os/rt/src/chinstances.c ****  * @param[out] oip      pointer to the @p os_instance_t structure
  85:../../os/rt/src/chinstances.c ****  * @param[in] oicp      pointer to the @p os_instance_config_t structure
  86:../../os/rt/src/chinstances.c ****  *
  87:../../os/rt/src/chinstances.c ****  * @special
  88:../../os/rt/src/chinstances.c ****  */
  89:../../os/rt/src/chinstances.c **** void chInstanceObjectInit(os_instance_t *oip,
  90:../../os/rt/src/chinstances.c ****                           const os_instance_config_t *oicp) {
  35               		.loc 1 90 0
  36               		.cfi_startproc
  37               	.LVL1:
  38               		.loc 1 90 0
  39 0000 CF92      		push r12
  40               	.LCFI0:
  41               		.cfi_def_cfa_offset 3
  42               		.cfi_offset 12, -2
  43 0002 DF92      		push r13
  44               	.LCFI1:
  45               		.cfi_def_cfa_offset 4
  46               		.cfi_offset 13, -3
  47 0004 FF92      		push r15
  48               	.LCFI2:
  49               		.cfi_def_cfa_offset 5
  50               		.cfi_offset 15, -4
  51 0006 0F93      		push r16
  52               	.LCFI3:
  53               		.cfi_def_cfa_offset 6
  54               		.cfi_offset 16, -5
  55 0008 1F93      		push r17
  56               	.LCFI4:
  57               		.cfi_def_cfa_offset 7
  58               		.cfi_offset 17, -6
  59 000a CF93      		push r28
  60               	.LCFI5:
  61               		.cfi_def_cfa_offset 8
  62               		.cfi_offset 28, -7
  63 000c DF93      		push r29
  64               	.LCFI6:
  65               		.cfi_def_cfa_offset 9
  66               		.cfi_offset 29, -8
  67 000e CDB7      		in r28,__SP_L__
  68 0010 DEB7      		in r29,__SP_H__
  69               	.LCFI7:
  70               		.cfi_def_cfa_register 28
  71 0012 2B97      		sbiw r28,11
  72               	.LCFI8:
  73               		.cfi_def_cfa_offset 20
  74 0014 0FB6      		in __tmp_reg__,__SREG__
  75 0016 F894      		cli
  76 0018 DEBF      		out __SP_H__,r29
  77 001a 0FBE      		out __SREG__,__tmp_reg__
  78 001c CDBF      		out __SP_L__,r28
  79               	/* prologue: function */
  80               	/* frame size = 11 */
  81               	/* stack size = 18 */
  82               	.L__stack_usage = 18
  83 001e 8C01      		movw r16,r24
  84 0020 6B01      		movw r12,r22
  85               	.LVL2:
  91:../../os/rt/src/chinstances.c ****   core_id_t core_id;
  92:../../os/rt/src/chinstances.c **** 
  93:../../os/rt/src/chinstances.c ****   /* Registering into the global system structure.*/
  94:../../os/rt/src/chinstances.c **** #if CH_CFG_SMP_MODE == TRUE
  95:../../os/rt/src/chinstances.c ****   core_id = port_get_core_id();
  96:../../os/rt/src/chinstances.c **** #else
  97:../../os/rt/src/chinstances.c ****   core_id = 0U;
  98:../../os/rt/src/chinstances.c **** #endif
  99:../../os/rt/src/chinstances.c ****   chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
 100:../../os/rt/src/chinstances.c ****   ch_system.instances[core_id] = oip;
  86               		.loc 1 100 0
  87 0022 9093 0000 		sts ch_system+1+1,r25
  88 0026 8093 0000 		sts ch_system+1,r24
 101:../../os/rt/src/chinstances.c **** 
 102:../../os/rt/src/chinstances.c ****   /* Core associated to this instance.*/
 103:../../os/rt/src/chinstances.c ****   oip->core_id = core_id;
  89               		.loc 1 103 0
  90 002a FC01      		movw r30,r24
  91 002c 148E      		std Z+28,__zero_reg__
  92 002e 138E      		std Z+27,__zero_reg__
 104:../../os/rt/src/chinstances.c **** 
 105:../../os/rt/src/chinstances.c ****   /* Keeping a reference to the configuration data.*/
 106:../../os/rt/src/chinstances.c ****   oip->config = oicp;
  93               		.loc 1 106 0
  94 0030 72A3      		std Z+34,r23
  95 0032 61A3      		std Z+33,r22
 107:../../os/rt/src/chinstances.c **** 
 108:../../os/rt/src/chinstances.c ****   /* Port initialization for the current instance.*/
 109:../../os/rt/src/chinstances.c ****   port_init(oip);
  96               		.loc 1 109 0
  97 0034 FF24      		clr r15
  98 0036 F394      		inc r15
  99 0038 F092 0000 		sts __avr_in_isr,r15
 100               	.LVL3:
 101               	.LBB32:
 102               	.LBB33:
 103               		.file 2 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
 226:../../os/rt/include/chlists.h **** }
 227:../../os/rt/include/chlists.h **** 
 228:../../os/rt/include/chlists.h **** /**
 229:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 230:../../os/rt/include/chlists.h ****  *
 231:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 232:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 233:../../os/rt/include/chlists.h ****  *
 234:../../os/rt/include/chlists.h ****  * @notapi
 235:../../os/rt/include/chlists.h ****  */
 236:../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 237:../../os/rt/include/chlists.h **** 
 238:../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 239:../../os/rt/include/chlists.h **** }
 240:../../os/rt/include/chlists.h **** 
 241:../../os/rt/include/chlists.h **** /**
 242:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 243:../../os/rt/include/chlists.h ****  *
 244:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 245:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 246:../../os/rt/include/chlists.h ****  *
 247:../../os/rt/include/chlists.h ****  * @notapi
 248:../../os/rt/include/chlists.h ****  */
 249:../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 250:../../os/rt/include/chlists.h **** 
 251:../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 252:../../os/rt/include/chlists.h **** }
 253:../../os/rt/include/chlists.h **** 
 254:../../os/rt/include/chlists.h **** /**
 255:../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 256:../../os/rt/include/chlists.h ****  *
 257:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 258:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 259:../../os/rt/include/chlists.h ****  *
 260:../../os/rt/include/chlists.h ****  * @notapi
 261:../../os/rt/include/chlists.h ****  */
 262:../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 263:../../os/rt/include/chlists.h **** 
 264:../../os/rt/include/chlists.h ****   p->next       = qp;
 265:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 266:../../os/rt/include/chlists.h ****   p->prev->next = p;
 267:../../os/rt/include/chlists.h ****   qp->prev      = p;
 268:../../os/rt/include/chlists.h **** }
 269:../../os/rt/include/chlists.h **** 
 270:../../os/rt/include/chlists.h **** /**
 271:../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 272:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 273:../../os/rt/include/chlists.h ****  *          element with the highest priority.
 274:../../os/rt/include/chlists.h ****  *
 275:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 276:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 277:../../os/rt/include/chlists.h ****  *
 278:../../os/rt/include/chlists.h ****  * @notapi
 279:../../os/rt/include/chlists.h ****  */
 280:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 281:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 282:../../os/rt/include/chlists.h **** 
 283:../../os/rt/include/chlists.h ****   qp->next       = p->next;
 284:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 285:../../os/rt/include/chlists.h **** 
 286:../../os/rt/include/chlists.h ****   return p;
 287:../../os/rt/include/chlists.h **** }
 288:../../os/rt/include/chlists.h **** 
 289:../../os/rt/include/chlists.h **** /**
 290:../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 291:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 292:../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 293:../../os/rt/include/chlists.h ****  *
 294:../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 295:../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 296:../../os/rt/include/chlists.h ****  *
 297:../../os/rt/include/chlists.h ****  * @notapi
 298:../../os/rt/include/chlists.h ****  */
 299:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 300:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 301:../../os/rt/include/chlists.h **** 
 302:../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 303:../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 304:../../os/rt/include/chlists.h **** 
 305:../../os/rt/include/chlists.h ****   return p;
 306:../../os/rt/include/chlists.h **** }
 307:../../os/rt/include/chlists.h **** 
 308:../../os/rt/include/chlists.h **** /**
 309:../../os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 310:../../os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 311:../../os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 312:../../os/rt/include/chlists.h ****  *
 313:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 314:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 315:../../os/rt/include/chlists.h ****  *
 316:../../os/rt/include/chlists.h ****  * @notapi
 317:../../os/rt/include/chlists.h ****  */
 318:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 319:../../os/rt/include/chlists.h **** 
 320:../../os/rt/include/chlists.h ****   p->prev->next = p->next;
 321:../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 322:../../os/rt/include/chlists.h **** 
 323:../../os/rt/include/chlists.h ****   return p;
 324:../../os/rt/include/chlists.h **** }
 325:../../os/rt/include/chlists.h **** 
 326:../../os/rt/include/chlists.h **** /**
 327:../../os/rt/include/chlists.h ****  * @brief   Priority queue initialization.
 328:../../os/rt/include/chlists.h ****  * @note    The queue header priority is initialized to zero, all other
 329:../../os/rt/include/chlists.h ****  *          elements in the queue are assumed to have priority greater
 330:../../os/rt/include/chlists.h ****  *          than zero.
 331:../../os/rt/include/chlists.h ****  *
 332:../../os/rt/include/chlists.h ****  * @param[out] pqp      pointer to the priority queue header
 333:../../os/rt/include/chlists.h ****  *
 334:../../os/rt/include/chlists.h ****  * @notapi
 335:../../os/rt/include/chlists.h ****  */
 336:../../os/rt/include/chlists.h **** static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 337:../../os/rt/include/chlists.h **** 
 338:../../os/rt/include/chlists.h ****   pqp->next = pqp;
 104               		.loc 2 338 0
 105 003c 9183      		std Z+1,r25
 106 003e 8083      		st Z,r24
 339:../../os/rt/include/chlists.h ****   pqp->prev = pqp;
 107               		.loc 2 339 0
 108 0040 9383      		std Z+3,r25
 109 0042 8283      		std Z+2,r24
 340:../../os/rt/include/chlists.h ****   pqp->prio = (tprio_t)0;
 110               		.loc 2 340 0
 111 0044 1482      		std Z+4,__zero_reg__
 112               	.LVL4:
 113               	.LBE33:
 114               	.LBE32:
 115               	.LBB34:
 116               	.LBB35:
 117               		.file 3 "../../os/rt/include/chregistry.h"
   1:../../os/rt/include/chregistry.h **** /*
   2:../../os/rt/include/chregistry.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chregistry.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chregistry.h **** 
   5:../../os/rt/include/chregistry.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chregistry.h **** 
   7:../../os/rt/include/chregistry.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chregistry.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chregistry.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chregistry.h **** 
  11:../../os/rt/include/chregistry.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chregistry.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chregistry.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chregistry.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chregistry.h **** 
  16:../../os/rt/include/chregistry.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chregistry.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chregistry.h **** */
  19:../../os/rt/include/chregistry.h **** 
  20:../../os/rt/include/chregistry.h **** /**
  21:../../os/rt/include/chregistry.h ****  * @file    rt/include/chregistry.h
  22:../../os/rt/include/chregistry.h ****  * @brief   Threads registry macros and structures.
  23:../../os/rt/include/chregistry.h ****  *
  24:../../os/rt/include/chregistry.h ****  * @addtogroup registry
  25:../../os/rt/include/chregistry.h ****  * @{
  26:../../os/rt/include/chregistry.h ****  */
  27:../../os/rt/include/chregistry.h **** 
  28:../../os/rt/include/chregistry.h **** #ifndef CHREGISTRY_H
  29:../../os/rt/include/chregistry.h **** #define CHREGISTRY_H
  30:../../os/rt/include/chregistry.h **** 
  31:../../os/rt/include/chregistry.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  32:../../os/rt/include/chregistry.h **** 
  33:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  34:../../os/rt/include/chregistry.h **** /* Module constants.                                                         */
  35:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  36:../../os/rt/include/chregistry.h **** 
  37:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  38:../../os/rt/include/chregistry.h **** /* Module pre-compile time settings.                                         */
  39:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  40:../../os/rt/include/chregistry.h **** 
  41:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  42:../../os/rt/include/chregistry.h **** /* Derived constants and error checks.                                       */
  43:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  44:../../os/rt/include/chregistry.h **** 
  45:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  46:../../os/rt/include/chregistry.h **** /* Module data structures and types.                                         */
  47:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  48:../../os/rt/include/chregistry.h **** 
  49:../../os/rt/include/chregistry.h **** /**
  50:../../os/rt/include/chregistry.h ****  * @brief   ChibiOS/RT memory signature record.
  51:../../os/rt/include/chregistry.h ****  */
  52:../../os/rt/include/chregistry.h **** typedef struct {
  53:../../os/rt/include/chregistry.h ****   char      identifier[4];          /**< @brief Always set to "main".       */
  54:../../os/rt/include/chregistry.h ****   uint8_t   zero;                   /**< @brief Must be zero.               */
  55:../../os/rt/include/chregistry.h ****   uint8_t   size;                   /**< @brief Size of this structure.     */
  56:../../os/rt/include/chregistry.h ****   uint16_t  version;                /**< @brief Encoded ChibiOS/RT version. */
  57:../../os/rt/include/chregistry.h ****   uint8_t   ptrsize;                /**< @brief Size of a pointer.          */
  58:../../os/rt/include/chregistry.h ****   uint8_t   timesize;               /**< @brief Size of a @p systime_t.     */
  59:../../os/rt/include/chregistry.h ****   uint8_t   threadsize;             /**< @brief Size of a @p thread_t.      */
  60:../../os/rt/include/chregistry.h ****   uint8_t   off_prio;               /**< @brief Offset of @p prio field.    */
  61:../../os/rt/include/chregistry.h ****   uint8_t   off_ctx;                /**< @brief Offset of @p ctx field.     */
  62:../../os/rt/include/chregistry.h ****   uint8_t   off_newer;              /**< @brief Offset of @p newer field.   */
  63:../../os/rt/include/chregistry.h ****   uint8_t   off_older;              /**< @brief Offset of @p older field.   */
  64:../../os/rt/include/chregistry.h ****   uint8_t   off_name;               /**< @brief Offset of @p name field.    */
  65:../../os/rt/include/chregistry.h ****   uint8_t   off_stklimit;           /**< @brief Offset of @p stklimit field.*/
  66:../../os/rt/include/chregistry.h ****   uint8_t   off_state;              /**< @brief Offset of @p state field.   */
  67:../../os/rt/include/chregistry.h ****   uint8_t   off_flags;              /**< @brief Offset of @p flags field.   */
  68:../../os/rt/include/chregistry.h ****   uint8_t   off_refs;               /**< @brief Offset of @p refs field.    */
  69:../../os/rt/include/chregistry.h ****   uint8_t   off_preempt;            /**< @brief Offset of @p ticks field.   */
  70:../../os/rt/include/chregistry.h ****   uint8_t   off_time;               /**< @brief Offset of @p time field.    */
  71:../../os/rt/include/chregistry.h ****   uint8_t   off_reserved[4];
  72:../../os/rt/include/chregistry.h ****   uint8_t   intctxsize;             /**< @brief Size of a @p port_intctx.   */
  73:../../os/rt/include/chregistry.h ****   uint8_t   intervalsize;           /**< @brief Size of a @p sysinterval_t. */
  74:../../os/rt/include/chregistry.h ****   uint8_t   instancesnum;           /**< @brief Number of instances.        */
  75:../../os/rt/include/chregistry.h ****   uint8_t   off_sys_state;          /**< @brief Offset of @p state field.   */
  76:../../os/rt/include/chregistry.h ****   uint8_t   off_sys_instances;      /**< @brief Offset of @p instances array
  77:../../os/rt/include/chregistry.h ****                                                 field.                      */
  78:../../os/rt/include/chregistry.h ****   uint8_t   off_sys_reglist;        /**< @brief Offset of @p reglist field. */
  79:../../os/rt/include/chregistry.h ****   uint8_t   off_sys_rfcu;           /**< @brief Offset of @p rfcu field.    */
  80:../../os/rt/include/chregistry.h ****   uint8_t   off_sys_reserved[4];
  81:../../os/rt/include/chregistry.h ****   uint8_t   off_inst_rlist_current; /**< @brief Offset of @p rlist.current
  82:../../os/rt/include/chregistry.h ****                                                 field.                      */
  83:../../os/rt/include/chregistry.h ****   uint8_t   off_inst_rlist;         /**< @brief Offset of @p rlist field.   */
  84:../../os/rt/include/chregistry.h ****   uint8_t   off_inst_vtlist;        /**< @brief Offset of @p vtlist field.  */
  85:../../os/rt/include/chregistry.h ****   uint8_t   off_inst_reglist;       /**< @brief Offset of @p reglist field. */
  86:../../os/rt/include/chregistry.h ****   uint8_t   off_inst_core_id;       /**< @brief Offset of @p core_id field. */
  87:../../os/rt/include/chregistry.h ****   uint8_t   off_inst_rfcu;          /**< @brief Offset of @p rfcu field.    */
  88:../../os/rt/include/chregistry.h **** } chdebug_t;
  89:../../os/rt/include/chregistry.h **** 
  90:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  91:../../os/rt/include/chregistry.h **** /* Module macros.                                                            */
  92:../../os/rt/include/chregistry.h **** /*===========================================================================*/
  93:../../os/rt/include/chregistry.h **** 
  94:../../os/rt/include/chregistry.h **** /**
  95:../../os/rt/include/chregistry.h ****  * @brief   Access to the registry list header.
  96:../../os/rt/include/chregistry.h ****  */
  97:../../os/rt/include/chregistry.h **** #if (CH_CFG_SMP_MODE == TRUE) || defined(__DOXYGEN__)
  98:../../os/rt/include/chregistry.h **** #define REG_HEADER(oip) (&ch_system.reglist.queue)
  99:../../os/rt/include/chregistry.h **** #else
 100:../../os/rt/include/chregistry.h **** #define REG_HEADER(oip) (&(oip)->reglist.queue)
 101:../../os/rt/include/chregistry.h **** #endif
 102:../../os/rt/include/chregistry.h **** 
 103:../../os/rt/include/chregistry.h **** /**
 104:../../os/rt/include/chregistry.h ****  * @brief   Removes a thread from the registry list.
 105:../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
 106:../../os/rt/include/chregistry.h ****  *
 107:../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to remove from the registry
 108:../../os/rt/include/chregistry.h ****  */
 109:../../os/rt/include/chregistry.h **** #define REG_REMOVE(tp) (void) ch_queue_dequeue(&(tp)->rqueue)
 110:../../os/rt/include/chregistry.h **** 
 111:../../os/rt/include/chregistry.h **** /**
 112:../../os/rt/include/chregistry.h ****  * @brief   Adds a thread to the registry list.
 113:../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
 114:../../os/rt/include/chregistry.h ****  *
 115:../../os/rt/include/chregistry.h ****  * @param[in] oip       pointer to the OS instance
 116:../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to add to the registry
 117:../../os/rt/include/chregistry.h ****  */
 118:../../os/rt/include/chregistry.h **** #define REG_INSERT(oip, tp) ch_queue_insert(REG_HEADER(oip), &(tp)->rqueue)
 119:../../os/rt/include/chregistry.h **** 
 120:../../os/rt/include/chregistry.h **** /*===========================================================================*/
 121:../../os/rt/include/chregistry.h **** /* External declarations.                                                    */
 122:../../os/rt/include/chregistry.h **** /*===========================================================================*/
 123:../../os/rt/include/chregistry.h **** 
 124:../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 125:../../os/rt/include/chregistry.h **** extern "C" {
 126:../../os/rt/include/chregistry.h **** #endif
 127:../../os/rt/include/chregistry.h ****   extern ROMCONST chdebug_t ch_debug;
 128:../../os/rt/include/chregistry.h ****   thread_t *chRegFirstThread(void);
 129:../../os/rt/include/chregistry.h ****   thread_t *chRegNextThread(thread_t *tp);
 130:../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByName(const char *name);
 131:../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByPointer(thread_t *tp);
 132:../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa);
 133:../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 134:../../os/rt/include/chregistry.h **** }
 135:../../os/rt/include/chregistry.h **** #endif
 136:../../os/rt/include/chregistry.h **** 
 137:../../os/rt/include/chregistry.h **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 138:../../os/rt/include/chregistry.h **** 
 139:../../os/rt/include/chregistry.h **** /*===========================================================================*/
 140:../../os/rt/include/chregistry.h **** /* Module inline functions.                                                  */
 141:../../os/rt/include/chregistry.h **** /*===========================================================================*/
 142:../../os/rt/include/chregistry.h **** 
 143:../../os/rt/include/chregistry.h **** /**
 144:../../os/rt/include/chregistry.h ****  * @brief   Initializes a registry.
 145:../../os/rt/include/chregistry.h ****  * @note    Internal use only.
 146:../../os/rt/include/chregistry.h ****  *
 147:../../os/rt/include/chregistry.h ****  * @param[out] rp       pointer to a @p registry_t structure
 148:../../os/rt/include/chregistry.h ****  *
 149:../../os/rt/include/chregistry.h ****  * @init
 150:../../os/rt/include/chregistry.h ****  */
 151:../../os/rt/include/chregistry.h **** static inline void __reg_object_init(registry_t *rp) {
 152:../../os/rt/include/chregistry.h **** 
 153:../../os/rt/include/chregistry.h ****   ch_queue_init(&rp->queue);
 118               		.loc 3 153 0
 119 0046 4796      		adiw r24,23
 120               	.LVL5:
 121               	.LBB36:
 122               	.LBB37:
 224:../../os/rt/include/chlists.h ****   qp->prev = qp;
 123               		.loc 2 224 0
 124 0048 908F      		std Z+24,r25
 125 004a 878B      		std Z+23,r24
 225:../../os/rt/include/chlists.h **** }
 126               		.loc 2 225 0
 127 004c 928F      		std Z+26,r25
 128 004e 818F      		std Z+25,r24
 129               	.LVL6:
 130               	.LBE37:
 131               	.LBE36:
 132               	.LBE35:
 133               	.LBE34:
 134               	.LBB38:
 135               	.LBB39:
 136               		.file 4 "../../os/rt/include/chrfcu.h"
   1:../../os/rt/include/chrfcu.h **** /*
   2:../../os/rt/include/chrfcu.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chrfcu.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chrfcu.h **** 
   5:../../os/rt/include/chrfcu.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chrfcu.h **** 
   7:../../os/rt/include/chrfcu.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chrfcu.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chrfcu.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chrfcu.h **** 
  11:../../os/rt/include/chrfcu.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chrfcu.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chrfcu.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chrfcu.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chrfcu.h **** 
  16:../../os/rt/include/chrfcu.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chrfcu.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chrfcu.h **** */
  19:../../os/rt/include/chrfcu.h **** 
  20:../../os/rt/include/chrfcu.h **** /**
  21:../../os/rt/include/chrfcu.h ****  * @file    rt/include/chrfcu.h
  22:../../os/rt/include/chrfcu.h ****  * @brief   Runtime Faults Collection Unit macros and structures.
  23:../../os/rt/include/chrfcu.h ****  *
  24:../../os/rt/include/chrfcu.h ****  * @addtogroup rfcu
  25:../../os/rt/include/chrfcu.h ****  * @{
  26:../../os/rt/include/chrfcu.h ****  */
  27:../../os/rt/include/chrfcu.h **** 
  28:../../os/rt/include/chrfcu.h **** #ifndef CHRFCU_H
  29:../../os/rt/include/chrfcu.h **** #define CHRFCU_H
  30:../../os/rt/include/chrfcu.h **** 
  31:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  32:../../os/rt/include/chrfcu.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  34:../../os/rt/include/chrfcu.h **** 
  35:../../os/rt/include/chrfcu.h **** /**
  36:../../os/rt/include/chrfcu.h ****  * @name    Predefined Faults
  37:../../os/rt/include/chrfcu.h ****  * @{
  38:../../os/rt/include/chrfcu.h ****  */
  39:../../os/rt/include/chrfcu.h **** #define CH_RFCU_VT_INSUFFICIENT_DELTA       1U
  40:../../os/rt/include/chrfcu.h **** #define CH_RFCU_VT_SKIPPED_DEADLINE         2U
  41:../../os/rt/include/chrfcu.h **** /** @} */
  42:../../os/rt/include/chrfcu.h **** 
  43:../../os/rt/include/chrfcu.h **** /**
  44:../../os/rt/include/chrfcu.h ****  * @brief   Mask of all faults.
  45:../../os/rt/include/chrfcu.h ****  */
  46:../../os/rt/include/chrfcu.h **** #define CH_RFCU_ALL_FAULTS                  ((rfcu_mask_t)-1)
  47:../../os/rt/include/chrfcu.h **** 
  48:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  49:../../os/rt/include/chrfcu.h **** /* Module pre-compile time settings.                                         */
  50:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  51:../../os/rt/include/chrfcu.h **** 
  52:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  53:../../os/rt/include/chrfcu.h **** /* Derived constants and error checks.                                       */
  54:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  55:../../os/rt/include/chrfcu.h **** 
  56:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  57:../../os/rt/include/chrfcu.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  59:../../os/rt/include/chrfcu.h **** 
  60:../../os/rt/include/chrfcu.h **** /**
  61:../../os/rt/include/chrfcu.h ****  * @brief   Type of a faults mask.
  62:../../os/rt/include/chrfcu.h ****  */
  63:../../os/rt/include/chrfcu.h **** typedef uint32_t rfcu_mask_t;
  64:../../os/rt/include/chrfcu.h **** 
  65:../../os/rt/include/chrfcu.h **** /**
  66:../../os/rt/include/chrfcu.h ****  * @brief   Type of an RFCU structure.
  67:../../os/rt/include/chrfcu.h ****  */
  68:../../os/rt/include/chrfcu.h **** typedef struct ch_rfcu {
  69:../../os/rt/include/chrfcu.h ****   /**
  70:../../os/rt/include/chrfcu.h ****    * @brief   Mask of the pending runtime faults.
  71:../../os/rt/include/chrfcu.h ****    */
  72:../../os/rt/include/chrfcu.h ****   rfcu_mask_t                   mask;
  73:../../os/rt/include/chrfcu.h **** } rfcu_t;
  74:../../os/rt/include/chrfcu.h **** 
  75:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  76:../../os/rt/include/chrfcu.h **** /* Module macros.                                                            */
  77:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  78:../../os/rt/include/chrfcu.h **** 
  79:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  80:../../os/rt/include/chrfcu.h **** /* External declarations.                                                    */
  81:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  82:../../os/rt/include/chrfcu.h **** 
  83:../../os/rt/include/chrfcu.h **** #ifdef __cplusplus
  84:../../os/rt/include/chrfcu.h **** extern "C" {
  85:../../os/rt/include/chrfcu.h **** #endif
  86:../../os/rt/include/chrfcu.h ****   void chRFCUCollectFaultsI(rfcu_mask_t mask);
  87:../../os/rt/include/chrfcu.h ****   rfcu_mask_t chRFCUGetAndClearFaultsI(rfcu_mask_t mask);
  88:../../os/rt/include/chrfcu.h **** #ifdef __cplusplus
  89:../../os/rt/include/chrfcu.h **** }
  90:../../os/rt/include/chrfcu.h **** #endif
  91:../../os/rt/include/chrfcu.h **** 
  92:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  93:../../os/rt/include/chrfcu.h **** /* Module inline functions.                                                  */
  94:../../os/rt/include/chrfcu.h **** /*===========================================================================*/
  95:../../os/rt/include/chrfcu.h **** 
  96:../../os/rt/include/chrfcu.h **** /**
  97:../../os/rt/include/chrfcu.h ****  * @brief   Runtime Faults Collection Unit initialization.
  98:../../os/rt/include/chrfcu.h ****  * @note    Internal use only.
  99:../../os/rt/include/chrfcu.h ****  *
 100:../../os/rt/include/chrfcu.h ****  * @param[out] rfcup    pointer to the @p rfcu_t structure
 101:../../os/rt/include/chrfcu.h ****  *
 102:../../os/rt/include/chrfcu.h ****  * @notapi
 103:../../os/rt/include/chrfcu.h ****  */
 104:../../os/rt/include/chrfcu.h **** static inline void __rfcu_object_init(rfcu_t *rfcup) {
 105:../../os/rt/include/chrfcu.h **** 
 106:../../os/rt/include/chrfcu.h ****   rfcup->mask = (rfcu_mask_t)0;
 137               		.loc 4 106 0
 138 0050 158E      		std Z+29,__zero_reg__
 139 0052 168E      		std Z+30,__zero_reg__
 140 0054 178E      		std Z+31,__zero_reg__
 141 0056 10A2      		std Z+32,__zero_reg__
 142               	.LVL7:
 143               	.LBE39:
 144               	.LBE38:
 145               	.LBB40:
 146               	.LBB41:
 147               		.file 5 "../../os/rt/include/chvt.h"
   1:../../os/rt/include/chvt.h **** /*
   2:../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chvt.h **** 
   5:../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chvt.h **** 
   7:../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chvt.h **** 
  11:../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chvt.h **** 
  16:../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chvt.h **** */
  19:../../os/rt/include/chvt.h **** 
  20:../../os/rt/include/chvt.h **** /**
  21:../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../os/rt/include/chvt.h ****  *
  24:../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../os/rt/include/chvt.h ****  * @{
  26:../../os/rt/include/chvt.h ****  */
  27:../../os/rt/include/chvt.h **** 
  28:../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../os/rt/include/chvt.h **** 
  31:../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../os/rt/include/chvt.h **** 
  35:../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../os/rt/include/chvt.h **** 
  39:../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../os/rt/include/chvt.h **** 
  43:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../os/rt/include/chvt.h **** #endif
  47:../../os/rt/include/chvt.h **** 
  48:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../os/rt/include/chvt.h **** #endif
  51:../../os/rt/include/chvt.h **** 
  52:../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../os/rt/include/chvt.h **** #endif
  55:../../os/rt/include/chvt.h **** 
  56:../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../os/rt/include/chvt.h **** 
  60:../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../os/rt/include/chvt.h **** 
  64:../../os/rt/include/chvt.h **** /*===========================================================================*/
  65:../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:../../os/rt/include/chvt.h **** /*===========================================================================*/
  67:../../os/rt/include/chvt.h **** 
  68:../../os/rt/include/chvt.h **** /*
  69:../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:../../os/rt/include/chvt.h ****  */
  71:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  72:../../os/rt/include/chvt.h **** extern "C" {
  73:../../os/rt/include/chvt.h **** #endif
  74:../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  75:../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  76:../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
  77:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
  78:../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  79:../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
  80:../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
  81:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
  82:../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
  83:../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
  84:../../os/rt/include/chvt.h **** #endif
  85:../../os/rt/include/chvt.h **** #ifdef __cplusplus
  86:../../os/rt/include/chvt.h **** }
  87:../../os/rt/include/chvt.h **** #endif
  88:../../os/rt/include/chvt.h **** 
  89:../../os/rt/include/chvt.h **** /*===========================================================================*/
  90:../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  91:../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../os/rt/include/chvt.h **** 
  93:../../os/rt/include/chvt.h **** /**
  94:../../os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  95:../../os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  96:../../os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  97:../../os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  98:../../os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  99:../../os/rt/include/chvt.h ****  *
 100:../../os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 101:../../os/rt/include/chvt.h ****  *
 102:../../os/rt/include/chvt.h ****  * @init
 103:../../os/rt/include/chvt.h ****  */
 104:../../os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 105:../../os/rt/include/chvt.h **** 
 106:../../os/rt/include/chvt.h ****   vtp->dlist.next = NULL;
 107:../../os/rt/include/chvt.h **** }
 108:../../os/rt/include/chvt.h **** 
 109:../../os/rt/include/chvt.h **** /**
 110:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 111:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 112:../../os/rt/include/chvt.h ****  *          invocation.
 113:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 114:../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 115:../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 116:../../os/rt/include/chvt.h ****  *          @p systime_t size.
 117:../../os/rt/include/chvt.h ****  *
 118:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 119:../../os/rt/include/chvt.h ****  *
 120:../../os/rt/include/chvt.h ****  * @xclass
 121:../../os/rt/include/chvt.h ****  */
 122:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 123:../../os/rt/include/chvt.h **** 
 124:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 125:../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 126:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 127:../../os/rt/include/chvt.h ****   return port_timer_get_time();
 128:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 129:../../os/rt/include/chvt.h **** }
 130:../../os/rt/include/chvt.h **** 
 131:../../os/rt/include/chvt.h **** /**
 132:../../os/rt/include/chvt.h ****  * @brief   Current system time.
 133:../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 134:../../os/rt/include/chvt.h ****  *          invocation.
 135:../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 136:../../os/rt/include/chvt.h ****  *
 137:../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 138:../../os/rt/include/chvt.h ****  *
 139:../../os/rt/include/chvt.h ****  * @api
 140:../../os/rt/include/chvt.h ****  */
 141:../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 142:../../os/rt/include/chvt.h ****   systime_t systime;
 143:../../os/rt/include/chvt.h **** 
 144:../../os/rt/include/chvt.h ****   chSysLock();
 145:../../os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 146:../../os/rt/include/chvt.h ****   chSysUnlock();
 147:../../os/rt/include/chvt.h **** 
 148:../../os/rt/include/chvt.h ****   return systime;
 149:../../os/rt/include/chvt.h **** }
 150:../../os/rt/include/chvt.h **** 
 151:../../os/rt/include/chvt.h **** /**
 152:../../os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 153:../../os/rt/include/chvt.h ****  *
 154:../../os/rt/include/chvt.h ****  * @param[in] start     start time
 155:../../os/rt/include/chvt.h ****  * @return              The elapsed time.
 156:../../os/rt/include/chvt.h ****  *
 157:../../os/rt/include/chvt.h ****  * @xclass
 158:../../os/rt/include/chvt.h ****  */
 159:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 160:../../os/rt/include/chvt.h **** 
 161:../../os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 162:../../os/rt/include/chvt.h **** }
 163:../../os/rt/include/chvt.h **** 
 164:../../os/rt/include/chvt.h **** /**
 165:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 166:../../os/rt/include/chvt.h ****  *          window.
 167:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 168:../../os/rt/include/chvt.h ****  *          time window has zero size.
 169:../../os/rt/include/chvt.h ****  *
 170:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 171:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 172:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 173:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 174:../../os/rt/include/chvt.h ****  *
 175:../../os/rt/include/chvt.h ****  * @xclass
 176:../../os/rt/include/chvt.h ****  */
 177:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 178:../../os/rt/include/chvt.h **** 
 179:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 180:../../os/rt/include/chvt.h **** }
 181:../../os/rt/include/chvt.h **** 
 182:../../os/rt/include/chvt.h **** /**
 183:../../os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 184:../../os/rt/include/chvt.h ****  *          window.
 185:../../os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 186:../../os/rt/include/chvt.h ****  *          time window has zero size.
 187:../../os/rt/include/chvt.h ****  *
 188:../../os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 189:../../os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 190:../../os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 191:../../os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 192:../../os/rt/include/chvt.h ****  *
 193:../../os/rt/include/chvt.h ****  * @api
 194:../../os/rt/include/chvt.h ****  */
 195:../../os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 196:../../os/rt/include/chvt.h **** 
 197:../../os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 198:../../os/rt/include/chvt.h **** }
 199:../../os/rt/include/chvt.h **** 
 200:../../os/rt/include/chvt.h **** /**
 201:../../os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 202:../../os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 203:../../os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 204:../../os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 205:../../os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 206:../../os/rt/include/chvt.h ****  *
 207:../../os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 208:../../os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 209:../../os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 210:../../os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 211:../../os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 212:../../os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 213:../../os/rt/include/chvt.h ****  *
 214:../../os/rt/include/chvt.h ****  * @iclass
 215:../../os/rt/include/chvt.h ****  */
 216:../../os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 217:../../os/rt/include/chvt.h ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 218:../../os/rt/include/chvt.h ****   ch_delta_list_t *dlp = &vtlp->dlist;
 219:../../os/rt/include/chvt.h **** 
 220:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 221:../../os/rt/include/chvt.h **** 
 222:../../os/rt/include/chvt.h ****   if (dlp == dlp->next) {
 223:../../os/rt/include/chvt.h ****     return false;
 224:../../os/rt/include/chvt.h ****   }
 225:../../os/rt/include/chvt.h **** 
 226:../../os/rt/include/chvt.h ****   if (timep != NULL) {
 227:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 228:../../os/rt/include/chvt.h ****     *timep = dlp->next->delta;
 229:../../os/rt/include/chvt.h **** #else
 230:../../os/rt/include/chvt.h ****     *timep = (dlp->next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 231:../../os/rt/include/chvt.h ****              chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 232:../../os/rt/include/chvt.h **** #endif
 233:../../os/rt/include/chvt.h ****   }
 234:../../os/rt/include/chvt.h **** 
 235:../../os/rt/include/chvt.h ****   return true;
 236:../../os/rt/include/chvt.h **** }
 237:../../os/rt/include/chvt.h **** 
 238:../../os/rt/include/chvt.h **** /**
 239:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 240:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 241:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 242:../../os/rt/include/chvt.h ****  *
 243:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 244:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 245:../../os/rt/include/chvt.h ****  *
 246:../../os/rt/include/chvt.h ****  * @iclass
 247:../../os/rt/include/chvt.h ****  */
 248:../../os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 249:../../os/rt/include/chvt.h **** 
 250:../../os/rt/include/chvt.h ****   chDbgCheckClassI();
 251:../../os/rt/include/chvt.h **** 
 252:../../os/rt/include/chvt.h ****   return (bool)(vtp->dlist.next != NULL);
 253:../../os/rt/include/chvt.h **** }
 254:../../os/rt/include/chvt.h **** 
 255:../../os/rt/include/chvt.h **** /**
 256:../../os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 257:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 258:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 259:../../os/rt/include/chvt.h ****  *
 260:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 261:../../os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 262:../../os/rt/include/chvt.h ****  *
 263:../../os/rt/include/chvt.h ****  * @api
 264:../../os/rt/include/chvt.h ****  */
 265:../../os/rt/include/chvt.h **** static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 266:../../os/rt/include/chvt.h ****   bool b;
 267:../../os/rt/include/chvt.h **** 
 268:../../os/rt/include/chvt.h ****   chSysLock();
 269:../../os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 270:../../os/rt/include/chvt.h ****   chSysUnlock();
 271:../../os/rt/include/chvt.h **** 
 272:../../os/rt/include/chvt.h ****   return b;
 273:../../os/rt/include/chvt.h **** }
 274:../../os/rt/include/chvt.h **** 
 275:../../os/rt/include/chvt.h **** /**
 276:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 277:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 278:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 279:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 280:../../os/rt/include/chvt.h ****  *
 281:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 282:../../os/rt/include/chvt.h ****  *
 283:../../os/rt/include/chvt.h ****  * @iclass
 284:../../os/rt/include/chvt.h ****  */
 285:../../os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 286:../../os/rt/include/chvt.h **** 
 287:../../os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 288:../../os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 289:../../os/rt/include/chvt.h ****   }
 290:../../os/rt/include/chvt.h **** }
 291:../../os/rt/include/chvt.h **** 
 292:../../os/rt/include/chvt.h **** /**
 293:../../os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 294:../../os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 295:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 296:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 297:../../os/rt/include/chvt.h ****  *
 298:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 299:../../os/rt/include/chvt.h ****  *
 300:../../os/rt/include/chvt.h ****  * @api
 301:../../os/rt/include/chvt.h ****  */
 302:../../os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 303:../../os/rt/include/chvt.h **** 
 304:../../os/rt/include/chvt.h ****   chSysLock();
 305:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 306:../../os/rt/include/chvt.h ****   chSysUnlock();
 307:../../os/rt/include/chvt.h **** }
 308:../../os/rt/include/chvt.h **** 
 309:../../os/rt/include/chvt.h **** /**
 310:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 311:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 312:../../os/rt/include/chvt.h ****  *          using the new parameters.
 313:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 314:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 315:../../os/rt/include/chvt.h ****  *
 316:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 317:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 318:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 319:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 320:../../os/rt/include/chvt.h ****  *                        normal time specification.
 321:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 322:../../os/rt/include/chvt.h ****  *                      .
 323:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 325:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 326:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../os/rt/include/chvt.h ****  *                      function
 328:../../os/rt/include/chvt.h ****  *
 329:../../os/rt/include/chvt.h ****  * @iclass
 330:../../os/rt/include/chvt.h ****  */
 331:../../os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 333:../../os/rt/include/chvt.h **** 
 334:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 335:../../os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 336:../../os/rt/include/chvt.h **** }
 337:../../os/rt/include/chvt.h **** 
 338:../../os/rt/include/chvt.h **** /**
 339:../../os/rt/include/chvt.h ****  * @brief   Enables a one-shot virtual timer.
 340:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 341:../../os/rt/include/chvt.h ****  *          using the new parameters.
 342:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 343:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 344:../../os/rt/include/chvt.h ****  *
 345:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 346:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 347:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 348:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 349:../../os/rt/include/chvt.h ****  *                        normal time specification.
 350:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 351:../../os/rt/include/chvt.h ****  *                      .
 352:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 353:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 354:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 355:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 356:../../os/rt/include/chvt.h ****  *                      function
 357:../../os/rt/include/chvt.h ****  *
 358:../../os/rt/include/chvt.h ****  * @api
 359:../../os/rt/include/chvt.h ****  */
 360:../../os/rt/include/chvt.h **** static inline void chVTSet(virtual_timer_t *vtp, sysinterval_t delay,
 361:../../os/rt/include/chvt.h ****                            vtfunc_t vtfunc, void *par) {
 362:../../os/rt/include/chvt.h **** 
 363:../../os/rt/include/chvt.h ****   chSysLock();
 364:../../os/rt/include/chvt.h ****   chVTSetI(vtp, delay, vtfunc, par);
 365:../../os/rt/include/chvt.h ****   chSysUnlock();
 366:../../os/rt/include/chvt.h **** }
 367:../../os/rt/include/chvt.h **** 
 368:../../os/rt/include/chvt.h **** /**
 369:../../os/rt/include/chvt.h ****  * @brief   Enables a continuous virtual timer.
 370:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 371:../../os/rt/include/chvt.h ****  *          using the new parameters.
 372:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 373:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 374:../../os/rt/include/chvt.h ****  *
 375:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 376:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 377:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 378:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 379:../../os/rt/include/chvt.h ****  *                        normal time specification.
 380:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 381:../../os/rt/include/chvt.h ****  *                      .
 382:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 383:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 384:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 385:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 386:../../os/rt/include/chvt.h ****  *                      function
 387:../../os/rt/include/chvt.h ****  *
 388:../../os/rt/include/chvt.h ****  * @iclass
 389:../../os/rt/include/chvt.h ****  */
 390:../../os/rt/include/chvt.h **** static inline void chVTSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
 391:../../os/rt/include/chvt.h ****                                       vtfunc_t vtfunc, void *par) {
 392:../../os/rt/include/chvt.h **** 
 393:../../os/rt/include/chvt.h ****   chVTResetI(vtp);
 394:../../os/rt/include/chvt.h ****   chVTDoSetContinuousI(vtp, delay, vtfunc, par);
 395:../../os/rt/include/chvt.h **** }
 396:../../os/rt/include/chvt.h **** 
 397:../../os/rt/include/chvt.h **** /**
 398:../../os/rt/include/chvt.h ****  * @brief   Enables a continuous virtual timer.
 399:../../os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 400:../../os/rt/include/chvt.h ****  *          using the new parameters.
 401:../../os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 402:../../os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 403:../../os/rt/include/chvt.h ****  *
 404:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 405:../../os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 406:../../os/rt/include/chvt.h ****  *                      special values are handled as follow:
 407:../../os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 408:../../os/rt/include/chvt.h ****  *                        normal time specification.
 409:../../os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 410:../../os/rt/include/chvt.h ****  *                      .
 411:../../os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 412:../../os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 413:../../os/rt/include/chvt.h ****  *                      be disposed or reused.
 414:../../os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 415:../../os/rt/include/chvt.h ****  *                      function
 416:../../os/rt/include/chvt.h ****  *
 417:../../os/rt/include/chvt.h ****  * @api
 418:../../os/rt/include/chvt.h ****  */
 419:../../os/rt/include/chvt.h **** static inline void chVTSetContinuous(virtual_timer_t *vtp, sysinterval_t delay,
 420:../../os/rt/include/chvt.h ****                                      vtfunc_t vtfunc, void *par) {
 421:../../os/rt/include/chvt.h **** 
 422:../../os/rt/include/chvt.h ****   chSysLock();
 423:../../os/rt/include/chvt.h ****   chVTSetContinuousI(vtp, delay, vtfunc, par);
 424:../../os/rt/include/chvt.h ****   chSysUnlock();
 425:../../os/rt/include/chvt.h **** }
 426:../../os/rt/include/chvt.h **** 
 427:../../os/rt/include/chvt.h **** /**
 428:../../os/rt/include/chvt.h ****  * @brief   Returns the current reload value.
 429:../../os/rt/include/chvt.h ****  *
 430:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 431:../../os/rt/include/chvt.h ****  * @return              The reload value.
 432:../../os/rt/include/chvt.h ****  *
 433:../../os/rt/include/chvt.h ****  * @xclass
 434:../../os/rt/include/chvt.h ****  */
 435:../../os/rt/include/chvt.h **** static inline sysinterval_t chVTGetReloadIntervalX(virtual_timer_t *vtp) {
 436:../../os/rt/include/chvt.h **** 
 437:../../os/rt/include/chvt.h ****   return vtp->reload;
 438:../../os/rt/include/chvt.h **** }
 439:../../os/rt/include/chvt.h **** 
 440:../../os/rt/include/chvt.h **** /**
 441:../../os/rt/include/chvt.h ****  * @brief   Changes a timer reload time interval.
 442:../../os/rt/include/chvt.h ****  * @note    This function is meant to be called from a timer callback, it
 443:../../os/rt/include/chvt.h ****  *          does nothing in any other context.
 444:../../os/rt/include/chvt.h ****  * @note    Calling this function from a one-shot timer callback turns it
 445:../../os/rt/include/chvt.h ****  *          into a continuous timer.
 446:../../os/rt/include/chvt.h ****  *
 447:../../os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 448:../../os/rt/include/chvt.h ****  * @param[in] reload    the new reload value, zero means no reload
 449:../../os/rt/include/chvt.h ****  *
 450:../../os/rt/include/chvt.h ****  * @xclass
 451:../../os/rt/include/chvt.h ****  */
 452:../../os/rt/include/chvt.h **** static inline void chVTSetReloadIntervalX(virtual_timer_t *vtp,
 453:../../os/rt/include/chvt.h ****                                           sysinterval_t reload) {
 454:../../os/rt/include/chvt.h **** 
 455:../../os/rt/include/chvt.h ****   vtp->reload = reload;
 456:../../os/rt/include/chvt.h **** }
 457:../../os/rt/include/chvt.h **** 
 458:../../os/rt/include/chvt.h **** #if (CH_CFG_USE_TIMESTAMP == TRUE) || defined(__DOXYGEN__)
 459:../../os/rt/include/chvt.h **** /**
 460:../../os/rt/include/chvt.h ****  * @brief   Generates a monotonic time stamp.
 461:../../os/rt/include/chvt.h ****  * @details This function generates a monotonic time stamp synchronized with
 462:../../os/rt/include/chvt.h ****  *          the system time. The time stamp has the same resolution of
 463:../../os/rt/include/chvt.h ****  *          system time.
 464:../../os/rt/include/chvt.h ****  * @note    There is an assumption, this function must be called at
 465:../../os/rt/include/chvt.h ****  *          least once before the system time wraps back to zero or
 466:../../os/rt/include/chvt.h ****  *          synchronization is lost. You may use a periodic virtual timer with
 467:../../os/rt/include/chvt.h ****  *          a very large interval in order to keep time stamps synchronized
 468:../../os/rt/include/chvt.h ****  *          by calling this function.
 469:../../os/rt/include/chvt.h ****  *
 470:../../os/rt/include/chvt.h ****  * @return              The time stamp.
 471:../../os/rt/include/chvt.h ****  *
 472:../../os/rt/include/chvt.h ****  * @api
 473:../../os/rt/include/chvt.h ****  */
 474:../../os/rt/include/chvt.h **** static inline systimestamp_t chVTGetTimeStamp(void) {
 475:../../os/rt/include/chvt.h ****   systimestamp_t stamp;
 476:../../os/rt/include/chvt.h **** 
 477:../../os/rt/include/chvt.h ****   chSysLock();
 478:../../os/rt/include/chvt.h **** 
 479:../../os/rt/include/chvt.h ****   stamp = chVTGetTimeStampI();
 480:../../os/rt/include/chvt.h **** 
 481:../../os/rt/include/chvt.h ****   chSysUnlock();
 482:../../os/rt/include/chvt.h **** 
 483:../../os/rt/include/chvt.h ****   return stamp;
 484:../../os/rt/include/chvt.h **** }
 485:../../os/rt/include/chvt.h **** 
 486:../../os/rt/include/chvt.h **** /**
 487:../../os/rt/include/chvt.h ****  * @brief   Resets and re-synchronizes the time stamps monotonic counter.
 488:../../os/rt/include/chvt.h ****  *
 489:../../os/rt/include/chvt.h ****  * @api
 490:../../os/rt/include/chvt.h ****  */
 491:../../os/rt/include/chvt.h **** static inline void chVTResetTimeStamp(void) {
 492:../../os/rt/include/chvt.h **** 
 493:../../os/rt/include/chvt.h ****   chSysLock();
 494:../../os/rt/include/chvt.h **** 
 495:../../os/rt/include/chvt.h ****   chVTResetTimeStampI();
 496:../../os/rt/include/chvt.h **** 
 497:../../os/rt/include/chvt.h ****   chSysUnlock();
 498:../../os/rt/include/chvt.h **** }
 499:../../os/rt/include/chvt.h **** #endif /* CH_CFG_USE_TIMESTAMP == TRUE */
 500:../../os/rt/include/chvt.h **** 
 501:../../os/rt/include/chvt.h **** /**
 502:../../os/rt/include/chvt.h ****  * @brief   Virtual Timers instance initialization.
 503:../../os/rt/include/chvt.h ****  * @note    Internal use only.
 504:../../os/rt/include/chvt.h ****  *
 505:../../os/rt/include/chvt.h ****  * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 506:../../os/rt/include/chvt.h ****  *
 507:../../os/rt/include/chvt.h ****  * @notapi
 508:../../os/rt/include/chvt.h ****  */
 509:../../os/rt/include/chvt.h **** static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
 510:../../os/rt/include/chvt.h **** 
 511:../../os/rt/include/chvt.h ****   ch_dlist_init(&vtlp->dlist);
 148               		.loc 5 511 0
 149 0058 4097      		sbiw r24,16
 150               	.LVL8:
 151               	.LBB42:
 152               	.LBB43:
 341:../../os/rt/include/chlists.h **** }
 342:../../os/rt/include/chlists.h **** 
 343:../../os/rt/include/chlists.h **** /**
 344:../../os/rt/include/chlists.h ****  * @brief   Removes the highest priority element from a priority queue and
 345:../../os/rt/include/chlists.h ****  *          returns it.
 346:../../os/rt/include/chlists.h ****  *
 347:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 348:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 349:../../os/rt/include/chlists.h ****  *
 350:../../os/rt/include/chlists.h ****  * @notapi
 351:../../os/rt/include/chlists.h ****  */
 352:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 353:../../os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 354:../../os/rt/include/chlists.h **** 
 355:../../os/rt/include/chlists.h ****   pqp->next       = p->next;
 356:../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 357:../../os/rt/include/chlists.h **** 
 358:../../os/rt/include/chlists.h ****   return p;
 359:../../os/rt/include/chlists.h **** }
 360:../../os/rt/include/chlists.h **** 
 361:../../os/rt/include/chlists.h **** /**
 362:../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it behind
 363:../../os/rt/include/chlists.h ****  *          its peers.
 364:../../os/rt/include/chlists.h ****  * @details The element is positioned behind all elements with higher or
 365:../../os/rt/include/chlists.h ****  *          equal priority.
 366:../../os/rt/include/chlists.h ****  *
 367:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 368:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 369:../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 370:../../os/rt/include/chlists.h ****  *
 371:../../os/rt/include/chlists.h ****  * @notapi
 372:../../os/rt/include/chlists.h ****  */
 373:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_behind(ch_priority_queue_t *pqp,
 374:../../os/rt/include/chlists.h ****                                                            ch_priority_queue_t *p) {
 375:../../os/rt/include/chlists.h **** 
 376:../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 377:../../os/rt/include/chlists.h ****   do {
 378:../../os/rt/include/chlists.h ****     pqp = pqp->next;
 379:../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio >= p->prio));
 380:../../os/rt/include/chlists.h **** 
 381:../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 382:../../os/rt/include/chlists.h ****   p->next       = pqp;
 383:../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 384:../../os/rt/include/chlists.h ****   p->prev->next = p;
 385:../../os/rt/include/chlists.h ****   pqp->prev     = p;
 386:../../os/rt/include/chlists.h **** 
 387:../../os/rt/include/chlists.h ****   return p;
 388:../../os/rt/include/chlists.h **** }
 389:../../os/rt/include/chlists.h **** 
 390:../../os/rt/include/chlists.h **** /**
 391:../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it ahead of
 392:../../os/rt/include/chlists.h ****  *          its peers.
 393:../../os/rt/include/chlists.h ****  * @details The element is positioned ahead of all elements with higher or
 394:../../os/rt/include/chlists.h ****  *          equal priority.
 395:../../os/rt/include/chlists.h ****  *
 396:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 397:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 398:../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 399:../../os/rt/include/chlists.h ****  *
 400:../../os/rt/include/chlists.h ****  * @notapi
 401:../../os/rt/include/chlists.h ****  */
 402:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
 403:../../os/rt/include/chlists.h ****                                                           ch_priority_queue_t *p) {
 404:../../os/rt/include/chlists.h **** 
 405:../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 406:../../os/rt/include/chlists.h ****   do {
 407:../../os/rt/include/chlists.h ****     pqp = pqp->next;
 408:../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio > p->prio));
 409:../../os/rt/include/chlists.h **** 
 410:../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 411:../../os/rt/include/chlists.h ****   p->next       = pqp;
 412:../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 413:../../os/rt/include/chlists.h ****   p->prev->next = p;
 414:../../os/rt/include/chlists.h ****   pqp->prev     = p;
 415:../../os/rt/include/chlists.h **** 
 416:../../os/rt/include/chlists.h ****   return p;
 417:../../os/rt/include/chlists.h **** }
 418:../../os/rt/include/chlists.h **** 
 419:../../os/rt/include/chlists.h **** /**
 420:../../os/rt/include/chlists.h ****  * @brief   Delta list initialization.
 421:../../os/rt/include/chlists.h ****  *
 422:../../os/rt/include/chlists.h ****  * @param[out] dlhp    pointer to the delta list header
 423:../../os/rt/include/chlists.h ****  *
 424:../../os/rt/include/chlists.h ****  * @notapi
 425:../../os/rt/include/chlists.h ****  */
 426:../../os/rt/include/chlists.h **** static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 427:../../os/rt/include/chlists.h **** 
 428:../../os/rt/include/chlists.h ****   dlhp->next  = dlhp;
 153               		.loc 2 428 0
 154 005a 9087      		std Z+8,r25
 155 005c 8783      		std Z+7,r24
 429:../../os/rt/include/chlists.h ****   dlhp->prev  = dlhp;
 156               		.loc 2 429 0
 157 005e 9287      		std Z+10,r25
 158 0060 8187      		std Z+9,r24
 430:../../os/rt/include/chlists.h ****   dlhp->delta = (sysinterval_t)-1;
 159               		.loc 2 430 0
 160 0062 8FEF      		ldi r24,lo8(-1)
 161 0064 9FEF      		ldi r25,lo8(-1)
 162               	.LVL9:
 163 0066 9487      		std Z+12,r25
 164 0068 8387      		std Z+11,r24
 165               	.LVL10:
 166               	.LBE43:
 167               	.LBE42:
 512:../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 513:../../os/rt/include/chvt.h ****   vtlp->systime = (systime_t)0;
 514:../../os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 515:../../os/rt/include/chvt.h ****   vtlp->lasttime = (systime_t)0;
 168               		.loc 5 515 0
 169 006a 1686      		std Z+14,__zero_reg__
 170 006c 1586      		std Z+13,__zero_reg__
 171               	.LBB44:
 172               	.LBB45:
 173               	.LBB46:
 174               		.file 6 "../../os/hal/osal/rt-nil/chcore_timer.h"
   1:../../os/hal/osal/rt-nil/chcore_timer.h **** /*
   2:../../os/hal/osal/rt-nil/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/chcore_timer.h **** 
   4:../../os/hal/osal/rt-nil/chcore_timer.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/chcore_timer.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/chcore_timer.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/chcore_timer.h **** 
   8:../../os/hal/osal/rt-nil/chcore_timer.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  10:../../os/hal/osal/rt-nil/chcore_timer.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/chcore_timer.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/chcore_timer.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/chcore_timer.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/chcore_timer.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/chcore_timer.h **** */
  16:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  17:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  18:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @file    osal/rt-nil//chcore_timer.h
  19:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   System Timer bindings header file.
  20:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  21:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @addtogroup OSAL_CHCORE_TIMER
  22:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @{
  23:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  24:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  25:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  26:../../os/hal/osal/rt-nil/chcore_timer.h **** #define CHCORE_TIMER_H
  27:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  28:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  29:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module constants.                                                         */
  30:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  31:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  32:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  33:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  34:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  36:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Derived constants and error checks.                                       */
  38:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  39:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  40:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  41:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module data structures and types.                                         */
  42:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  43:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  44:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  45:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module macros.                                                            */
  46:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  47:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  48:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  49:../../os/hal/osal/rt-nil/chcore_timer.h **** /* External declarations.                                                    */
  50:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  51:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  52:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  53:../../os/hal/osal/rt-nil/chcore_timer.h **** extern "C" {
  54:../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  55:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStartAlarm(systime_t time);
  56:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStopAlarm(void);
  57:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stSetAlarm(systime_t time);
  58:../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetCounter(void);
  59:../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetAlarm(void);
  60:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  61:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  62:../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  63:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  64:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  65:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module inline functions.                                                  */
  66:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  67:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  68:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  69:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Starts the alarm.
  70:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  71:../../os/hal/osal/rt-nil/chcore_timer.h ****  *          this call.
  72:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  73:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  74:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  75:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  76:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  77:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  78:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  79:../../os/hal/osal/rt-nil/chcore_timer.h ****   stStartAlarm(time);
  80:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  81:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  82:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  83:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  84:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  85:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  86:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  87:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  88:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  89:../../os/hal/osal/rt-nil/chcore_timer.h ****   stStopAlarm();
  90:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  91:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  92:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  93:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Sets the alarm time.
  94:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  95:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  96:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  97:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  98:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  99:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
 100:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 101:../../os/hal/osal/rt-nil/chcore_timer.h ****   stSetAlarm(time);
 102:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 103:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 104:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
 105:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Returns the system time.
 106:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 107:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @return              The system time.
 108:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 109:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
 110:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
 111:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 112:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 113:../../os/hal/osal/rt-nil/chcore_timer.h ****   return stGetCounter();
 175               		.loc 6 113 0
 176 006e 0E94 0000 		call stGetCounter
 177               	.LVL11:
 178               	.LBE46:
 179               	.LBE45:
 180               	.LBE44:
 516:../../os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 517:../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
 518:../../os/rt/include/chvt.h ****   vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 181               		.loc 5 518 0
 182 0072 9C01      		movw r18,r24
 183 0074 F801      		movw r30,r16
 184 0076 2787      		std Z+15,r18
 185 0078 308B      		std Z+16,r19
 186 007a 118A      		std Z+17,__zero_reg__
 187 007c 128A      		std Z+18,__zero_reg__
 188 007e 138A      		std Z+19,__zero_reg__
 189 0080 148A      		std Z+20,__zero_reg__
 190 0082 158A      		std Z+21,__zero_reg__
 191 0084 168A      		std Z+22,__zero_reg__
 192               	.LVL12:
 193               	.LBE41:
 194               	.LBE40:
 195               	.LBB47:
 196               	.LBB48:
 197               		.file 7 "../../os/rt/include/chdebug.h"
   1:../../os/rt/include/chdebug.h **** /*
   2:../../os/rt/include/chdebug.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chdebug.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chdebug.h **** 
   5:../../os/rt/include/chdebug.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chdebug.h **** 
   7:../../os/rt/include/chdebug.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chdebug.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chdebug.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chdebug.h **** 
  11:../../os/rt/include/chdebug.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chdebug.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chdebug.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chdebug.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chdebug.h **** 
  16:../../os/rt/include/chdebug.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chdebug.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chdebug.h **** */
  19:../../os/rt/include/chdebug.h **** 
  20:../../os/rt/include/chdebug.h **** /**
  21:../../os/rt/include/chdebug.h ****  * @file    rt/include/chdebug.h
  22:../../os/rt/include/chdebug.h ****  * @brief   Debug support macros and structures.
  23:../../os/rt/include/chdebug.h ****  *
  24:../../os/rt/include/chdebug.h ****  * @addtogroup checks_assertions
  25:../../os/rt/include/chdebug.h ****  * @{
  26:../../os/rt/include/chdebug.h ****  */
  27:../../os/rt/include/chdebug.h **** 
  28:../../os/rt/include/chdebug.h **** #ifndef CHDEBUG_H
  29:../../os/rt/include/chdebug.h **** #define CHDEBUG_H
  30:../../os/rt/include/chdebug.h **** 
  31:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  32:../../os/rt/include/chdebug.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  34:../../os/rt/include/chdebug.h **** 
  35:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  36:../../os/rt/include/chdebug.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  38:../../os/rt/include/chdebug.h **** 
  39:../../os/rt/include/chdebug.h **** /**
  40:../../os/rt/include/chdebug.h ****  * @name    Debug related settings
  41:../../os/rt/include/chdebug.h ****  * @{
  42:../../os/rt/include/chdebug.h ****  */
  43:../../os/rt/include/chdebug.h **** /**
  44:../../os/rt/include/chdebug.h ****  * @brief   Fill value for thread stack area in debug mode.
  45:../../os/rt/include/chdebug.h ****  */
  46:../../os/rt/include/chdebug.h **** #if !defined(CH_DBG_STACK_FILL_VALUE) || defined(__DOXYGEN__)
  47:../../os/rt/include/chdebug.h **** #define CH_DBG_STACK_FILL_VALUE             0x55
  48:../../os/rt/include/chdebug.h **** #endif
  49:../../os/rt/include/chdebug.h **** /** @} */
  50:../../os/rt/include/chdebug.h **** 
  51:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  52:../../os/rt/include/chdebug.h **** /* Derived constants and error checks.                                       */
  53:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  54:../../os/rt/include/chdebug.h **** 
  55:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  56:../../os/rt/include/chdebug.h **** /* Module data structures and types.                                         */
  57:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  58:../../os/rt/include/chdebug.h **** 
  59:../../os/rt/include/chdebug.h **** /**
  60:../../os/rt/include/chdebug.h ****  * @brief   System debug data structure.
  61:../../os/rt/include/chdebug.h ****  */
  62:../../os/rt/include/chdebug.h **** typedef struct ch_system_debug {
  63:../../os/rt/include/chdebug.h ****   /**
  64:../../os/rt/include/chdebug.h ****    * @brief   Pointer to the panic message.
  65:../../os/rt/include/chdebug.h ****    * @details This pointer is meant to be accessed through the debugger, it is
  66:../../os/rt/include/chdebug.h ****    *          written once and then the system is halted.
  67:../../os/rt/include/chdebug.h ****    * @note    Accesses to this pointer must never be optimized out so the
  68:../../os/rt/include/chdebug.h ****    *          field itself is declared volatile.
  69:../../os/rt/include/chdebug.h ****    */
  70:../../os/rt/include/chdebug.h ****   const char            * volatile panic_msg;
  71:../../os/rt/include/chdebug.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
  72:../../os/rt/include/chdebug.h ****   /**
  73:../../os/rt/include/chdebug.h ****    * @brief   ISR nesting level.
  74:../../os/rt/include/chdebug.h ****    */
  75:../../os/rt/include/chdebug.h ****   cnt_t                 isr_cnt;
  76:../../os/rt/include/chdebug.h ****   /**
  77:../../os/rt/include/chdebug.h ****    * @brief   Lock nesting level.
  78:../../os/rt/include/chdebug.h ****    */
  79:../../os/rt/include/chdebug.h ****   cnt_t                 lock_cnt;
  80:../../os/rt/include/chdebug.h **** #endif
  81:../../os/rt/include/chdebug.h **** } system_debug_t;
  82:../../os/rt/include/chdebug.h **** 
  83:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  84:../../os/rt/include/chdebug.h **** /* Module macros.                                                            */
  85:../../os/rt/include/chdebug.h **** /*===========================================================================*/
  86:../../os/rt/include/chdebug.h **** 
  87:../../os/rt/include/chdebug.h **** /* When the state checker feature is disabled then the following functions
  88:../../os/rt/include/chdebug.h ****    are replaced by an empty macro.*/
  89:../../os/rt/include/chdebug.h **** #if CH_DBG_SYSTEM_STATE_CHECK == FALSE
  90:../../os/rt/include/chdebug.h **** #define __dbg_check_disable()
  91:../../os/rt/include/chdebug.h **** #define __dbg_check_suspend()
  92:../../os/rt/include/chdebug.h **** #define __dbg_check_enable()
  93:../../os/rt/include/chdebug.h **** #define __dbg_check_lock()
  94:../../os/rt/include/chdebug.h **** #define __dbg_check_unlock()
  95:../../os/rt/include/chdebug.h **** #define __dbg_check_lock_from_isr()
  96:../../os/rt/include/chdebug.h **** #define __dbg_check_unlock_from_isr()
  97:../../os/rt/include/chdebug.h **** #define __dbg_check_enter_isr()
  98:../../os/rt/include/chdebug.h **** #define __dbg_check_leave_isr()
  99:../../os/rt/include/chdebug.h **** #define chDbgCheckClassI()
 100:../../os/rt/include/chdebug.h **** #define chDbgCheckClassS()
 101:../../os/rt/include/chdebug.h **** #endif
 102:../../os/rt/include/chdebug.h **** 
 103:../../os/rt/include/chdebug.h **** /**
 104:../../os/rt/include/chdebug.h ****  * @name    Macro Functions
 105:../../os/rt/include/chdebug.h ****  * @{
 106:../../os/rt/include/chdebug.h ****  */
 107:../../os/rt/include/chdebug.h **** /**
 108:../../os/rt/include/chdebug.h ****  * @brief   Function parameters check.
 109:../../os/rt/include/chdebug.h ****  * @details If the condition check fails then the kernel panics and halts.
 110:../../os/rt/include/chdebug.h ****  * @note    The condition is tested only if the @p CH_DBG_ENABLE_CHECKS switch
 111:../../os/rt/include/chdebug.h ****  *          is specified in @p chconf.h else the macro does nothing.
 112:../../os/rt/include/chdebug.h ****  *
 113:../../os/rt/include/chdebug.h ****  * @param[in] c         the condition to be verified to be true
 114:../../os/rt/include/chdebug.h ****  *
 115:../../os/rt/include/chdebug.h ****  * @api
 116:../../os/rt/include/chdebug.h ****  */
 117:../../os/rt/include/chdebug.h **** #if !defined(chDbgCheck)
 118:../../os/rt/include/chdebug.h **** #define chDbgCheck(c) do {                                                  \
 119:../../os/rt/include/chdebug.h ****   /*lint -save -e506 -e774 [2.1, 14.3] Can be a constant by design.*/       \
 120:../../os/rt/include/chdebug.h ****   if (CH_DBG_ENABLE_CHECKS != FALSE) {                                      \
 121:../../os/rt/include/chdebug.h ****     if (unlikely(!(c))) {                                                   \
 122:../../os/rt/include/chdebug.h ****   /*lint -restore*/                                                         \
 123:../../os/rt/include/chdebug.h ****       chSysHalt(__func__);                                                  \
 124:../../os/rt/include/chdebug.h ****     }                                                                       \
 125:../../os/rt/include/chdebug.h ****   }                                                                         \
 126:../../os/rt/include/chdebug.h **** } while (false)
 127:../../os/rt/include/chdebug.h **** #endif /* !defined(chDbgCheck) */
 128:../../os/rt/include/chdebug.h **** 
 129:../../os/rt/include/chdebug.h **** /**
 130:../../os/rt/include/chdebug.h ****  * @brief   Condition assertion.
 131:../../os/rt/include/chdebug.h ****  * @details If the condition check fails then the kernel panics with a
 132:../../os/rt/include/chdebug.h ****  *          message and halts.
 133:../../os/rt/include/chdebug.h ****  * @note    The condition is tested only if the @p CH_DBG_ENABLE_ASSERTS switch
 134:../../os/rt/include/chdebug.h ****  *          is specified in @p chconf.h else the macro does nothing.
 135:../../os/rt/include/chdebug.h ****  * @note    The remark string is not currently used except for putting a
 136:../../os/rt/include/chdebug.h ****  *          comment in the code about the assertion.
 137:../../os/rt/include/chdebug.h ****  *
 138:../../os/rt/include/chdebug.h ****  * @param[in] c         the condition to be verified to be true
 139:../../os/rt/include/chdebug.h ****  * @param[in] r         a remark string
 140:../../os/rt/include/chdebug.h ****  *
 141:../../os/rt/include/chdebug.h ****  * @api
 142:../../os/rt/include/chdebug.h ****  */
 143:../../os/rt/include/chdebug.h **** #if !defined(chDbgAssert)
 144:../../os/rt/include/chdebug.h **** #define chDbgAssert(c, r) do {                                              \
 145:../../os/rt/include/chdebug.h ****   /*lint -save -e506 -e774 [2.1, 14.3] Can be a constant by design.*/       \
 146:../../os/rt/include/chdebug.h ****   if (CH_DBG_ENABLE_ASSERTS != FALSE) {                                     \
 147:../../os/rt/include/chdebug.h ****     if (unlikely(!(c))) {                                                   \
 148:../../os/rt/include/chdebug.h ****   /*lint -restore*/                                                         \
 149:../../os/rt/include/chdebug.h ****       chSysHalt(__func__);                                                  \
 150:../../os/rt/include/chdebug.h ****     }                                                                       \
 151:../../os/rt/include/chdebug.h ****   }                                                                         \
 152:../../os/rt/include/chdebug.h **** } while (false)
 153:../../os/rt/include/chdebug.h **** #endif /* !defined(chDbgAssert) */
 154:../../os/rt/include/chdebug.h **** /** @} */
 155:../../os/rt/include/chdebug.h **** 
 156:../../os/rt/include/chdebug.h **** /*===========================================================================*/
 157:../../os/rt/include/chdebug.h **** /* External declarations.                                                    */
 158:../../os/rt/include/chdebug.h **** /*===========================================================================*/
 159:../../os/rt/include/chdebug.h **** 
 160:../../os/rt/include/chdebug.h **** #ifdef __cplusplus
 161:../../os/rt/include/chdebug.h **** extern "C" {
 162:../../os/rt/include/chdebug.h **** #endif
 163:../../os/rt/include/chdebug.h **** #if CH_DBG_SYSTEM_STATE_CHECK == TRUE
 164:../../os/rt/include/chdebug.h ****   void __dbg_check_disable(void);
 165:../../os/rt/include/chdebug.h ****   void __dbg_check_suspend(void);
 166:../../os/rt/include/chdebug.h ****   void __dbg_check_enable(void);
 167:../../os/rt/include/chdebug.h ****   void __dbg_check_lock(void);
 168:../../os/rt/include/chdebug.h ****   void __dbg_check_unlock(void);
 169:../../os/rt/include/chdebug.h ****   void __dbg_check_lock_from_isr(void);
 170:../../os/rt/include/chdebug.h ****   void __dbg_check_unlock_from_isr(void);
 171:../../os/rt/include/chdebug.h ****   void __dbg_check_enter_isr(void);
 172:../../os/rt/include/chdebug.h ****   void __dbg_check_leave_isr(void);
 173:../../os/rt/include/chdebug.h ****   void chDbgCheckClassI(void);
 174:../../os/rt/include/chdebug.h ****   void chDbgCheckClassS(void);
 175:../../os/rt/include/chdebug.h **** #endif
 176:../../os/rt/include/chdebug.h **** #ifdef __cplusplus
 177:../../os/rt/include/chdebug.h **** }
 178:../../os/rt/include/chdebug.h **** #endif
 179:../../os/rt/include/chdebug.h **** 
 180:../../os/rt/include/chdebug.h **** /*===========================================================================*/
 181:../../os/rt/include/chdebug.h **** /* Module inline functions.                                                  */
 182:../../os/rt/include/chdebug.h **** /*===========================================================================*/
 183:../../os/rt/include/chdebug.h **** 
 184:../../os/rt/include/chdebug.h **** /**
 185:../../os/rt/include/chdebug.h ****  * @brief   Debug support initialization.
 186:../../os/rt/include/chdebug.h ****  * @note    Internal use only.
 187:../../os/rt/include/chdebug.h ****  *
 188:../../os/rt/include/chdebug.h ****  * @param[out] sdp      pointer to the @p system_debug_t structure
 189:../../os/rt/include/chdebug.h ****  *
 190:../../os/rt/include/chdebug.h ****  * @notapi
 191:../../os/rt/include/chdebug.h ****  */
 192:../../os/rt/include/chdebug.h **** static inline void __dbg_object_init(system_debug_t *sdp) {
 193:../../os/rt/include/chdebug.h **** 
 194:../../os/rt/include/chdebug.h ****   sdp->panic_msg = NULL;
 198               		.loc 7 194 0
 199 0086 EF5B      		subi r30,-65
 200 0088 FF4F      		sbci r31,-1
 201               	.LVL13:
 202 008a 1182      		std Z+1,__zero_reg__
 203 008c 1082      		st Z,__zero_reg__
 204               	.LVL14:
 205               	.LBE48:
 206               	.LBE47:
 110:../../os/rt/src/chinstances.c **** 
 111:../../os/rt/src/chinstances.c ****   /* Ready list initialization.*/
 112:../../os/rt/src/chinstances.c ****   ch_pqueue_init(&oip->rlist.pqueue);
 113:../../os/rt/src/chinstances.c **** 
 114:../../os/rt/src/chinstances.c **** #if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
 115:../../os/rt/src/chinstances.c ****   /* Registry initialization when SMP mode is disabled.*/
 116:../../os/rt/src/chinstances.c ****   __reg_object_init(&oip->reglist);
 117:../../os/rt/src/chinstances.c **** #endif
 118:../../os/rt/src/chinstances.c **** 
 119:../../os/rt/src/chinstances.c **** #if CH_CFG_SMP_MODE == FALSE
 120:../../os/rt/src/chinstances.c ****   /* RFCU initialization when SMP mode is disabled.*/
 121:../../os/rt/src/chinstances.c ****   __rfcu_object_init(&oip->rfcu);
 122:../../os/rt/src/chinstances.c **** #endif
 123:../../os/rt/src/chinstances.c **** 
 124:../../os/rt/src/chinstances.c ****   /* Virtual timers list initialization.*/
 125:../../os/rt/src/chinstances.c ****   __vt_object_init(&oip->vtlist);
 126:../../os/rt/src/chinstances.c **** 
 127:../../os/rt/src/chinstances.c ****   /* Debug support initialization.*/
 128:../../os/rt/src/chinstances.c ****   __dbg_object_init(&oip->dbg);
 129:../../os/rt/src/chinstances.c **** 
 130:../../os/rt/src/chinstances.c **** #if CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED
 131:../../os/rt/src/chinstances.c ****   /* Trace buffer initialization.*/
 132:../../os/rt/src/chinstances.c ****   __trace_object_init(&oip->trace_buffer);
 133:../../os/rt/src/chinstances.c **** #endif
 134:../../os/rt/src/chinstances.c **** 
 135:../../os/rt/src/chinstances.c ****   /* Statistics initialization.*/
 136:../../os/rt/src/chinstances.c **** #if CH_DBG_STATISTICS == TRUE
 137:../../os/rt/src/chinstances.c ****   __stats_object_init(&oip->kernel_stats);
 138:../../os/rt/src/chinstances.c **** #endif
 139:../../os/rt/src/chinstances.c **** 
 140:../../os/rt/src/chinstances.c **** #if CH_CFG_NO_IDLE_THREAD == FALSE
 141:../../os/rt/src/chinstances.c ****   /* Now this instructions flow becomes the main thread.*/
 142:../../os/rt/src/chinstances.c **** #if CH_CFG_USE_REGISTRY == TRUE
 143:../../os/rt/src/chinstances.c ****   oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 207               		.loc 1 143 0
 208 008e B801      		movw r22,r16
 209 0090 6D5D      		subi r22,-35
 210 0092 7F4F      		sbci r23,-1
 211 0094 20E8      		ldi r18,lo8(-128)
 212 0096 40E0      		ldi r20,lo8(ch_debug)
 213 0098 50E0      		ldi r21,hi8(ch_debug)
 214 009a C801      		movw r24,r16
 215 009c 0E94 0000 		call __thd_object_init
 216               	.LVL15:
 217 00a0 F801      		movw r30,r16
 218 00a2 9683      		std Z+6,r25
 219 00a4 8583      		std Z+5,r24
 144:../../os/rt/src/chinstances.c ****                                          (const char *)&ch_debug, NORMALPRIO);
 145:../../os/rt/src/chinstances.c **** #else
 146:../../os/rt/src/chinstances.c ****   oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 147:../../os/rt/src/chinstances.c ****                                          "main", NORMALPRIO);
 148:../../os/rt/src/chinstances.c **** #endif
 149:../../os/rt/src/chinstances.c **** #else
 150:../../os/rt/src/chinstances.c ****   /* Now this instructions flow becomes the idle thread.*/
 151:../../os/rt/src/chinstances.c ****   oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 152:../../os/rt/src/chinstances.c ****                                          "idle", IDLEPRIO);
 153:../../os/rt/src/chinstances.c **** #endif
 154:../../os/rt/src/chinstances.c **** 
 155:../../os/rt/src/chinstances.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 156:../../os/rt/src/chinstances.c ****   oip->rlist.current->wabase = oicp->mainthread_base;
 157:../../os/rt/src/chinstances.c **** #endif
 158:../../os/rt/src/chinstances.c **** 
 159:../../os/rt/src/chinstances.c ****   /* Setting up the caller as current thread.*/
 160:../../os/rt/src/chinstances.c ****   oip->rlist.current->state = CH_STATE_CURRENT;
 220               		.loc 1 160 0
 221 00a6 FC01      		movw r30,r24
 222 00a8 F786      		std Z+15,r15
 223               	.LBB49:
 161:../../os/rt/src/chinstances.c **** 
 162:../../os/rt/src/chinstances.c ****   /* User instance initialization hook.*/
 163:../../os/rt/src/chinstances.c ****   CH_CFG_OS_INSTANCE_INIT_HOOK(oip);
 164:../../os/rt/src/chinstances.c **** 
 165:../../os/rt/src/chinstances.c **** #if CH_CFG_NO_IDLE_THREAD == FALSE
 166:../../os/rt/src/chinstances.c ****   {
 167:../../os/rt/src/chinstances.c ****     thread_descriptor_t idle_descriptor = {
 224               		.loc 1 167 0
 225 00aa 80E0      		ldi r24,lo8(.LC0)
 226 00ac 90E0      		ldi r25,hi8(.LC0)
 227 00ae 9A83      		std Y+2,r25
 228 00b0 8983      		std Y+1,r24
 229 00b2 F601      		movw r30,r12
 230 00b4 8281      		ldd r24,Z+2
 231 00b6 9381      		ldd r25,Z+3
 232 00b8 9C83      		std Y+4,r25
 233 00ba 8B83      		std Y+3,r24
 234 00bc 8481      		ldd r24,Z+4
 235 00be 9581      		ldd r25,Z+5
 236 00c0 9E83      		std Y+6,r25
 237 00c2 8D83      		std Y+5,r24
 238 00c4 FF82      		std Y+7,r15
 239 00c6 80E0      		ldi r24,lo8(gs(__idle_thread))
 240 00c8 90E0      		ldi r25,hi8(gs(__idle_thread))
 241 00ca 9987      		std Y+9,r25
 242 00cc 8887      		std Y+8,r24
 243 00ce 1B86      		std Y+11,__zero_reg__
 244 00d0 1A86      		std Y+10,__zero_reg__
 168:../../os/rt/src/chinstances.c ****       .name     = "idle",
 169:../../os/rt/src/chinstances.c ****       .wbase    = oicp->idlethread_base,
 170:../../os/rt/src/chinstances.c ****       .wend     = oicp->idlethread_end,
 171:../../os/rt/src/chinstances.c ****       .prio     = IDLEPRIO,
 172:../../os/rt/src/chinstances.c ****       .funcp    = __idle_thread,
 173:../../os/rt/src/chinstances.c ****       .arg      = NULL
 174:../../os/rt/src/chinstances.c ****     };
 175:../../os/rt/src/chinstances.c **** 
 176:../../os/rt/src/chinstances.c **** #if CH_DBG_FILL_THREADS == TRUE
 177:../../os/rt/src/chinstances.c ****     __thd_stackfill((uint8_t *)idle_descriptor.wbase,
 178:../../os/rt/src/chinstances.c ****                     (uint8_t *)idle_descriptor.wend);
 179:../../os/rt/src/chinstances.c **** #endif
 180:../../os/rt/src/chinstances.c **** 
 181:../../os/rt/src/chinstances.c ****     /* This thread has the lowest priority in the system, its role is just to
 182:../../os/rt/src/chinstances.c ****        serve interrupts in its context while keeping the lowest energy saving
 183:../../os/rt/src/chinstances.c ****        mode compatible with the system status.*/
 184:../../os/rt/src/chinstances.c ****     (void) chThdCreateI(&idle_descriptor);
 245               		.loc 1 184 0
 246 00d2 CE01      		movw r24,r28
 247 00d4 0196      		adiw r24,1
 248 00d6 0E94 0000 		call chThdCreateI
 249               	.LVL16:
 250               	/* epilogue start */
 251               	.LBE49:
 185:../../os/rt/src/chinstances.c ****   }
 186:../../os/rt/src/chinstances.c **** #endif
 187:../../os/rt/src/chinstances.c **** }
 252               		.loc 1 187 0
 253 00da 2B96      		adiw r28,11
 254 00dc 0FB6      		in __tmp_reg__,__SREG__
 255 00de F894      		cli
 256 00e0 DEBF      		out __SP_H__,r29
 257 00e2 0FBE      		out __SREG__,__tmp_reg__
 258 00e4 CDBF      		out __SP_L__,r28
 259 00e6 DF91      		pop r29
 260 00e8 CF91      		pop r28
 261 00ea 1F91      		pop r17
 262 00ec 0F91      		pop r16
 263               	.LVL17:
 264 00ee FF90      		pop r15
 265 00f0 DF90      		pop r13
 266 00f2 CF90      		pop r12
 267               	.LVL18:
 268 00f4 0895      		ret
 269               		.cfi_endproc
 270               	.LFE196:
 272               		.text
 273               	.Letext0:
 274               		.file 8 "/usr/lib/avr/include/stdint.h"
 275               		.file 9 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 276               		.file 10 "../../os/rt/include/chearly.h"
 277               		.file 11 "../../os/rt/include/chobjects.h"
 278               		.file 12 "../../os/rt/include/chtime.h"
 279               		.file 13 "../../os/common/ports/AVR/chcore.h"
 280               		.file 14 "../../os/rt/include/chsem.h"
 281               		.file 15 "../../os/rt/include/chmtx.h"
 282               		.file 16 "../../os/rt/include/chsys.h"
 283               		.file 17 "../../os/rt/include/chthreads.h"
 284               		.file 18 "../../os/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chinstances.c
     /tmp/ccKWfohQ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccKWfohQ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccKWfohQ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccKWfohQ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccKWfohQ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccKWfohQ.s:12     .text.__idle_thread:0000000000000000 __idle_thread
     /tmp/ccKWfohQ.s:33     .text.chInstanceObjectInit:0000000000000000 chInstanceObjectInit

UNDEFINED SYMBOLS
ch_system
__avr_in_isr
stGetCounter
ch_debug
__thd_object_init
chThdCreateI
__do_copy_data
