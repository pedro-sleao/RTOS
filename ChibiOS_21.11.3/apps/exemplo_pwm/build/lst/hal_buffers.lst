   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB243:
  15               		.file 1 "../../os/hal/src/hal_buffers.c"
   1:../../os/hal/src/hal_buffers.c **** /*
   2:../../os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/src/hal_buffers.c **** 
   4:../../os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:../../os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:../../os/hal/src/hal_buffers.c **** 
   8:../../os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/src/hal_buffers.c **** 
  10:../../os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:../../os/hal/src/hal_buffers.c ****     limitations under the License.
  15:../../os/hal/src/hal_buffers.c **** */
  16:../../os/hal/src/hal_buffers.c **** 
  17:../../os/hal/src/hal_buffers.c **** /**
  18:../../os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:../../os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:../../os/hal/src/hal_buffers.c ****  *
  21:../../os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:../../os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:../../os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:../../os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:../../os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:../../os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:../../os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:../../os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:../../os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:../../os/hal/src/hal_buffers.c ****  *            thread side and the reader is the ISR side.
  32:../../os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:../../os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:../../os/hal/src/hal_buffers.c ****  *            together.
  35:../../os/hal/src/hal_buffers.c ****  *          .
  36:../../os/hal/src/hal_buffers.c ****  * @{
  37:../../os/hal/src/hal_buffers.c ****  */
  38:../../os/hal/src/hal_buffers.c **** 
  39:../../os/hal/src/hal_buffers.c **** #include <string.h>
  40:../../os/hal/src/hal_buffers.c **** 
  41:../../os/hal/src/hal_buffers.c **** #include "hal.h"
  42:../../os/hal/src/hal_buffers.c **** 
  43:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:../../os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:../../os/hal/src/hal_buffers.c **** 
  47:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:../../os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:../../os/hal/src/hal_buffers.c **** 
  51:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:../../os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:../../os/hal/src/hal_buffers.c **** 
  55:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:../../os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:../../os/hal/src/hal_buffers.c **** 
  59:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:../../os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:../../os/hal/src/hal_buffers.c **** 
  63:../../os/hal/src/hal_buffers.c **** /**
  64:../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:../../os/hal/src/hal_buffers.c ****  *
  66:../../os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:../../os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:../../os/hal/src/hal_buffers.c ****  *
  74:../../os/hal/src/hal_buffers.c ****  * @init
  75:../../os/hal/src/hal_buffers.c ****  */
  76:../../os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c FC01      		movw r30,r24
  48               	.LVL1:
  49               	.LBB204:
  50               	.LBB205:
  51               	.LBB206:
  52               	.LBB207:
  53               	.LBB208:
  54               		.file 2 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
  55               		.loc 2 224 0
  56 000e 9183      		std Z+1,r25
  57 0010 8083      		st Z,r24
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
  58               		.loc 2 225 0
  59 0012 9383      		std Z+3,r25
  60 0014 8283      		std Z+2,r24
  61               	.LVL2:
  62               	.LBE208:
  63               	.LBE207:
  64               	.LBE206:
  65               	.LBE205:
  66               	.LBE204:
  78:../../os/hal/src/hal_buffers.c **** 
  79:../../os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:../../os/hal/src/hal_buffers.c **** 
  81:../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:../../os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  67               		.loc 1 82 0
  68 0016 6483      		std Z+4,r22
  83:../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  69               		.loc 1 83 0
  70 0018 1682      		std Z+6,__zero_reg__
  71 001a 1582      		std Z+5,__zero_reg__
  84:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  72               		.loc 1 84 0
  73 001c 5287      		std Z+10,r21
  74 001e 4187      		std Z+9,r20
  85:../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  75               		.loc 1 85 0
  76 0020 5087      		std Z+8,r21
  77 0022 4783      		std Z+7,r20
  86:../../os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  78               		.loc 1 86 0
  79 0024 2E5F      		subi r18,-2
  80 0026 3F4F      		sbci r19,-1
  81               	.LVL3:
  82 0028 209F      		mul r18,r16
  83 002a C001      		movw r24,r0
  84 002c 219F      		mul r18,r17
  85 002e 900D      		add r25,r0
  86 0030 309F      		mul r19,r16
  87 0032 900D      		add r25,r0
  88 0034 1124      		clr r1
  89               	.LVL4:
  90 0036 840F      		add r24,r20
  91 0038 951F      		adc r25,r21
  92 003a 9487      		std Z+12,r25
  93 003c 8387      		std Z+11,r24
  87:../../os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
  94               		.loc 1 87 0
  95 003e 3687      		std Z+14,r19
  96 0040 2587      		std Z+13,r18
  88:../../os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
  97               		.loc 1 88 0
  98 0042 108B      		std Z+16,r17
  99 0044 0787      		std Z+15,r16
  89:../../os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
 100               		.loc 1 89 0
 101 0046 528B      		std Z+18,r21
 102 0048 418B      		std Z+17,r20
  90:../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 103               		.loc 1 90 0
 104 004a 148A      		std Z+20,__zero_reg__
 105 004c 138A      		std Z+19,__zero_reg__
  91:../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 106               		.loc 1 91 0
 107 004e 168A      		std Z+22,__zero_reg__
 108 0050 158A      		std Z+21,__zero_reg__
  92:../../os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
 109               		.loc 1 92 0
 110 0052 F08E      		std Z+24,r15
 111 0054 E78A      		std Z+23,r14
  93:../../os/hal/src/hal_buffers.c ****   ibqp->link      = link;
 112               		.loc 1 93 0
 113 0056 D28E      		std Z+26,r13
 114 0058 C18E      		std Z+25,r12
 115               	/* epilogue start */
  94:../../os/hal/src/hal_buffers.c **** }
 116               		.loc 1 94 0
 117 005a 1F91      		pop r17
 118 005c 0F91      		pop r16
 119               	.LVL5:
 120 005e FF90      		pop r15
 121 0060 EF90      		pop r14
 122               	.LVL6:
 123 0062 DF90      		pop r13
 124 0064 CF90      		pop r12
 125               	.LVL7:
 126 0066 0895      		ret
 127               		.cfi_endproc
 128               	.LFE243:
 130               		.section	.text.ibqResetI,"ax",@progbits
 131               	.global	ibqResetI
 133               	ibqResetI:
 134               	.LFB244:
  95:../../os/hal/src/hal_buffers.c **** 
  96:../../os/hal/src/hal_buffers.c **** /**
  97:../../os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:../../os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:../../os/hal/src/hal_buffers.c ****  *
 103:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:../../os/hal/src/hal_buffers.c ****  *
 105:../../os/hal/src/hal_buffers.c ****  * @iclass
 106:../../os/hal/src/hal_buffers.c ****  */
 107:../../os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 135               		.loc 1 107 0
 136               		.cfi_startproc
 137               	.LVL8:
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 0 */
 141               	.L__stack_usage = 0
 142 0000 FC01      		movw r30,r24
 108:../../os/hal/src/hal_buffers.c **** 
 109:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:../../os/hal/src/hal_buffers.c **** 
 111:../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 143               		.loc 1 111 0
 144 0002 1682      		std Z+6,__zero_reg__
 145 0004 1582      		std Z+5,__zero_reg__
 112:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 146               		.loc 1 112 0
 147 0006 8189      		ldd r24,Z+17
 148 0008 9289      		ldd r25,Z+18
 149               	.LVL9:
 150 000a 9287      		std Z+10,r25
 151 000c 8187      		std Z+9,r24
 113:../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 152               		.loc 1 113 0
 153 000e 9087      		std Z+8,r25
 154 0010 8783      		std Z+7,r24
 114:../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 155               		.loc 1 114 0
 156 0012 148A      		std Z+20,__zero_reg__
 157 0014 138A      		std Z+19,__zero_reg__
 115:../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 158               		.loc 1 115 0
 159 0016 168A      		std Z+22,__zero_reg__
 160 0018 158A      		std Z+21,__zero_reg__
 161               	.LVL10:
 162               	.LBB209:
 163               	.LBB210:
 164               		.file 3 "../../os/hal/osal/rt-nil/osal.h"
   1:../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/osal.h **** 
   4:../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/osal.h **** 
   8:../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/osal.h **** 
  10:../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/osal.h **** */
  16:../../os/hal/osal/rt-nil/osal.h **** 
  17:../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../os/hal/osal/rt-nil/osal.h **** 
  25:../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../os/hal/osal/rt-nil/osal.h **** 
  28:../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../os/hal/osal/rt-nil/osal.h **** 
  32:../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../os/hal/osal/rt-nil/osal.h **** 
  34:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/osal.h **** 
  38:../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../os/hal/osal/rt-nil/osal.h **** 
  46:../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../os/hal/osal/rt-nil/osal.h **** 
  50:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../os/hal/osal/rt-nil/osal.h **** 
  54:../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../os/hal/osal/rt-nil/osal.h **** 
  65:../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../os/hal/osal/rt-nil/osal.h **** 
  75:../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../os/hal/osal/rt-nil/osal.h **** 
  84:../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../os/hal/osal/rt-nil/osal.h **** 
  93:../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../os/hal/osal/rt-nil/osal.h **** 
  98:../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../os/hal/osal/rt-nil/osal.h **** 
 108:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../os/hal/osal/rt-nil/osal.h **** 
 112:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../os/hal/osal/rt-nil/osal.h **** 
 116:../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../os/hal/osal/rt-nil/osal.h **** 
 122:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../os/hal/osal/rt-nil/osal.h **** 
 127:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../os/hal/osal/rt-nil/osal.h **** 
 131:../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../os/hal/osal/rt-nil/osal.h **** 
 138:../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../os/hal/osal/rt-nil/osal.h **** 
 145:../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../os/hal/osal/rt-nil/osal.h **** 
 152:../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../os/hal/osal/rt-nil/osal.h **** 
 159:../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../os/hal/osal/rt-nil/osal.h **** 
 168:../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../os/hal/osal/rt-nil/osal.h **** 
 175:../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../os/hal/osal/rt-nil/osal.h **** 
 182:../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../os/hal/osal/rt-nil/osal.h **** 
 189:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../os/hal/osal/rt-nil/osal.h **** 
 200:../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../os/hal/osal/rt-nil/osal.h **** 
 207:../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../os/hal/osal/rt-nil/osal.h **** };
 220:../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../os/hal/osal/rt-nil/osal.h **** 
 222:../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../os/hal/osal/rt-nil/osal.h **** 
 234:../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../os/hal/osal/rt-nil/osal.h **** 
 247:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../os/hal/osal/rt-nil/osal.h **** 
 251:../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../os/hal/osal/rt-nil/osal.h **** 
 271:../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../os/hal/osal/rt-nil/osal.h **** 
 283:../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../os/hal/osal/rt-nil/osal.h **** 
 289:../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../os/hal/osal/rt-nil/osal.h **** 
 296:../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../os/hal/osal/rt-nil/osal.h **** 
 305:../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../os/hal/osal/rt-nil/osal.h **** 
 311:../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../os/hal/osal/rt-nil/osal.h **** 
 317:../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../os/hal/osal/rt-nil/osal.h **** 
 326:../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../os/hal/osal/rt-nil/osal.h **** 
 345:../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../os/hal/osal/rt-nil/osal.h **** 
 360:../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../os/hal/osal/rt-nil/osal.h **** 
 375:../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../os/hal/osal/rt-nil/osal.h **** 
 390:../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../os/hal/osal/rt-nil/osal.h **** 
 405:../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../os/hal/osal/rt-nil/osal.h **** 
 421:../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../os/hal/osal/rt-nil/osal.h **** 
 438:../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../os/hal/osal/rt-nil/osal.h **** 
 452:../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../os/hal/osal/rt-nil/osal.h **** 
 467:../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../os/hal/osal/rt-nil/osal.h **** 
 483:../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../os/hal/osal/rt-nil/osal.h **** 
 496:../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../os/hal/osal/rt-nil/osal.h **** 
 510:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../os/hal/osal/rt-nil/osal.h **** 
 514:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../os/hal/osal/rt-nil/osal.h **** 
 518:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../os/hal/osal/rt-nil/osal.h **** }
 520:../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../os/hal/osal/rt-nil/osal.h **** 
 522:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../os/hal/osal/rt-nil/osal.h **** 
 526:../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../os/hal/osal/rt-nil/osal.h **** 
 533:../../os/hal/osal/rt-nil/osal.h **** }
 534:../../os/hal/osal/rt-nil/osal.h **** 
 535:../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../os/hal/osal/rt-nil/osal.h **** 
 544:../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../os/hal/osal/rt-nil/osal.h **** }
 546:../../os/hal/osal/rt-nil/osal.h **** 
 547:../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../os/hal/osal/rt-nil/osal.h **** 
 554:../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../os/hal/osal/rt-nil/osal.h **** }
 556:../../os/hal/osal/rt-nil/osal.h **** 
 557:../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../os/hal/osal/rt-nil/osal.h **** 
 564:../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../os/hal/osal/rt-nil/osal.h **** }
 566:../../os/hal/osal/rt-nil/osal.h **** 
 567:../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../os/hal/osal/rt-nil/osal.h **** 
 575:../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../os/hal/osal/rt-nil/osal.h **** }
 577:../../os/hal/osal/rt-nil/osal.h **** 
 578:../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../os/hal/osal/rt-nil/osal.h **** 
 586:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../os/hal/osal/rt-nil/osal.h **** }
 588:../../os/hal/osal/rt-nil/osal.h **** 
 589:../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../os/hal/osal/rt-nil/osal.h **** 
 597:../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../os/hal/osal/rt-nil/osal.h **** }
 599:../../os/hal/osal/rt-nil/osal.h **** 
 600:../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../os/hal/osal/rt-nil/osal.h **** 
 608:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../os/hal/osal/rt-nil/osal.h **** }
 610:../../os/hal/osal/rt-nil/osal.h **** 
 611:../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../os/hal/osal/rt-nil/osal.h **** 
 626:../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../os/hal/osal/rt-nil/osal.h **** }
 628:../../os/hal/osal/rt-nil/osal.h **** 
 629:../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../os/hal/osal/rt-nil/osal.h **** 
 640:../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../os/hal/osal/rt-nil/osal.h **** }
 642:../../os/hal/osal/rt-nil/osal.h **** 
 643:../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../os/hal/osal/rt-nil/osal.h **** 
 655:../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../os/hal/osal/rt-nil/osal.h **** }
 657:../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../os/hal/osal/rt-nil/osal.h **** 
 659:../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../os/hal/osal/rt-nil/osal.h **** 
 667:../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../os/hal/osal/rt-nil/osal.h **** }
 669:../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../os/hal/osal/rt-nil/osal.h **** 
 671:../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../os/hal/osal/rt-nil/osal.h **** 
 682:../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../os/hal/osal/rt-nil/osal.h **** }
 684:../../os/hal/osal/rt-nil/osal.h **** 
 685:../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../os/hal/osal/rt-nil/osal.h **** 
 700:../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../os/hal/osal/rt-nil/osal.h **** }
 702:../../os/hal/osal/rt-nil/osal.h **** 
 703:../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../os/hal/osal/rt-nil/osal.h **** 
 715:../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../os/hal/osal/rt-nil/osal.h **** }
 717:../../os/hal/osal/rt-nil/osal.h **** 
 718:../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../os/hal/osal/rt-nil/osal.h **** 
 729:../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../os/hal/osal/rt-nil/osal.h **** }
 731:../../os/hal/osal/rt-nil/osal.h **** 
 732:../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../os/hal/osal/rt-nil/osal.h **** 
 750:../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../os/hal/osal/rt-nil/osal.h **** }
 752:../../os/hal/osal/rt-nil/osal.h **** 
 753:../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../os/hal/osal/rt-nil/osal.h **** 
 767:../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../os/hal/osal/rt-nil/osal.h **** }
 769:../../os/hal/osal/rt-nil/osal.h **** 
 770:../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../os/hal/osal/rt-nil/osal.h **** 
 784:../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../os/hal/osal/rt-nil/osal.h **** }
 786:../../os/hal/osal/rt-nil/osal.h **** 
 787:../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../os/hal/osal/rt-nil/osal.h **** 
 799:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../os/hal/osal/rt-nil/osal.h **** }
 801:../../os/hal/osal/rt-nil/osal.h **** 
 802:../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../os/hal/osal/rt-nil/osal.h **** 
 824:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../os/hal/osal/rt-nil/osal.h **** }
 826:../../os/hal/osal/rt-nil/osal.h **** 
 827:../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../os/hal/osal/rt-nil/osal.h **** 
 839:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../os/hal/osal/rt-nil/osal.h **** }
 841:../../os/hal/osal/rt-nil/osal.h **** 
 842:../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../os/hal/osal/rt-nil/osal.h **** 
 854:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../os/hal/osal/rt-nil/osal.h **** }
 856:../../os/hal/osal/rt-nil/osal.h **** 
 857:../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../os/hal/osal/rt-nil/osal.h **** 
 866:../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
 867:../../os/hal/osal/rt-nil/osal.h **** }
 868:../../os/hal/osal/rt-nil/osal.h **** 
 869:../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../os/hal/osal/rt-nil/osal.h **** 
 895:../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../os/hal/osal/rt-nil/osal.h **** }
 897:../../os/hal/osal/rt-nil/osal.h **** 
 898:../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../os/hal/osal/rt-nil/osal.h **** 
 908:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../os/hal/osal/rt-nil/osal.h **** }
 910:../../os/hal/osal/rt-nil/osal.h **** 
 911:../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../os/hal/osal/rt-nil/osal.h **** 
 921:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 165               		.loc 3 921 0
 166 001a 6EEF      		ldi r22,lo8(-2)
 167 001c 7FEF      		ldi r23,lo8(-1)
 168 001e CF01      		movw r24,r30
 169 0020 0C94 0000 		jmp chThdDequeueAllI
 170               	.LVL11:
 171               	.LBE210:
 172               	.LBE209:
 173               		.cfi_endproc
 174               	.LFE244:
 176               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 177               	.global	ibqGetEmptyBufferI
 179               	ibqGetEmptyBufferI:
 180               	.LFB245:
 116:../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:../../os/hal/src/hal_buffers.c **** }
 118:../../os/hal/src/hal_buffers.c **** 
 119:../../os/hal/src/hal_buffers.c **** /**
 120:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:../../os/hal/src/hal_buffers.c ****  *
 123:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:../../os/hal/src/hal_buffers.c ****  *
 127:../../os/hal/src/hal_buffers.c ****  * @iclass
 128:../../os/hal/src/hal_buffers.c ****  */
 129:../../os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 181               		.loc 1 129 0
 182               		.cfi_startproc
 183               	.LVL12:
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 0 */
 187               	.L__stack_usage = 0
 188 0000 FC01      		movw r30,r24
 130:../../os/hal/src/hal_buffers.c **** 
 131:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:../../os/hal/src/hal_buffers.c **** 
 133:../../os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 189               		.loc 1 133 0
 190 0002 2781      		ldd r18,Z+7
 191 0004 3085      		ldd r19,Z+8
 192 0006 8185      		ldd r24,Z+9
 193 0008 9285      		ldd r25,Z+10
 194               	.LVL13:
 195 000a 2817      		cp r18,r24
 196 000c 3907      		cpc r19,r25
 197 000e 01F0      		breq .L10
 198               	.L5:
 134:../../os/hal/src/hal_buffers.c ****     return NULL;
 135:../../os/hal/src/hal_buffers.c ****   }
 136:../../os/hal/src/hal_buffers.c **** 
 137:../../os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 199               		.loc 1 137 0
 200 0010 C901      		movw r24,r18
 201 0012 0296      		adiw r24,2
 202               	/* epilogue start */
 138:../../os/hal/src/hal_buffers.c **** }
 203               		.loc 1 138 0
 204 0014 0895      		ret
 205               	.L10:
 133:../../os/hal/src/hal_buffers.c ****     return NULL;
 206               		.loc 1 133 0 discriminator 1
 207 0016 8581      		ldd r24,Z+5
 208 0018 9681      		ldd r25,Z+6
 209 001a 892B      		or r24,r25
 210 001c 01F0      		breq .L5
 134:../../os/hal/src/hal_buffers.c ****     return NULL;
 211               		.loc 1 134 0
 212 001e 90E0      		ldi r25,0
 213 0020 80E0      		ldi r24,0
 214 0022 0895      		ret
 215               		.cfi_endproc
 216               	.LFE245:
 218               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 219               	.global	ibqPostFullBufferI
 221               	ibqPostFullBufferI:
 222               	.LFB246:
 139:../../os/hal/src/hal_buffers.c **** 
 140:../../os/hal/src/hal_buffers.c **** /**
 141:../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:../../os/hal/src/hal_buffers.c ****  *
 143:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:../../os/hal/src/hal_buffers.c ****  *
 146:../../os/hal/src/hal_buffers.c ****  * @iclass
 147:../../os/hal/src/hal_buffers.c ****  */
 148:../../os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 223               		.loc 1 148 0
 224               		.cfi_startproc
 225               	.LVL14:
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
 230 0000 FC01      		movw r30,r24
 149:../../os/hal/src/hal_buffers.c **** 
 150:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:../../os/hal/src/hal_buffers.c **** 
 152:../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:../../os/hal/src/hal_buffers.c **** 
 155:../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:../../os/hal/src/hal_buffers.c ****   *((size_t *)(void *)ibqp->bwrptr) = size;
 231               		.loc 1 156 0
 232 0002 A781      		ldd r26,Z+7
 233 0004 B085      		ldd r27,Z+8
 234 0006 1196      		adiw r26,1
 235 0008 7C93      		st X,r23
 236 000a 6E93      		st -X,r22
 157:../../os/hal/src/hal_buffers.c **** 
 158:../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:../../os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 237               		.loc 1 159 0
 238 000c 8581      		ldd r24,Z+5
 239 000e 9681      		ldd r25,Z+6
 240               	.LVL15:
 241 0010 0196      		adiw r24,1
 242 0012 9683      		std Z+6,r25
 243 0014 8583      		std Z+5,r24
 160:../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 244               		.loc 1 160 0
 245 0016 8585      		ldd r24,Z+13
 246 0018 9685      		ldd r25,Z+14
 247 001a 8A0F      		add r24,r26
 248 001c 9B1F      		adc r25,r27
 249 001e 9087      		std Z+8,r25
 250 0020 8783      		std Z+7,r24
 161:../../os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 251               		.loc 1 161 0
 252 0022 2385      		ldd r18,Z+11
 253 0024 3485      		ldd r19,Z+12
 254 0026 8217      		cp r24,r18
 255 0028 9307      		cpc r25,r19
 256 002a 00F0      		brlo .L12
 162:../../os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 257               		.loc 1 162 0
 258 002c 8189      		ldd r24,Z+17
 259 002e 9289      		ldd r25,Z+18
 260 0030 9087      		std Z+8,r25
 261 0032 8783      		std Z+7,r24
 262               	.L12:
 263               	.LVL16:
 264               	.LBB211:
 265               	.LBB212:
 908:../../os/hal/osal/rt-nil/osal.h **** }
 266               		.loc 3 908 0
 267 0034 70E0      		ldi r23,0
 268 0036 60E0      		ldi r22,0
 269               	.LVL17:
 270 0038 CF01      		movw r24,r30
 271 003a 0C94 0000 		jmp chThdDequeueNextI
 272               	.LVL18:
 273               	.LBE212:
 274               	.LBE211:
 275               		.cfi_endproc
 276               	.LFE246:
 278               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 279               	.global	ibqGetFullBufferTimeoutS
 281               	ibqGetFullBufferTimeoutS:
 282               	.LFB248:
 163:../../os/hal/src/hal_buffers.c ****   }
 164:../../os/hal/src/hal_buffers.c **** 
 165:../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:../../os/hal/src/hal_buffers.c **** }
 168:../../os/hal/src/hal_buffers.c **** 
 169:../../os/hal/src/hal_buffers.c **** /**
 170:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:../../os/hal/src/hal_buffers.c ****  *          is empty.
 175:../../os/hal/src/hal_buffers.c ****  *
 176:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:../../os/hal/src/hal_buffers.c ****  *                      .
 182:../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 183:../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 184:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 185:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 186:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 187:../../os/hal/src/hal_buffers.c ****  *
 188:../../os/hal/src/hal_buffers.c ****  * @api
 189:../../os/hal/src/hal_buffers.c ****  */
 190:../../os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 191:../../os/hal/src/hal_buffers.c ****                               sysinterval_t timeout) {
 192:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 193:../../os/hal/src/hal_buffers.c **** 
 194:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 195:../../os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 196:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 197:../../os/hal/src/hal_buffers.c **** 
 198:../../os/hal/src/hal_buffers.c ****   return msg;
 199:../../os/hal/src/hal_buffers.c **** }
 200:../../os/hal/src/hal_buffers.c **** 
 201:../../os/hal/src/hal_buffers.c ****   /**
 202:../../os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 203:../../os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 204:../../os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 205:../../os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 206:../../os/hal/src/hal_buffers.c ****    *          is empty.
 207:../../os/hal/src/hal_buffers.c ****    *
 208:../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 209:../../os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 210:../../os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 211:../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 212:../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 213:../../os/hal/src/hal_buffers.c ****    *                      .
 214:../../os/hal/src/hal_buffers.c ****    * @return              The operation status.
 215:../../os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 216:../../os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 217:../../os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 218:../../os/hal/src/hal_buffers.c ****    *                      suspended state.
 219:../../os/hal/src/hal_buffers.c ****    *
 220:../../os/hal/src/hal_buffers.c ****    * @sclass
 221:../../os/hal/src/hal_buffers.c ****    */
 222:../../os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 223:../../os/hal/src/hal_buffers.c ****                                  sysinterval_t timeout) {
 283               		.loc 1 223 0
 284               		.cfi_startproc
 285               	.LVL19:
 286 0000 0F93      		push r16
 287               	.LCFI6:
 288               		.cfi_def_cfa_offset 3
 289               		.cfi_offset 16, -2
 290 0002 1F93      		push r17
 291               	.LCFI7:
 292               		.cfi_def_cfa_offset 4
 293               		.cfi_offset 17, -3
 294 0004 CF93      		push r28
 295               	.LCFI8:
 296               		.cfi_def_cfa_offset 5
 297               		.cfi_offset 28, -4
 298 0006 DF93      		push r29
 299               	.LCFI9:
 300               		.cfi_def_cfa_offset 6
 301               		.cfi_offset 29, -5
 302               	/* prologue: function */
 303               	/* frame size = 0 */
 304               	/* stack size = 4 */
 305               	.L__stack_usage = 4
 306 0008 EC01      		movw r28,r24
 307 000a 8B01      		movw r16,r22
 224:../../os/hal/src/hal_buffers.c **** 
 225:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 226:../../os/hal/src/hal_buffers.c **** 
 227:../../os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 308               		.loc 1 227 0
 309 000c 00C0      		rjmp .L14
 310               	.LVL20:
 311               	.L16:
 312               	.LBB221:
 228:../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 313               		.loc 1 228 0
 314 000e 8C81      		ldd r24,Y+4
 315 0010 8111      		cpse r24,__zero_reg__
 316 0012 00C0      		rjmp .L17
 317               	.LVL21:
 318               	.LBB222:
 319               	.LBB223:
 895:../../os/hal/osal/rt-nil/osal.h **** }
 320               		.loc 3 895 0
 321 0014 B801      		movw r22,r16
 322 0016 CE01      		movw r24,r28
 323 0018 0E94 0000 		call chThdEnqueueTimeoutS
 324               	.LVL22:
 325               	.LBE223:
 326               	.LBE222:
 229:../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 230:../../os/hal/src/hal_buffers.c ****     }
 231:../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 232:../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 327               		.loc 1 232 0
 328 001c 97FD      		sbrc r25,7
 329 001e 00C0      		rjmp .L13
 330               	.L14:
 331               	.LBE221:
 227:../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 332               		.loc 1 227 0
 333 0020 8D81      		ldd r24,Y+5
 334 0022 9E81      		ldd r25,Y+6
 335 0024 892B      		or r24,r25
 336 0026 01F0      		breq .L16
 337               	.LVL23:
 338               	.LBB224:
 339               	.LBB225:
 233:../../os/hal/src/hal_buffers.c ****        return msg;
 234:../../os/hal/src/hal_buffers.c ****     }
 235:../../os/hal/src/hal_buffers.c ****   }
 236:../../os/hal/src/hal_buffers.c **** 
 237:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 238:../../os/hal/src/hal_buffers.c **** 
 239:../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 240:../../os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 340               		.loc 1 240 0
 341 0028 E985      		ldd r30,Y+9
 342 002a FA85      		ldd r31,Y+10
 343 002c CF01      		movw r24,r30
 344 002e 0296      		adiw r24,2
 345 0030 9C8B      		std Y+20,r25
 346 0032 8B8B      		std Y+19,r24
 241:../../os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 347               		.loc 1 241 0
 348 0034 2081      		ld r18,Z
 349 0036 3181      		ldd r19,Z+1
 350 0038 820F      		add r24,r18
 351 003a 931F      		adc r25,r19
 352 003c 9E8B      		std Y+22,r25
 353 003e 8D8B      		std Y+21,r24
 354               	.LVL24:
 355 0040 90E0      		ldi r25,0
 356 0042 80E0      		ldi r24,0
 357               	.L13:
 358               	/* epilogue start */
 359               	.LBE225:
 360               	.LBE224:
 242:../../os/hal/src/hal_buffers.c **** 
 243:../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 244:../../os/hal/src/hal_buffers.c **** }
 361               		.loc 1 244 0
 362 0044 DF91      		pop r29
 363 0046 CF91      		pop r28
 364               	.LVL25:
 365 0048 1F91      		pop r17
 366 004a 0F91      		pop r16
 367               	.LVL26:
 368 004c 0895      		ret
 369               	.LVL27:
 370               	.L17:
 371               	.LBB226:
 229:../../os/hal/src/hal_buffers.c ****     }
 372               		.loc 1 229 0
 373 004e 8EEF      		ldi r24,lo8(-2)
 374 0050 9FEF      		ldi r25,lo8(-1)
 375               	/* epilogue start */
 376               	.LBE226:
 377               		.loc 1 244 0
 378 0052 DF91      		pop r29
 379 0054 CF91      		pop r28
 380               	.LVL28:
 381 0056 1F91      		pop r17
 382 0058 0F91      		pop r16
 383               	.LVL29:
 384 005a 0895      		ret
 385               		.cfi_endproc
 386               	.LFE248:
 388               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 389               	.global	ibqGetFullBufferTimeout
 391               	ibqGetFullBufferTimeout:
 392               	.LFB247:
 191:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 393               		.loc 1 191 0
 394               		.cfi_startproc
 395               	.LVL30:
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 0 */
 399               	.L__stack_usage = 0
 400               	.LBB227:
 401               	.LBB228:
 402               	.LBB229:
 403               	.LBB230:
 404               		.file 4 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 405               		.loc 4 430 0
 406               	/* #APP */
 407               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 408 0000 F894      		cli
 409               	 ;  0 "" 2
 410               	/* #NOAPP */
 411               	.LBE230:
 412               	.LBE229:
 413               	.LBE228:
 414               	.LBE227:
 195:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 415               		.loc 1 195 0
 416 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 417               	.LVL31:
 418               	.LBB231:
 419               	.LBB232:
 420               	.LBB233:
 421               	.LBB234:
 422               	.LBB235:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 423               		.loc 4 440 0
 424               	/* #APP */
 425               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 426 0006 7894      		sei
 427               	 ;  0 "" 2
 428               	/* epilogue start */
 429               	/* #NOAPP */
 430               	.LBE235:
 431               	.LBE234:
 432               	.LBE233:
 433               	.LBE232:
 434               	.LBE231:
 199:../../os/hal/src/hal_buffers.c **** 
 435               		.loc 1 199 0
 436 0008 0895      		ret
 437               		.cfi_endproc
 438               	.LFE247:
 440               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 441               	.global	ibqReleaseEmptyBuffer
 443               	ibqReleaseEmptyBuffer:
 444               	.LFB249:
 245:../../os/hal/src/hal_buffers.c **** 
 246:../../os/hal/src/hal_buffers.c **** /**
 247:../../os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 248:../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 249:../../os/hal/src/hal_buffers.c ****  *
 250:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 251:../../os/hal/src/hal_buffers.c ****  *
 252:../../os/hal/src/hal_buffers.c ****  * @api
 253:../../os/hal/src/hal_buffers.c ****  */
 254:../../os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 445               		.loc 1 254 0
 446               		.cfi_startproc
 447               	.LVL32:
 448               	/* prologue: function */
 449               	/* frame size = 0 */
 450               	/* stack size = 0 */
 451               	.L__stack_usage = 0
 452 0000 DC01      		movw r26,r24
 453               	.LBB236:
 454               	.LBB237:
 455               	.LBB238:
 456               	.LBB239:
 430:../../os/common/ports/AVR/chcore.h **** }
 457               		.loc 4 430 0
 458               	/* #APP */
 459               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 460 0002 F894      		cli
 461               	 ;  0 "" 2
 462               	.LVL33:
 463               	/* #NOAPP */
 464               	.LBE239:
 465               	.LBE238:
 466               	.LBE237:
 467               	.LBE236:
 468               	.LBB240:
 469               	.LBB241:
 255:../../os/hal/src/hal_buffers.c **** 
 256:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 257:../../os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 258:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 259:../../os/hal/src/hal_buffers.c **** }
 260:../../os/hal/src/hal_buffers.c **** 
 261:../../os/hal/src/hal_buffers.c ****   /**
 262:../../os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 263:../../os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 264:../../os/hal/src/hal_buffers.c ****    *
 265:../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 266:../../os/hal/src/hal_buffers.c ****    *
 267:../../os/hal/src/hal_buffers.c ****    * @sclass
 268:../../os/hal/src/hal_buffers.c ****    */
 269:../../os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 270:../../os/hal/src/hal_buffers.c **** 
 271:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 272:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 273:../../os/hal/src/hal_buffers.c **** 
 274:../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 275:../../os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 470               		.loc 1 275 0
 471 0004 1596      		adiw r26,5
 472 0006 8D91      		ld r24,X+
 473 0008 9C91      		ld r25,X
 474 000a 1697      		sbiw r26,5+1
 475               	.LVL34:
 476 000c 0197      		sbiw r24,1
 477 000e 1696      		adiw r26,5+1
 478 0010 9C93      		st X,r25
 479 0012 8E93      		st -X,r24
 480 0014 1597      		sbiw r26,5
 276:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 481               		.loc 1 276 0
 482 0016 1996      		adiw r26,9
 483 0018 8D91      		ld r24,X+
 484 001a 9C91      		ld r25,X
 485 001c 1A97      		sbiw r26,9+1
 486 001e 1D96      		adiw r26,13
 487 0020 2D91      		ld r18,X+
 488 0022 3C91      		ld r19,X
 489 0024 1E97      		sbiw r26,13+1
 490 0026 820F      		add r24,r18
 491 0028 931F      		adc r25,r19
 492 002a 1A96      		adiw r26,9+1
 493 002c 9C93      		st X,r25
 494 002e 8E93      		st -X,r24
 495 0030 1997      		sbiw r26,9
 277:../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 496               		.loc 1 277 0
 497 0032 1B96      		adiw r26,11
 498 0034 2D91      		ld r18,X+
 499 0036 3C91      		ld r19,X
 500 0038 1C97      		sbiw r26,11+1
 501 003a 8217      		cp r24,r18
 502 003c 9307      		cpc r25,r19
 503 003e 00F0      		brlo .L20
 278:../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 504               		.loc 1 278 0
 505 0040 5196      		adiw r26,17
 506 0042 8D91      		ld r24,X+
 507 0044 9C91      		ld r25,X
 508 0046 5297      		sbiw r26,17+1
 509 0048 1A96      		adiw r26,9+1
 510 004a 9C93      		st X,r25
 511 004c 8E93      		st -X,r24
 512 004e 1997      		sbiw r26,9
 513               	.L20:
 279:../../os/hal/src/hal_buffers.c ****   }
 280:../../os/hal/src/hal_buffers.c **** 
 281:../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 282:../../os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 514               		.loc 1 282 0
 515 0050 5496      		adiw r26,19+1
 516 0052 1C92      		st X,__zero_reg__
 517 0054 1E92      		st -X,__zero_reg__
 518 0056 5397      		sbiw r26,19
 283:../../os/hal/src/hal_buffers.c **** 
 284:../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 285:../../os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 519               		.loc 1 285 0
 520 0058 5796      		adiw r26,23
 521 005a ED91      		ld r30,X+
 522 005c FC91      		ld r31,X
 523 005e 5897      		sbiw r26,23+1
 524 0060 3097      		sbiw r30,0
 525 0062 01F0      		breq .L21
 526 0064 CD01      		movw r24,r26
 286:../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 527               		.loc 1 286 0
 528 0066 0995      		icall
 529               	.LVL35:
 530               	.L21:
 531               	.LBE241:
 532               	.LBE240:
 533               	.LBB242:
 534               	.LBB243:
 535               	.LBB244:
 536               	.LBB245:
 537               	.LBB246:
 538               		.loc 4 440 0
 539               	/* #APP */
 540               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 541 0068 7894      		sei
 542               	 ;  0 "" 2
 543               	/* epilogue start */
 544               	/* #NOAPP */
 545               	.LBE246:
 546               	.LBE245:
 547               	.LBE244:
 548               	.LBE243:
 549               	.LBE242:
 259:../../os/hal/src/hal_buffers.c **** 
 550               		.loc 1 259 0
 551 006a 0895      		ret
 552               		.cfi_endproc
 553               	.LFE249:
 555               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 556               	.global	ibqReleaseEmptyBufferS
 558               	ibqReleaseEmptyBufferS:
 559               	.LFB250:
 269:../../os/hal/src/hal_buffers.c **** 
 560               		.loc 1 269 0
 561               		.cfi_startproc
 562               	.LVL36:
 563               	/* prologue: function */
 564               	/* frame size = 0 */
 565               	/* stack size = 0 */
 566               	.L__stack_usage = 0
 567 0000 DC01      		movw r26,r24
 275:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 568               		.loc 1 275 0
 569 0002 1596      		adiw r26,5
 570 0004 8D91      		ld r24,X+
 571 0006 9C91      		ld r25,X
 572 0008 1697      		sbiw r26,5+1
 573               	.LVL37:
 574 000a 0197      		sbiw r24,1
 575 000c 1696      		adiw r26,5+1
 576 000e 9C93      		st X,r25
 577 0010 8E93      		st -X,r24
 578 0012 1597      		sbiw r26,5
 276:../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 579               		.loc 1 276 0
 580 0014 1996      		adiw r26,9
 581 0016 8D91      		ld r24,X+
 582 0018 9C91      		ld r25,X
 583 001a 1A97      		sbiw r26,9+1
 584 001c 1D96      		adiw r26,13
 585 001e 2D91      		ld r18,X+
 586 0020 3C91      		ld r19,X
 587 0022 1E97      		sbiw r26,13+1
 588 0024 820F      		add r24,r18
 589 0026 931F      		adc r25,r19
 590 0028 1A96      		adiw r26,9+1
 591 002a 9C93      		st X,r25
 592 002c 8E93      		st -X,r24
 593 002e 1997      		sbiw r26,9
 277:../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 594               		.loc 1 277 0
 595 0030 1B96      		adiw r26,11
 596 0032 2D91      		ld r18,X+
 597 0034 3C91      		ld r19,X
 598 0036 1C97      		sbiw r26,11+1
 599 0038 8217      		cp r24,r18
 600 003a 9307      		cpc r25,r19
 601 003c 00F0      		brlo .L26
 278:../../os/hal/src/hal_buffers.c ****   }
 602               		.loc 1 278 0
 603 003e 5196      		adiw r26,17
 604 0040 8D91      		ld r24,X+
 605 0042 9C91      		ld r25,X
 606 0044 5297      		sbiw r26,17+1
 607 0046 1A96      		adiw r26,9+1
 608 0048 9C93      		st X,r25
 609 004a 8E93      		st -X,r24
 610 004c 1997      		sbiw r26,9
 611               	.L26:
 282:../../os/hal/src/hal_buffers.c **** 
 612               		.loc 1 282 0
 613 004e 5496      		adiw r26,19+1
 614 0050 1C92      		st X,__zero_reg__
 615 0052 1E92      		st -X,__zero_reg__
 616 0054 5397      		sbiw r26,19
 285:../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 617               		.loc 1 285 0
 618 0056 5796      		adiw r26,23
 619 0058 ED91      		ld r30,X+
 620 005a FC91      		ld r31,X
 621 005c 5897      		sbiw r26,23+1
 622 005e 3097      		sbiw r30,0
 623 0060 01F0      		breq .L25
 624               		.loc 1 286 0
 625 0062 CD01      		movw r24,r26
 626 0064 0994      		ijmp
 627               	.LVL38:
 628               	.L25:
 629               	/* epilogue start */
 287:../../os/hal/src/hal_buffers.c ****   }
 288:../../os/hal/src/hal_buffers.c **** }
 630               		.loc 1 288 0
 631 0066 0895      		ret
 632               		.cfi_endproc
 633               	.LFE250:
 635               		.section	.text.ibqGetTimeout,"ax",@progbits
 636               	.global	ibqGetTimeout
 638               	ibqGetTimeout:
 639               	.LFB251:
 289:../../os/hal/src/hal_buffers.c **** 
 290:../../os/hal/src/hal_buffers.c **** /**
 291:../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 292:../../os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 293:../../os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 294:../../os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 295:../../os/hal/src/hal_buffers.c ****  *
 296:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 297:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 298:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 299:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 300:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 301:../../os/hal/src/hal_buffers.c ****  *                      .
 302:../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 303:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 304:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 305:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 306:../../os/hal/src/hal_buffers.c ****  *
 307:../../os/hal/src/hal_buffers.c ****  * @api
 308:../../os/hal/src/hal_buffers.c ****  */
 309:../../os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 640               		.loc 1 309 0
 641               		.cfi_startproc
 642               	.LVL39:
 643 0000 0F93      		push r16
 644               	.LCFI10:
 645               		.cfi_def_cfa_offset 3
 646               		.cfi_offset 16, -2
 647 0002 1F93      		push r17
 648               	.LCFI11:
 649               		.cfi_def_cfa_offset 4
 650               		.cfi_offset 17, -3
 651 0004 CF93      		push r28
 652               	.LCFI12:
 653               		.cfi_def_cfa_offset 5
 654               		.cfi_offset 28, -4
 655 0006 DF93      		push r29
 656               	.LCFI13:
 657               		.cfi_def_cfa_offset 6
 658               		.cfi_offset 29, -5
 659               	/* prologue: function */
 660               	/* frame size = 0 */
 661               	/* stack size = 4 */
 662               	.L__stack_usage = 4
 663 0008 EC01      		movw r28,r24
 664               	.LBB247:
 665               	.LBB248:
 666               	.LBB249:
 667               	.LBB250:
 430:../../os/common/ports/AVR/chcore.h **** }
 668               		.loc 4 430 0
 669               	/* #APP */
 670               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 671 000a F894      		cli
 672               	 ;  0 "" 2
 673               	/* #NOAPP */
 674               	.LBE250:
 675               	.LBE249:
 676               	.LBE248:
 677               	.LBE247:
 310:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 311:../../os/hal/src/hal_buffers.c **** 
 312:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 313:../../os/hal/src/hal_buffers.c **** 
 314:../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 315:../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 678               		.loc 1 315 0
 679 000c EB89      		ldd r30,Y+19
 680 000e FC89      		ldd r31,Y+20
 681 0010 3097      		sbiw r30,0
 682 0012 01F0      		breq .L39
 683               	.LVL40:
 684               	.L29:
 316:../../os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 317:../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 318:../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 319:../../os/hal/src/hal_buffers.c ****       return msg;
 320:../../os/hal/src/hal_buffers.c ****     }
 321:../../os/hal/src/hal_buffers.c ****   }
 322:../../os/hal/src/hal_buffers.c **** 
 323:../../os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 324:../../os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 685               		.loc 1 324 0
 686 0014 0191      		ld r16,Z+
 687 0016 10E0      		ldi r17,0
 688               	.LVL41:
 325:../../os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 689               		.loc 1 325 0
 690 0018 FC8B      		std Y+20,r31
 691 001a EB8B      		std Y+19,r30
 326:../../os/hal/src/hal_buffers.c **** 
 327:../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 328:../../os/hal/src/hal_buffers.c ****      empty in the queue.*/
 329:../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 692               		.loc 1 329 0
 693 001c 8D89      		ldd r24,Y+21
 694 001e 9E89      		ldd r25,Y+22
 695 0020 E817      		cp r30,r24
 696 0022 F907      		cpc r31,r25
 697 0024 00F0      		brlo .L33
 698               	.LVL42:
 699               	.LBB251:
 700               	.LBB252:
 275:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 701               		.loc 1 275 0
 702 0026 8D81      		ldd r24,Y+5
 703 0028 9E81      		ldd r25,Y+6
 704 002a 0197      		sbiw r24,1
 705 002c 9E83      		std Y+6,r25
 706 002e 8D83      		std Y+5,r24
 276:../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 707               		.loc 1 276 0
 708 0030 8985      		ldd r24,Y+9
 709 0032 9A85      		ldd r25,Y+10
 710 0034 2D85      		ldd r18,Y+13
 711 0036 3E85      		ldd r19,Y+14
 712 0038 820F      		add r24,r18
 713 003a 931F      		adc r25,r19
 714 003c 9A87      		std Y+10,r25
 715 003e 8987      		std Y+9,r24
 277:../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 716               		.loc 1 277 0
 717 0040 2B85      		ldd r18,Y+11
 718 0042 3C85      		ldd r19,Y+12
 719 0044 8217      		cp r24,r18
 720 0046 9307      		cpc r25,r19
 721 0048 00F0      		brlo .L34
 278:../../os/hal/src/hal_buffers.c ****   }
 722               		.loc 1 278 0
 723 004a 8989      		ldd r24,Y+17
 724 004c 9A89      		ldd r25,Y+18
 725 004e 9A87      		std Y+10,r25
 726 0050 8987      		std Y+9,r24
 727               	.L34:
 282:../../os/hal/src/hal_buffers.c **** 
 728               		.loc 1 282 0
 729 0052 1C8A      		std Y+20,__zero_reg__
 730 0054 1B8A      		std Y+19,__zero_reg__
 285:../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 731               		.loc 1 285 0
 732 0056 EF89      		ldd r30,Y+23
 733 0058 F88D      		ldd r31,Y+24
 734 005a 3097      		sbiw r30,0
 735 005c 01F0      		breq .L33
 286:../../os/hal/src/hal_buffers.c ****   }
 736               		.loc 1 286 0
 737 005e CE01      		movw r24,r28
 738 0060 0995      		icall
 739               	.LVL43:
 740               	.L33:
 741               	.LBE252:
 742               	.LBE251:
 743               	.LBB253:
 744               	.LBB254:
 745               	.LBB255:
 746               	.LBB256:
 747               	.LBB257:
 748               		.loc 4 440 0
 749               	/* #APP */
 750               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 751 0062 7894      		sei
 752               	 ;  0 "" 2
 753               	/* #NOAPP */
 754               	.LBE257:
 755               	.LBE256:
 756               	.LBE255:
 757               	.LBE254:
 758               	.LBE253:
 330:../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 331:../../os/hal/src/hal_buffers.c ****   }
 332:../../os/hal/src/hal_buffers.c **** 
 333:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 334:../../os/hal/src/hal_buffers.c ****   return msg;
 335:../../os/hal/src/hal_buffers.c **** }
 759               		.loc 1 335 0
 760 0064 C801      		movw r24,r16
 761               	/* epilogue start */
 762 0066 DF91      		pop r29
 763 0068 CF91      		pop r28
 764               	.LVL44:
 765 006a 1F91      		pop r17
 766 006c 0F91      		pop r16
 767               	.LVL45:
 768 006e 0895      		ret
 769               	.LVL46:
 770               	.L39:
 316:../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 771               		.loc 1 316 0
 772 0070 0E94 0000 		call ibqGetFullBufferTimeoutS
 773               	.LVL47:
 774 0074 8C01      		movw r16,r24
 775               	.LVL48:
 317:../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 776               		.loc 1 317 0
 777 0076 892B      		or r24,r25
 778 0078 01F4      		brne .L33
 779 007a EB89      		ldd r30,Y+19
 780 007c FC89      		ldd r31,Y+20
 781 007e 00C0      		rjmp .L29
 782               		.cfi_endproc
 783               	.LFE251:
 785               		.section	.text.ibqReadTimeout,"ax",@progbits
 786               	.global	ibqReadTimeout
 788               	ibqReadTimeout:
 789               	.LFB252:
 336:../../os/hal/src/hal_buffers.c **** 
 337:../../os/hal/src/hal_buffers.c **** /**
 338:../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 339:../../os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 340:../../os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 341:../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 342:../../os/hal/src/hal_buffers.c ****  *          been reset.
 343:../../os/hal/src/hal_buffers.c ****  *
 344:../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 345:../../os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 346:../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 347:../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 348:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 349:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 350:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 351:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 352:../../os/hal/src/hal_buffers.c ****  *                      .
 353:../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 354:../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 355:../../os/hal/src/hal_buffers.c ****  *
 356:../../os/hal/src/hal_buffers.c ****  * @api
 357:../../os/hal/src/hal_buffers.c ****  */
 358:../../os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 359:../../os/hal/src/hal_buffers.c ****                       size_t n, sysinterval_t timeout) {
 790               		.loc 1 359 0
 791               		.cfi_startproc
 792               	.LVL49:
 793 0000 8F92      		push r8
 794               	.LCFI14:
 795               		.cfi_def_cfa_offset 3
 796               		.cfi_offset 8, -2
 797 0002 9F92      		push r9
 798               	.LCFI15:
 799               		.cfi_def_cfa_offset 4
 800               		.cfi_offset 9, -3
 801 0004 AF92      		push r10
 802               	.LCFI16:
 803               		.cfi_def_cfa_offset 5
 804               		.cfi_offset 10, -4
 805 0006 BF92      		push r11
 806               	.LCFI17:
 807               		.cfi_def_cfa_offset 6
 808               		.cfi_offset 11, -5
 809 0008 CF92      		push r12
 810               	.LCFI18:
 811               		.cfi_def_cfa_offset 7
 812               		.cfi_offset 12, -6
 813 000a DF92      		push r13
 814               	.LCFI19:
 815               		.cfi_def_cfa_offset 8
 816               		.cfi_offset 13, -7
 817 000c EF92      		push r14
 818               	.LCFI20:
 819               		.cfi_def_cfa_offset 9
 820               		.cfi_offset 14, -8
 821 000e FF92      		push r15
 822               	.LCFI21:
 823               		.cfi_def_cfa_offset 10
 824               		.cfi_offset 15, -9
 825 0010 0F93      		push r16
 826               	.LCFI22:
 827               		.cfi_def_cfa_offset 11
 828               		.cfi_offset 16, -10
 829 0012 1F93      		push r17
 830               	.LCFI23:
 831               		.cfi_def_cfa_offset 12
 832               		.cfi_offset 17, -11
 833 0014 CF93      		push r28
 834               	.LCFI24:
 835               		.cfi_def_cfa_offset 13
 836               		.cfi_offset 28, -12
 837 0016 DF93      		push r29
 838               	.LCFI25:
 839               		.cfi_def_cfa_offset 14
 840               		.cfi_offset 29, -13
 841               	/* prologue: function */
 842               	/* frame size = 0 */
 843               	/* stack size = 12 */
 844               	.L__stack_usage = 12
 845 0018 EC01      		movw r28,r24
 846 001a 6B01      		movw r12,r22
 847 001c 5A01      		movw r10,r20
 848 001e 4901      		movw r8,r18
 849               	.LVL50:
 850               	.LBB258:
 851               	.LBB259:
 852               	.LBB260:
 853               	.LBB261:
 430:../../os/common/ports/AVR/chcore.h **** }
 854               		.loc 4 430 0
 855               	/* #APP */
 856               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 857 0020 F894      		cli
 858               	 ;  0 "" 2
 859               	/* #NOAPP */
 860               	.LBE261:
 861               	.LBE260:
 862               	.LBE259:
 863               	.LBE258:
 360:../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 864               		.loc 1 360 0
 865 0022 F12C      		mov r15,__zero_reg__
 866 0024 E12C      		mov r14,__zero_reg__
 867 0026 00C0      		rjmp .L51
 868               	.LVL51:
 869               	.L56:
 870               	.LBB262:
 361:../../os/hal/src/hal_buffers.c **** 
 362:../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 363:../../os/hal/src/hal_buffers.c **** 
 364:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 365:../../os/hal/src/hal_buffers.c **** 
 366:../../os/hal/src/hal_buffers.c ****   while (true) {
 367:../../os/hal/src/hal_buffers.c ****     size_t size;
 368:../../os/hal/src/hal_buffers.c **** 
 369:../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 370:../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 371:../../os/hal/src/hal_buffers.c ****       msg_t msg;
 372:../../os/hal/src/hal_buffers.c **** 
 373:../../os/hal/src/hal_buffers.c ****       /* Getting a data buffer using the specified timeout.*/
 374:../../os/hal/src/hal_buffers.c ****       msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 375:../../os/hal/src/hal_buffers.c **** 
 376:../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 377:../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 378:../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 379:../../os/hal/src/hal_buffers.c ****         return r;
 380:../../os/hal/src/hal_buffers.c ****       }
 381:../../os/hal/src/hal_buffers.c ****     }
 382:../../os/hal/src/hal_buffers.c **** 
 383:../../os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 384:../../os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 385:../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 386:../../os/hal/src/hal_buffers.c ****       size = n - r;
 387:../../os/hal/src/hal_buffers.c ****     }
 388:../../os/hal/src/hal_buffers.c **** 
 389:../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 390:../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 391:../../os/hal/src/hal_buffers.c ****     if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 392:../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 393:../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 871               		.loc 1 393 0
 872 0028 80E4      		ldi r24,lo8(64)
 873 002a FB01      		movw r30,r22
 874 002c D601      		movw r26,r12
 875               		0:
 876 002e 0190      		ld r0,Z+
 877 0030 0D92      		st X+,r0
 878 0032 8A95      		dec r24
 879 0034 01F4      		brne 0b
 394:../../os/hal/src/hal_buffers.c ****       bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 880               		.loc 1 394 0
 881 0036 20E4      		ldi r18,64
 882 0038 C20E      		add r12,r18
 883 003a D11C      		adc r13,__zero_reg__
 884               	.LVL52:
 395:../../os/hal/src/hal_buffers.c ****       ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 885               		.loc 1 395 0
 886 003c 8B89      		ldd r24,Y+19
 887 003e 9C89      		ldd r25,Y+20
 888 0040 805C      		subi r24,-64
 889 0042 9F4F      		sbci r25,-1
 890 0044 9C8B      		std Y+20,r25
 891 0046 8B8B      		std Y+19,r24
 396:../../os/hal/src/hal_buffers.c ****       r         += (size_t)BUFFERS_CHUNKS_SIZE;
 892               		.loc 1 396 0
 893 0048 20E4      		ldi r18,64
 894 004a E20E      		add r14,r18
 895 004c F11C      		adc r15,__zero_reg__
 896               	.LVL53:
 897               	.L46:
 397:../../os/hal/src/hal_buffers.c ****     }
 398:../../os/hal/src/hal_buffers.c ****     else {
 399:../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 400:../../os/hal/src/hal_buffers.c ****       bp        += size;
 401:../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 402:../../os/hal/src/hal_buffers.c ****       r         += size;
 403:../../os/hal/src/hal_buffers.c ****     }
 404:../../os/hal/src/hal_buffers.c **** 
 405:../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 406:../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 898               		.loc 1 406 0
 899 004e 2D89      		ldd r18,Y+21
 900 0050 3E89      		ldd r19,Y+22
 901 0052 8217      		cp r24,r18
 902 0054 9307      		cpc r25,r19
 903 0056 00F0      		brlo .L48
 904               	.LVL54:
 905               	.LBB263:
 906               	.LBB264:
 275:../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 907               		.loc 1 275 0
 908 0058 8D81      		ldd r24,Y+5
 909 005a 9E81      		ldd r25,Y+6
 910 005c 0197      		sbiw r24,1
 911 005e 9E83      		std Y+6,r25
 912 0060 8D83      		std Y+5,r24
 276:../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 913               		.loc 1 276 0
 914 0062 8985      		ldd r24,Y+9
 915 0064 9A85      		ldd r25,Y+10
 916 0066 2D85      		ldd r18,Y+13
 917 0068 3E85      		ldd r19,Y+14
 918 006a 820F      		add r24,r18
 919 006c 931F      		adc r25,r19
 920 006e 9A87      		std Y+10,r25
 921 0070 8987      		std Y+9,r24
 277:../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 922               		.loc 1 277 0
 923 0072 2B85      		ldd r18,Y+11
 924 0074 3C85      		ldd r19,Y+12
 925 0076 8217      		cp r24,r18
 926 0078 9307      		cpc r25,r19
 927 007a 00F0      		brlo .L49
 278:../../os/hal/src/hal_buffers.c ****   }
 928               		.loc 1 278 0
 929 007c 8989      		ldd r24,Y+17
 930 007e 9A89      		ldd r25,Y+18
 931 0080 9A87      		std Y+10,r25
 932 0082 8987      		std Y+9,r24
 933               	.L49:
 282:../../os/hal/src/hal_buffers.c **** 
 934               		.loc 1 282 0
 935 0084 1C8A      		std Y+20,__zero_reg__
 936 0086 1B8A      		std Y+19,__zero_reg__
 285:../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 937               		.loc 1 285 0
 938 0088 EF89      		ldd r30,Y+23
 939 008a F88D      		ldd r31,Y+24
 940 008c 3097      		sbiw r30,0
 941 008e 01F0      		breq .L48
 286:../../os/hal/src/hal_buffers.c ****   }
 942               		.loc 1 286 0
 943 0090 CE01      		movw r24,r28
 944 0092 0995      		icall
 945               	.LVL55:
 946               	.L48:
 947               	.LBE264:
 948               	.LBE263:
 949               	.LBB265:
 950               	.LBB266:
 951               	.LBB267:
 952               	.LBB268:
 953               	.LBB269:
 954               		.loc 4 440 0
 955               	/* #APP */
 956               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 957 0094 7894      		sei
 958               	 ;  0 "" 2
 959               	/* #NOAPP */
 960               	.LBE269:
 961               	.LBE268:
 962               	.LBE267:
 963               	.LBE266:
 964               	.LBE265:
 407:../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 408:../../os/hal/src/hal_buffers.c ****     }
 409:../../os/hal/src/hal_buffers.c **** 
 410:../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 411:../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 412:../../os/hal/src/hal_buffers.c ****     if (r >= n) {
 965               		.loc 1 412 0
 966 0096 EA14      		cp r14,r10
 967 0098 FB04      		cpc r15,r11
 968 009a 00F4      		brsh .L40
 969               	.LBB270:
 970               	.LBB271:
 971               	.LBB272:
 972               	.LBB273:
 430:../../os/common/ports/AVR/chcore.h **** }
 973               		.loc 4 430 0
 974               	/* #APP */
 975               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 976 009c F894      		cli
 977               	 ;  0 "" 2
 978               	.LVL56:
 979               	/* #NOAPP */
 980               	.L51:
 981               	.LBE273:
 982               	.LBE272:
 983               	.LBE271:
 984               	.LBE270:
 370:../../os/hal/src/hal_buffers.c ****       msg_t msg;
 985               		.loc 1 370 0
 986 009e 6B89      		ldd r22,Y+19
 987 00a0 7C89      		ldd r23,Y+20
 988 00a2 6115      		cp r22,__zero_reg__
 989 00a4 7105      		cpc r23,__zero_reg__
 990 00a6 01F0      		breq .L55
 991               	.L41:
 384:../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 992               		.loc 1 384 0
 993 00a8 8D89      		ldd r24,Y+21
 994 00aa 9E89      		ldd r25,Y+22
 995 00ac 861B      		sub r24,r22
 996 00ae 970B      		sbc r25,r23
 997               	.LVL57:
 998 00b0 8501      		movw r16,r10
 999 00b2 0E19      		sub r16,r14
 1000 00b4 1F09      		sbc r17,r15
 1001 00b6 8017      		cp r24,r16
 1002 00b8 9107      		cpc r25,r17
 1003 00ba 00F4      		brsh .L44
 1004 00bc 8C01      		movw r16,r24
 1005               	.L44:
 1006               	.LVL58:
 391:../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 1007               		.loc 1 391 0
 1008 00be 0134      		cpi r16,65
 1009 00c0 1105      		cpc r17,__zero_reg__
 1010 00c2 00F0      		brlo .+2
 1011 00c4 00C0      		rjmp .L56
 399:../../os/hal/src/hal_buffers.c ****       bp        += size;
 1012               		.loc 1 399 0
 1013 00c6 A801      		movw r20,r16
 1014 00c8 C601      		movw r24,r12
 1015 00ca 0E94 0000 		call memcpy
 1016               	.LVL59:
 400:../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 1017               		.loc 1 400 0
 1018 00ce C00E      		add r12,r16
 1019 00d0 D11E      		adc r13,r17
 1020               	.LVL60:
 401:../../os/hal/src/hal_buffers.c ****       r         += size;
 1021               		.loc 1 401 0
 1022 00d2 8B89      		ldd r24,Y+19
 1023 00d4 9C89      		ldd r25,Y+20
 1024 00d6 800F      		add r24,r16
 1025 00d8 911F      		adc r25,r17
 1026 00da 9C8B      		std Y+20,r25
 1027 00dc 8B8B      		std Y+19,r24
 402:../../os/hal/src/hal_buffers.c ****     }
 1028               		.loc 1 402 0
 1029 00de E00E      		add r14,r16
 1030 00e0 F11E      		adc r15,r17
 1031               	.LVL61:
 1032 00e2 00C0      		rjmp .L46
 1033               	.LVL62:
 1034               	.L55:
 1035               	.LBB274:
 374:../../os/hal/src/hal_buffers.c **** 
 1036               		.loc 1 374 0
 1037 00e4 B401      		movw r22,r8
 1038 00e6 CE01      		movw r24,r28
 1039 00e8 0E94 0000 		call ibqGetFullBufferTimeoutS
 1040               	.LVL63:
 377:../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1041               		.loc 1 377 0
 1042 00ec 892B      		or r24,r25
 1043 00ee 01F4      		brne .L42
 1044 00f0 6B89      		ldd r22,Y+19
 1045 00f2 7C89      		ldd r23,Y+20
 1046 00f4 00C0      		rjmp .L41
 1047               	.L42:
 1048               	.LBB275:
 1049               	.LBB276:
 1050               	.LBB277:
 1051               	.LBB278:
 1052               	.LBB279:
 1053               		.loc 4 440 0
 1054               	/* #APP */
 1055               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1056 00f6 7894      		sei
 1057               	 ;  0 "" 2
 1058               	.LVL64:
 1059               	/* #NOAPP */
 1060               	.L40:
 1061               	.LBE279:
 1062               	.LBE278:
 1063               	.LBE277:
 1064               	.LBE276:
 1065               	.LBE275:
 1066               	.LBE274:
 1067               	.LBE262:
 413:../../os/hal/src/hal_buffers.c ****       return r;
 414:../../os/hal/src/hal_buffers.c ****     }
 415:../../os/hal/src/hal_buffers.c ****     osalSysLock();
 416:../../os/hal/src/hal_buffers.c ****   }
 417:../../os/hal/src/hal_buffers.c **** }
 1068               		.loc 1 417 0
 1069 00f8 C701      		movw r24,r14
 1070               	/* epilogue start */
 1071 00fa DF91      		pop r29
 1072 00fc CF91      		pop r28
 1073               	.LVL65:
 1074 00fe 1F91      		pop r17
 1075 0100 0F91      		pop r16
 1076 0102 FF90      		pop r15
 1077 0104 EF90      		pop r14
 1078               	.LVL66:
 1079 0106 DF90      		pop r13
 1080 0108 CF90      		pop r12
 1081               	.LVL67:
 1082 010a BF90      		pop r11
 1083 010c AF90      		pop r10
 1084               	.LVL68:
 1085 010e 9F90      		pop r9
 1086 0110 8F90      		pop r8
 1087               	.LVL69:
 1088 0112 0895      		ret
 1089               		.cfi_endproc
 1090               	.LFE252:
 1092               		.section	.text.obqObjectInit,"ax",@progbits
 1093               	.global	obqObjectInit
 1095               	obqObjectInit:
 1096               	.LFB253:
 418:../../os/hal/src/hal_buffers.c **** 
 419:../../os/hal/src/hal_buffers.c **** /**
 420:../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 421:../../os/hal/src/hal_buffers.c ****  *
 422:../../os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 423:../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 424:../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 425:../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 426:../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 427:../../os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 428:../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 429:../../os/hal/src/hal_buffers.c ****  *
 430:../../os/hal/src/hal_buffers.c ****  * @init
 431:../../os/hal/src/hal_buffers.c ****  */
 432:../../os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 433:../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 1097               		.loc 1 433 0
 1098               		.cfi_startproc
 1099               	.LVL70:
 1100 0000 CF92      		push r12
 1101               	.LCFI26:
 1102               		.cfi_def_cfa_offset 3
 1103               		.cfi_offset 12, -2
 1104 0002 DF92      		push r13
 1105               	.LCFI27:
 1106               		.cfi_def_cfa_offset 4
 1107               		.cfi_offset 13, -3
 1108 0004 EF92      		push r14
 1109               	.LCFI28:
 1110               		.cfi_def_cfa_offset 5
 1111               		.cfi_offset 14, -4
 1112 0006 FF92      		push r15
 1113               	.LCFI29:
 1114               		.cfi_def_cfa_offset 6
 1115               		.cfi_offset 15, -5
 1116 0008 0F93      		push r16
 1117               	.LCFI30:
 1118               		.cfi_def_cfa_offset 7
 1119               		.cfi_offset 16, -6
 1120 000a 1F93      		push r17
 1121               	.LCFI31:
 1122               		.cfi_def_cfa_offset 8
 1123               		.cfi_offset 17, -7
 1124               	/* prologue: function */
 1125               	/* frame size = 0 */
 1126               	/* stack size = 6 */
 1127               	.L__stack_usage = 6
 1128 000c FC01      		movw r30,r24
 1129               	.LVL71:
 1130               	.LBB280:
 1131               	.LBB281:
 1132               	.LBB282:
 1133               	.LBB283:
 1134               	.LBB284:
 224:../../os/rt/include/chlists.h ****   qp->prev = qp;
 1135               		.loc 2 224 0
 1136 000e 9183      		std Z+1,r25
 1137 0010 8083      		st Z,r24
 1138               		.loc 2 225 0
 1139 0012 9383      		std Z+3,r25
 1140 0014 8283      		std Z+2,r24
 1141               	.LVL72:
 1142               	.LBE284:
 1143               	.LBE283:
 1144               	.LBE282:
 1145               	.LBE281:
 1146               	.LBE280:
 434:../../os/hal/src/hal_buffers.c **** 
 435:../../os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 436:../../os/hal/src/hal_buffers.c **** 
 437:../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 438:../../os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 1147               		.loc 1 438 0
 1148 0016 6483      		std Z+4,r22
 439:../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 1149               		.loc 1 439 0
 1150 0018 1683      		std Z+6,r17
 1151 001a 0583      		std Z+5,r16
 440:../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 1152               		.loc 1 440 0
 1153 001c 5287      		std Z+10,r21
 1154 001e 4187      		std Z+9,r20
 441:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 1155               		.loc 1 441 0
 1156 0020 5087      		std Z+8,r21
 1157 0022 4783      		std Z+7,r20
 442:../../os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 1158               		.loc 1 442 0
 1159 0024 2E5F      		subi r18,-2
 1160 0026 3F4F      		sbci r19,-1
 1161               	.LVL73:
 1162 0028 209F      		mul r18,r16
 1163 002a C001      		movw r24,r0
 1164 002c 219F      		mul r18,r17
 1165 002e 900D      		add r25,r0
 1166 0030 309F      		mul r19,r16
 1167 0032 900D      		add r25,r0
 1168 0034 1124      		clr r1
 1169               	.LVL74:
 1170 0036 840F      		add r24,r20
 1171 0038 951F      		adc r25,r21
 1172 003a 9487      		std Z+12,r25
 1173 003c 8387      		std Z+11,r24
 443:../../os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 1174               		.loc 1 443 0
 1175 003e 3687      		std Z+14,r19
 1176 0040 2587      		std Z+13,r18
 444:../../os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 1177               		.loc 1 444 0
 1178 0042 108B      		std Z+16,r17
 1179 0044 0787      		std Z+15,r16
 445:../../os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 1180               		.loc 1 445 0
 1181 0046 528B      		std Z+18,r21
 1182 0048 418B      		std Z+17,r20
 446:../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1183               		.loc 1 446 0
 1184 004a 148A      		std Z+20,__zero_reg__
 1185 004c 138A      		std Z+19,__zero_reg__
 447:../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1186               		.loc 1 447 0
 1187 004e 168A      		std Z+22,__zero_reg__
 1188 0050 158A      		std Z+21,__zero_reg__
 448:../../os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 1189               		.loc 1 448 0
 1190 0052 F08E      		std Z+24,r15
 1191 0054 E78A      		std Z+23,r14
 449:../../os/hal/src/hal_buffers.c ****   obqp->link      = link;
 1192               		.loc 1 449 0
 1193 0056 D28E      		std Z+26,r13
 1194 0058 C18E      		std Z+25,r12
 1195               	/* epilogue start */
 450:../../os/hal/src/hal_buffers.c **** }
 1196               		.loc 1 450 0
 1197 005a 1F91      		pop r17
 1198 005c 0F91      		pop r16
 1199               	.LVL75:
 1200 005e FF90      		pop r15
 1201 0060 EF90      		pop r14
 1202               	.LVL76:
 1203 0062 DF90      		pop r13
 1204 0064 CF90      		pop r12
 1205               	.LVL77:
 1206 0066 0895      		ret
 1207               		.cfi_endproc
 1208               	.LFE253:
 1210               		.section	.text.obqResetI,"ax",@progbits
 1211               	.global	obqResetI
 1213               	obqResetI:
 1214               	.LFB254:
 451:../../os/hal/src/hal_buffers.c **** 
 452:../../os/hal/src/hal_buffers.c **** /**
 453:../../os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 454:../../os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 455:../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 456:../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 457:../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 458:../../os/hal/src/hal_buffers.c ****  *
 459:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 460:../../os/hal/src/hal_buffers.c ****  *
 461:../../os/hal/src/hal_buffers.c ****  * @iclass
 462:../../os/hal/src/hal_buffers.c ****  */
 463:../../os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1215               		.loc 1 463 0
 1216               		.cfi_startproc
 1217               	.LVL78:
 1218               	/* prologue: function */
 1219               	/* frame size = 0 */
 1220               	/* stack size = 0 */
 1221               	.L__stack_usage = 0
 1222 0000 FC01      		movw r30,r24
 464:../../os/hal/src/hal_buffers.c **** 
 465:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 466:../../os/hal/src/hal_buffers.c **** 
 467:../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 1223               		.loc 1 467 0
 1224 0002 8785      		ldd r24,Z+15
 1225 0004 9089      		ldd r25,Z+16
 1226               	.LVL79:
 1227 0006 9683      		std Z+6,r25
 1228 0008 8583      		std Z+5,r24
 468:../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 1229               		.loc 1 468 0
 1230 000a 8189      		ldd r24,Z+17
 1231 000c 9289      		ldd r25,Z+18
 1232 000e 9287      		std Z+10,r25
 1233 0010 8187      		std Z+9,r24
 469:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 1234               		.loc 1 469 0
 1235 0012 9087      		std Z+8,r25
 1236 0014 8783      		std Z+7,r24
 470:../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1237               		.loc 1 470 0
 1238 0016 148A      		std Z+20,__zero_reg__
 1239 0018 138A      		std Z+19,__zero_reg__
 471:../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1240               		.loc 1 471 0
 1241 001a 168A      		std Z+22,__zero_reg__
 1242 001c 158A      		std Z+21,__zero_reg__
 1243               	.LVL80:
 1244               	.LBB285:
 1245               	.LBB286:
 1246               		.loc 3 921 0
 1247 001e 6EEF      		ldi r22,lo8(-2)
 1248 0020 7FEF      		ldi r23,lo8(-1)
 1249 0022 CF01      		movw r24,r30
 1250 0024 0C94 0000 		jmp chThdDequeueAllI
 1251               	.LVL81:
 1252               	.LBE286:
 1253               	.LBE285:
 1254               		.cfi_endproc
 1255               	.LFE254:
 1257               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1258               	.global	obqGetFullBufferI
 1260               	obqGetFullBufferI:
 1261               	.LFB255:
 472:../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 473:../../os/hal/src/hal_buffers.c **** }
 474:../../os/hal/src/hal_buffers.c **** 
 475:../../os/hal/src/hal_buffers.c **** /**
 476:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 477:../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 478:../../os/hal/src/hal_buffers.c ****  *
 479:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 480:../../os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 481:../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 482:../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 483:../../os/hal/src/hal_buffers.c ****  *
 484:../../os/hal/src/hal_buffers.c ****  * @iclass
 485:../../os/hal/src/hal_buffers.c ****  */
 486:../../os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 487:../../os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1262               		.loc 1 487 0
 1263               		.cfi_startproc
 1264               	.LVL82:
 1265               	/* prologue: function */
 1266               	/* frame size = 0 */
 1267               	/* stack size = 0 */
 1268               	.L__stack_usage = 0
 1269 0000 FC01      		movw r30,r24
 488:../../os/hal/src/hal_buffers.c **** 
 489:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 490:../../os/hal/src/hal_buffers.c **** 
 491:../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1270               		.loc 1 491 0
 1271 0002 2185      		ldd r18,Z+9
 1272 0004 3285      		ldd r19,Z+10
 1273 0006 8781      		ldd r24,Z+7
 1274 0008 9085      		ldd r25,Z+8
 1275               	.LVL83:
 1276 000a 8217      		cp r24,r18
 1277 000c 9307      		cpc r25,r19
 1278 000e 01F0      		breq .L65
 1279               	.L60:
 492:../../os/hal/src/hal_buffers.c ****     return NULL;
 493:../../os/hal/src/hal_buffers.c ****   }
 494:../../os/hal/src/hal_buffers.c **** 
 495:../../os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 496:../../os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)(void *)obqp->brdptr);
 1280               		.loc 1 496 0
 1281 0010 F901      		movw r30,r18
 1282               	.LVL84:
 1283 0012 2191      		ld r18,Z+
 1284 0014 3191      		ld r19,Z+
 1285 0016 CF01      		movw r24,r30
 1286 0018 FB01      		movw r30,r22
 1287 001a 3183      		std Z+1,r19
 1288 001c 2083      		st Z,r18
 1289               	/* epilogue start */
 497:../../os/hal/src/hal_buffers.c **** 
 498:../../os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 499:../../os/hal/src/hal_buffers.c **** }
 1290               		.loc 1 499 0
 1291 001e 0895      		ret
 1292               	.LVL85:
 1293               	.L65:
 491:../../os/hal/src/hal_buffers.c ****     return NULL;
 1294               		.loc 1 491 0 discriminator 1
 1295 0020 8581      		ldd r24,Z+5
 1296 0022 9681      		ldd r25,Z+6
 1297 0024 892B      		or r24,r25
 1298 0026 01F0      		breq .L60
 492:../../os/hal/src/hal_buffers.c ****     return NULL;
 1299               		.loc 1 492 0
 1300 0028 90E0      		ldi r25,0
 1301 002a 80E0      		ldi r24,0
 1302 002c 0895      		ret
 1303               		.cfi_endproc
 1304               	.LFE255:
 1306               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1307               	.global	obqReleaseEmptyBufferI
 1309               	obqReleaseEmptyBufferI:
 1310               	.LFB256:
 500:../../os/hal/src/hal_buffers.c **** 
 501:../../os/hal/src/hal_buffers.c **** /**
 502:../../os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 503:../../os/hal/src/hal_buffers.c ****  *
 504:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 505:../../os/hal/src/hal_buffers.c ****  *
 506:../../os/hal/src/hal_buffers.c ****  * @iclass
 507:../../os/hal/src/hal_buffers.c ****  */
 508:../../os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1311               		.loc 1 508 0
 1312               		.cfi_startproc
 1313               	.LVL86:
 1314               	/* prologue: function */
 1315               	/* frame size = 0 */
 1316               	/* stack size = 0 */
 1317               	.L__stack_usage = 0
 1318 0000 FC01      		movw r30,r24
 509:../../os/hal/src/hal_buffers.c **** 
 510:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 511:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 512:../../os/hal/src/hal_buffers.c **** 
 513:../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 514:../../os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1319               		.loc 1 514 0
 1320 0002 8581      		ldd r24,Z+5
 1321 0004 9681      		ldd r25,Z+6
 1322               	.LVL87:
 1323 0006 0196      		adiw r24,1
 1324 0008 9683      		std Z+6,r25
 1325 000a 8583      		std Z+5,r24
 515:../../os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1326               		.loc 1 515 0
 1327 000c 8185      		ldd r24,Z+9
 1328 000e 9285      		ldd r25,Z+10
 1329 0010 2585      		ldd r18,Z+13
 1330 0012 3685      		ldd r19,Z+14
 1331 0014 820F      		add r24,r18
 1332 0016 931F      		adc r25,r19
 1333 0018 9287      		std Z+10,r25
 1334 001a 8187      		std Z+9,r24
 516:../../os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1335               		.loc 1 516 0
 1336 001c 2385      		ldd r18,Z+11
 1337 001e 3485      		ldd r19,Z+12
 1338 0020 8217      		cp r24,r18
 1339 0022 9307      		cpc r25,r19
 1340 0024 00F0      		brlo .L67
 517:../../os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1341               		.loc 1 517 0
 1342 0026 8189      		ldd r24,Z+17
 1343 0028 9289      		ldd r25,Z+18
 1344 002a 9287      		std Z+10,r25
 1345 002c 8187      		std Z+9,r24
 1346               	.L67:
 1347               	.LVL88:
 1348               	.LBB287:
 1349               	.LBB288:
 908:../../os/hal/osal/rt-nil/osal.h **** }
 1350               		.loc 3 908 0
 1351 002e 70E0      		ldi r23,0
 1352 0030 60E0      		ldi r22,0
 1353 0032 CF01      		movw r24,r30
 1354 0034 0C94 0000 		jmp chThdDequeueNextI
 1355               	.LVL89:
 1356               	.LBE288:
 1357               	.LBE287:
 1358               		.cfi_endproc
 1359               	.LFE256:
 1361               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1362               	.global	obqGetEmptyBufferTimeoutS
 1364               	obqGetEmptyBufferTimeoutS:
 1365               	.LFB258:
 518:../../os/hal/src/hal_buffers.c ****   }
 519:../../os/hal/src/hal_buffers.c **** 
 520:../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 521:../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 522:../../os/hal/src/hal_buffers.c **** }
 523:../../os/hal/src/hal_buffers.c **** 
 524:../../os/hal/src/hal_buffers.c **** /**
 525:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 526:../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 527:../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 528:../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 529:../../os/hal/src/hal_buffers.c ****  *          is empty.
 530:../../os/hal/src/hal_buffers.c ****  *
 531:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 532:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 533:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 534:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 535:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 536:../../os/hal/src/hal_buffers.c ****  *                      .
 537:../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 538:../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 539:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 540:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 541:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 542:../../os/hal/src/hal_buffers.c ****  *
 543:../../os/hal/src/hal_buffers.c ****  * @api
 544:../../os/hal/src/hal_buffers.c ****  */
 545:../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 546:../../os/hal/src/hal_buffers.c ****                                sysinterval_t timeout) {
 547:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 548:../../os/hal/src/hal_buffers.c **** 
 549:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 550:../../os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 551:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 552:../../os/hal/src/hal_buffers.c **** 
 553:../../os/hal/src/hal_buffers.c ****   return msg;
 554:../../os/hal/src/hal_buffers.c **** }
 555:../../os/hal/src/hal_buffers.c **** 
 556:../../os/hal/src/hal_buffers.c **** /**
 557:../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 558:../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 559:../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 560:../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 561:../../os/hal/src/hal_buffers.c ****  *          is empty.
 562:../../os/hal/src/hal_buffers.c ****  *
 563:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 564:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 565:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 566:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 567:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 568:../../os/hal/src/hal_buffers.c ****  *                      .
 569:../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 570:../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 571:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 572:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 573:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 574:../../os/hal/src/hal_buffers.c ****  *
 575:../../os/hal/src/hal_buffers.c ****  * @sclass
 576:../../os/hal/src/hal_buffers.c ****  */
 577:../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 578:../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 1366               		.loc 1 578 0
 1367               		.cfi_startproc
 1368               	.LVL90:
 1369 0000 0F93      		push r16
 1370               	.LCFI32:
 1371               		.cfi_def_cfa_offset 3
 1372               		.cfi_offset 16, -2
 1373 0002 1F93      		push r17
 1374               	.LCFI33:
 1375               		.cfi_def_cfa_offset 4
 1376               		.cfi_offset 17, -3
 1377 0004 CF93      		push r28
 1378               	.LCFI34:
 1379               		.cfi_def_cfa_offset 5
 1380               		.cfi_offset 28, -4
 1381 0006 DF93      		push r29
 1382               	.LCFI35:
 1383               		.cfi_def_cfa_offset 6
 1384               		.cfi_offset 29, -5
 1385               	/* prologue: function */
 1386               	/* frame size = 0 */
 1387               	/* stack size = 4 */
 1388               	.L__stack_usage = 4
 1389 0008 EC01      		movw r28,r24
 1390 000a 8B01      		movw r16,r22
 579:../../os/hal/src/hal_buffers.c **** 
 580:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 581:../../os/hal/src/hal_buffers.c **** 
 582:../../os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1391               		.loc 1 582 0
 1392 000c 00C0      		rjmp .L69
 1393               	.LVL91:
 1394               	.L71:
 1395               	.LBB297:
 583:../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1396               		.loc 1 583 0
 1397 000e 8C81      		ldd r24,Y+4
 1398 0010 8111      		cpse r24,__zero_reg__
 1399 0012 00C0      		rjmp .L72
 1400               	.LVL92:
 1401               	.LBB298:
 1402               	.LBB299:
 895:../../os/hal/osal/rt-nil/osal.h **** }
 1403               		.loc 3 895 0
 1404 0014 B801      		movw r22,r16
 1405 0016 CE01      		movw r24,r28
 1406 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1407               	.LVL93:
 1408               	.LBE299:
 1409               	.LBE298:
 584:../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 585:../../os/hal/src/hal_buffers.c ****     }
 586:../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 587:../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1410               		.loc 1 587 0
 1411 001c 97FD      		sbrc r25,7
 1412 001e 00C0      		rjmp .L68
 1413               	.L69:
 1414               	.LBE297:
 582:../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1415               		.loc 1 582 0
 1416 0020 8D81      		ldd r24,Y+5
 1417 0022 9E81      		ldd r25,Y+6
 1418 0024 892B      		or r24,r25
 1419 0026 01F0      		breq .L71
 1420               	.LVL94:
 1421               	.LBB300:
 1422               	.LBB301:
 588:../../os/hal/src/hal_buffers.c ****       return msg;
 589:../../os/hal/src/hal_buffers.c ****     }
 590:../../os/hal/src/hal_buffers.c ****   }
 591:../../os/hal/src/hal_buffers.c **** 
 592:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 593:../../os/hal/src/hal_buffers.c **** 
 594:../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 595:../../os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1423               		.loc 1 595 0
 1424 0028 8F81      		ldd r24,Y+7
 1425 002a 9885      		ldd r25,Y+8
 1426 002c 9C01      		movw r18,r24
 1427 002e 2E5F      		subi r18,-2
 1428 0030 3F4F      		sbci r19,-1
 1429 0032 3C8B      		std Y+20,r19
 1430 0034 2B8B      		std Y+19,r18
 596:../../os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1431               		.loc 1 596 0
 1432 0036 2D85      		ldd r18,Y+13
 1433 0038 3E85      		ldd r19,Y+14
 1434 003a 820F      		add r24,r18
 1435 003c 931F      		adc r25,r19
 1436 003e 9E8B      		std Y+22,r25
 1437 0040 8D8B      		std Y+21,r24
 1438               	.LVL95:
 1439 0042 90E0      		ldi r25,0
 1440 0044 80E0      		ldi r24,0
 1441               	.L68:
 1442               	/* epilogue start */
 1443               	.LBE301:
 1444               	.LBE300:
 597:../../os/hal/src/hal_buffers.c **** 
 598:../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 599:../../os/hal/src/hal_buffers.c **** }
 1445               		.loc 1 599 0
 1446 0046 DF91      		pop r29
 1447 0048 CF91      		pop r28
 1448               	.LVL96:
 1449 004a 1F91      		pop r17
 1450 004c 0F91      		pop r16
 1451               	.LVL97:
 1452 004e 0895      		ret
 1453               	.LVL98:
 1454               	.L72:
 1455               	.LBB302:
 584:../../os/hal/src/hal_buffers.c ****     }
 1456               		.loc 1 584 0
 1457 0050 8EEF      		ldi r24,lo8(-2)
 1458 0052 9FEF      		ldi r25,lo8(-1)
 1459               	/* epilogue start */
 1460               	.LBE302:
 1461               		.loc 1 599 0
 1462 0054 DF91      		pop r29
 1463 0056 CF91      		pop r28
 1464               	.LVL99:
 1465 0058 1F91      		pop r17
 1466 005a 0F91      		pop r16
 1467               	.LVL100:
 1468 005c 0895      		ret
 1469               		.cfi_endproc
 1470               	.LFE258:
 1472               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1473               	.global	obqGetEmptyBufferTimeout
 1475               	obqGetEmptyBufferTimeout:
 1476               	.LFB257:
 546:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 1477               		.loc 1 546 0
 1478               		.cfi_startproc
 1479               	.LVL101:
 1480               	/* prologue: function */
 1481               	/* frame size = 0 */
 1482               	/* stack size = 0 */
 1483               	.L__stack_usage = 0
 1484               	.LBB303:
 1485               	.LBB304:
 1486               	.LBB305:
 1487               	.LBB306:
 430:../../os/common/ports/AVR/chcore.h **** }
 1488               		.loc 4 430 0
 1489               	/* #APP */
 1490               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1491 0000 F894      		cli
 1492               	 ;  0 "" 2
 1493               	/* #NOAPP */
 1494               	.LBE306:
 1495               	.LBE305:
 1496               	.LBE304:
 1497               	.LBE303:
 550:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1498               		.loc 1 550 0
 1499 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1500               	.LVL102:
 1501               	.LBB307:
 1502               	.LBB308:
 1503               	.LBB309:
 1504               	.LBB310:
 1505               	.LBB311:
 1506               		.loc 4 440 0
 1507               	/* #APP */
 1508               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1509 0006 7894      		sei
 1510               	 ;  0 "" 2
 1511               	/* epilogue start */
 1512               	/* #NOAPP */
 1513               	.LBE311:
 1514               	.LBE310:
 1515               	.LBE309:
 1516               	.LBE308:
 1517               	.LBE307:
 554:../../os/hal/src/hal_buffers.c **** 
 1518               		.loc 1 554 0
 1519 0008 0895      		ret
 1520               		.cfi_endproc
 1521               	.LFE257:
 1523               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1524               	.global	obqPostFullBuffer
 1526               	obqPostFullBuffer:
 1527               	.LFB259:
 600:../../os/hal/src/hal_buffers.c **** 
 601:../../os/hal/src/hal_buffers.c **** /**
 602:../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 603:../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 604:../../os/hal/src/hal_buffers.c ****  *
 605:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 606:../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 607:../../os/hal/src/hal_buffers.c ****  *
 608:../../os/hal/src/hal_buffers.c ****  * @api
 609:../../os/hal/src/hal_buffers.c ****  */
 610:../../os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 1528               		.loc 1 610 0
 1529               		.cfi_startproc
 1530               	.LVL103:
 1531               	/* prologue: function */
 1532               	/* frame size = 0 */
 1533               	/* stack size = 0 */
 1534               	.L__stack_usage = 0
 1535 0000 DC01      		movw r26,r24
 1536               	.LBB312:
 1537               	.LBB313:
 1538               	.LBB314:
 1539               	.LBB315:
 430:../../os/common/ports/AVR/chcore.h **** }
 1540               		.loc 4 430 0
 1541               	/* #APP */
 1542               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1543 0002 F894      		cli
 1544               	 ;  0 "" 2
 1545               	.LVL104:
 1546               	/* #NOAPP */
 1547               	.LBE315:
 1548               	.LBE314:
 1549               	.LBE313:
 1550               	.LBE312:
 1551               	.LBB316:
 1552               	.LBB317:
 611:../../os/hal/src/hal_buffers.c **** 
 612:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 613:../../os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 614:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 615:../../os/hal/src/hal_buffers.c **** }
 616:../../os/hal/src/hal_buffers.c **** 
 617:../../os/hal/src/hal_buffers.c **** /**
 618:../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 619:../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 620:../../os/hal/src/hal_buffers.c ****  *
 621:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 622:../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 623:../../os/hal/src/hal_buffers.c ****  *
 624:../../os/hal/src/hal_buffers.c ****  * @sclass
 625:../../os/hal/src/hal_buffers.c ****  */
 626:../../os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 627:../../os/hal/src/hal_buffers.c **** 
 628:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 629:../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 630:../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 631:../../os/hal/src/hal_buffers.c **** 
 632:../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 633:../../os/hal/src/hal_buffers.c ****   *((size_t *)(void *)obqp->bwrptr) = size;
 1553               		.loc 1 633 0
 1554 0004 1796      		adiw r26,7
 1555 0006 ED91      		ld r30,X+
 1556 0008 FC91      		ld r31,X
 1557 000a 1897      		sbiw r26,7+1
 1558 000c 7183      		std Z+1,r23
 1559 000e 6083      		st Z,r22
 634:../../os/hal/src/hal_buffers.c **** 
 635:../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 636:../../os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1560               		.loc 1 636 0
 1561 0010 1596      		adiw r26,5
 1562 0012 8D91      		ld r24,X+
 1563 0014 9C91      		ld r25,X
 1564 0016 1697      		sbiw r26,5+1
 1565               	.LVL105:
 1566 0018 0197      		sbiw r24,1
 1567 001a 1696      		adiw r26,5+1
 1568 001c 9C93      		st X,r25
 1569 001e 8E93      		st -X,r24
 1570 0020 1597      		sbiw r26,5
 637:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1571               		.loc 1 637 0
 1572 0022 1D96      		adiw r26,13
 1573 0024 8D91      		ld r24,X+
 1574 0026 9C91      		ld r25,X
 1575 0028 1E97      		sbiw r26,13+1
 1576 002a 8E0F      		add r24,r30
 1577 002c 9F1F      		adc r25,r31
 1578 002e 1896      		adiw r26,7+1
 1579 0030 9C93      		st X,r25
 1580 0032 8E93      		st -X,r24
 1581 0034 1797      		sbiw r26,7
 638:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1582               		.loc 1 638 0
 1583 0036 1B96      		adiw r26,11
 1584 0038 2D91      		ld r18,X+
 1585 003a 3C91      		ld r19,X
 1586 003c 1C97      		sbiw r26,11+1
 1587 003e 8217      		cp r24,r18
 1588 0040 9307      		cpc r25,r19
 1589 0042 00F0      		brlo .L75
 639:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1590               		.loc 1 639 0
 1591 0044 5196      		adiw r26,17
 1592 0046 8D91      		ld r24,X+
 1593 0048 9C91      		ld r25,X
 1594 004a 5297      		sbiw r26,17+1
 1595 004c 1896      		adiw r26,7+1
 1596 004e 9C93      		st X,r25
 1597 0050 8E93      		st -X,r24
 1598 0052 1797      		sbiw r26,7
 1599               	.L75:
 640:../../os/hal/src/hal_buffers.c ****   }
 641:../../os/hal/src/hal_buffers.c **** 
 642:../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 643:../../os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1600               		.loc 1 643 0
 1601 0054 5496      		adiw r26,19+1
 1602 0056 1C92      		st X,__zero_reg__
 1603 0058 1E92      		st -X,__zero_reg__
 1604 005a 5397      		sbiw r26,19
 644:../../os/hal/src/hal_buffers.c **** 
 645:../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 646:../../os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1605               		.loc 1 646 0
 1606 005c 5796      		adiw r26,23
 1607 005e ED91      		ld r30,X+
 1608 0060 FC91      		ld r31,X
 1609 0062 5897      		sbiw r26,23+1
 1610 0064 3097      		sbiw r30,0
 1611 0066 01F0      		breq .L76
 1612 0068 CD01      		movw r24,r26
 647:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1613               		.loc 1 647 0
 1614 006a 0995      		icall
 1615               	.LVL106:
 1616               	.L76:
 1617               	.LBE317:
 1618               	.LBE316:
 1619               	.LBB318:
 1620               	.LBB319:
 1621               	.LBB320:
 1622               	.LBB321:
 1623               	.LBB322:
 1624               		.loc 4 440 0
 1625               	/* #APP */
 1626               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1627 006c 7894      		sei
 1628               	 ;  0 "" 2
 1629               	/* epilogue start */
 1630               	/* #NOAPP */
 1631               	.LBE322:
 1632               	.LBE321:
 1633               	.LBE320:
 1634               	.LBE319:
 1635               	.LBE318:
 615:../../os/hal/src/hal_buffers.c **** 
 1636               		.loc 1 615 0
 1637 006e 0895      		ret
 1638               		.cfi_endproc
 1639               	.LFE259:
 1641               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1642               	.global	obqPostFullBufferS
 1644               	obqPostFullBufferS:
 1645               	.LFB260:
 626:../../os/hal/src/hal_buffers.c **** 
 1646               		.loc 1 626 0
 1647               		.cfi_startproc
 1648               	.LVL107:
 1649               	/* prologue: function */
 1650               	/* frame size = 0 */
 1651               	/* stack size = 0 */
 1652               	.L__stack_usage = 0
 1653 0000 DC01      		movw r26,r24
 633:../../os/hal/src/hal_buffers.c **** 
 1654               		.loc 1 633 0
 1655 0002 1796      		adiw r26,7
 1656 0004 ED91      		ld r30,X+
 1657 0006 FC91      		ld r31,X
 1658 0008 1897      		sbiw r26,7+1
 1659 000a 7183      		std Z+1,r23
 1660 000c 6083      		st Z,r22
 636:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1661               		.loc 1 636 0
 1662 000e 1596      		adiw r26,5
 1663 0010 8D91      		ld r24,X+
 1664 0012 9C91      		ld r25,X
 1665 0014 1697      		sbiw r26,5+1
 1666               	.LVL108:
 1667 0016 0197      		sbiw r24,1
 1668 0018 1696      		adiw r26,5+1
 1669 001a 9C93      		st X,r25
 1670 001c 8E93      		st -X,r24
 1671 001e 1597      		sbiw r26,5
 637:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1672               		.loc 1 637 0
 1673 0020 1D96      		adiw r26,13
 1674 0022 8D91      		ld r24,X+
 1675 0024 9C91      		ld r25,X
 1676 0026 1E97      		sbiw r26,13+1
 1677 0028 8E0F      		add r24,r30
 1678 002a 9F1F      		adc r25,r31
 1679 002c 1896      		adiw r26,7+1
 1680 002e 9C93      		st X,r25
 1681 0030 8E93      		st -X,r24
 1682 0032 1797      		sbiw r26,7
 638:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1683               		.loc 1 638 0
 1684 0034 1B96      		adiw r26,11
 1685 0036 2D91      		ld r18,X+
 1686 0038 3C91      		ld r19,X
 1687 003a 1C97      		sbiw r26,11+1
 1688 003c 8217      		cp r24,r18
 1689 003e 9307      		cpc r25,r19
 1690 0040 00F0      		brlo .L81
 639:../../os/hal/src/hal_buffers.c ****   }
 1691               		.loc 1 639 0
 1692 0042 5196      		adiw r26,17
 1693 0044 8D91      		ld r24,X+
 1694 0046 9C91      		ld r25,X
 1695 0048 5297      		sbiw r26,17+1
 1696 004a 1896      		adiw r26,7+1
 1697 004c 9C93      		st X,r25
 1698 004e 8E93      		st -X,r24
 1699 0050 1797      		sbiw r26,7
 1700               	.L81:
 643:../../os/hal/src/hal_buffers.c **** 
 1701               		.loc 1 643 0
 1702 0052 5496      		adiw r26,19+1
 1703 0054 1C92      		st X,__zero_reg__
 1704 0056 1E92      		st -X,__zero_reg__
 1705 0058 5397      		sbiw r26,19
 646:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1706               		.loc 1 646 0
 1707 005a 5796      		adiw r26,23
 1708 005c ED91      		ld r30,X+
 1709 005e FC91      		ld r31,X
 1710 0060 5897      		sbiw r26,23+1
 1711 0062 3097      		sbiw r30,0
 1712 0064 01F0      		breq .L80
 1713               		.loc 1 647 0
 1714 0066 CD01      		movw r24,r26
 1715 0068 0994      		ijmp
 1716               	.LVL109:
 1717               	.L80:
 1718               	/* epilogue start */
 648:../../os/hal/src/hal_buffers.c ****   }
 649:../../os/hal/src/hal_buffers.c **** }
 1719               		.loc 1 649 0
 1720 006a 0895      		ret
 1721               		.cfi_endproc
 1722               	.LFE260:
 1724               		.section	.text.obqPutTimeout,"ax",@progbits
 1725               	.global	obqPutTimeout
 1727               	obqPutTimeout:
 1728               	.LFB261:
 650:../../os/hal/src/hal_buffers.c **** 
 651:../../os/hal/src/hal_buffers.c **** /**
 652:../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 653:../../os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 654:../../os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 655:../../os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 656:../../os/hal/src/hal_buffers.c ****  *
 657:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 658:../../os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 659:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 660:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 661:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 662:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 663:../../os/hal/src/hal_buffers.c ****  *                      .
 664:../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 665:../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 666:../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 667:../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 668:../../os/hal/src/hal_buffers.c ****  *
 669:../../os/hal/src/hal_buffers.c ****  * @api
 670:../../os/hal/src/hal_buffers.c ****  */
 671:../../os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 672:../../os/hal/src/hal_buffers.c ****                     sysinterval_t timeout) {
 1729               		.loc 1 672 0
 1730               		.cfi_startproc
 1731               	.LVL110:
 1732 0000 1F93      		push r17
 1733               	.LCFI36:
 1734               		.cfi_def_cfa_offset 3
 1735               		.cfi_offset 17, -2
 1736 0002 CF93      		push r28
 1737               	.LCFI37:
 1738               		.cfi_def_cfa_offset 4
 1739               		.cfi_offset 28, -3
 1740 0004 DF93      		push r29
 1741               	.LCFI38:
 1742               		.cfi_def_cfa_offset 5
 1743               		.cfi_offset 29, -4
 1744               	/* prologue: function */
 1745               	/* frame size = 0 */
 1746               	/* stack size = 3 */
 1747               	.L__stack_usage = 3
 1748 0006 EC01      		movw r28,r24
 1749 0008 162F      		mov r17,r22
 1750               	.LBB323:
 1751               	.LBB324:
 1752               	.LBB325:
 1753               	.LBB326:
 430:../../os/common/ports/AVR/chcore.h **** }
 1754               		.loc 4 430 0
 1755               	/* #APP */
 1756               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1757 000a F894      		cli
 1758               	 ;  0 "" 2
 1759               	/* #NOAPP */
 1760               	.LBE326:
 1761               	.LBE325:
 1762               	.LBE324:
 1763               	.LBE323:
 673:../../os/hal/src/hal_buffers.c ****   msg_t msg;
 674:../../os/hal/src/hal_buffers.c **** 
 675:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 676:../../os/hal/src/hal_buffers.c **** 
 677:../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 678:../../os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1764               		.loc 1 678 0
 1765 000c EB89      		ldd r30,Y+19
 1766 000e FC89      		ldd r31,Y+20
 1767 0010 3097      		sbiw r30,0
 1768 0012 01F0      		breq .L94
 1769               	.LVL111:
 1770               	.L84:
 679:../../os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 680:../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 681:../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 682:../../os/hal/src/hal_buffers.c ****       return msg;
 683:../../os/hal/src/hal_buffers.c ****     }
 684:../../os/hal/src/hal_buffers.c ****   }
 685:../../os/hal/src/hal_buffers.c **** 
 686:../../os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 687:../../os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1771               		.loc 1 687 0
 1772 0014 1083      		st Z,r17
 688:../../os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1773               		.loc 1 688 0
 1774 0016 8B89      		ldd r24,Y+19
 1775 0018 9C89      		ldd r25,Y+20
 1776 001a 0196      		adiw r24,1
 1777 001c 9C8B      		std Y+20,r25
 1778 001e 8B8B      		std Y+19,r24
 689:../../os/hal/src/hal_buffers.c **** 
 690:../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 691:../../os/hal/src/hal_buffers.c ****      full in the queue.*/
 692:../../os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1779               		.loc 1 692 0
 1780 0020 2D89      		ldd r18,Y+21
 1781 0022 3E89      		ldd r19,Y+22
 1782 0024 8217      		cp r24,r18
 1783 0026 9307      		cpc r25,r19
 1784 0028 00F0      		brlo .L88
 1785               	.LVL112:
 1786               	.LBB327:
 1787               	.LBB328:
 633:../../os/hal/src/hal_buffers.c **** 
 1788               		.loc 1 633 0
 1789 002a EF81      		ldd r30,Y+7
 1790 002c F885      		ldd r31,Y+8
 1791               	.LBE328:
 1792               	.LBE327:
 693:../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1793               		.loc 1 693 0
 1794 002e 8D85      		ldd r24,Y+13
 1795 0030 9E85      		ldd r25,Y+14
 1796 0032 0297      		sbiw r24,2
 1797               	.LVL113:
 1798               	.LBB330:
 1799               	.LBB329:
 633:../../os/hal/src/hal_buffers.c **** 
 1800               		.loc 1 633 0
 1801 0034 9183      		std Z+1,r25
 1802 0036 8083      		st Z,r24
 636:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1803               		.loc 1 636 0
 1804 0038 8D81      		ldd r24,Y+5
 1805 003a 9E81      		ldd r25,Y+6
 1806               	.LVL114:
 1807 003c 0197      		sbiw r24,1
 1808 003e 9E83      		std Y+6,r25
 1809 0040 8D83      		std Y+5,r24
 1810               	.LVL115:
 637:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1811               		.loc 1 637 0
 1812 0042 8D85      		ldd r24,Y+13
 1813 0044 9E85      		ldd r25,Y+14
 1814 0046 8E0F      		add r24,r30
 1815 0048 9F1F      		adc r25,r31
 1816 004a 9887      		std Y+8,r25
 1817 004c 8F83      		std Y+7,r24
 638:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1818               		.loc 1 638 0
 1819 004e 2B85      		ldd r18,Y+11
 1820 0050 3C85      		ldd r19,Y+12
 1821 0052 8217      		cp r24,r18
 1822 0054 9307      		cpc r25,r19
 1823 0056 00F0      		brlo .L89
 639:../../os/hal/src/hal_buffers.c ****   }
 1824               		.loc 1 639 0
 1825 0058 8989      		ldd r24,Y+17
 1826 005a 9A89      		ldd r25,Y+18
 1827 005c 9887      		std Y+8,r25
 1828 005e 8F83      		std Y+7,r24
 1829               	.L89:
 643:../../os/hal/src/hal_buffers.c **** 
 1830               		.loc 1 643 0
 1831 0060 1C8A      		std Y+20,__zero_reg__
 1832 0062 1B8A      		std Y+19,__zero_reg__
 646:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1833               		.loc 1 646 0
 1834 0064 EF89      		ldd r30,Y+23
 1835 0066 F88D      		ldd r31,Y+24
 1836 0068 3097      		sbiw r30,0
 1837 006a 01F0      		breq .L88
 647:../../os/hal/src/hal_buffers.c ****   }
 1838               		.loc 1 647 0
 1839 006c CE01      		movw r24,r28
 1840 006e 0995      		icall
 1841               	.LVL116:
 1842               	.L88:
 1843               	.LBE329:
 1844               	.LBE330:
 1845               	.LBB331:
 1846               	.LBB332:
 1847               	.LBB333:
 1848               	.LBB334:
 1849               	.LBB335:
 1850               		.loc 4 440 0
 1851               	/* #APP */
 1852               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1853 0070 7894      		sei
 1854               	 ;  0 "" 2
 1855               	/* #NOAPP */
 1856               	.LBE335:
 1857               	.LBE334:
 1858               	.LBE333:
 1859               	.LBE332:
 1860               	.LBE331:
 694:../../os/hal/src/hal_buffers.c ****   }
 695:../../os/hal/src/hal_buffers.c **** 
 696:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 697:../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 1861               		.loc 1 697 0
 1862 0072 90E0      		ldi r25,0
 1863 0074 80E0      		ldi r24,0
 1864               	.L83:
 1865               	/* epilogue start */
 698:../../os/hal/src/hal_buffers.c **** }
 1866               		.loc 1 698 0
 1867 0076 DF91      		pop r29
 1868 0078 CF91      		pop r28
 1869               	.LVL117:
 1870 007a 1F91      		pop r17
 1871               	.LVL118:
 1872 007c 0895      		ret
 1873               	.LVL119:
 1874               	.L94:
 679:../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1875               		.loc 1 679 0
 1876 007e BA01      		movw r22,r20
 1877 0080 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1878               	.LVL120:
 680:../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1879               		.loc 1 680 0
 1880 0084 0097      		sbiw r24,0
 1881 0086 01F4      		brne .L85
 1882 0088 EB89      		ldd r30,Y+19
 1883 008a FC89      		ldd r31,Y+20
 1884 008c 00C0      		rjmp .L84
 1885               	.L85:
 1886               	.LBB336:
 1887               	.LBB337:
 1888               	.LBB338:
 1889               	.LBB339:
 1890               	.LBB340:
 1891               		.loc 4 440 0
 1892               	/* #APP */
 1893               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1894 008e 7894      		sei
 1895               	 ;  0 "" 2
 1896               	/* #NOAPP */
 1897               	.LBE340:
 1898               	.LBE339:
 1899               	.LBE338:
 1900               	.LBE337:
 1901               	.LBE336:
 682:../../os/hal/src/hal_buffers.c ****     }
 1902               		.loc 1 682 0
 1903 0090 00C0      		rjmp .L83
 1904               		.cfi_endproc
 1905               	.LFE261:
 1907               		.section	.text.obqWriteTimeout,"ax",@progbits
 1908               	.global	obqWriteTimeout
 1910               	obqWriteTimeout:
 1911               	.LFB262:
 699:../../os/hal/src/hal_buffers.c **** 
 700:../../os/hal/src/hal_buffers.c **** /**
 701:../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 702:../../os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 703:../../os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 704:../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 705:../../os/hal/src/hal_buffers.c ****  *          been reset.
 706:../../os/hal/src/hal_buffers.c ****  *
 707:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 708:../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 709:../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 710:../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 711:../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 712:../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 713:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 714:../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 715:../../os/hal/src/hal_buffers.c ****  *                      .
 716:../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 717:../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 718:../../os/hal/src/hal_buffers.c ****  *
 719:../../os/hal/src/hal_buffers.c ****  * @api
 720:../../os/hal/src/hal_buffers.c ****  */
 721:../../os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 722:../../os/hal/src/hal_buffers.c ****                        size_t n, sysinterval_t timeout) {
 1912               		.loc 1 722 0
 1913               		.cfi_startproc
 1914               	.LVL121:
 1915 0000 8F92      		push r8
 1916               	.LCFI39:
 1917               		.cfi_def_cfa_offset 3
 1918               		.cfi_offset 8, -2
 1919 0002 9F92      		push r9
 1920               	.LCFI40:
 1921               		.cfi_def_cfa_offset 4
 1922               		.cfi_offset 9, -3
 1923 0004 AF92      		push r10
 1924               	.LCFI41:
 1925               		.cfi_def_cfa_offset 5
 1926               		.cfi_offset 10, -4
 1927 0006 BF92      		push r11
 1928               	.LCFI42:
 1929               		.cfi_def_cfa_offset 6
 1930               		.cfi_offset 11, -5
 1931 0008 CF92      		push r12
 1932               	.LCFI43:
 1933               		.cfi_def_cfa_offset 7
 1934               		.cfi_offset 12, -6
 1935 000a DF92      		push r13
 1936               	.LCFI44:
 1937               		.cfi_def_cfa_offset 8
 1938               		.cfi_offset 13, -7
 1939 000c EF92      		push r14
 1940               	.LCFI45:
 1941               		.cfi_def_cfa_offset 9
 1942               		.cfi_offset 14, -8
 1943 000e FF92      		push r15
 1944               	.LCFI46:
 1945               		.cfi_def_cfa_offset 10
 1946               		.cfi_offset 15, -9
 1947 0010 0F93      		push r16
 1948               	.LCFI47:
 1949               		.cfi_def_cfa_offset 11
 1950               		.cfi_offset 16, -10
 1951 0012 1F93      		push r17
 1952               	.LCFI48:
 1953               		.cfi_def_cfa_offset 12
 1954               		.cfi_offset 17, -11
 1955 0014 CF93      		push r28
 1956               	.LCFI49:
 1957               		.cfi_def_cfa_offset 13
 1958               		.cfi_offset 28, -12
 1959 0016 DF93      		push r29
 1960               	.LCFI50:
 1961               		.cfi_def_cfa_offset 14
 1962               		.cfi_offset 29, -13
 1963               	/* prologue: function */
 1964               	/* frame size = 0 */
 1965               	/* stack size = 12 */
 1966               	.L__stack_usage = 12
 1967 0018 EC01      		movw r28,r24
 1968 001a 6B01      		movw r12,r22
 1969 001c 5A01      		movw r10,r20
 1970 001e 4901      		movw r8,r18
 1971               	.LVL122:
 1972               	.LBB341:
 1973               	.LBB342:
 1974               	.LBB343:
 1975               	.LBB344:
 430:../../os/common/ports/AVR/chcore.h **** }
 1976               		.loc 4 430 0
 1977               	/* #APP */
 1978               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1979 0020 F894      		cli
 1980               	 ;  0 "" 2
 1981               	/* #NOAPP */
 1982               	.LBE344:
 1983               	.LBE343:
 1984               	.LBE342:
 1985               	.LBE341:
 723:../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 1986               		.loc 1 723 0
 1987 0022 F12C      		mov r15,__zero_reg__
 1988 0024 E12C      		mov r14,__zero_reg__
 1989 0026 00C0      		rjmp .L106
 1990               	.LVL123:
 1991               	.L111:
 1992               	.LBB345:
 724:../../os/hal/src/hal_buffers.c **** 
 725:../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 726:../../os/hal/src/hal_buffers.c **** 
 727:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 728:../../os/hal/src/hal_buffers.c **** 
 729:../../os/hal/src/hal_buffers.c ****   while (true) {
 730:../../os/hal/src/hal_buffers.c ****     size_t size;
 731:../../os/hal/src/hal_buffers.c **** 
 732:../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 733:../../os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 734:../../os/hal/src/hal_buffers.c ****       msg_t msg;
 735:../../os/hal/src/hal_buffers.c **** 
 736:../../os/hal/src/hal_buffers.c ****       /* Getting an empty buffer using the specified timeout.*/
 737:../../os/hal/src/hal_buffers.c ****       msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 738:../../os/hal/src/hal_buffers.c **** 
 739:../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 740:../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 741:../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 742:../../os/hal/src/hal_buffers.c ****         return w;
 743:../../os/hal/src/hal_buffers.c ****       }
 744:../../os/hal/src/hal_buffers.c ****     }
 745:../../os/hal/src/hal_buffers.c **** 
 746:../../os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 747:../../os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 748:../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 749:../../os/hal/src/hal_buffers.c ****       size = n - w;
 750:../../os/hal/src/hal_buffers.c ****     }
 751:../../os/hal/src/hal_buffers.c **** 
 752:../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 753:../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 754:../../os/hal/src/hal_buffers.c ****     if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 755:../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 756:../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 1993               		.loc 1 756 0
 1994 0028 20E4      		ldi r18,lo8(64)
 1995 002a F601      		movw r30,r12
 1996 002c DC01      		movw r26,r24
 1997               		0:
 1998 002e 0190      		ld r0,Z+
 1999 0030 0D92      		st X+,r0
 2000 0032 2A95      		dec r18
 2001 0034 01F4      		brne 0b
 757:../../os/hal/src/hal_buffers.c ****       bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 2002               		.loc 1 757 0
 2003 0036 20E4      		ldi r18,64
 2004 0038 C20E      		add r12,r18
 2005 003a D11C      		adc r13,__zero_reg__
 2006               	.LVL124:
 758:../../os/hal/src/hal_buffers.c ****       obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 2007               		.loc 1 758 0
 2008 003c 8B89      		ldd r24,Y+19
 2009 003e 9C89      		ldd r25,Y+20
 2010 0040 805C      		subi r24,-64
 2011 0042 9F4F      		sbci r25,-1
 2012 0044 9C8B      		std Y+20,r25
 2013 0046 8B8B      		std Y+19,r24
 759:../../os/hal/src/hal_buffers.c ****       w         += (size_t)BUFFERS_CHUNKS_SIZE;
 2014               		.loc 1 759 0
 2015 0048 20E4      		ldi r18,64
 2016 004a E20E      		add r14,r18
 2017 004c F11C      		adc r15,__zero_reg__
 2018               	.LVL125:
 2019               	.L101:
 760:../../os/hal/src/hal_buffers.c ****     }
 761:../../os/hal/src/hal_buffers.c ****     else {
 762:../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 763:../../os/hal/src/hal_buffers.c ****       bp        += size;
 764:../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 765:../../os/hal/src/hal_buffers.c ****       w         += size;
 766:../../os/hal/src/hal_buffers.c ****     }
 767:../../os/hal/src/hal_buffers.c **** 
 768:../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 769:../../os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 2020               		.loc 1 769 0
 2021 004e 2D89      		ldd r18,Y+21
 2022 0050 3E89      		ldd r19,Y+22
 2023 0052 8217      		cp r24,r18
 2024 0054 9307      		cpc r25,r19
 2025 0056 00F0      		brlo .L103
 2026               	.LVL126:
 2027               	.LBB346:
 2028               	.LBB347:
 633:../../os/hal/src/hal_buffers.c **** 
 2029               		.loc 1 633 0
 2030 0058 EF81      		ldd r30,Y+7
 2031 005a F885      		ldd r31,Y+8
 2032               	.LBE347:
 2033               	.LBE346:
 770:../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 2034               		.loc 1 770 0
 2035 005c 8D85      		ldd r24,Y+13
 2036 005e 9E85      		ldd r25,Y+14
 2037 0060 0297      		sbiw r24,2
 2038               	.LVL127:
 2039               	.LBB349:
 2040               	.LBB348:
 633:../../os/hal/src/hal_buffers.c **** 
 2041               		.loc 1 633 0
 2042 0062 9183      		std Z+1,r25
 2043 0064 8083      		st Z,r24
 636:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2044               		.loc 1 636 0
 2045 0066 8D81      		ldd r24,Y+5
 2046 0068 9E81      		ldd r25,Y+6
 2047               	.LVL128:
 2048 006a 0197      		sbiw r24,1
 2049 006c 9E83      		std Y+6,r25
 2050 006e 8D83      		std Y+5,r24
 2051               	.LVL129:
 637:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2052               		.loc 1 637 0
 2053 0070 8D85      		ldd r24,Y+13
 2054 0072 9E85      		ldd r25,Y+14
 2055 0074 8E0F      		add r24,r30
 2056 0076 9F1F      		adc r25,r31
 2057 0078 9887      		std Y+8,r25
 2058 007a 8F83      		std Y+7,r24
 638:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2059               		.loc 1 638 0
 2060 007c 2B85      		ldd r18,Y+11
 2061 007e 3C85      		ldd r19,Y+12
 2062 0080 8217      		cp r24,r18
 2063 0082 9307      		cpc r25,r19
 2064 0084 00F0      		brlo .L104
 639:../../os/hal/src/hal_buffers.c ****   }
 2065               		.loc 1 639 0
 2066 0086 8989      		ldd r24,Y+17
 2067 0088 9A89      		ldd r25,Y+18
 2068 008a 9887      		std Y+8,r25
 2069 008c 8F83      		std Y+7,r24
 2070               	.L104:
 643:../../os/hal/src/hal_buffers.c **** 
 2071               		.loc 1 643 0
 2072 008e 1C8A      		std Y+20,__zero_reg__
 2073 0090 1B8A      		std Y+19,__zero_reg__
 646:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2074               		.loc 1 646 0
 2075 0092 EF89      		ldd r30,Y+23
 2076 0094 F88D      		ldd r31,Y+24
 2077 0096 3097      		sbiw r30,0
 2078 0098 01F0      		breq .L103
 647:../../os/hal/src/hal_buffers.c ****   }
 2079               		.loc 1 647 0
 2080 009a CE01      		movw r24,r28
 2081 009c 0995      		icall
 2082               	.LVL130:
 2083               	.L103:
 2084               	.LBE348:
 2085               	.LBE349:
 2086               	.LBB350:
 2087               	.LBB351:
 2088               	.LBB352:
 2089               	.LBB353:
 2090               	.LBB354:
 2091               		.loc 4 440 0
 2092               	/* #APP */
 2093               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2094 009e 7894      		sei
 2095               	 ;  0 "" 2
 2096               	/* #NOAPP */
 2097               	.LBE354:
 2098               	.LBE353:
 2099               	.LBE352:
 2100               	.LBE351:
 2101               	.LBE350:
 771:../../os/hal/src/hal_buffers.c ****     }
 772:../../os/hal/src/hal_buffers.c **** 
 773:../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 774:../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 775:../../os/hal/src/hal_buffers.c ****     if (w >= n) {
 2102               		.loc 1 775 0
 2103 00a0 EA14      		cp r14,r10
 2104 00a2 FB04      		cpc r15,r11
 2105 00a4 00F4      		brsh .L95
 2106               	.LBB355:
 2107               	.LBB356:
 2108               	.LBB357:
 2109               	.LBB358:
 430:../../os/common/ports/AVR/chcore.h **** }
 2110               		.loc 4 430 0
 2111               	/* #APP */
 2112               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2113 00a6 F894      		cli
 2114               	 ;  0 "" 2
 2115               	.LVL131:
 2116               	/* #NOAPP */
 2117               	.L106:
 2118               	.LBE358:
 2119               	.LBE357:
 2120               	.LBE356:
 2121               	.LBE355:
 733:../../os/hal/src/hal_buffers.c ****       msg_t msg;
 2122               		.loc 1 733 0
 2123 00a8 8B89      		ldd r24,Y+19
 2124 00aa 9C89      		ldd r25,Y+20
 2125 00ac 0097      		sbiw r24,0
 2126 00ae 01F0      		breq .L110
 2127               	.L96:
 747:../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 2128               		.loc 1 747 0
 2129 00b0 2D89      		ldd r18,Y+21
 2130 00b2 3E89      		ldd r19,Y+22
 2131 00b4 281B      		sub r18,r24
 2132 00b6 390B      		sbc r19,r25
 2133               	.LVL132:
 2134 00b8 8501      		movw r16,r10
 2135 00ba 0E19      		sub r16,r14
 2136 00bc 1F09      		sbc r17,r15
 2137 00be 2017      		cp r18,r16
 2138 00c0 3107      		cpc r19,r17
 2139 00c2 00F4      		brsh .L99
 2140 00c4 8901      		movw r16,r18
 2141               	.L99:
 2142               	.LVL133:
 754:../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 2143               		.loc 1 754 0
 2144 00c6 0134      		cpi r16,65
 2145 00c8 1105      		cpc r17,__zero_reg__
 2146 00ca 00F0      		brlo .+2
 2147 00cc 00C0      		rjmp .L111
 762:../../os/hal/src/hal_buffers.c ****       bp        += size;
 2148               		.loc 1 762 0
 2149 00ce A801      		movw r20,r16
 2150 00d0 B601      		movw r22,r12
 2151 00d2 0E94 0000 		call memcpy
 2152               	.LVL134:
 763:../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 2153               		.loc 1 763 0
 2154 00d6 C00E      		add r12,r16
 2155 00d8 D11E      		adc r13,r17
 2156               	.LVL135:
 764:../../os/hal/src/hal_buffers.c ****       w         += size;
 2157               		.loc 1 764 0
 2158 00da 8B89      		ldd r24,Y+19
 2159 00dc 9C89      		ldd r25,Y+20
 2160 00de 800F      		add r24,r16
 2161 00e0 911F      		adc r25,r17
 2162 00e2 9C8B      		std Y+20,r25
 2163 00e4 8B8B      		std Y+19,r24
 765:../../os/hal/src/hal_buffers.c ****     }
 2164               		.loc 1 765 0
 2165 00e6 E00E      		add r14,r16
 2166 00e8 F11E      		adc r15,r17
 2167               	.LVL136:
 2168 00ea 00C0      		rjmp .L101
 2169               	.LVL137:
 2170               	.L110:
 2171               	.LBB359:
 737:../../os/hal/src/hal_buffers.c **** 
 2172               		.loc 1 737 0
 2173 00ec B401      		movw r22,r8
 2174 00ee CE01      		movw r24,r28
 2175 00f0 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2176               	.LVL138:
 740:../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2177               		.loc 1 740 0
 2178 00f4 892B      		or r24,r25
 2179 00f6 01F4      		brne .L97
 2180 00f8 8B89      		ldd r24,Y+19
 2181 00fa 9C89      		ldd r25,Y+20
 2182               	.LVL139:
 2183 00fc 00C0      		rjmp .L96
 2184               	.LVL140:
 2185               	.L97:
 2186               	.LBB360:
 2187               	.LBB361:
 2188               	.LBB362:
 2189               	.LBB363:
 2190               	.LBB364:
 2191               		.loc 4 440 0
 2192               	/* #APP */
 2193               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2194 00fe 7894      		sei
 2195               	 ;  0 "" 2
 2196               	.LVL141:
 2197               	/* #NOAPP */
 2198               	.L95:
 2199               	.LBE364:
 2200               	.LBE363:
 2201               	.LBE362:
 2202               	.LBE361:
 2203               	.LBE360:
 2204               	.LBE359:
 2205               	.LBE345:
 776:../../os/hal/src/hal_buffers.c ****       return w;
 777:../../os/hal/src/hal_buffers.c ****     }
 778:../../os/hal/src/hal_buffers.c ****     osalSysLock();
 779:../../os/hal/src/hal_buffers.c ****   }
 780:../../os/hal/src/hal_buffers.c **** }
 2206               		.loc 1 780 0
 2207 0100 C701      		movw r24,r14
 2208               	/* epilogue start */
 2209 0102 DF91      		pop r29
 2210 0104 CF91      		pop r28
 2211               	.LVL142:
 2212 0106 1F91      		pop r17
 2213 0108 0F91      		pop r16
 2214 010a FF90      		pop r15
 2215 010c EF90      		pop r14
 2216               	.LVL143:
 2217 010e DF90      		pop r13
 2218 0110 CF90      		pop r12
 2219               	.LVL144:
 2220 0112 BF90      		pop r11
 2221 0114 AF90      		pop r10
 2222               	.LVL145:
 2223 0116 9F90      		pop r9
 2224 0118 8F90      		pop r8
 2225               	.LVL146:
 2226 011a 0895      		ret
 2227               		.cfi_endproc
 2228               	.LFE262:
 2230               		.section	.text.obqTryFlushI,"ax",@progbits
 2231               	.global	obqTryFlushI
 2233               	obqTryFlushI:
 2234               	.LFB263:
 781:../../os/hal/src/hal_buffers.c **** 
 782:../../os/hal/src/hal_buffers.c **** /**
 783:../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 784:../../os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 785:../../os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 786:../../os/hal/src/hal_buffers.c ****  *          returned instead.
 787:../../os/hal/src/hal_buffers.c ****  *
 788:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 789:../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 790:../../os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 791:../../os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 792:../../os/hal/src/hal_buffers.c ****  *
 793:../../os/hal/src/hal_buffers.c ****  * @iclass
 794:../../os/hal/src/hal_buffers.c ****  */
 795:../../os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2235               		.loc 1 795 0
 2236               		.cfi_startproc
 2237               	.LVL147:
 2238               	/* prologue: function */
 2239               	/* frame size = 0 */
 2240               	/* stack size = 0 */
 2241               	.L__stack_usage = 0
 2242 0000 FC01      		movw r30,r24
 796:../../os/hal/src/hal_buffers.c **** 
 797:../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 798:../../os/hal/src/hal_buffers.c **** 
 799:../../os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 800:../../os/hal/src/hal_buffers.c ****      it is not being written.*/
 801:../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2243               		.loc 1 801 0
 2244 0002 A781      		ldd r26,Z+7
 2245 0004 B085      		ldd r27,Z+8
 2246 0006 8185      		ldd r24,Z+9
 2247 0008 9285      		ldd r25,Z+10
 2248               	.LVL148:
 2249 000a A817      		cp r26,r24
 2250 000c B907      		cpc r27,r25
 2251 000e 01F0      		breq .L120
 2252               	.L119:
 802:../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 803:../../os/hal/src/hal_buffers.c **** 
 804:../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 805:../../os/hal/src/hal_buffers.c **** 
 806:../../os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 807:../../os/hal/src/hal_buffers.c ****       *((size_t *)(void *)obqp->bwrptr) = size;
 808:../../os/hal/src/hal_buffers.c **** 
 809:../../os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 810:../../os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 811:../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 812:../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 813:../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 814:../../os/hal/src/hal_buffers.c ****       }
 815:../../os/hal/src/hal_buffers.c **** 
 816:../../os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 817:../../os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 818:../../os/hal/src/hal_buffers.c **** 
 819:../../os/hal/src/hal_buffers.c ****       return true;
 820:../../os/hal/src/hal_buffers.c ****     }
 821:../../os/hal/src/hal_buffers.c ****   }
 822:../../os/hal/src/hal_buffers.c ****   return false;
 2253               		.loc 1 822 0
 2254 0010 80E0      		ldi r24,0
 2255               	/* epilogue start */
 823:../../os/hal/src/hal_buffers.c **** }
 2256               		.loc 1 823 0
 2257 0012 0895      		ret
 2258               	.L120:
 801:../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2259               		.loc 1 801 0 discriminator 1
 2260 0014 8581      		ldd r24,Z+5
 2261 0016 9681      		ldd r25,Z+6
 2262 0018 892B      		or r24,r25
 2263 001a 01F0      		breq .L119
 801:../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2264               		.loc 1 801 0 is_stmt 0
 2265 001c 8389      		ldd r24,Z+19
 2266 001e 9489      		ldd r25,Z+20
 2267 0020 0097      		sbiw r24,0
 2268 0022 01F0      		breq .L119
 2269               	.LBB365:
 802:../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2270               		.loc 1 802 0 is_stmt 1
 2271 0024 0297      		sbiw r24,2
 2272 0026 8A1B      		sub r24,r26
 2273 0028 9B0B      		sbc r25,r27
 2274               	.LVL149:
 804:../../os/hal/src/hal_buffers.c **** 
 2275               		.loc 1 804 0
 2276 002a 01F0      		breq .L119
 807:../../os/hal/src/hal_buffers.c **** 
 2277               		.loc 1 807 0
 2278 002c 1196      		adiw r26,1
 2279 002e 9C93      		st X,r25
 2280 0030 8E93      		st -X,r24
 810:../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2281               		.loc 1 810 0
 2282 0032 8581      		ldd r24,Z+5
 2283 0034 9681      		ldd r25,Z+6
 2284               	.LVL150:
 2285 0036 0197      		sbiw r24,1
 2286 0038 9683      		std Z+6,r25
 2287 003a 8583      		std Z+5,r24
 2288               	.LVL151:
 811:../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2289               		.loc 1 811 0
 2290 003c 8585      		ldd r24,Z+13
 2291 003e 9685      		ldd r25,Z+14
 2292 0040 A80F      		add r26,r24
 2293 0042 B91F      		adc r27,r25
 2294               	.LVL152:
 2295 0044 B087      		std Z+8,r27
 2296 0046 A783      		std Z+7,r26
 2297               	.LVL153:
 812:../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2298               		.loc 1 812 0
 2299 0048 8385      		ldd r24,Z+11
 2300 004a 9485      		ldd r25,Z+12
 2301 004c A817      		cp r26,r24
 2302 004e B907      		cpc r27,r25
 2303 0050 00F0      		brlo .L115
 813:../../os/hal/src/hal_buffers.c ****       }
 2304               		.loc 1 813 0
 2305 0052 8189      		ldd r24,Z+17
 2306 0054 9289      		ldd r25,Z+18
 2307 0056 9087      		std Z+8,r25
 2308 0058 8783      		std Z+7,r24
 2309               	.L115:
 817:../../os/hal/src/hal_buffers.c **** 
 2310               		.loc 1 817 0
 2311 005a 148A      		std Z+20,__zero_reg__
 2312 005c 138A      		std Z+19,__zero_reg__
 819:../../os/hal/src/hal_buffers.c ****     }
 2313               		.loc 1 819 0
 2314 005e 81E0      		ldi r24,lo8(1)
 2315 0060 0895      		ret
 2316               	.LBE365:
 2317               		.cfi_endproc
 2318               	.LFE263:
 2320               		.section	.text.obqFlush,"ax",@progbits
 2321               	.global	obqFlush
 2323               	obqFlush:
 2324               	.LFB264:
 824:../../os/hal/src/hal_buffers.c **** 
 825:../../os/hal/src/hal_buffers.c **** /**
 826:../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 827:../../os/hal/src/hal_buffers.c ****  *
 828:../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 829:../../os/hal/src/hal_buffers.c ****  *
 830:../../os/hal/src/hal_buffers.c ****  * @api
 831:../../os/hal/src/hal_buffers.c ****  */
 832:../../os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2325               		.loc 1 832 0
 2326               		.cfi_startproc
 2327               	.LVL154:
 2328               	/* prologue: function */
 2329               	/* frame size = 0 */
 2330               	/* stack size = 0 */
 2331               	.L__stack_usage = 0
 2332 0000 DC01      		movw r26,r24
 2333               	.LBB366:
 2334               	.LBB367:
 2335               	.LBB368:
 2336               	.LBB369:
 430:../../os/common/ports/AVR/chcore.h **** }
 2337               		.loc 4 430 0
 2338               	/* #APP */
 2339               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 2340 0002 F894      		cli
 2341               	 ;  0 "" 2
 2342               	/* #NOAPP */
 2343               	.LBE369:
 2344               	.LBE368:
 2345               	.LBE367:
 2346               	.LBE366:
 833:../../os/hal/src/hal_buffers.c **** 
 834:../../os/hal/src/hal_buffers.c ****   osalSysLock();
 835:../../os/hal/src/hal_buffers.c **** 
 836:../../os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 837:../../os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2347               		.loc 1 837 0
 2348 0004 5396      		adiw r26,19
 2349 0006 8D91      		ld r24,X+
 2350 0008 9C91      		ld r25,X
 2351 000a 5497      		sbiw r26,19+1
 2352               	.LVL155:
 2353 000c 0097      		sbiw r24,0
 2354 000e 01F0      		breq .L123
 2355               	.LBB370:
 838:../../os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 2356               		.loc 1 838 0
 2357 0010 1796      		adiw r26,7
 2358 0012 ED91      		ld r30,X+
 2359 0014 FC91      		ld r31,X
 2360 0016 1897      		sbiw r26,7+1
 2361 0018 0297      		sbiw r24,2
 2362 001a 8E1B      		sub r24,r30
 2363 001c 9F0B      		sbc r25,r31
 2364               	.LVL156:
 839:../../os/hal/src/hal_buffers.c **** 
 840:../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2365               		.loc 1 840 0
 2366 001e 01F0      		breq .L123
 2367               	.LVL157:
 2368               	.LBB371:
 2369               	.LBB372:
 633:../../os/hal/src/hal_buffers.c **** 
 2370               		.loc 1 633 0
 2371 0020 9183      		std Z+1,r25
 2372 0022 8083      		st Z,r24
 636:../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2373               		.loc 1 636 0
 2374 0024 1596      		adiw r26,5
 2375 0026 8D91      		ld r24,X+
 2376 0028 9C91      		ld r25,X
 2377 002a 1697      		sbiw r26,5+1
 2378               	.LVL158:
 2379 002c 0197      		sbiw r24,1
 2380 002e 1696      		adiw r26,5+1
 2381 0030 9C93      		st X,r25
 2382 0032 8E93      		st -X,r24
 2383 0034 1597      		sbiw r26,5
 2384               	.LVL159:
 637:../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2385               		.loc 1 637 0
 2386 0036 1D96      		adiw r26,13
 2387 0038 8D91      		ld r24,X+
 2388 003a 9C91      		ld r25,X
 2389 003c 1E97      		sbiw r26,13+1
 2390 003e E80F      		add r30,r24
 2391 0040 F91F      		adc r31,r25
 2392               	.LVL160:
 2393 0042 1896      		adiw r26,7+1
 2394 0044 FC93      		st X,r31
 2395 0046 EE93      		st -X,r30
 2396 0048 1797      		sbiw r26,7
 2397               	.LVL161:
 638:../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2398               		.loc 1 638 0
 2399 004a 1B96      		adiw r26,11
 2400 004c 8D91      		ld r24,X+
 2401 004e 9C91      		ld r25,X
 2402 0050 1C97      		sbiw r26,11+1
 2403 0052 E817      		cp r30,r24
 2404 0054 F907      		cpc r31,r25
 2405 0056 00F4      		brsh .L132
 2406               	.L125:
 643:../../os/hal/src/hal_buffers.c **** 
 2407               		.loc 1 643 0
 2408 0058 5496      		adiw r26,19+1
 2409 005a 1C92      		st X,__zero_reg__
 2410 005c 1E92      		st -X,__zero_reg__
 2411 005e 5397      		sbiw r26,19
 646:../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2412               		.loc 1 646 0
 2413 0060 5796      		adiw r26,23
 2414 0062 ED91      		ld r30,X+
 2415 0064 FC91      		ld r31,X
 2416 0066 5897      		sbiw r26,23+1
 2417 0068 3097      		sbiw r30,0
 2418 006a 01F0      		breq .L123
 2419 006c CD01      		movw r24,r26
 647:../../os/hal/src/hal_buffers.c ****   }
 2420               		.loc 1 647 0
 2421 006e 0995      		icall
 2422               	.LVL162:
 2423               	.L123:
 2424               	.LBE372:
 2425               	.LBE371:
 2426               	.LBE370:
 2427               	.LBB375:
 2428               	.LBB376:
 2429               	.LBB377:
 2430               	.LBB378:
 2431               	.LBB379:
 2432               		.loc 4 440 0
 2433               	/* #APP */
 2434               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 2435 0070 7894      		sei
 2436               	 ;  0 "" 2
 2437               	/* epilogue start */
 2438               	/* #NOAPP */
 2439               	.LBE379:
 2440               	.LBE378:
 2441               	.LBE377:
 2442               	.LBE376:
 2443               	.LBE375:
 841:../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, size);
 842:../../os/hal/src/hal_buffers.c ****     }
 843:../../os/hal/src/hal_buffers.c ****   }
 844:../../os/hal/src/hal_buffers.c **** 
 845:../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 846:../../os/hal/src/hal_buffers.c **** }
 2444               		.loc 1 846 0
 2445 0072 0895      		ret
 2446               	.LVL163:
 2447               	.L132:
 2448               	.LBB380:
 2449               	.LBB374:
 2450               	.LBB373:
 639:../../os/hal/src/hal_buffers.c ****   }
 2451               		.loc 1 639 0
 2452 0074 5196      		adiw r26,17
 2453 0076 8D91      		ld r24,X+
 2454 0078 9C91      		ld r25,X
 2455 007a 5297      		sbiw r26,17+1
 2456 007c 1896      		adiw r26,7+1
 2457 007e 9C93      		st X,r25
 2458 0080 8E93      		st -X,r24
 2459 0082 1797      		sbiw r26,7
 2460 0084 00C0      		rjmp .L125
 2461               	.LBE373:
 2462               	.LBE374:
 2463               	.LBE380:
 2464               		.cfi_endproc
 2465               	.LFE264:
 2467               		.text
 2468               	.Letext0:
 2469               		.file 5 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 2470               		.file 6 "/usr/lib/avr/include/stdint.h"
 2471               		.file 7 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2472               		.file 8 "../../os/rt/include/chearly.h"
 2473               		.file 9 "../../os/rt/include/chobjects.h"
 2474               		.file 10 "../../os/rt/include/chrfcu.h"
 2475               		.file 11 "../../os/rt/include/chdebug.h"
 2476               		.file 12 "../../os/rt/include/chtime.h"
 2477               		.file 13 "../../os/rt/include/chsem.h"
 2478               		.file 14 "../../os/rt/include/chmtx.h"
 2479               		.file 15 "../../os/rt/include/chsys.h"
 2480               		.file 16 "../../os/rt/include/chregistry.h"
 2481               		.file 17 "../../os/rt/include/chevents.h"
 2482               		.file 18 "../../os/oslib/include/chmemcore.h"
 2483               		.file 19 "../../os/hal/include/hal_buffers.h"
 2484               		.file 20 "../../os/hal/include/hal_queues.h"
 2485               		.file 21 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 2486               		.file 22 "../../os/hal/include/hal_pwm.h"
 2487               		.file 23 "../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_pwm_lld.h"
 2488               		.file 24 "../../os/hal/include/hal_serial.h"
 2489               		.file 25 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 2490               		.file 26 "../../os/rt/include/chthreads.h"
 2491               		.file 27 "<embutido>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
     /tmp/cczejWcf.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczejWcf.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczejWcf.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczejWcf.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczejWcf.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczejWcf.s:13     .text.ibqObjectInit:0000000000000000 ibqObjectInit
     /tmp/cczejWcf.s:133    .text.ibqResetI:0000000000000000 ibqResetI
     /tmp/cczejWcf.s:179    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
     /tmp/cczejWcf.s:221    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
     /tmp/cczejWcf.s:281    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
     /tmp/cczejWcf.s:391    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
     /tmp/cczejWcf.s:443    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
     /tmp/cczejWcf.s:558    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
     /tmp/cczejWcf.s:638    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
     /tmp/cczejWcf.s:788    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
     /tmp/cczejWcf.s:1095   .text.obqObjectInit:0000000000000000 obqObjectInit
     /tmp/cczejWcf.s:1213   .text.obqResetI:0000000000000000 obqResetI
     /tmp/cczejWcf.s:1260   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
     /tmp/cczejWcf.s:1309   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
     /tmp/cczejWcf.s:1364   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
     /tmp/cczejWcf.s:1475   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
     /tmp/cczejWcf.s:1526   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
     /tmp/cczejWcf.s:1644   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
     /tmp/cczejWcf.s:1727   .text.obqPutTimeout:0000000000000000 obqPutTimeout
     /tmp/cczejWcf.s:1910   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
     /tmp/cczejWcf.s:2233   .text.obqTryFlushI:0000000000000000 obqTryFlushI
     /tmp/cczejWcf.s:2323   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy
