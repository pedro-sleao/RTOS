   1               		.file	"hal_serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text._readt,"ax",@progbits
  12               	_readt:
  13               	.LFB250:
  14               		.file 1 "../../os/hal/src/hal_serial.c"
   1:../../os/hal/src/hal_serial.c **** /*
   2:../../os/hal/src/hal_serial.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/src/hal_serial.c **** 
   4:../../os/hal/src/hal_serial.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/src/hal_serial.c ****     you may not use this file except in compliance with the License.
   6:../../os/hal/src/hal_serial.c ****     You may obtain a copy of the License at
   7:../../os/hal/src/hal_serial.c **** 
   8:../../os/hal/src/hal_serial.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/src/hal_serial.c **** 
  10:../../os/hal/src/hal_serial.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/src/hal_serial.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/src/hal_serial.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/src/hal_serial.c ****     See the License for the specific language governing permissions and
  14:../../os/hal/src/hal_serial.c ****     limitations under the License.
  15:../../os/hal/src/hal_serial.c **** */
  16:../../os/hal/src/hal_serial.c **** 
  17:../../os/hal/src/hal_serial.c **** /**
  18:../../os/hal/src/hal_serial.c ****  * @file    hal_serial.c
  19:../../os/hal/src/hal_serial.c ****  * @brief   Serial Driver code.
  20:../../os/hal/src/hal_serial.c ****  *
  21:../../os/hal/src/hal_serial.c ****  * @addtogroup SERIAL
  22:../../os/hal/src/hal_serial.c ****  * @{
  23:../../os/hal/src/hal_serial.c ****  */
  24:../../os/hal/src/hal_serial.c **** 
  25:../../os/hal/src/hal_serial.c **** #include "hal.h"
  26:../../os/hal/src/hal_serial.c **** 
  27:../../os/hal/src/hal_serial.c **** #if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  28:../../os/hal/src/hal_serial.c **** 
  29:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  30:../../os/hal/src/hal_serial.c **** /* Driver local definitions.                                                 */
  31:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  32:../../os/hal/src/hal_serial.c **** 
  33:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  34:../../os/hal/src/hal_serial.c **** /* Driver exported variables.                                                */
  35:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  36:../../os/hal/src/hal_serial.c **** 
  37:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  38:../../os/hal/src/hal_serial.c **** /* Driver local variables and types.                                         */
  39:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  40:../../os/hal/src/hal_serial.c **** 
  41:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  42:../../os/hal/src/hal_serial.c **** /* Driver local functions.                                                   */
  43:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
  44:../../os/hal/src/hal_serial.c **** 
  45:../../os/hal/src/hal_serial.c **** /*
  46:../../os/hal/src/hal_serial.c ****  * Interface implementation, the following functions just invoke the equivalent
  47:../../os/hal/src/hal_serial.c ****  * queue-level function or macro.
  48:../../os/hal/src/hal_serial.c ****  */
  49:../../os/hal/src/hal_serial.c **** 
  50:../../os/hal/src/hal_serial.c **** static size_t _write(void *ip, const uint8_t *bp, size_t n) {
  51:../../os/hal/src/hal_serial.c **** 
  52:../../os/hal/src/hal_serial.c ****   return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  53:../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  54:../../os/hal/src/hal_serial.c **** }
  55:../../os/hal/src/hal_serial.c **** 
  56:../../os/hal/src/hal_serial.c **** static size_t _read(void *ip, uint8_t *bp, size_t n) {
  57:../../os/hal/src/hal_serial.c **** 
  58:../../os/hal/src/hal_serial.c ****   return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  59:../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  60:../../os/hal/src/hal_serial.c **** }
  61:../../os/hal/src/hal_serial.c **** 
  62:../../os/hal/src/hal_serial.c **** static msg_t _put(void *ip, uint8_t b) {
  63:../../os/hal/src/hal_serial.c **** 
  64:../../os/hal/src/hal_serial.c ****   return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  65:../../os/hal/src/hal_serial.c **** }
  66:../../os/hal/src/hal_serial.c **** 
  67:../../os/hal/src/hal_serial.c **** static msg_t _get(void *ip) {
  68:../../os/hal/src/hal_serial.c **** 
  69:../../os/hal/src/hal_serial.c ****   return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  70:../../os/hal/src/hal_serial.c **** }
  71:../../os/hal/src/hal_serial.c **** 
  72:../../os/hal/src/hal_serial.c **** static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
  73:../../os/hal/src/hal_serial.c **** 
  74:../../os/hal/src/hal_serial.c ****   return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  75:../../os/hal/src/hal_serial.c **** }
  76:../../os/hal/src/hal_serial.c **** 
  77:../../os/hal/src/hal_serial.c **** static msg_t _gett(void *ip, sysinterval_t timeout) {
  78:../../os/hal/src/hal_serial.c **** 
  79:../../os/hal/src/hal_serial.c ****   return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  80:../../os/hal/src/hal_serial.c **** }
  81:../../os/hal/src/hal_serial.c **** 
  82:../../os/hal/src/hal_serial.c **** static size_t _writet(void *ip, const uint8_t *bp, size_t n,
  83:../../os/hal/src/hal_serial.c ****                       sysinterval_t timeout) {
  84:../../os/hal/src/hal_serial.c **** 
  85:../../os/hal/src/hal_serial.c ****   return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  86:../../os/hal/src/hal_serial.c **** }
  87:../../os/hal/src/hal_serial.c **** 
  88:../../os/hal/src/hal_serial.c **** static size_t _readt(void *ip, uint8_t *bp, size_t n,
  89:../../os/hal/src/hal_serial.c ****                      sysinterval_t timeout) {
  15               		.loc 1 89 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  90:../../os/hal/src/hal_serial.c **** 
  91:../../os/hal/src/hal_serial.c ****   return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  22               		.loc 1 91 0
  23 0000 0596      		adiw r24,5
  24               	.LVL1:
  25 0002 0C94 0000 		jmp iqReadTimeout
  26               	.LVL2:
  27               		.cfi_endproc
  28               	.LFE250:
  30               		.section	.text._read,"ax",@progbits
  32               	_read:
  33               	.LFB244:
  56:../../os/hal/src/hal_serial.c **** 
  34               		.loc 1 56 0
  35               		.cfi_startproc
  36               	.LVL3:
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  58:../../os/hal/src/hal_serial.c ****                        n, TIME_INFINITE);
  41               		.loc 1 58 0
  42 0000 2FEF      		ldi r18,lo8(-1)
  43 0002 3FEF      		ldi r19,lo8(-1)
  44 0004 0596      		adiw r24,5
  45               	.LVL4:
  46 0006 0C94 0000 		jmp iqReadTimeout
  47               	.LVL5:
  48               		.cfi_endproc
  49               	.LFE244:
  51               		.section	.text._writet,"ax",@progbits
  53               	_writet:
  54               	.LFB249:
  83:../../os/hal/src/hal_serial.c **** 
  55               		.loc 1 83 0
  56               		.cfi_startproc
  57               	.LVL6:
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
  85:../../os/hal/src/hal_serial.c **** }
  62               		.loc 1 85 0
  63 0000 4796      		adiw r24,23
  64               	.LVL7:
  65 0002 0C94 0000 		jmp oqWriteTimeout
  66               	.LVL8:
  67               		.cfi_endproc
  68               	.LFE249:
  70               		.section	.text._write,"ax",@progbits
  72               	_write:
  73               	.LFB243:
  50:../../os/hal/src/hal_serial.c **** 
  74               		.loc 1 50 0
  75               		.cfi_startproc
  76               	.LVL9:
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 0 */
  80               	.L__stack_usage = 0
  52:../../os/hal/src/hal_serial.c ****                         n, TIME_INFINITE);
  81               		.loc 1 52 0
  82 0000 2FEF      		ldi r18,lo8(-1)
  83 0002 3FEF      		ldi r19,lo8(-1)
  84 0004 4796      		adiw r24,23
  85               	.LVL10:
  86 0006 0C94 0000 		jmp oqWriteTimeout
  87               	.LVL11:
  88               		.cfi_endproc
  89               	.LFE243:
  91               		.section	.text._gett,"ax",@progbits
  93               	_gett:
  94               	.LFB248:
  77:../../os/hal/src/hal_serial.c **** 
  95               		.loc 1 77 0
  96               		.cfi_startproc
  97               	.LVL12:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
  79:../../os/hal/src/hal_serial.c **** }
 102               		.loc 1 79 0
 103 0000 0596      		adiw r24,5
 104               	.LVL13:
 105 0002 0C94 0000 		jmp iqGetTimeout
 106               	.LVL14:
 107               		.cfi_endproc
 108               	.LFE248:
 110               		.section	.text._get,"ax",@progbits
 112               	_get:
 113               	.LFB246:
  67:../../os/hal/src/hal_serial.c **** 
 114               		.loc 1 67 0
 115               		.cfi_startproc
 116               	.LVL15:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
  69:../../os/hal/src/hal_serial.c **** }
 121               		.loc 1 69 0
 122 0000 6FEF      		ldi r22,lo8(-1)
 123 0002 7FEF      		ldi r23,lo8(-1)
 124 0004 0596      		adiw r24,5
 125               	.LVL16:
 126 0006 0C94 0000 		jmp iqGetTimeout
 127               	.LVL17:
 128               		.cfi_endproc
 129               	.LFE246:
 131               		.section	.text._putt,"ax",@progbits
 133               	_putt:
 134               	.LFB247:
  72:../../os/hal/src/hal_serial.c **** 
 135               		.loc 1 72 0
 136               		.cfi_startproc
 137               	.LVL18:
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 0 */
 141               	.L__stack_usage = 0
  74:../../os/hal/src/hal_serial.c **** }
 142               		.loc 1 74 0
 143 0000 4796      		adiw r24,23
 144               	.LVL19:
 145 0002 0C94 0000 		jmp oqPutTimeout
 146               	.LVL20:
 147               		.cfi_endproc
 148               	.LFE247:
 150               		.section	.text._put,"ax",@progbits
 152               	_put:
 153               	.LFB245:
  62:../../os/hal/src/hal_serial.c **** 
 154               		.loc 1 62 0
 155               		.cfi_startproc
 156               	.LVL21:
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
  64:../../os/hal/src/hal_serial.c **** }
 161               		.loc 1 64 0
 162 0000 4FEF      		ldi r20,lo8(-1)
 163 0002 5FEF      		ldi r21,lo8(-1)
 164 0004 4796      		adiw r24,23
 165               	.LVL22:
 166 0006 0C94 0000 		jmp oqPutTimeout
 167               	.LVL23:
 168               		.cfi_endproc
 169               	.LFE245:
 171               		.section	.text._ctl,"ax",@progbits
 173               	_ctl:
 174               	.LFB262:
 175               		.cfi_startproc
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 0 */
 179               	.L__stack_usage = 0
 180 0000 6130      		cpi r22,1
 181 0002 7105      		cpc r23,__zero_reg__
 182 0004 01F0      		breq .L15
 183 0006 8CEE      		ldi r24,lo8(-20)
 184 0008 9FEF      		ldi r25,lo8(-1)
 185               	/* epilogue start */
 186 000a 0895      		ret
 187               	.L15:
 188 000c 90E0      		ldi r25,0
 189 000e 80E0      		ldi r24,0
 190 0010 0895      		ret
 191               		.cfi_endproc
 192               	.LFE262:
 194               		.section	.text.sdInit,"ax",@progbits
 195               	.global	sdInit
 197               	sdInit:
 198               	.LFB252:
  92:../../os/hal/src/hal_serial.c **** }
  93:../../os/hal/src/hal_serial.c **** 
  94:../../os/hal/src/hal_serial.c **** static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
  95:../../os/hal/src/hal_serial.c ****   SerialDriver *sdp = (SerialDriver *)ip;
  96:../../os/hal/src/hal_serial.c **** 
  97:../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
  98:../../os/hal/src/hal_serial.c **** 
  99:../../os/hal/src/hal_serial.c ****   switch (operation) {
 100:../../os/hal/src/hal_serial.c ****   case CHN_CTL_NOP:
 101:../../os/hal/src/hal_serial.c ****     osalDbgCheck(arg == NULL);
 102:../../os/hal/src/hal_serial.c ****     break;
 103:../../os/hal/src/hal_serial.c ****   case CHN_CTL_INVALID:
 104:../../os/hal/src/hal_serial.c ****     return HAL_RET_UNKNOWN_CTL;
 105:../../os/hal/src/hal_serial.c ****   default:
 106:../../os/hal/src/hal_serial.c **** #if defined(SD_LLD_IMPLEMENTS_CTL)
 107:../../os/hal/src/hal_serial.c ****     /* Delegating to the LLD if supported.*/
 108:../../os/hal/src/hal_serial.c ****     return sd_lld_control(sdp, operation, arg);
 109:../../os/hal/src/hal_serial.c **** #else
 110:../../os/hal/src/hal_serial.c ****     return HAL_RET_UNKNOWN_CTL;
 111:../../os/hal/src/hal_serial.c **** #endif
 112:../../os/hal/src/hal_serial.c ****   }
 113:../../os/hal/src/hal_serial.c ****   return HAL_RET_SUCCESS;
 114:../../os/hal/src/hal_serial.c **** }
 115:../../os/hal/src/hal_serial.c **** 
 116:../../os/hal/src/hal_serial.c **** static const struct SerialDriverVMT vmt = {
 117:../../os/hal/src/hal_serial.c ****   (size_t)0,
 118:../../os/hal/src/hal_serial.c ****   _write, _read, _put, _get,
 119:../../os/hal/src/hal_serial.c ****   _putt, _gett, _writet, _readt,
 120:../../os/hal/src/hal_serial.c ****   _ctl
 121:../../os/hal/src/hal_serial.c **** };
 122:../../os/hal/src/hal_serial.c **** 
 123:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
 124:../../os/hal/src/hal_serial.c **** /* Driver exported functions.                                                */
 125:../../os/hal/src/hal_serial.c **** /*===========================================================================*/
 126:../../os/hal/src/hal_serial.c **** 
 127:../../os/hal/src/hal_serial.c **** /**
 128:../../os/hal/src/hal_serial.c ****  * @brief   Serial Driver initialization.
 129:../../os/hal/src/hal_serial.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
 130:../../os/hal/src/hal_serial.c ****  *          no need to explicitly initialize the driver.
 131:../../os/hal/src/hal_serial.c ****  *
 132:../../os/hal/src/hal_serial.c ****  * @init
 133:../../os/hal/src/hal_serial.c ****  */
 134:../../os/hal/src/hal_serial.c **** void sdInit(void) {
 199               		.loc 1 134 0
 200               		.cfi_startproc
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 0 */
 204               	.L__stack_usage = 0
 135:../../os/hal/src/hal_serial.c **** 
 136:../../os/hal/src/hal_serial.c ****   sd_lld_init();
 205               		.loc 1 136 0
 206 0000 0C94 0000 		jmp sd_lld_init
 207               	.LVL24:
 208               		.cfi_endproc
 209               	.LFE252:
 211               		.section	.text.sdObjectInit,"ax",@progbits
 212               	.global	sdObjectInit
 214               	sdObjectInit:
 215               	.LFB253:
 137:../../os/hal/src/hal_serial.c **** }
 138:../../os/hal/src/hal_serial.c **** 
 139:../../os/hal/src/hal_serial.c **** /**
 140:../../os/hal/src/hal_serial.c ****  * @brief   Initializes a generic serial driver object.
 141:../../os/hal/src/hal_serial.c ****  * @details The HW dependent part of the initialization has to be performed
 142:../../os/hal/src/hal_serial.c ****  *          outside, usually in the hardware initialization code.
 143:../../os/hal/src/hal_serial.c ****  *
 144:../../os/hal/src/hal_serial.c ****  * @param[out] sdp      pointer to a @p SerialDriver structure
 145:../../os/hal/src/hal_serial.c ****  * @param[in] inotify   pointer to a callback function that is invoked when
 146:../../os/hal/src/hal_serial.c ****  *                      some data is read from the Queue. The value can be
 147:../../os/hal/src/hal_serial.c ****  *                      @p NULL.
 148:../../os/hal/src/hal_serial.c ****  * @param[in] onotify   pointer to a callback function that is invoked when
 149:../../os/hal/src/hal_serial.c ****  *                      some data is written in the Queue. The value can be
 150:../../os/hal/src/hal_serial.c ****  *                      @p NULL.
 151:../../os/hal/src/hal_serial.c ****  *
 152:../../os/hal/src/hal_serial.c ****  * @init
 153:../../os/hal/src/hal_serial.c ****  */
 154:../../os/hal/src/hal_serial.c **** #if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
 155:../../os/hal/src/hal_serial.c ****     (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
 156:../../os/hal/src/hal_serial.c ****     defined(__DOXYGEN__)
 157:../../os/hal/src/hal_serial.c **** void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 216               		.loc 1 157 0
 217               		.cfi_startproc
 218               	.LVL25:
 219 0000 EF92      		push r14
 220               	.LCFI0:
 221               		.cfi_def_cfa_offset 3
 222               		.cfi_offset 14, -2
 223 0002 FF92      		push r15
 224               	.LCFI1:
 225               		.cfi_def_cfa_offset 4
 226               		.cfi_offset 15, -3
 227 0004 0F93      		push r16
 228               	.LCFI2:
 229               		.cfi_def_cfa_offset 5
 230               		.cfi_offset 16, -4
 231 0006 1F93      		push r17
 232               	.LCFI3:
 233               		.cfi_def_cfa_offset 6
 234               		.cfi_offset 17, -5
 235 0008 CF93      		push r28
 236               	.LCFI4:
 237               		.cfi_def_cfa_offset 7
 238               		.cfi_offset 28, -6
 239 000a DF93      		push r29
 240               	.LCFI5:
 241               		.cfi_def_cfa_offset 8
 242               		.cfi_offset 29, -7
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 6 */
 246               	.L__stack_usage = 6
 247 000c EC01      		movw r28,r24
 248 000e 9B01      		movw r18,r22
 249 0010 7A01      		movw r14,r20
 158:../../os/hal/src/hal_serial.c **** 
 159:../../os/hal/src/hal_serial.c ****   sdp->vmt = &vmt;
 250               		.loc 1 159 0
 251 0012 FC01      		movw r30,r24
 252 0014 80E0      		ldi r24,lo8(vmt)
 253 0016 90E0      		ldi r25,hi8(vmt)
 254               	.LVL26:
 255 0018 8193      		st Z+,r24
 256 001a 9193      		st Z+,r25
 257               	.LVL27:
 258               	.LBB74:
 259               	.LBB75:
 260               	.LBB76:
 261               		.file 2 "../../os/rt/include/chevents.h"
   1:../../os/rt/include/chevents.h **** /*
   2:../../os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chevents.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chevents.h **** 
   5:../../os/rt/include/chevents.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chevents.h **** 
   7:../../os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chevents.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chevents.h **** 
  11:../../os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chevents.h **** 
  16:../../os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chevents.h **** */
  19:../../os/rt/include/chevents.h **** /*
  20:../../os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../os/rt/include/chevents.h ****  */
  22:../../os/rt/include/chevents.h **** 
  23:../../os/rt/include/chevents.h **** /**
  24:../../os/rt/include/chevents.h ****  * @file    rt/include/chevents.h
  25:../../os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:../../os/rt/include/chevents.h ****  *
  27:../../os/rt/include/chevents.h ****  * @addtogroup events
  28:../../os/rt/include/chevents.h ****  * @{
  29:../../os/rt/include/chevents.h ****  */
  30:../../os/rt/include/chevents.h **** 
  31:../../os/rt/include/chevents.h **** #ifndef CHEVENTS_H
  32:../../os/rt/include/chevents.h **** #define CHEVENTS_H
  33:../../os/rt/include/chevents.h **** 
  34:../../os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:../../os/rt/include/chevents.h **** 
  36:../../os/rt/include/chevents.h **** /*===========================================================================*/
  37:../../os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:../../os/rt/include/chevents.h **** /*===========================================================================*/
  39:../../os/rt/include/chevents.h **** 
  40:../../os/rt/include/chevents.h **** /*===========================================================================*/
  41:../../os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:../../os/rt/include/chevents.h **** /*===========================================================================*/
  43:../../os/rt/include/chevents.h **** 
  44:../../os/rt/include/chevents.h **** /*===========================================================================*/
  45:../../os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:../../os/rt/include/chevents.h **** /*===========================================================================*/
  47:../../os/rt/include/chevents.h **** 
  48:../../os/rt/include/chevents.h **** /*===========================================================================*/
  49:../../os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:../../os/rt/include/chevents.h **** /*===========================================================================*/
  51:../../os/rt/include/chevents.h **** 
  52:../../os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  53:../../os/rt/include/chevents.h **** 
  54:../../os/rt/include/chevents.h **** /**
  55:../../os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  56:../../os/rt/include/chevents.h ****  */
  57:../../os/rt/include/chevents.h **** struct event_listener {
  58:../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief Next Event Listener
  59:../../os/rt/include/chevents.h ****                                                     registered on the event
  60:../../os/rt/include/chevents.h ****                                                     source.                 */
  61:../../os/rt/include/chevents.h ****   thread_t              *listener;      /**< @brief Thread interested in the
  62:../../os/rt/include/chevents.h ****                                                     event source.           */
  63:../../os/rt/include/chevents.h ****   eventmask_t           events;         /**< @brief Events to be set in
  64:../../os/rt/include/chevents.h ****                                                     the listening thread.   */
  65:../../os/rt/include/chevents.h ****   eventflags_t          flags;          /**< @brief Flags added to the listener
  66:../../os/rt/include/chevents.h ****                                                     by the event source.    */
  67:../../os/rt/include/chevents.h ****   eventflags_t          wflags;         /**< @brief Flags that this listener
  68:../../os/rt/include/chevents.h ****                                                     interested in.          */
  69:../../os/rt/include/chevents.h **** };
  70:../../os/rt/include/chevents.h **** 
  71:../../os/rt/include/chevents.h **** /**
  72:../../os/rt/include/chevents.h ****  * @brief   Event Source structure.
  73:../../os/rt/include/chevents.h ****  */
  74:../../os/rt/include/chevents.h **** typedef struct event_source {
  75:../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief First Event Listener
  76:../../os/rt/include/chevents.h ****                                                     registered on the Event
  77:../../os/rt/include/chevents.h ****                                                     Source.                 */
  78:../../os/rt/include/chevents.h **** } event_source_t;
  79:../../os/rt/include/chevents.h **** 
  80:../../os/rt/include/chevents.h **** /**
  81:../../os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  82:../../os/rt/include/chevents.h ****  */
  83:../../os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  84:../../os/rt/include/chevents.h **** 
  85:../../os/rt/include/chevents.h **** /*===========================================================================*/
  86:../../os/rt/include/chevents.h **** /* Module macros.                                                            */
  87:../../os/rt/include/chevents.h **** /*===========================================================================*/
  88:../../os/rt/include/chevents.h **** 
  89:../../os/rt/include/chevents.h **** /**
  90:../../os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  91:../../os/rt/include/chevents.h ****  */
  92:../../os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  93:../../os/rt/include/chevents.h **** 
  94:../../os/rt/include/chevents.h **** /**
  95:../../os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  96:../../os/rt/include/chevents.h ****  */
  97:../../os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
  98:../../os/rt/include/chevents.h **** 
  99:../../os/rt/include/chevents.h **** /**
 100:../../os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 101:../../os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 102:../../os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 103:../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 104:../../os/rt/include/chevents.h ****  */
 105:../../os/rt/include/chevents.h **** #define __EVENTSOURCE_DATA(name) {(event_listener_t *)(&name)}
 106:../../os/rt/include/chevents.h **** 
 107:../../os/rt/include/chevents.h **** /**
 108:../../os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 109:../../os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 110:../../os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 111:../../os/rt/include/chevents.h ****  *
 112:../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 113:../../os/rt/include/chevents.h ****  */
 114:../../os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = __EVENTSOURCE_DATA(name)
 115:../../os/rt/include/chevents.h **** 
 116:../../os/rt/include/chevents.h **** /*===========================================================================*/
 117:../../os/rt/include/chevents.h **** /* External declarations.                                                    */
 118:../../os/rt/include/chevents.h **** /*===========================================================================*/
 119:../../os/rt/include/chevents.h **** 
 120:../../os/rt/include/chevents.h **** #ifdef __cplusplus
 121:../../os/rt/include/chevents.h **** extern "C" {
 122:../../os/rt/include/chevents.h **** #endif
 123:../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlagsI(event_source_t *esp,
 124:../../os/rt/include/chevents.h ****                                    event_listener_t *elp,
 125:../../os/rt/include/chevents.h ****                                    eventmask_t events,
 126:../../os/rt/include/chevents.h ****                                    eventflags_t wflags);
 127:../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 128:../../os/rt/include/chevents.h ****                                   event_listener_t *elp,
 129:../../os/rt/include/chevents.h ****                                   eventmask_t events,
 130:../../os/rt/include/chevents.h ****                                   eventflags_t wflags);
 131:../../os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 132:../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEventsI(eventmask_t events);
 133:../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 134:../../os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 135:../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 136:../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 137:../../os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 138:../../os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 139:../../os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 140:../../os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 141:../../os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 142:../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 143:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 144:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 145:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 146:../../os/rt/include/chevents.h **** #endif
 147:../../os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 148:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout);
 149:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout);
 150:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout);
 151:../../os/rt/include/chevents.h **** #endif
 152:../../os/rt/include/chevents.h **** #ifdef __cplusplus
 153:../../os/rt/include/chevents.h **** }
 154:../../os/rt/include/chevents.h **** #endif
 155:../../os/rt/include/chevents.h **** 
 156:../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 157:../../os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 158:../../os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 159:../../os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 160:../../os/rt/include/chevents.h **** #endif
 161:../../os/rt/include/chevents.h **** 
 162:../../os/rt/include/chevents.h **** /*===========================================================================*/
 163:../../os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 164:../../os/rt/include/chevents.h **** /*===========================================================================*/
 165:../../os/rt/include/chevents.h **** 
 166:../../os/rt/include/chevents.h **** /**
 167:../../os/rt/include/chevents.h ****  * @brief   Initializes an Event Source.
 168:../../os/rt/include/chevents.h ****  * @note    This function can be invoked before the kernel is initialized
 169:../../os/rt/include/chevents.h ****  *          because it just prepares a @p event_source_t structure.
 170:../../os/rt/include/chevents.h ****  *
 171:../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 172:../../os/rt/include/chevents.h ****  *
 173:../../os/rt/include/chevents.h ****  * @init
 174:../../os/rt/include/chevents.h ****  */
 175:../../os/rt/include/chevents.h **** static inline void chEvtObjectInit(event_source_t *esp) {
 176:../../os/rt/include/chevents.h **** 
 177:../../os/rt/include/chevents.h ****   esp->next = (event_listener_t *)esp;
 262               		.loc 2 177 0
 263 001c FB83      		std Y+3,r31
 264 001e EA83      		std Y+2,r30
 265               	.LVL28:
 266               	.LBE76:
 267               	.LBE75:
 268               	.LBE74:
 160:../../os/hal/src/hal_serial.c ****   osalEventObjectInit(&sdp->event);
 161:../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 269               		.loc 1 161 0
 270 0020 81E0      		ldi r24,lo8(1)
 271 0022 8C83      		std Y+4,r24
 162:../../os/hal/src/hal_serial.c ****   iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 272               		.loc 1 162 0
 273 0024 BE01      		movw r22,r28
 274               	.LVL29:
 275 0026 675D      		subi r22,-41
 276 0028 7F4F      		sbci r23,-1
 277 002a 8E01      		movw r16,r28
 278 002c 40E1      		ldi r20,lo8(16)
 279 002e 50E0      		ldi r21,0
 280               	.LVL30:
 281 0030 CE01      		movw r24,r28
 282 0032 0596      		adiw r24,5
 283 0034 0E94 0000 		call iqObjectInit
 284               	.LVL31:
 163:../../os/hal/src/hal_serial.c ****   oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 285               		.loc 1 163 0
 286 0038 BE01      		movw r22,r28
 287 003a 675C      		subi r22,-57
 288 003c 7F4F      		sbci r23,-1
 289 003e 9701      		movw r18,r14
 290 0040 40E1      		ldi r20,lo8(16)
 291 0042 50E0      		ldi r21,0
 292 0044 CE01      		movw r24,r28
 293 0046 4796      		adiw r24,23
 294 0048 0E94 0000 		call oqObjectInit
 295               	.LVL32:
 296               	/* epilogue start */
 164:../../os/hal/src/hal_serial.c **** }
 297               		.loc 1 164 0
 298 004c DF91      		pop r29
 299 004e CF91      		pop r28
 300               	.LVL33:
 301 0050 1F91      		pop r17
 302 0052 0F91      		pop r16
 303               	.LVL34:
 304 0054 FF90      		pop r15
 305 0056 EF90      		pop r14
 306               	.LVL35:
 307 0058 0895      		ret
 308               		.cfi_endproc
 309               	.LFE253:
 311               		.section	.text.sdStart,"ax",@progbits
 312               	.global	sdStart
 314               	sdStart:
 315               	.LFB254:
 165:../../os/hal/src/hal_serial.c **** #else
 166:../../os/hal/src/hal_serial.c **** void sdObjectInit(SerialDriver *sdp) {
 167:../../os/hal/src/hal_serial.c **** 
 168:../../os/hal/src/hal_serial.c ****   sdp->vmt = &vmt;
 169:../../os/hal/src/hal_serial.c ****   osalEventObjectInit(&sdp->event);
 170:../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 171:../../os/hal/src/hal_serial.c **** }
 172:../../os/hal/src/hal_serial.c **** #endif
 173:../../os/hal/src/hal_serial.c **** 
 174:../../os/hal/src/hal_serial.c **** /**
 175:../../os/hal/src/hal_serial.c ****  * @brief   Configures and starts the driver.
 176:../../os/hal/src/hal_serial.c ****  *
 177:../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 178:../../os/hal/src/hal_serial.c ****  * @param[in] config    the architecture-dependent serial driver configuration.
 179:../../os/hal/src/hal_serial.c ****  *                      If this parameter is set to @p NULL then a default
 180:../../os/hal/src/hal_serial.c ****  *                      configuration is used.
 181:../../os/hal/src/hal_serial.c ****  * @return              The operation status.
 182:../../os/hal/src/hal_serial.c ****  *
 183:../../os/hal/src/hal_serial.c ****  * @api
 184:../../os/hal/src/hal_serial.c ****  */
 185:../../os/hal/src/hal_serial.c **** msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
 316               		.loc 1 185 0
 317               		.cfi_startproc
 318               	.LVL36:
 319 0000 CF93      		push r28
 320               	.LCFI6:
 321               		.cfi_def_cfa_offset 3
 322               		.cfi_offset 28, -2
 323 0002 DF93      		push r29
 324               	.LCFI7:
 325               		.cfi_def_cfa_offset 4
 326               		.cfi_offset 29, -3
 327               	/* prologue: function */
 328               	/* frame size = 0 */
 329               	/* stack size = 2 */
 330               	.L__stack_usage = 2
 331 0004 EC01      		movw r28,r24
 332               	.LBB77:
 333               	.LBB78:
 334               	.LBB79:
 335               	.LBB80:
 336               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 337               		.loc 3 430 0
 338               	/* #APP */
 339               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 340 0006 F894      		cli
 341               	 ;  0 "" 2
 342               	/* #NOAPP */
 343               	.LBE80:
 344               	.LBE79:
 345               	.LBE78:
 346               	.LBE77:
 186:../../os/hal/src/hal_serial.c ****   msg_t msg;
 187:../../os/hal/src/hal_serial.c **** 
 188:../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 189:../../os/hal/src/hal_serial.c **** 
 190:../../os/hal/src/hal_serial.c ****   osalSysLock();
 191:../../os/hal/src/hal_serial.c ****   osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 192:../../os/hal/src/hal_serial.c ****                 "invalid state");
 193:../../os/hal/src/hal_serial.c **** 
 194:../../os/hal/src/hal_serial.c **** #if defined(SD_LLD_ENHANCED_API)
 195:../../os/hal/src/hal_serial.c ****   msg = sd_lld_start(sdp, config);
 196:../../os/hal/src/hal_serial.c **** #else
 197:../../os/hal/src/hal_serial.c ****   sd_lld_start(sdp, config);
 347               		.loc 1 197 0
 348 0008 0E94 0000 		call sd_lld_start
 349               	.LVL37:
 198:../../os/hal/src/hal_serial.c ****   msg = HAL_RET_SUCCESS;
 199:../../os/hal/src/hal_serial.c **** #endif
 200:../../os/hal/src/hal_serial.c ****   if (msg == HAL_RET_SUCCESS) {
 201:../../os/hal/src/hal_serial.c ****     sdp->state = SD_READY;
 350               		.loc 1 201 0
 351 000c 82E0      		ldi r24,lo8(2)
 352 000e 8C83      		std Y+4,r24
 353               	.LBB81:
 354               	.LBB82:
 355               	.LBB83:
 356               	.LBB84:
 357               	.LBB85:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 358               		.loc 3 440 0
 359               	/* #APP */
 360               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 361 0010 7894      		sei
 362               	 ;  0 "" 2
 363               	/* #NOAPP */
 364               	.LBE85:
 365               	.LBE84:
 366               	.LBE83:
 367               	.LBE82:
 368               	.LBE81:
 202:../../os/hal/src/hal_serial.c ****   }
 203:../../os/hal/src/hal_serial.c ****   else {
 204:../../os/hal/src/hal_serial.c ****     sdp->state = SD_STOP;
 205:../../os/hal/src/hal_serial.c ****   }
 206:../../os/hal/src/hal_serial.c **** 
 207:../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 208:../../os/hal/src/hal_serial.c **** 
 209:../../os/hal/src/hal_serial.c ****   return msg;
 210:../../os/hal/src/hal_serial.c **** }
 369               		.loc 1 210 0
 370 0012 90E0      		ldi r25,0
 371 0014 80E0      		ldi r24,0
 372               	/* epilogue start */
 373 0016 DF91      		pop r29
 374 0018 CF91      		pop r28
 375               	.LVL38:
 376 001a 0895      		ret
 377               		.cfi_endproc
 378               	.LFE254:
 380               		.section	.text.sdStop,"ax",@progbits
 381               	.global	sdStop
 383               	sdStop:
 384               	.LFB255:
 211:../../os/hal/src/hal_serial.c **** 
 212:../../os/hal/src/hal_serial.c **** /**
 213:../../os/hal/src/hal_serial.c ****  * @brief   Stops the driver.
 214:../../os/hal/src/hal_serial.c ****  * @details Any thread waiting on the driver's queues will be awakened with
 215:../../os/hal/src/hal_serial.c ****  *          the message @p MSG_RESET.
 216:../../os/hal/src/hal_serial.c ****  *
 217:../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 218:../../os/hal/src/hal_serial.c ****  *
 219:../../os/hal/src/hal_serial.c ****  * @api
 220:../../os/hal/src/hal_serial.c ****  */
 221:../../os/hal/src/hal_serial.c **** void sdStop(SerialDriver *sdp) {
 385               		.loc 1 221 0
 386               		.cfi_startproc
 387               	.LVL39:
 388 0000 CF93      		push r28
 389               	.LCFI8:
 390               		.cfi_def_cfa_offset 3
 391               		.cfi_offset 28, -2
 392 0002 DF93      		push r29
 393               	.LCFI9:
 394               		.cfi_def_cfa_offset 4
 395               		.cfi_offset 29, -3
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 2 */
 399               	.L__stack_usage = 2
 400 0004 EC01      		movw r28,r24
 401               	.LBB86:
 402               	.LBB87:
 403               	.LBB88:
 404               	.LBB89:
 430:../../os/common/ports/AVR/chcore.h **** }
 405               		.loc 3 430 0
 406               	/* #APP */
 407               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 408 0006 F894      		cli
 409               	 ;  0 "" 2
 410               	/* #NOAPP */
 411               	.LBE89:
 412               	.LBE88:
 413               	.LBE87:
 414               	.LBE86:
 222:../../os/hal/src/hal_serial.c **** 
 223:../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 224:../../os/hal/src/hal_serial.c **** 
 225:../../os/hal/src/hal_serial.c ****   osalSysLock();
 226:../../os/hal/src/hal_serial.c **** 
 227:../../os/hal/src/hal_serial.c ****   osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 228:../../os/hal/src/hal_serial.c ****                 "invalid state");
 229:../../os/hal/src/hal_serial.c **** 
 230:../../os/hal/src/hal_serial.c ****   sd_lld_stop(sdp);
 415               		.loc 1 230 0
 416 0008 0E94 0000 		call sd_lld_stop
 417               	.LVL40:
 231:../../os/hal/src/hal_serial.c ****   sdp->state = SD_STOP;
 418               		.loc 1 231 0
 419 000c 81E0      		ldi r24,lo8(1)
 420 000e 8C83      		std Y+4,r24
 232:../../os/hal/src/hal_serial.c ****   oqResetI(&sdp->oqueue);
 421               		.loc 1 232 0
 422 0010 CE01      		movw r24,r28
 423 0012 4796      		adiw r24,23
 424 0014 0E94 0000 		call oqResetI
 425               	.LVL41:
 233:../../os/hal/src/hal_serial.c ****   iqResetI(&sdp->iqueue);
 426               		.loc 1 233 0
 427 0018 CE01      		movw r24,r28
 428 001a 0596      		adiw r24,5
 429 001c 0E94 0000 		call iqResetI
 430               	.LVL42:
 431               	.LBB90:
 432               	.LBB91:
 433               		.file 4 "../../os/hal/osal/rt-nil/osal.h"
   1:../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/osal.h **** 
   4:../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/osal.h **** 
   8:../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/osal.h **** 
  10:../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/osal.h **** */
  16:../../os/hal/osal/rt-nil/osal.h **** 
  17:../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../os/hal/osal/rt-nil/osal.h **** 
  25:../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../os/hal/osal/rt-nil/osal.h **** 
  28:../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../os/hal/osal/rt-nil/osal.h **** 
  32:../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../os/hal/osal/rt-nil/osal.h **** 
  34:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/osal.h **** 
  38:../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../os/hal/osal/rt-nil/osal.h **** 
  46:../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../os/hal/osal/rt-nil/osal.h **** 
  50:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../os/hal/osal/rt-nil/osal.h **** 
  54:../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../os/hal/osal/rt-nil/osal.h **** 
  65:../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../os/hal/osal/rt-nil/osal.h **** 
  75:../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../os/hal/osal/rt-nil/osal.h **** 
  84:../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../os/hal/osal/rt-nil/osal.h **** 
  93:../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../os/hal/osal/rt-nil/osal.h **** 
  98:../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../os/hal/osal/rt-nil/osal.h **** 
 108:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../os/hal/osal/rt-nil/osal.h **** 
 112:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../os/hal/osal/rt-nil/osal.h **** 
 116:../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../os/hal/osal/rt-nil/osal.h **** 
 122:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../os/hal/osal/rt-nil/osal.h **** 
 127:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../os/hal/osal/rt-nil/osal.h **** 
 131:../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../os/hal/osal/rt-nil/osal.h **** 
 138:../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../os/hal/osal/rt-nil/osal.h **** 
 145:../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../os/hal/osal/rt-nil/osal.h **** 
 152:../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../os/hal/osal/rt-nil/osal.h **** 
 159:../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../os/hal/osal/rt-nil/osal.h **** 
 168:../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../os/hal/osal/rt-nil/osal.h **** 
 175:../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../os/hal/osal/rt-nil/osal.h **** 
 182:../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../os/hal/osal/rt-nil/osal.h **** 
 189:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../os/hal/osal/rt-nil/osal.h **** 
 200:../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../os/hal/osal/rt-nil/osal.h **** 
 207:../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../os/hal/osal/rt-nil/osal.h **** };
 220:../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../os/hal/osal/rt-nil/osal.h **** 
 222:../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../os/hal/osal/rt-nil/osal.h **** 
 234:../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../os/hal/osal/rt-nil/osal.h **** 
 247:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../os/hal/osal/rt-nil/osal.h **** 
 251:../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../os/hal/osal/rt-nil/osal.h **** 
 271:../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../os/hal/osal/rt-nil/osal.h **** 
 283:../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../os/hal/osal/rt-nil/osal.h **** 
 289:../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../os/hal/osal/rt-nil/osal.h **** 
 296:../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../os/hal/osal/rt-nil/osal.h **** 
 305:../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../os/hal/osal/rt-nil/osal.h **** 
 311:../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../os/hal/osal/rt-nil/osal.h **** 
 317:../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../os/hal/osal/rt-nil/osal.h **** 
 326:../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../os/hal/osal/rt-nil/osal.h **** 
 345:../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../os/hal/osal/rt-nil/osal.h **** 
 360:../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../os/hal/osal/rt-nil/osal.h **** 
 375:../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../os/hal/osal/rt-nil/osal.h **** 
 390:../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../os/hal/osal/rt-nil/osal.h **** 
 405:../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../os/hal/osal/rt-nil/osal.h **** 
 421:../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../os/hal/osal/rt-nil/osal.h **** 
 438:../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../os/hal/osal/rt-nil/osal.h **** 
 452:../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../os/hal/osal/rt-nil/osal.h **** 
 467:../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../os/hal/osal/rt-nil/osal.h **** 
 483:../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../os/hal/osal/rt-nil/osal.h **** 
 496:../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../os/hal/osal/rt-nil/osal.h **** 
 510:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../os/hal/osal/rt-nil/osal.h **** 
 514:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../os/hal/osal/rt-nil/osal.h **** 
 518:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../os/hal/osal/rt-nil/osal.h **** }
 520:../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../os/hal/osal/rt-nil/osal.h **** 
 522:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../os/hal/osal/rt-nil/osal.h **** 
 526:../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../os/hal/osal/rt-nil/osal.h **** 
 533:../../os/hal/osal/rt-nil/osal.h **** }
 534:../../os/hal/osal/rt-nil/osal.h **** 
 535:../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../os/hal/osal/rt-nil/osal.h **** 
 544:../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../os/hal/osal/rt-nil/osal.h **** }
 546:../../os/hal/osal/rt-nil/osal.h **** 
 547:../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../os/hal/osal/rt-nil/osal.h **** 
 554:../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../os/hal/osal/rt-nil/osal.h **** }
 556:../../os/hal/osal/rt-nil/osal.h **** 
 557:../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../os/hal/osal/rt-nil/osal.h **** 
 564:../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../os/hal/osal/rt-nil/osal.h **** }
 566:../../os/hal/osal/rt-nil/osal.h **** 
 567:../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../os/hal/osal/rt-nil/osal.h **** 
 575:../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../os/hal/osal/rt-nil/osal.h **** }
 577:../../os/hal/osal/rt-nil/osal.h **** 
 578:../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../os/hal/osal/rt-nil/osal.h **** 
 586:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../os/hal/osal/rt-nil/osal.h **** }
 588:../../os/hal/osal/rt-nil/osal.h **** 
 589:../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../os/hal/osal/rt-nil/osal.h **** 
 597:../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../os/hal/osal/rt-nil/osal.h **** }
 599:../../os/hal/osal/rt-nil/osal.h **** 
 600:../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../os/hal/osal/rt-nil/osal.h **** 
 608:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../os/hal/osal/rt-nil/osal.h **** }
 610:../../os/hal/osal/rt-nil/osal.h **** 
 611:../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../os/hal/osal/rt-nil/osal.h **** 
 626:../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../os/hal/osal/rt-nil/osal.h **** }
 628:../../os/hal/osal/rt-nil/osal.h **** 
 629:../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../os/hal/osal/rt-nil/osal.h **** 
 640:../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../os/hal/osal/rt-nil/osal.h **** }
 642:../../os/hal/osal/rt-nil/osal.h **** 
 643:../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../os/hal/osal/rt-nil/osal.h **** 
 655:../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../os/hal/osal/rt-nil/osal.h **** }
 657:../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../os/hal/osal/rt-nil/osal.h **** 
 659:../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../os/hal/osal/rt-nil/osal.h **** 
 667:../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../os/hal/osal/rt-nil/osal.h **** }
 669:../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../os/hal/osal/rt-nil/osal.h **** 
 671:../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../os/hal/osal/rt-nil/osal.h **** 
 682:../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 434               		.loc 4 682 0
 435 0020 0E94 0000 		call chSchRescheduleS
 436               	.LVL43:
 437               	.LBE91:
 438               	.LBE90:
 439               	.LBB92:
 440               	.LBB93:
 441               	.LBB94:
 442               	.LBB95:
 443               	.LBB96:
 444               		.loc 3 440 0
 445               	/* #APP */
 446               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 447 0024 7894      		sei
 448               	 ;  0 "" 2
 449               	/* epilogue start */
 450               	/* #NOAPP */
 451               	.LBE96:
 452               	.LBE95:
 453               	.LBE94:
 454               	.LBE93:
 455               	.LBE92:
 234:../../os/hal/src/hal_serial.c ****   osalOsRescheduleS();
 235:../../os/hal/src/hal_serial.c **** 
 236:../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 237:../../os/hal/src/hal_serial.c **** }
 456               		.loc 1 237 0
 457 0026 DF91      		pop r29
 458 0028 CF91      		pop r28
 459               	.LVL44:
 460 002a 0895      		ret
 461               		.cfi_endproc
 462               	.LFE255:
 464               		.section	.text.sdIncomingDataI,"ax",@progbits
 465               	.global	sdIncomingDataI
 467               	sdIncomingDataI:
 468               	.LFB256:
 238:../../os/hal/src/hal_serial.c **** 
 239:../../os/hal/src/hal_serial.c **** /**
 240:../../os/hal/src/hal_serial.c ****  * @brief   Handles incoming data.
 241:../../os/hal/src/hal_serial.c ****  * @details This function must be called from the input interrupt service
 242:../../os/hal/src/hal_serial.c ****  *          routine in order to enqueue incoming data and generate the
 243:../../os/hal/src/hal_serial.c ****  *          related events.
 244:../../os/hal/src/hal_serial.c ****  * @note    The incoming data event is only generated when the input queue
 245:../../os/hal/src/hal_serial.c ****  *          becomes non-empty.
 246:../../os/hal/src/hal_serial.c ****  * @note    In order to gain some performance it is suggested to not use
 247:../../os/hal/src/hal_serial.c ****  *          this function directly but copy this code directly into the
 248:../../os/hal/src/hal_serial.c ****  *          interrupt service routine.
 249:../../os/hal/src/hal_serial.c ****  *
 250:../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 251:../../os/hal/src/hal_serial.c ****  * @param[in] b         the byte to be written in the driver's Input Queue
 252:../../os/hal/src/hal_serial.c ****  *
 253:../../os/hal/src/hal_serial.c ****  * @iclass
 254:../../os/hal/src/hal_serial.c ****  */
 255:../../os/hal/src/hal_serial.c **** void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 469               		.loc 1 255 0
 470               		.cfi_startproc
 471               	.LVL45:
 472 0000 1F93      		push r17
 473               	.LCFI10:
 474               		.cfi_def_cfa_offset 3
 475               		.cfi_offset 17, -2
 476 0002 CF93      		push r28
 477               	.LCFI11:
 478               		.cfi_def_cfa_offset 4
 479               		.cfi_offset 28, -3
 480 0004 DF93      		push r29
 481               	.LCFI12:
 482               		.cfi_def_cfa_offset 5
 483               		.cfi_offset 29, -4
 484               	/* prologue: function */
 485               	/* frame size = 0 */
 486               	/* stack size = 3 */
 487               	.L__stack_usage = 3
 488 0006 EC01      		movw r28,r24
 489 0008 162F      		mov r17,r22
 256:../../os/hal/src/hal_serial.c **** 
 257:../../os/hal/src/hal_serial.c ****   osalDbgCheckClassI();
 258:../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 259:../../os/hal/src/hal_serial.c **** 
 260:../../os/hal/src/hal_serial.c ****   if (iqIsEmptyI(&sdp->iqueue))
 490               		.loc 1 260 0
 491 000a 8985      		ldd r24,Y+9
 492 000c 9A85      		ldd r25,Y+10
 493               	.LVL46:
 494 000e 892B      		or r24,r25
 495 0010 01F0      		breq .L23
 261:../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 262:../../os/hal/src/hal_serial.c ****   if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 496               		.loc 1 262 0
 497 0012 612F      		mov r22,r17
 498               	.LVL47:
 499 0014 CE01      		movw r24,r28
 500 0016 0596      		adiw r24,5
 501 0018 0E94 0000 		call iqPutI
 502               	.LVL48:
 503 001c 97FD      		sbrc r25,7
 504 001e 00C0      		rjmp .L24
 505               	.L20:
 506               	/* epilogue start */
 263:../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 264:../../os/hal/src/hal_serial.c **** }
 507               		.loc 1 264 0
 508 0020 DF91      		pop r29
 509 0022 CF91      		pop r28
 510               	.LVL49:
 511 0024 1F91      		pop r17
 512               	.LVL50:
 513 0026 0895      		ret
 514               	.LVL51:
 515               	.L23:
 516               	.LBB97:
 517               	.LBB98:
 683:../../os/hal/osal/rt-nil/osal.h **** }
 684:../../os/hal/osal/rt-nil/osal.h **** 
 685:../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../os/hal/osal/rt-nil/osal.h **** 
 700:../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../os/hal/osal/rt-nil/osal.h **** }
 702:../../os/hal/osal/rt-nil/osal.h **** 
 703:../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../os/hal/osal/rt-nil/osal.h **** 
 715:../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../os/hal/osal/rt-nil/osal.h **** }
 717:../../os/hal/osal/rt-nil/osal.h **** 
 718:../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../os/hal/osal/rt-nil/osal.h **** 
 729:../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../os/hal/osal/rt-nil/osal.h **** }
 731:../../os/hal/osal/rt-nil/osal.h **** 
 732:../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../os/hal/osal/rt-nil/osal.h **** 
 750:../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../os/hal/osal/rt-nil/osal.h **** }
 752:../../os/hal/osal/rt-nil/osal.h **** 
 753:../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../os/hal/osal/rt-nil/osal.h **** 
 767:../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../os/hal/osal/rt-nil/osal.h **** }
 769:../../os/hal/osal/rt-nil/osal.h **** 
 770:../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../os/hal/osal/rt-nil/osal.h **** 
 784:../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../os/hal/osal/rt-nil/osal.h **** }
 786:../../os/hal/osal/rt-nil/osal.h **** 
 787:../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../os/hal/osal/rt-nil/osal.h **** 
 799:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../os/hal/osal/rt-nil/osal.h **** }
 801:../../os/hal/osal/rt-nil/osal.h **** 
 802:../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../os/hal/osal/rt-nil/osal.h **** 
 824:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../os/hal/osal/rt-nil/osal.h **** }
 826:../../os/hal/osal/rt-nil/osal.h **** 
 827:../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../os/hal/osal/rt-nil/osal.h **** 
 839:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../os/hal/osal/rt-nil/osal.h **** }
 841:../../os/hal/osal/rt-nil/osal.h **** 
 842:../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../os/hal/osal/rt-nil/osal.h **** 
 854:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../os/hal/osal/rt-nil/osal.h **** }
 856:../../os/hal/osal/rt-nil/osal.h **** 
 857:../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../os/hal/osal/rt-nil/osal.h **** 
 866:../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
 867:../../os/hal/osal/rt-nil/osal.h **** }
 868:../../os/hal/osal/rt-nil/osal.h **** 
 869:../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../os/hal/osal/rt-nil/osal.h **** 
 895:../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../os/hal/osal/rt-nil/osal.h **** }
 897:../../os/hal/osal/rt-nil/osal.h **** 
 898:../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../os/hal/osal/rt-nil/osal.h **** 
 908:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../os/hal/osal/rt-nil/osal.h **** }
 910:../../os/hal/osal/rt-nil/osal.h **** 
 911:../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../os/hal/osal/rt-nil/osal.h **** 
 921:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 922:../../os/hal/osal/rt-nil/osal.h **** }
 923:../../os/hal/osal/rt-nil/osal.h **** 
 924:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 925:../../os/hal/osal/rt-nil/osal.h **** /**
 926:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes an event source object.
 927:../../os/hal/osal/rt-nil/osal.h ****  *
 928:../../os/hal/osal/rt-nil/osal.h ****  * @param[out] esp      pointer to the event source object
 929:../../os/hal/osal/rt-nil/osal.h ****  *
 930:../../os/hal/osal/rt-nil/osal.h ****  * @init
 931:../../os/hal/osal/rt-nil/osal.h ****  */
 932:../../os/hal/osal/rt-nil/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 933:../../os/hal/osal/rt-nil/osal.h **** 
 934:../../os/hal/osal/rt-nil/osal.h ****   chEvtObjectInit(esp);
 935:../../os/hal/osal/rt-nil/osal.h **** }
 936:../../os/hal/osal/rt-nil/osal.h **** #else
 937:../../os/hal/osal/rt-nil/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 938:../../os/hal/osal/rt-nil/osal.h **** 
 939:../../os/hal/osal/rt-nil/osal.h ****   osalDbgCheck(esp != NULL);
 940:../../os/hal/osal/rt-nil/osal.h **** 
 941:../../os/hal/osal/rt-nil/osal.h ****   esp->flags = (eventflags_t)0;
 942:../../os/hal/osal/rt-nil/osal.h ****   esp->cb    = NULL;
 943:../../os/hal/osal/rt-nil/osal.h ****   esp->param = NULL;
 944:../../os/hal/osal/rt-nil/osal.h **** }
 945:../../os/hal/osal/rt-nil/osal.h **** #endif
 946:../../os/hal/osal/rt-nil/osal.h **** 
 947:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 948:../../os/hal/osal/rt-nil/osal.h **** /**
 949:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Add flags to an event source object.
 950:../../os/hal/osal/rt-nil/osal.h ****  *
 951:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] esp       pointer to the event flags object
 952:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 953:../../os/hal/osal/rt-nil/osal.h ****  *
 954:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 955:../../os/hal/osal/rt-nil/osal.h ****  */
 956:../../os/hal/osal/rt-nil/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 957:../../os/hal/osal/rt-nil/osal.h ****                                             eventflags_t flags) {
 958:../../os/hal/osal/rt-nil/osal.h **** 
 959:../../os/hal/osal/rt-nil/osal.h ****   chEvtBroadcastFlagsI(esp, flags);
 518               		.loc 4 959 0
 519 0028 64E0      		ldi r22,lo8(4)
 520 002a CE01      		movw r24,r28
 521 002c 0296      		adiw r24,2
 522               	.LVL52:
 523 002e 0E94 0000 		call chEvtBroadcastFlagsI
 524               	.LVL53:
 525               	.LBE98:
 526               	.LBE97:
 262:../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 527               		.loc 1 262 0
 528 0032 612F      		mov r22,r17
 529 0034 CE01      		movw r24,r28
 530 0036 0596      		adiw r24,5
 531 0038 0E94 0000 		call iqPutI
 532               	.LVL54:
 533 003c 97FF      		sbrs r25,7
 534 003e 00C0      		rjmp .L20
 535               	.LVL55:
 536               	.L24:
 537               	.LBB99:
 538               	.LBB100:
 539               		.loc 4 959 0
 540 0040 60E0      		ldi r22,0
 541 0042 CE01      		movw r24,r28
 542 0044 0296      		adiw r24,2
 543               	.LVL56:
 544               	/* epilogue start */
 545               	.LBE100:
 546               	.LBE99:
 547               		.loc 1 264 0
 548 0046 DF91      		pop r29
 549 0048 CF91      		pop r28
 550               	.LVL57:
 551 004a 1F91      		pop r17
 552               	.LVL58:
 553               	.LBB102:
 554               	.LBB101:
 555               		.loc 4 959 0
 556 004c 0C94 0000 		jmp chEvtBroadcastFlagsI
 557               	.LVL59:
 558               	.LBE101:
 559               	.LBE102:
 560               		.cfi_endproc
 561               	.LFE256:
 563               		.section	.text.sdRequestDataI,"ax",@progbits
 564               	.global	sdRequestDataI
 566               	sdRequestDataI:
 567               	.LFB257:
 265:../../os/hal/src/hal_serial.c **** 
 266:../../os/hal/src/hal_serial.c **** /**
 267:../../os/hal/src/hal_serial.c ****  * @brief   Handles outgoing data.
 268:../../os/hal/src/hal_serial.c ****  * @details Must be called from the output interrupt service routine in order
 269:../../os/hal/src/hal_serial.c ****  *          to get the next byte to be transmitted.
 270:../../os/hal/src/hal_serial.c ****  * @note    In order to gain some performance it is suggested to not use
 271:../../os/hal/src/hal_serial.c ****  *          this function directly but copy this code directly into the
 272:../../os/hal/src/hal_serial.c ****  *          interrupt service routine.
 273:../../os/hal/src/hal_serial.c ****  *
 274:../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 275:../../os/hal/src/hal_serial.c ****  * @return              The byte value read from the driver's output queue.
 276:../../os/hal/src/hal_serial.c ****  * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 277:../../os/hal/src/hal_serial.c ****  *                      disables the interrupt source when this happens).
 278:../../os/hal/src/hal_serial.c ****  *
 279:../../os/hal/src/hal_serial.c ****  * @iclass
 280:../../os/hal/src/hal_serial.c ****  */
 281:../../os/hal/src/hal_serial.c **** msg_t sdRequestDataI(SerialDriver *sdp) {
 568               		.loc 1 281 0
 569               		.cfi_startproc
 570               	.LVL60:
 571 0000 0F93      		push r16
 572               	.LCFI13:
 573               		.cfi_def_cfa_offset 3
 574               		.cfi_offset 16, -2
 575 0002 1F93      		push r17
 576               	.LCFI14:
 577               		.cfi_def_cfa_offset 4
 578               		.cfi_offset 17, -3
 579 0004 CF93      		push r28
 580               	.LCFI15:
 581               		.cfi_def_cfa_offset 5
 582               		.cfi_offset 28, -4
 583 0006 DF93      		push r29
 584               	.LCFI16:
 585               		.cfi_def_cfa_offset 6
 586               		.cfi_offset 29, -5
 587               	/* prologue: function */
 588               	/* frame size = 0 */
 589               	/* stack size = 4 */
 590               	.L__stack_usage = 4
 591 0008 8C01      		movw r16,r24
 282:../../os/hal/src/hal_serial.c ****   msg_t  b;
 283:../../os/hal/src/hal_serial.c **** 
 284:../../os/hal/src/hal_serial.c ****   osalDbgCheckClassI();
 285:../../os/hal/src/hal_serial.c ****   osalDbgCheck(sdp != NULL);
 286:../../os/hal/src/hal_serial.c **** 
 287:../../os/hal/src/hal_serial.c ****   b = oqGetI(&sdp->oqueue);
 592               		.loc 1 287 0
 593 000a 4796      		adiw r24,23
 594               	.LVL61:
 595 000c 0E94 0000 		call oqGetI
 596               	.LVL62:
 597 0010 EC01      		movw r28,r24
 598               	.LVL63:
 288:../../os/hal/src/hal_serial.c ****   if (b < MSG_OK)
 599               		.loc 1 288 0
 600 0012 97FD      		sbrc r25,7
 601 0014 00C0      		rjmp .L27
 289:../../os/hal/src/hal_serial.c ****     chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 290:../../os/hal/src/hal_serial.c ****   return b;
 291:../../os/hal/src/hal_serial.c **** }
 602               		.loc 1 291 0
 603 0016 CE01      		movw r24,r28
 604               	/* epilogue start */
 605 0018 DF91      		pop r29
 606 001a CF91      		pop r28
 607 001c 1F91      		pop r17
 608 001e 0F91      		pop r16
 609               	.LVL64:
 610 0020 0895      		ret
 611               	.LVL65:
 612               	.L27:
 613               	.LBB103:
 614               	.LBB104:
 615               		.loc 4 959 0
 616 0022 68E0      		ldi r22,lo8(8)
 617 0024 C801      		movw r24,r16
 618               	.LVL66:
 619 0026 0296      		adiw r24,2
 620               	.LVL67:
 621 0028 0E94 0000 		call chEvtBroadcastFlagsI
 622               	.LVL68:
 623               	.LBE104:
 624               	.LBE103:
 625               		.loc 1 291 0
 626 002c CE01      		movw r24,r28
 627               	/* epilogue start */
 628 002e DF91      		pop r29
 629 0030 CF91      		pop r28
 630               	.LVL69:
 631 0032 1F91      		pop r17
 632 0034 0F91      		pop r16
 633               	.LVL70:
 634 0036 0895      		ret
 635               		.cfi_endproc
 636               	.LFE257:
 638               		.section	.text.sdPutWouldBlock,"ax",@progbits
 639               	.global	sdPutWouldBlock
 641               	sdPutWouldBlock:
 642               	.LFB258:
 292:../../os/hal/src/hal_serial.c **** 
 293:../../os/hal/src/hal_serial.c **** /**
 294:../../os/hal/src/hal_serial.c ****  * @brief   Direct output check on a @p SerialDriver.
 295:../../os/hal/src/hal_serial.c ****  * @note    This function bypasses the indirect access to the channel and
 296:../../os/hal/src/hal_serial.c ****  *          checks directly the output queue. This is faster but cannot
 297:../../os/hal/src/hal_serial.c ****  *          be used to check different channels implementations.
 298:../../os/hal/src/hal_serial.c ****  *
 299:../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 300:../../os/hal/src/hal_serial.c ****  * @return              The queue status.
 301:../../os/hal/src/hal_serial.c ****  * @retval false        if the next write operation would not block.
 302:../../os/hal/src/hal_serial.c ****  * @retval true         if the next write operation would block.
 303:../../os/hal/src/hal_serial.c ****  *
 304:../../os/hal/src/hal_serial.c ****  * @deprecated
 305:../../os/hal/src/hal_serial.c ****  *
 306:../../os/hal/src/hal_serial.c ****  * @api
 307:../../os/hal/src/hal_serial.c ****  */
 308:../../os/hal/src/hal_serial.c **** bool sdPutWouldBlock(SerialDriver *sdp) {
 643               		.loc 1 308 0
 644               		.cfi_startproc
 645               	.LVL71:
 646               	/* prologue: function */
 647               	/* frame size = 0 */
 648               	/* stack size = 0 */
 649               	.L__stack_usage = 0
 650               	.LBB105:
 651               	.LBB106:
 652               	.LBB107:
 653               	.LBB108:
 430:../../os/common/ports/AVR/chcore.h **** }
 654               		.loc 3 430 0
 655               	/* #APP */
 656               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 657 0000 F894      		cli
 658               	 ;  0 "" 2
 659               	/* #NOAPP */
 660               	.LBE108:
 661               	.LBE107:
 662               	.LBE106:
 663               	.LBE105:
 309:../../os/hal/src/hal_serial.c ****   bool b;
 310:../../os/hal/src/hal_serial.c **** 
 311:../../os/hal/src/hal_serial.c ****   osalSysLock();
 312:../../os/hal/src/hal_serial.c ****   b = oqIsFullI(&sdp->oqueue);
 664               		.loc 1 312 0
 665 0002 FC01      		movw r30,r24
 666 0004 238D      		ldd r18,Z+27
 667 0006 348D      		ldd r19,Z+28
 668               	.LVL72:
 669               	.LBB109:
 670               	.LBB110:
 671               	.LBB111:
 672               	.LBB112:
 673               	.LBB113:
 674               		.loc 3 440 0
 675               	/* #APP */
 676               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 677 0008 7894      		sei
 678               	 ;  0 "" 2
 679               	/* #NOAPP */
 680               	.LBE113:
 681               	.LBE112:
 682               	.LBE111:
 683               	.LBE110:
 684               	.LBE109:
 685               		.loc 1 312 0
 686 000a 81E0      		ldi r24,lo8(1)
 687               	.LVL73:
 688 000c 232B      		or r18,r19
 689 000e 01F0      		breq .L29
 690 0010 80E0      		ldi r24,0
 691               	.L29:
 692               	/* epilogue start */
 313:../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 314:../../os/hal/src/hal_serial.c **** 
 315:../../os/hal/src/hal_serial.c ****   return b;
 316:../../os/hal/src/hal_serial.c **** }
 693               		.loc 1 316 0
 694 0012 0895      		ret
 695               		.cfi_endproc
 696               	.LFE258:
 698               		.section	.text.sdGetWouldBlock,"ax",@progbits
 699               	.global	sdGetWouldBlock
 701               	sdGetWouldBlock:
 702               	.LFB259:
 317:../../os/hal/src/hal_serial.c **** 
 318:../../os/hal/src/hal_serial.c **** /**
 319:../../os/hal/src/hal_serial.c ****  * @brief   Direct input check on a @p SerialDriver.
 320:../../os/hal/src/hal_serial.c ****  * @note    This function bypasses the indirect access to the channel and
 321:../../os/hal/src/hal_serial.c ****  *          checks directly the input queue. This is faster but cannot
 322:../../os/hal/src/hal_serial.c ****  *          be used to check different channels implementations.
 323:../../os/hal/src/hal_serial.c ****  *
 324:../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 325:../../os/hal/src/hal_serial.c ****  * @return              The queue status.
 326:../../os/hal/src/hal_serial.c ****  * @retval false        if the next write operation would not block.
 327:../../os/hal/src/hal_serial.c ****  * @retval true         if the next write operation would block.
 328:../../os/hal/src/hal_serial.c ****  *
 329:../../os/hal/src/hal_serial.c ****  * @deprecated
 330:../../os/hal/src/hal_serial.c ****  *
 331:../../os/hal/src/hal_serial.c ****  * @api
 332:../../os/hal/src/hal_serial.c ****  */
 333:../../os/hal/src/hal_serial.c **** bool sdGetWouldBlock(SerialDriver *sdp) {
 703               		.loc 1 333 0
 704               		.cfi_startproc
 705               	.LVL74:
 706               	/* prologue: function */
 707               	/* frame size = 0 */
 708               	/* stack size = 0 */
 709               	.L__stack_usage = 0
 710               	.LBB114:
 711               	.LBB115:
 712               	.LBB116:
 713               	.LBB117:
 430:../../os/common/ports/AVR/chcore.h **** }
 714               		.loc 3 430 0
 715               	/* #APP */
 716               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 717 0000 F894      		cli
 718               	 ;  0 "" 2
 719               	/* #NOAPP */
 720               	.LBE117:
 721               	.LBE116:
 722               	.LBE115:
 723               	.LBE114:
 334:../../os/hal/src/hal_serial.c ****   bool b;
 335:../../os/hal/src/hal_serial.c **** 
 336:../../os/hal/src/hal_serial.c ****   osalSysLock();
 337:../../os/hal/src/hal_serial.c ****   b = iqIsEmptyI(&sdp->iqueue);
 724               		.loc 1 337 0
 725 0002 FC01      		movw r30,r24
 726 0004 2185      		ldd r18,Z+9
 727 0006 3285      		ldd r19,Z+10
 728               	.LVL75:
 729               	.LBB118:
 730               	.LBB119:
 731               	.LBB120:
 732               	.LBB121:
 733               	.LBB122:
 734               		.loc 3 440 0
 735               	/* #APP */
 736               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 737 0008 7894      		sei
 738               	 ;  0 "" 2
 739               	/* #NOAPP */
 740               	.LBE122:
 741               	.LBE121:
 742               	.LBE120:
 743               	.LBE119:
 744               	.LBE118:
 745               		.loc 1 337 0
 746 000a 81E0      		ldi r24,lo8(1)
 747               	.LVL76:
 748 000c 232B      		or r18,r19
 749 000e 01F0      		breq .L34
 750 0010 80E0      		ldi r24,0
 751               	.L34:
 752               	/* epilogue start */
 338:../../os/hal/src/hal_serial.c ****   osalSysUnlock();
 339:../../os/hal/src/hal_serial.c **** 
 340:../../os/hal/src/hal_serial.c ****   return b;
 341:../../os/hal/src/hal_serial.c **** }
 753               		.loc 1 341 0
 754 0012 0895      		ret
 755               		.cfi_endproc
 756               	.LFE259:
 758               		.section	.text.sdControl,"ax",@progbits
 759               	.global	sdControl
 761               	sdControl:
 762               	.LFB260:
 342:../../os/hal/src/hal_serial.c **** 
 343:../../os/hal/src/hal_serial.c **** /**
 344:../../os/hal/src/hal_serial.c ****  * @brief   Control operation on a serial port.
 345:../../os/hal/src/hal_serial.c ****  *
 346:../../os/hal/src/hal_serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 347:../../os/hal/src/hal_serial.c ****  * @param[in] operation control operation code
 348:../../os/hal/src/hal_serial.c ****  * @param[in,out] arg   operation argument
 349:../../os/hal/src/hal_serial.c ****  *
 350:../../os/hal/src/hal_serial.c ****  * @return              The control operation status.
 351:../../os/hal/src/hal_serial.c ****  * @retval MSG_OK       in case of success.
 352:../../os/hal/src/hal_serial.c ****  * @retval MSG_TIMEOUT  in case of operation timeout.
 353:../../os/hal/src/hal_serial.c ****  * @retval MSG_RESET    in case of operation reset.
 354:../../os/hal/src/hal_serial.c ****  *
 355:../../os/hal/src/hal_serial.c ****  * @api
 356:../../os/hal/src/hal_serial.c ****  */
 357:../../os/hal/src/hal_serial.c **** msg_t sdControl(SerialDriver *sdp, unsigned int operation, void *arg) {
 763               		.loc 1 357 0
 764               		.cfi_startproc
 765               	.LVL77:
 766               	/* prologue: function */
 767               	/* frame size = 0 */
 768               	/* stack size = 0 */
 769               	.L__stack_usage = 0
 770               	.LBB123:
 771               	.LBB124:
  99:../../os/hal/src/hal_serial.c ****   case CHN_CTL_NOP:
 772               		.loc 1 99 0
 773 0000 6130      		cpi r22,1
 774 0002 7105      		cpc r23,__zero_reg__
 775 0004 01F0      		breq .L43
 104:../../os/hal/src/hal_serial.c ****   default:
 776               		.loc 1 104 0
 777 0006 8CEE      		ldi r24,lo8(-20)
 778 0008 9FEF      		ldi r25,lo8(-1)
 779               	.LVL78:
 780               	/* epilogue start */
 781               	.LBE124:
 782               	.LBE123:
 358:../../os/hal/src/hal_serial.c **** 
 359:../../os/hal/src/hal_serial.c ****   return _ctl((void *)sdp, operation, arg);
 360:../../os/hal/src/hal_serial.c **** }
 783               		.loc 1 360 0
 784 000a 0895      		ret
 785               	.LVL79:
 786               	.L43:
 787               	.LBB126:
 788               	.LBB125:
 113:../../os/hal/src/hal_serial.c **** }
 789               		.loc 1 113 0
 790 000c 90E0      		ldi r25,0
 791 000e 80E0      		ldi r24,0
 792               	.LVL80:
 793 0010 0895      		ret
 794               	.LBE125:
 795               	.LBE126:
 796               		.cfi_endproc
 797               	.LFE260:
 799               		.section	.rodata.vmt,"a",@progbits
 802               	vmt:
 803 0000 0000      		.word	0
 804 0002 0000      		.word	gs(_write)
 805 0004 0000      		.word	gs(_read)
 806 0006 0000      		.word	gs(_put)
 807 0008 0000      		.word	gs(_get)
 808 000a 0000      		.word	gs(_putt)
 809 000c 0000      		.word	gs(_gett)
 810 000e 0000      		.word	gs(_writet)
 811 0010 0000      		.word	gs(_readt)
 812 0012 0000      		.word	gs(_ctl)
 813               		.text
 814               	.Letext0:
 815               		.file 5 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 816               		.file 6 "/usr/lib/avr/include/stdint.h"
 817               		.file 7 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 818               		.file 8 "../../os/rt/include/chearly.h"
 819               		.file 9 "../../os/rt/include/chobjects.h"
 820               		.file 10 "../../os/rt/include/chrfcu.h"
 821               		.file 11 "../../os/rt/include/chdebug.h"
 822               		.file 12 "../../os/rt/include/chtime.h"
 823               		.file 13 "../../os/rt/include/chlists.h"
 824               		.file 14 "../../os/rt/include/chsem.h"
 825               		.file 15 "../../os/rt/include/chmtx.h"
 826               		.file 16 "../../os/rt/include/chsys.h"
 827               		.file 17 "../../os/rt/include/chregistry.h"
 828               		.file 18 "../../os/oslib/include/chmemcore.h"
 829               		.file 19 "../../os/hal/include/hal_queues.h"
 830               		.file 20 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 831               		.file 21 "../../os/hal/include/hal_pwm.h"
 832               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_pwm_lld.h"
 833               		.file 23 "../../os/hal/include/hal_serial.h"
 834               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 835               		.file 25 "../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_serial.c
     /tmp/ccaYdI5r.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccaYdI5r.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccaYdI5r.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccaYdI5r.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccaYdI5r.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccaYdI5r.s:12     .text._readt:0000000000000000 _readt
     /tmp/ccaYdI5r.s:32     .text._read:0000000000000000 _read
     /tmp/ccaYdI5r.s:53     .text._writet:0000000000000000 _writet
     /tmp/ccaYdI5r.s:72     .text._write:0000000000000000 _write
     /tmp/ccaYdI5r.s:93     .text._gett:0000000000000000 _gett
     /tmp/ccaYdI5r.s:112    .text._get:0000000000000000 _get
     /tmp/ccaYdI5r.s:133    .text._putt:0000000000000000 _putt
     /tmp/ccaYdI5r.s:152    .text._put:0000000000000000 _put
     /tmp/ccaYdI5r.s:173    .text._ctl:0000000000000000 _ctl
     /tmp/ccaYdI5r.s:197    .text.sdInit:0000000000000000 sdInit
     /tmp/ccaYdI5r.s:214    .text.sdObjectInit:0000000000000000 sdObjectInit
     /tmp/ccaYdI5r.s:802    .rodata.vmt:0000000000000000 vmt
     /tmp/ccaYdI5r.s:314    .text.sdStart:0000000000000000 sdStart
     /tmp/ccaYdI5r.s:383    .text.sdStop:0000000000000000 sdStop
     /tmp/ccaYdI5r.s:467    .text.sdIncomingDataI:0000000000000000 sdIncomingDataI
     /tmp/ccaYdI5r.s:566    .text.sdRequestDataI:0000000000000000 sdRequestDataI
     /tmp/ccaYdI5r.s:641    .text.sdPutWouldBlock:0000000000000000 sdPutWouldBlock
     /tmp/ccaYdI5r.s:701    .text.sdGetWouldBlock:0000000000000000 sdGetWouldBlock
     /tmp/ccaYdI5r.s:761    .text.sdControl:0000000000000000 sdControl

UNDEFINED SYMBOLS
iqReadTimeout
oqWriteTimeout
iqGetTimeout
oqPutTimeout
sd_lld_init
iqObjectInit
oqObjectInit
sd_lld_start
sd_lld_stop
oqResetI
iqResetI
chSchRescheduleS
iqPutI
chEvtBroadcastFlagsI
oqGetI
__do_copy_data
