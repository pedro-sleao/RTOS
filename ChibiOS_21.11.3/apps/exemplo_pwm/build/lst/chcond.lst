   1               		.file	"chcond.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chCondObjectInit,"ax",@progbits
  11               	.global	chCondObjectInit
  13               	chCondObjectInit:
  14               	.LFB195:
  15               		.file 1 "../../os/rt/src/chcond.c"
   1:../../os/rt/src/chcond.c **** /*
   2:../../os/rt/src/chcond.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/src/chcond.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/src/chcond.c **** 
   5:../../os/rt/src/chcond.c ****     This file is part of ChibiOS.
   6:../../os/rt/src/chcond.c **** 
   7:../../os/rt/src/chcond.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/src/chcond.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/src/chcond.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/src/chcond.c **** 
  11:../../os/rt/src/chcond.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/src/chcond.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/src/chcond.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/src/chcond.c ****     GNU General Public License for more details.
  15:../../os/rt/src/chcond.c **** 
  16:../../os/rt/src/chcond.c ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/src/chcond.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/src/chcond.c **** */
  19:../../os/rt/src/chcond.c **** /*
  20:../../os/rt/src/chcond.c ****    Concepts and parts of this file have been contributed by Leon Woestenberg.
  21:../../os/rt/src/chcond.c ****  */
  22:../../os/rt/src/chcond.c **** 
  23:../../os/rt/src/chcond.c **** /**
  24:../../os/rt/src/chcond.c ****  * @file    rt/src/chcond.c
  25:../../os/rt/src/chcond.c ****  * @brief   Condition Variables code.
  26:../../os/rt/src/chcond.c ****  *
  27:../../os/rt/src/chcond.c ****  * @addtogroup condvars
  28:../../os/rt/src/chcond.c ****  * @details This module implements the Condition Variables mechanism. Condition
  29:../../os/rt/src/chcond.c ****  *          variables are an extensions to the mutex subsystem and cannot
  30:../../os/rt/src/chcond.c ****  *          work alone.
  31:../../os/rt/src/chcond.c ****  *          <h2>Operation mode</h2>
  32:../../os/rt/src/chcond.c ****  *          The condition variable is a synchronization object meant to be
  33:../../os/rt/src/chcond.c ****  *          used inside a zone protected by a mutex. Mutexes and condition
  34:../../os/rt/src/chcond.c ****  *          variables together can implement a Monitor construct.
  35:../../os/rt/src/chcond.c ****  * @pre     In order to use the condition variable APIs the @p CH_CFG_USE_CONDVARS
  36:../../os/rt/src/chcond.c ****  *          option must be enabled in @p chconf.h.
  37:../../os/rt/src/chcond.c ****  * @{
  38:../../os/rt/src/chcond.c ****  */
  39:../../os/rt/src/chcond.c **** 
  40:../../os/rt/src/chcond.c **** #include "ch.h"
  41:../../os/rt/src/chcond.c **** 
  42:../../os/rt/src/chcond.c **** #if (CH_CFG_USE_CONDVARS == TRUE) || defined(__DOXYGEN__)
  43:../../os/rt/src/chcond.c **** 
  44:../../os/rt/src/chcond.c **** /*===========================================================================*/
  45:../../os/rt/src/chcond.c **** /* Module local definitions.                                                 */
  46:../../os/rt/src/chcond.c **** /*===========================================================================*/
  47:../../os/rt/src/chcond.c **** 
  48:../../os/rt/src/chcond.c **** /*===========================================================================*/
  49:../../os/rt/src/chcond.c **** /* Module exported variables.                                                */
  50:../../os/rt/src/chcond.c **** /*===========================================================================*/
  51:../../os/rt/src/chcond.c **** 
  52:../../os/rt/src/chcond.c **** /*===========================================================================*/
  53:../../os/rt/src/chcond.c **** /* Module local types.                                                       */
  54:../../os/rt/src/chcond.c **** /*===========================================================================*/
  55:../../os/rt/src/chcond.c **** 
  56:../../os/rt/src/chcond.c **** /*===========================================================================*/
  57:../../os/rt/src/chcond.c **** /* Module local variables.                                                   */
  58:../../os/rt/src/chcond.c **** /*===========================================================================*/
  59:../../os/rt/src/chcond.c **** 
  60:../../os/rt/src/chcond.c **** /*===========================================================================*/
  61:../../os/rt/src/chcond.c **** /* Module local functions.                                                   */
  62:../../os/rt/src/chcond.c **** /*===========================================================================*/
  63:../../os/rt/src/chcond.c **** 
  64:../../os/rt/src/chcond.c **** /*===========================================================================*/
  65:../../os/rt/src/chcond.c **** /* Module exported functions.                                                */
  66:../../os/rt/src/chcond.c **** /*===========================================================================*/
  67:../../os/rt/src/chcond.c **** 
  68:../../os/rt/src/chcond.c **** /**
  69:../../os/rt/src/chcond.c ****  * @brief   Initializes s @p condition_variable_t structure.
  70:../../os/rt/src/chcond.c ****  *
  71:../../os/rt/src/chcond.c ****  * @param[out] cp       pointer to a @p condition_variable_t structure
  72:../../os/rt/src/chcond.c ****  *
  73:../../os/rt/src/chcond.c ****  * @init
  74:../../os/rt/src/chcond.c ****  */
  75:../../os/rt/src/chcond.c **** void chCondObjectInit(condition_variable_t *cp) {
  16               		.loc 1 75 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               	.LBB77:
  24               	.LBB78:
  25               		.file 2 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
  26               		.loc 2 224 0
  27 0000 FC01      		movw r30,r24
  28 0002 9183      		std Z+1,r25
  29 0004 8083      		st Z,r24
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
  30               		.loc 2 225 0
  31 0006 9383      		std Z+3,r25
  32 0008 8283      		std Z+2,r24
  33               	.LVL1:
  34               	/* epilogue start */
  35               	.LBE78:
  36               	.LBE77:
  76:../../os/rt/src/chcond.c **** 
  77:../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
  78:../../os/rt/src/chcond.c **** 
  79:../../os/rt/src/chcond.c ****   ch_queue_init(&cp->queue);
  80:../../os/rt/src/chcond.c **** }
  37               		.loc 1 80 0
  38 000a 0895      		ret
  39               		.cfi_endproc
  40               	.LFE195:
  42               		.section	.text.chCondSignal,"ax",@progbits
  43               	.global	chCondSignal
  45               	chCondSignal:
  46               	.LFB196:
  81:../../os/rt/src/chcond.c **** 
  82:../../os/rt/src/chcond.c **** /**
  83:../../os/rt/src/chcond.c ****  * @brief   Signals one thread that is waiting on the condition variable.
  84:../../os/rt/src/chcond.c ****  *
  85:../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
  86:../../os/rt/src/chcond.c ****  *
  87:../../os/rt/src/chcond.c ****  * @api
  88:../../os/rt/src/chcond.c ****  */
  89:../../os/rt/src/chcond.c **** void chCondSignal(condition_variable_t *cp) {
  47               		.loc 1 89 0
  48               		.cfi_startproc
  49               	.LVL2:
  50 0000 CF93      		push r28
  51               	.LCFI0:
  52               		.cfi_def_cfa_offset 3
  53               		.cfi_offset 28, -2
  54 0002 DF93      		push r29
  55               	.LCFI1:
  56               		.cfi_def_cfa_offset 4
  57               		.cfi_offset 29, -3
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 2 */
  61               	.L__stack_usage = 2
  62 0004 FC01      		movw r30,r24
  63               	.LBB79:
  64               	.LBB80:
  65               	.LBB81:
  66               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  67               		.loc 3 430 0
  68               	/* #APP */
  69               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
  70 0006 F894      		cli
  71               	 ;  0 "" 2
  72               	.LVL3:
  73               	/* #NOAPP */
  74               	.LBE81:
  75               	.LBE80:
  76               	.LBE79:
  77               	.LBB82:
  78               	.LBB83:
 226:../../os/rt/include/chlists.h **** }
 227:../../os/rt/include/chlists.h **** 
 228:../../os/rt/include/chlists.h **** /**
 229:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 230:../../os/rt/include/chlists.h ****  *
 231:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 232:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 233:../../os/rt/include/chlists.h ****  *
 234:../../os/rt/include/chlists.h ****  * @notapi
 235:../../os/rt/include/chlists.h ****  */
 236:../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 237:../../os/rt/include/chlists.h **** 
 238:../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 239:../../os/rt/include/chlists.h **** }
 240:../../os/rt/include/chlists.h **** 
 241:../../os/rt/include/chlists.h **** /**
 242:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 243:../../os/rt/include/chlists.h ****  *
 244:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 245:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 246:../../os/rt/include/chlists.h ****  *
 247:../../os/rt/include/chlists.h ****  * @notapi
 248:../../os/rt/include/chlists.h ****  */
 249:../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 250:../../os/rt/include/chlists.h **** 
 251:../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
  79               		.loc 2 251 0
  80 0008 8081      		ld r24,Z
  81 000a 9181      		ldd r25,Z+1
  82               	.LVL4:
  83               	.LBE83:
  84               	.LBE82:
  90:../../os/rt/src/chcond.c **** 
  91:../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
  92:../../os/rt/src/chcond.c **** 
  93:../../os/rt/src/chcond.c ****   chSysLock();
  94:../../os/rt/src/chcond.c ****   if (ch_queue_notempty(&cp->queue)) {
  85               		.loc 1 94 0
  86 000c E817      		cp r30,r24
  87 000e F907      		cpc r31,r25
  88 0010 01F0      		breq .L4
  89               	.LVL5:
  90               	.LBB84:
  91               	.LBB85:
 252:../../os/rt/include/chlists.h **** }
 253:../../os/rt/include/chlists.h **** 
 254:../../os/rt/include/chlists.h **** /**
 255:../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 256:../../os/rt/include/chlists.h ****  *
 257:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 258:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 259:../../os/rt/include/chlists.h ****  *
 260:../../os/rt/include/chlists.h ****  * @notapi
 261:../../os/rt/include/chlists.h ****  */
 262:../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 263:../../os/rt/include/chlists.h **** 
 264:../../os/rt/include/chlists.h ****   p->next       = qp;
 265:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 266:../../os/rt/include/chlists.h ****   p->prev->next = p;
 267:../../os/rt/include/chlists.h ****   qp->prev      = p;
 268:../../os/rt/include/chlists.h **** }
 269:../../os/rt/include/chlists.h **** 
 270:../../os/rt/include/chlists.h **** /**
 271:../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 272:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 273:../../os/rt/include/chlists.h ****  *          element with the highest priority.
 274:../../os/rt/include/chlists.h ****  *
 275:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 276:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 277:../../os/rt/include/chlists.h ****  *
 278:../../os/rt/include/chlists.h ****  * @notapi
 279:../../os/rt/include/chlists.h ****  */
 280:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 281:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 282:../../os/rt/include/chlists.h **** 
 283:../../os/rt/include/chlists.h ****   qp->next       = p->next;
  92               		.loc 2 283 0
  93 0012 EC01      		movw r28,r24
  94 0014 A881      		ld r26,Y
  95 0016 B981      		ldd r27,Y+1
  96 0018 B183      		std Z+1,r27
  97 001a A083      		st Z,r26
 284:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
  98               		.loc 2 284 0
  99 001c 1396      		adiw r26,2+1
 100 001e FC93      		st X,r31
 101 0020 EE93      		st -X,r30
 102 0022 1297      		sbiw r26,2
 103               	.LVL6:
 104               	.LBE85:
 105               	.LBE84:
  95:../../os/rt/src/chcond.c ****     chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 106               		.loc 1 95 0
 107 0024 70E0      		ldi r23,0
 108 0026 60E0      		ldi r22,0
 109 0028 0E94 0000 		call chSchWakeupS
 110               	.LVL7:
 111               	.L4:
 112               	.LBB86:
 113               	.LBB87:
 114               	.LBB88:
 115               	.LBB89:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 116               		.loc 3 440 0
 117               	/* #APP */
 118               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 119 002c 7894      		sei
 120               	 ;  0 "" 2
 121               	/* epilogue start */
 122               	/* #NOAPP */
 123               	.LBE89:
 124               	.LBE88:
 125               	.LBE87:
 126               	.LBE86:
  96:../../os/rt/src/chcond.c ****   }
  97:../../os/rt/src/chcond.c ****   chSysUnlock();
  98:../../os/rt/src/chcond.c **** }
 127               		.loc 1 98 0
 128 002e DF91      		pop r29
 129 0030 CF91      		pop r28
 130 0032 0895      		ret
 131               		.cfi_endproc
 132               	.LFE196:
 134               		.section	.text.chCondSignalI,"ax",@progbits
 135               	.global	chCondSignalI
 137               	chCondSignalI:
 138               	.LFB197:
  99:../../os/rt/src/chcond.c **** 
 100:../../os/rt/src/chcond.c **** /**
 101:../../os/rt/src/chcond.c ****  * @brief   Signals one thread that is waiting on the condition variable.
 102:../../os/rt/src/chcond.c ****  * @post    This function does not reschedule so a call to a rescheduling
 103:../../os/rt/src/chcond.c ****  *          function must be performed before unlocking the kernel. Note that
 104:../../os/rt/src/chcond.c ****  *          interrupt handlers always reschedule on exit so an explicit
 105:../../os/rt/src/chcond.c ****  *          reschedule must not be performed in ISRs.
 106:../../os/rt/src/chcond.c ****  *
 107:../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 108:../../os/rt/src/chcond.c ****  *
 109:../../os/rt/src/chcond.c ****  * @iclass
 110:../../os/rt/src/chcond.c ****  */
 111:../../os/rt/src/chcond.c **** void chCondSignalI(condition_variable_t *cp) {
 139               		.loc 1 111 0
 140               		.cfi_startproc
 141               	.LVL8:
 142 0000 CF93      		push r28
 143               	.LCFI2:
 144               		.cfi_def_cfa_offset 3
 145               		.cfi_offset 28, -2
 146 0002 DF93      		push r29
 147               	.LCFI3:
 148               		.cfi_def_cfa_offset 4
 149               		.cfi_offset 29, -3
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 2 */
 153               	.L__stack_usage = 2
 154 0004 FC01      		movw r30,r24
 155               	.LVL9:
 156               	.LBB90:
 157               	.LBB91:
 251:../../os/rt/include/chlists.h **** }
 158               		.loc 2 251 0
 159 0006 8081      		ld r24,Z
 160 0008 9181      		ldd r25,Z+1
 161               	.LVL10:
 162               	.LBE91:
 163               	.LBE90:
 112:../../os/rt/src/chcond.c **** 
 113:../../os/rt/src/chcond.c ****   chDbgCheckClassI();
 114:../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 115:../../os/rt/src/chcond.c **** 
 116:../../os/rt/src/chcond.c ****   if (ch_queue_notempty(&cp->queue)) {
 164               		.loc 1 116 0
 165 000a E817      		cp r30,r24
 166 000c F907      		cpc r31,r25
 167 000e 01F0      		breq .L5
 168               	.LVL11:
 169               	.LBB92:
 170               	.LBB93:
 171               	.LBB94:
 283:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 172               		.loc 2 283 0
 173 0010 EC01      		movw r28,r24
 174 0012 A881      		ld r26,Y
 175 0014 B981      		ldd r27,Y+1
 176 0016 B183      		std Z+1,r27
 177 0018 A083      		st Z,r26
 178               		.loc 2 284 0
 179 001a 1396      		adiw r26,2+1
 180 001c FC93      		st X,r31
 181 001e EE93      		st -X,r30
 182 0020 1297      		sbiw r26,2
 183               	.LVL12:
 184               	.LBE94:
 185               	.LBE93:
 117:../../os/rt/src/chcond.c ****     thread_t *tp = threadref(ch_queue_fifo_remove(&cp->queue));
 118:../../os/rt/src/chcond.c ****     tp->u.rdymsg = MSG_OK;
 186               		.loc 1 118 0
 187 0022 1B8A      		std Y+19,__zero_reg__
 188 0024 1A8A      		std Y+18,__zero_reg__
 189               	/* epilogue start */
 190               	.LBE92:
 119:../../os/rt/src/chcond.c ****     (void) chSchReadyI(tp);
 120:../../os/rt/src/chcond.c ****   }
 121:../../os/rt/src/chcond.c **** }
 191               		.loc 1 121 0
 192 0026 DF91      		pop r29
 193 0028 CF91      		pop r28
 194               	.LBB95:
 119:../../os/rt/src/chcond.c ****     (void) chSchReadyI(tp);
 195               		.loc 1 119 0
 196 002a 0C94 0000 		jmp chSchReadyI
 197               	.LVL13:
 198               	.L5:
 199               	/* epilogue start */
 200               	.LBE95:
 201               		.loc 1 121 0
 202 002e DF91      		pop r29
 203 0030 CF91      		pop r28
 204 0032 0895      		ret
 205               		.cfi_endproc
 206               	.LFE197:
 208               		.section	.text.chCondBroadcast,"ax",@progbits
 209               	.global	chCondBroadcast
 211               	chCondBroadcast:
 212               	.LFB198:
 122:../../os/rt/src/chcond.c **** 
 123:../../os/rt/src/chcond.c **** /**
 124:../../os/rt/src/chcond.c ****  * @brief   Signals all threads that are waiting on the condition variable.
 125:../../os/rt/src/chcond.c ****  *
 126:../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 127:../../os/rt/src/chcond.c ****  *
 128:../../os/rt/src/chcond.c ****  * @api
 129:../../os/rt/src/chcond.c ****  */
 130:../../os/rt/src/chcond.c **** void chCondBroadcast(condition_variable_t *cp) {
 213               		.loc 1 130 0
 214               		.cfi_startproc
 215               	.LVL14:
 216 0000 0F93      		push r16
 217               	.LCFI4:
 218               		.cfi_def_cfa_offset 3
 219               		.cfi_offset 16, -2
 220 0002 1F93      		push r17
 221               	.LCFI5:
 222               		.cfi_def_cfa_offset 4
 223               		.cfi_offset 17, -3
 224 0004 CF93      		push r28
 225               	.LCFI6:
 226               		.cfi_def_cfa_offset 5
 227               		.cfi_offset 28, -4
 228 0006 DF93      		push r29
 229               	.LCFI7:
 230               		.cfi_def_cfa_offset 6
 231               		.cfi_offset 29, -5
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 4 */
 235               	.L__stack_usage = 4
 236 0008 EC01      		movw r28,r24
 237               	.LBB96:
 238               	.LBB97:
 239               	.LBB98:
 430:../../os/common/ports/AVR/chcore.h **** }
 240               		.loc 3 430 0
 241               	/* #APP */
 242               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 243 000a F894      		cli
 244               	 ;  0 "" 2
 245               	.LVL15:
 246               	/* #NOAPP */
 247               	.LBE98:
 248               	.LBE97:
 249               	.LBE96:
 250               	.LBB99:
 251               	.LBB100:
 252               	.LBB101:
 253               	.LBB102:
 251:../../os/rt/include/chlists.h **** }
 254               		.loc 2 251 0
 255 000c 8881      		ld r24,Y
 256 000e 9981      		ldd r25,Y+1
 257               	.LVL16:
 258               	.LBE102:
 259               	.LBE101:
 131:../../os/rt/src/chcond.c **** 
 132:../../os/rt/src/chcond.c ****   chSysLock();
 133:../../os/rt/src/chcond.c ****   chCondBroadcastI(cp);
 134:../../os/rt/src/chcond.c ****   chSchRescheduleS();
 135:../../os/rt/src/chcond.c ****   chSysUnlock();
 136:../../os/rt/src/chcond.c **** }
 137:../../os/rt/src/chcond.c **** 
 138:../../os/rt/src/chcond.c **** /**
 139:../../os/rt/src/chcond.c ****  * @brief   Signals all threads that are waiting on the condition variable.
 140:../../os/rt/src/chcond.c ****  * @post    This function does not reschedule so a call to a rescheduling
 141:../../os/rt/src/chcond.c ****  *          function must be performed before unlocking the kernel. Note that
 142:../../os/rt/src/chcond.c ****  *          interrupt handlers always reschedule on exit so an explicit
 143:../../os/rt/src/chcond.c ****  *          reschedule must not be performed in ISRs.
 144:../../os/rt/src/chcond.c ****  *
 145:../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 146:../../os/rt/src/chcond.c ****  *
 147:../../os/rt/src/chcond.c ****  * @iclass
 148:../../os/rt/src/chcond.c ****  */
 149:../../os/rt/src/chcond.c **** void chCondBroadcastI(condition_variable_t *cp) {
 150:../../os/rt/src/chcond.c **** 
 151:../../os/rt/src/chcond.c ****   chDbgCheckClassI();
 152:../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 153:../../os/rt/src/chcond.c **** 
 154:../../os/rt/src/chcond.c ****   /* Empties the condition variable queue and inserts all the threads into the
 155:../../os/rt/src/chcond.c ****      ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
 156:../../os/rt/src/chcond.c ****      order to make a chCondBroadcast() detectable from a chCondSignal().*/
 157:../../os/rt/src/chcond.c ****   while (ch_queue_notempty(&cp->queue)) {
 260               		.loc 1 157 0
 261 0010 C817      		cp r28,r24
 262 0012 D907      		cpc r29,r25
 263 0014 01F0      		breq .L8
 158:../../os/rt/src/chcond.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 264               		.loc 1 158 0
 265 0016 0EEF      		ldi r16,lo8(-2)
 266 0018 1FEF      		ldi r17,lo8(-1)
 267               	.L9:
 268               	.LVL17:
 269               	.LBB104:
 270               	.LBB105:
 283:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 271               		.loc 2 283 0
 272 001a DC01      		movw r26,r24
 273 001c ED91      		ld r30,X+
 274 001e FC91      		ld r31,X
 275 0020 F983      		std Y+1,r31
 276 0022 E883      		st Y,r30
 277               		.loc 2 284 0
 278 0024 D383      		std Z+3,r29
 279 0026 C283      		std Z+2,r28
 280               	.LVL18:
 281               	.LBE105:
 282               	.LBE104:
 283               		.loc 1 158 0
 284 0028 0E94 0000 		call chSchReadyI
 285               	.LVL19:
 286 002c FC01      		movw r30,r24
 287 002e 138B      		std Z+19,r17
 288 0030 028B      		std Z+18,r16
 289               	.LVL20:
 290               	.LBB106:
 291               	.LBB103:
 251:../../os/rt/include/chlists.h **** }
 292               		.loc 2 251 0
 293 0032 8881      		ld r24,Y
 294 0034 9981      		ldd r25,Y+1
 295               	.LVL21:
 296               	.LBE103:
 297               	.LBE106:
 157:../../os/rt/src/chcond.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 298               		.loc 1 157 0
 299 0036 8C17      		cp r24,r28
 300 0038 9D07      		cpc r25,r29
 301 003a 01F4      		brne .L9
 302               	.L8:
 303               	.LBE100:
 304               	.LBE99:
 134:../../os/rt/src/chcond.c ****   chSysUnlock();
 305               		.loc 1 134 0
 306 003c 0E94 0000 		call chSchRescheduleS
 307               	.LVL22:
 308               	.LBB107:
 309               	.LBB108:
 310               	.LBB109:
 311               	.LBB110:
 312               		.loc 3 440 0
 313               	/* #APP */
 314               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 315 0040 7894      		sei
 316               	 ;  0 "" 2
 317               	/* epilogue start */
 318               	/* #NOAPP */
 319               	.LBE110:
 320               	.LBE109:
 321               	.LBE108:
 322               	.LBE107:
 136:../../os/rt/src/chcond.c **** 
 323               		.loc 1 136 0
 324 0042 DF91      		pop r29
 325 0044 CF91      		pop r28
 326               	.LVL23:
 327 0046 1F91      		pop r17
 328 0048 0F91      		pop r16
 329 004a 0895      		ret
 330               		.cfi_endproc
 331               	.LFE198:
 333               		.section	.text.chCondBroadcastI,"ax",@progbits
 334               	.global	chCondBroadcastI
 336               	chCondBroadcastI:
 337               	.LFB199:
 149:../../os/rt/src/chcond.c **** 
 338               		.loc 1 149 0
 339               		.cfi_startproc
 340               	.LVL24:
 341 0000 0F93      		push r16
 342               	.LCFI8:
 343               		.cfi_def_cfa_offset 3
 344               		.cfi_offset 16, -2
 345 0002 1F93      		push r17
 346               	.LCFI9:
 347               		.cfi_def_cfa_offset 4
 348               		.cfi_offset 17, -3
 349 0004 CF93      		push r28
 350               	.LCFI10:
 351               		.cfi_def_cfa_offset 5
 352               		.cfi_offset 28, -4
 353 0006 DF93      		push r29
 354               	.LCFI11:
 355               		.cfi_def_cfa_offset 6
 356               		.cfi_offset 29, -5
 357               	/* prologue: function */
 358               	/* frame size = 0 */
 359               	/* stack size = 4 */
 360               	.L__stack_usage = 4
 361 0008 EC01      		movw r28,r24
 362               	.LVL25:
 363               	.LBB111:
 364               	.LBB112:
 251:../../os/rt/include/chlists.h **** }
 365               		.loc 2 251 0
 366 000a 8881      		ld r24,Y
 367 000c 9981      		ldd r25,Y+1
 368               	.LVL26:
 369               	.LBE112:
 370               	.LBE111:
 157:../../os/rt/src/chcond.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 371               		.loc 1 157 0
 372 000e C817      		cp r28,r24
 373 0010 D907      		cpc r29,r25
 374 0012 01F0      		breq .L11
 375               		.loc 1 158 0
 376 0014 0EEF      		ldi r16,lo8(-2)
 377 0016 1FEF      		ldi r17,lo8(-1)
 378               	.L13:
 379               	.LVL27:
 380               	.LBB114:
 381               	.LBB115:
 283:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 382               		.loc 2 283 0
 383 0018 DC01      		movw r26,r24
 384 001a ED91      		ld r30,X+
 385 001c FC91      		ld r31,X
 386 001e F983      		std Y+1,r31
 387 0020 E883      		st Y,r30
 388               		.loc 2 284 0
 389 0022 D383      		std Z+3,r29
 390 0024 C283      		std Z+2,r28
 391               	.LVL28:
 392               	.LBE115:
 393               	.LBE114:
 394               		.loc 1 158 0
 395 0026 0E94 0000 		call chSchReadyI
 396               	.LVL29:
 397 002a FC01      		movw r30,r24
 398 002c 138B      		std Z+19,r17
 399 002e 028B      		std Z+18,r16
 400               	.LVL30:
 401               	.LBB116:
 402               	.LBB113:
 251:../../os/rt/include/chlists.h **** }
 403               		.loc 2 251 0
 404 0030 8881      		ld r24,Y
 405 0032 9981      		ldd r25,Y+1
 406               	.LVL31:
 407               	.LBE113:
 408               	.LBE116:
 157:../../os/rt/src/chcond.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 409               		.loc 1 157 0
 410 0034 8C17      		cp r24,r28
 411 0036 9D07      		cpc r25,r29
 412 0038 01F4      		brne .L13
 413               	.L11:
 414               	/* epilogue start */
 159:../../os/rt/src/chcond.c ****   }
 160:../../os/rt/src/chcond.c **** }
 415               		.loc 1 160 0
 416 003a DF91      		pop r29
 417 003c CF91      		pop r28
 418               	.LVL32:
 419 003e 1F91      		pop r17
 420 0040 0F91      		pop r16
 421 0042 0895      		ret
 422               		.cfi_endproc
 423               	.LFE199:
 425               		.section	.text.chCondWaitS,"ax",@progbits
 426               	.global	chCondWaitS
 428               	chCondWaitS:
 429               	.LFB201:
 161:../../os/rt/src/chcond.c **** 
 162:../../os/rt/src/chcond.c **** /**
 163:../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 164:../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 165:../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 166:../../os/rt/src/chcond.c ****  *          is performed atomically.
 167:../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 168:../../os/rt/src/chcond.c ****  *
 169:../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 170:../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 171:../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 172:../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 173:../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 174:../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 175:../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 176:../../os/rt/src/chcond.c ****  *
 177:../../os/rt/src/chcond.c ****  * @api
 178:../../os/rt/src/chcond.c ****  */
 179:../../os/rt/src/chcond.c **** msg_t chCondWait(condition_variable_t *cp) {
 180:../../os/rt/src/chcond.c ****   msg_t msg;
 181:../../os/rt/src/chcond.c **** 
 182:../../os/rt/src/chcond.c ****   chSysLock();
 183:../../os/rt/src/chcond.c ****   msg = chCondWaitS(cp);
 184:../../os/rt/src/chcond.c ****   chSysUnlock();
 185:../../os/rt/src/chcond.c ****   return msg;
 186:../../os/rt/src/chcond.c **** }
 187:../../os/rt/src/chcond.c **** 
 188:../../os/rt/src/chcond.c **** /**
 189:../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 190:../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 191:../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 192:../../os/rt/src/chcond.c ****  *          is performed atomically.
 193:../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 194:../../os/rt/src/chcond.c ****  *
 195:../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 196:../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 197:../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 198:../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 199:../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 200:../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 201:../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 202:../../os/rt/src/chcond.c ****  *
 203:../../os/rt/src/chcond.c ****  * @sclass
 204:../../os/rt/src/chcond.c ****  */
 205:../../os/rt/src/chcond.c **** msg_t chCondWaitS(condition_variable_t *cp) {
 430               		.loc 1 205 0
 431               		.cfi_startproc
 432               	.LVL33:
 433 0000 EF92      		push r14
 434               	.LCFI12:
 435               		.cfi_def_cfa_offset 3
 436               		.cfi_offset 14, -2
 437 0002 FF92      		push r15
 438               	.LCFI13:
 439               		.cfi_def_cfa_offset 4
 440               		.cfi_offset 15, -3
 441 0004 0F93      		push r16
 442               	.LCFI14:
 443               		.cfi_def_cfa_offset 5
 444               		.cfi_offset 16, -4
 445 0006 1F93      		push r17
 446               	.LCFI15:
 447               		.cfi_def_cfa_offset 6
 448               		.cfi_offset 17, -5
 449 0008 CF93      		push r28
 450               	.LCFI16:
 451               		.cfi_def_cfa_offset 7
 452               		.cfi_offset 28, -6
 453 000a DF93      		push r29
 454               	.LCFI17:
 455               		.cfi_def_cfa_offset 8
 456               		.cfi_offset 29, -7
 457               	/* prologue: function */
 458               	/* frame size = 0 */
 459               	/* stack size = 6 */
 460               	.L__stack_usage = 6
 461 000c 8C01      		movw r16,r24
 462               	.LBB117:
 463               	.LBB118:
 464               		.file 4 "../../os/rt/include/chthreads.h"
   1:../../os/rt/include/chthreads.h **** /*
   2:../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chthreads.h **** 
   5:../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chthreads.h **** 
   7:../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chthreads.h **** 
  11:../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chthreads.h **** 
  16:../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chthreads.h **** */
  19:../../os/rt/include/chthreads.h **** 
  20:../../os/rt/include/chthreads.h **** /**
  21:../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../os/rt/include/chthreads.h ****  *
  24:../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../os/rt/include/chthreads.h ****  * @{
  26:../../os/rt/include/chthreads.h ****  */
  27:../../os/rt/include/chthreads.h **** 
  28:../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../os/rt/include/chthreads.h **** 
  31:../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../os/rt/include/chthreads.h **** 
  33:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../os/rt/include/chthreads.h **** 
  37:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../os/rt/include/chthreads.h **** 
  41:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../os/rt/include/chthreads.h **** 
  45:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../os/rt/include/chthreads.h **** 
  49:../../os/rt/include/chthreads.h **** /**
  50:../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../os/rt/include/chthreads.h ****  */
  52:../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../os/rt/include/chthreads.h **** 
  54:../../os/rt/include/chthreads.h **** /**
  55:../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../os/rt/include/chthreads.h ****  */
  57:../../os/rt/include/chthreads.h **** typedef struct {
  58:../../os/rt/include/chthreads.h ****   /**
  59:../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../os/rt/include/chthreads.h ****    */
  61:../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../os/rt/include/chthreads.h ****   /**
  63:../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../os/rt/include/chthreads.h ****    */
  65:../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../os/rt/include/chthreads.h ****   /**
  67:../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../os/rt/include/chthreads.h ****    */
  69:../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../os/rt/include/chthreads.h ****   /**
  71:../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../os/rt/include/chthreads.h ****    */
  73:../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../os/rt/include/chthreads.h ****   /**
  75:../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../os/rt/include/chthreads.h ****    */
  77:../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../os/rt/include/chthreads.h ****   /**
  79:../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../os/rt/include/chthreads.h ****    */
  81:../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../os/rt/include/chthreads.h ****   /**
  84:../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../os/rt/include/chthreads.h ****    */
  86:../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../os/rt/include/chthreads.h **** #endif
  88:../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../os/rt/include/chthreads.h **** 
  90:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  91:../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  92:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  93:../../os/rt/include/chthreads.h **** 
  94:../../os/rt/include/chthreads.h **** /**
  95:../../os/rt/include/chthreads.h ****  * @name    Threads queues
  96:../../os/rt/include/chthreads.h ****  * @{
  97:../../os/rt/include/chthreads.h ****  */
  98:../../os/rt/include/chthreads.h **** /**
  99:../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 100:../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 101:../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 102:../../os/rt/include/chthreads.h ****  *
 103:../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 104:../../os/rt/include/chthreads.h ****  */
 105:../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 106:../../os/rt/include/chthreads.h **** 
 107:../../os/rt/include/chthreads.h **** /**
 108:../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 109:../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 110:../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 111:../../os/rt/include/chthreads.h ****  *
 112:../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 113:../../os/rt/include/chthreads.h ****  */
 114:../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 115:../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 116:../../os/rt/include/chthreads.h **** /** @} */
 117:../../os/rt/include/chthreads.h **** 
 118:../../os/rt/include/chthreads.h **** /**
 119:../../os/rt/include/chthreads.h ****  * @name    Working Areas
 120:../../os/rt/include/chthreads.h ****  * @{
 121:../../os/rt/include/chthreads.h ****  */
 122:../../os/rt/include/chthreads.h **** /**
 123:../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 124:../../os/rt/include/chthreads.h ****  *
 125:../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 126:../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 127:../../os/rt/include/chthreads.h ****  *
 128:../../os/rt/include/chthreads.h ****  * @api
 129:../../os/rt/include/chthreads.h ****  */
 130:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 131:../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 132:../../os/rt/include/chthreads.h **** 
 133:../../os/rt/include/chthreads.h **** /**
 134:../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 135:../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 136:../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 137:../../os/rt/include/chthreads.h ****  *
 138:../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 139:../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 140:../../os/rt/include/chthreads.h ****  *
 141:../../os/rt/include/chthreads.h ****  * @api
 142:../../os/rt/include/chthreads.h ****  */
 143:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 144:../../os/rt/include/chthreads.h **** 
 145:../../os/rt/include/chthreads.h **** /**
 146:../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 147:../../os/rt/include/chthreads.h ****  *
 148:../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 149:../../os/rt/include/chthreads.h ****  */
 150:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 151:../../os/rt/include/chthreads.h **** 
 152:../../os/rt/include/chthreads.h **** /**
 153:../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 154:../../os/rt/include/chthreads.h ****  *
 155:../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 156:../../os/rt/include/chthreads.h ****  */
 157:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 158:../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 159:../../os/rt/include/chthreads.h **** /** @} */
 160:../../os/rt/include/chthreads.h **** 
 161:../../os/rt/include/chthreads.h **** /**
 162:../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 163:../../os/rt/include/chthreads.h ****  * @{
 164:../../os/rt/include/chthreads.h ****  */
 165:../../os/rt/include/chthreads.h **** /**
 166:../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 167:../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 168:../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 169:../../os/rt/include/chthreads.h ****  */
 170:../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 171:../../os/rt/include/chthreads.h **** /** @} */
 172:../../os/rt/include/chthreads.h **** 
 173:../../os/rt/include/chthreads.h **** /**
 174:../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 175:../../os/rt/include/chthreads.h ****  * @{
 176:../../os/rt/include/chthreads.h ****  */
 177:../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 178:../../os/rt/include/chthreads.h **** /**
 179:../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 180:../../os/rt/include/chthreads.h ****  *
 181:../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 182:../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 183:../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 184:../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 185:../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 186:../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 187:../../os/rt/include/chthreads.h ****  */
 188:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 189:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 190:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 191:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 192:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 193:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 194:../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 195:../../os/rt/include/chthreads.h ****   NULL                                                                      \
 196:../../os/rt/include/chthreads.h **** }
 197:../../os/rt/include/chthreads.h **** #else
 198:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 199:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 200:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 201:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 202:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 203:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 204:../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 205:../../os/rt/include/chthreads.h **** }
 206:../../os/rt/include/chthreads.h **** #endif
 207:../../os/rt/include/chthreads.h **** 
 208:../../os/rt/include/chthreads.h **** /**
 209:../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../os/rt/include/chthreads.h ****  *
 211:../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 218:../../os/rt/include/chthreads.h ****  */
 219:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 220:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 221:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 222:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 223:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 224:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 225:../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 226:../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 227:../../os/rt/include/chthreads.h **** }
 228:../../os/rt/include/chthreads.h **** /** @} */
 229:../../os/rt/include/chthreads.h **** 
 230:../../os/rt/include/chthreads.h **** /**
 231:../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 232:../../os/rt/include/chthreads.h ****  * @{
 233:../../os/rt/include/chthreads.h ****  */
 234:../../os/rt/include/chthreads.h **** /**
 235:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 236:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 237:../../os/rt/include/chthreads.h ****  *          system tick clock.
 238:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 239:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 240:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 241:../../os/rt/include/chthreads.h ****  *          converted.
 242:../../os/rt/include/chthreads.h ****  *
 243:../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 244:../../os/rt/include/chthreads.h ****  *
 245:../../os/rt/include/chthreads.h ****  * @api
 246:../../os/rt/include/chthreads.h ****  */
 247:../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 248:../../os/rt/include/chthreads.h **** 
 249:../../os/rt/include/chthreads.h **** /**
 250:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 251:../../os/rt/include/chthreads.h ****  *          milliseconds.
 252:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 253:../../os/rt/include/chthreads.h ****  *          system tick clock.
 254:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 255:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 256:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 257:../../os/rt/include/chthreads.h ****  *          converted.
 258:../../os/rt/include/chthreads.h ****  *
 259:../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 260:../../os/rt/include/chthreads.h ****  *
 261:../../os/rt/include/chthreads.h ****  * @api
 262:../../os/rt/include/chthreads.h ****  */
 263:../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 264:../../os/rt/include/chthreads.h **** 
 265:../../os/rt/include/chthreads.h **** /**
 266:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 267:../../os/rt/include/chthreads.h ****  *          microseconds.
 268:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 269:../../os/rt/include/chthreads.h ****  *          system tick clock.
 270:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 271:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 272:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 273:../../os/rt/include/chthreads.h ****  *          converted.
 274:../../os/rt/include/chthreads.h ****  *
 275:../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 276:../../os/rt/include/chthreads.h ****  *
 277:../../os/rt/include/chthreads.h ****  * @api
 278:../../os/rt/include/chthreads.h ****  */
 279:../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 280:../../os/rt/include/chthreads.h **** /** @} */
 281:../../os/rt/include/chthreads.h **** 
 282:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 283:../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 284:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 285:../../os/rt/include/chthreads.h **** 
 286:../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 287:../../os/rt/include/chthreads.h **** extern "C" {
 288:../../os/rt/include/chthreads.h **** #endif
 289:../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 290:../../os/rt/include/chthreads.h ****                                thread_t *tp,
 291:../../os/rt/include/chthreads.h ****                                const char *name,
 292:../../os/rt/include/chthreads.h ****                                tprio_t prio);
 293:../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 294:../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 295:../../os/rt/include/chthreads.h **** #endif
 296:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 297:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 298:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 299:../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 300:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 301:../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 302:../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 303:../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 304:../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 305:../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 306:../../os/rt/include/chthreads.h **** #endif
 307:../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 308:../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 309:../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 310:../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 311:../../os/rt/include/chthreads.h **** #endif
 312:../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 313:../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 314:../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 315:../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 316:../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 317:../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 318:../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 319:../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 320:../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 321:../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 322:../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 323:../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 324:../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 325:../../os/rt/include/chthreads.h ****   void chThdYield(void);
 326:../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 327:../../os/rt/include/chthreads.h **** }
 328:../../os/rt/include/chthreads.h **** #endif
 329:../../os/rt/include/chthreads.h **** 
 330:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 331:../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 332:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 333:../../os/rt/include/chthreads.h **** 
 334:../../os/rt/include/chthreads.h **** /**
 335:../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 336:../../os/rt/include/chthreads.h ****  *
 337:../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 338:../../os/rt/include/chthreads.h ****  *
 339:../../os/rt/include/chthreads.h ****  * @xclass
 340:../../os/rt/include/chthreads.h ****  */
 341:../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 342:../../os/rt/include/chthreads.h **** 
 343:../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
 465               		.loc 4 343 0
 466 000e C091 0000 		lds r28,ch0+5
 467 0012 D091 0000 		lds r29,ch0+5+1
 468               	.LBE118:
 469               	.LBE117:
 470               	.LBB119:
 471               	.LBB120:
 472               		.file 5 "../../os/rt/include/chmtx.h"
   1:../../os/rt/include/chmtx.h **** /*
   2:../../os/rt/include/chmtx.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chmtx.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chmtx.h **** 
   5:../../os/rt/include/chmtx.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chmtx.h **** 
   7:../../os/rt/include/chmtx.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chmtx.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chmtx.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chmtx.h **** 
  11:../../os/rt/include/chmtx.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chmtx.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chmtx.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chmtx.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chmtx.h **** 
  16:../../os/rt/include/chmtx.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chmtx.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chmtx.h **** */
  19:../../os/rt/include/chmtx.h **** 
  20:../../os/rt/include/chmtx.h **** /**
  21:../../os/rt/include/chmtx.h ****  * @file    rt/include/chmtx.h
  22:../../os/rt/include/chmtx.h ****  * @brief   Mutexes macros and structures.
  23:../../os/rt/include/chmtx.h ****  *
  24:../../os/rt/include/chmtx.h ****  * @addtogroup mutexes
  25:../../os/rt/include/chmtx.h ****  * @{
  26:../../os/rt/include/chmtx.h ****  */
  27:../../os/rt/include/chmtx.h **** 
  28:../../os/rt/include/chmtx.h **** #ifndef CHMTX_H
  29:../../os/rt/include/chmtx.h **** #define CHMTX_H
  30:../../os/rt/include/chmtx.h **** 
  31:../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  32:../../os/rt/include/chmtx.h **** 
  33:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  34:../../os/rt/include/chmtx.h **** /* Module constants.                                                         */
  35:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  36:../../os/rt/include/chmtx.h **** 
  37:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  38:../../os/rt/include/chmtx.h **** /* Module pre-compile time settings.                                         */
  39:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  40:../../os/rt/include/chmtx.h **** 
  41:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  42:../../os/rt/include/chmtx.h **** /* Derived constants and error checks.                                       */
  43:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  44:../../os/rt/include/chmtx.h **** 
  45:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  46:../../os/rt/include/chmtx.h **** /* Module data structures and types.                                         */
  47:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  48:../../os/rt/include/chmtx.h **** 
  49:../../os/rt/include/chmtx.h **** /**
  50:../../os/rt/include/chmtx.h ****  * @brief   Type of a mutex structure.
  51:../../os/rt/include/chmtx.h ****  */
  52:../../os/rt/include/chmtx.h **** typedef struct ch_mutex mutex_t;
  53:../../os/rt/include/chmtx.h **** 
  54:../../os/rt/include/chmtx.h **** /**
  55:../../os/rt/include/chmtx.h ****  * @brief   Mutex structure.
  56:../../os/rt/include/chmtx.h ****  */
  57:../../os/rt/include/chmtx.h **** struct ch_mutex {
  58:../../os/rt/include/chmtx.h ****   ch_queue_t            queue;      /**< @brief Queue of the threads sleeping
  59:../../os/rt/include/chmtx.h ****                                                 on this mutex.              */
  60:../../os/rt/include/chmtx.h ****   thread_t              *owner;     /**< @brief Owner @p thread_t pointer or
  61:../../os/rt/include/chmtx.h ****                                                 @p NULL.                    */
  62:../../os/rt/include/chmtx.h ****   mutex_t               *next;      /**< @brief Next @p mutex_t into an
  63:../../os/rt/include/chmtx.h ****                                                 owner-list or @p NULL.      */
  64:../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  65:../../os/rt/include/chmtx.h ****   cnt_t                 cnt;        /**< @brief Mutex recursion counter.    */
  66:../../os/rt/include/chmtx.h **** #endif
  67:../../os/rt/include/chmtx.h **** };
  68:../../os/rt/include/chmtx.h **** 
  69:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  70:../../os/rt/include/chmtx.h **** /* Module macros.                                                            */
  71:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  72:../../os/rt/include/chmtx.h **** 
  73:../../os/rt/include/chmtx.h **** /**
  74:../../os/rt/include/chmtx.h ****  * @brief   Data part of a static mutex initializer.
  75:../../os/rt/include/chmtx.h ****  * @details This macro should be used when statically initializing a mutex
  76:../../os/rt/include/chmtx.h ****  *          that is part of a bigger structure.
  77:../../os/rt/include/chmtx.h ****  *
  78:../../os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  79:../../os/rt/include/chmtx.h ****  */
  80:../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  81:../../os/rt/include/chmtx.h **** #define __MUTEX_DATA(name) {__CH_QUEUE_DATA(name.queue), NULL, NULL, 0}
  82:../../os/rt/include/chmtx.h **** #else
  83:../../os/rt/include/chmtx.h **** #define __MUTEX_DATA(name) {__CH_QUEUE_DATA(name.queue), NULL, NULL}
  84:../../os/rt/include/chmtx.h **** #endif
  85:../../os/rt/include/chmtx.h **** 
  86:../../os/rt/include/chmtx.h **** /**
  87:../../os/rt/include/chmtx.h ****  * @brief   Static mutex initializer.
  88:../../os/rt/include/chmtx.h ****  * @details Statically initialized mutexes require no explicit initialization
  89:../../os/rt/include/chmtx.h ****  *          using @p chMtxInit().
  90:../../os/rt/include/chmtx.h ****  *
  91:../../os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  92:../../os/rt/include/chmtx.h ****  */
  93:../../os/rt/include/chmtx.h **** #define MUTEX_DECL(name) mutex_t name = __MUTEX_DATA(name)
  94:../../os/rt/include/chmtx.h **** 
  95:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  96:../../os/rt/include/chmtx.h **** /* External declarations.                                                    */
  97:../../os/rt/include/chmtx.h **** /*===========================================================================*/
  98:../../os/rt/include/chmtx.h **** 
  99:../../os/rt/include/chmtx.h **** #ifdef __cplusplus
 100:../../os/rt/include/chmtx.h **** extern "C" {
 101:../../os/rt/include/chmtx.h **** #endif
 102:../../os/rt/include/chmtx.h ****   void chMtxObjectInit(mutex_t *mp);
 103:../../os/rt/include/chmtx.h ****   void chMtxLock(mutex_t *mp);
 104:../../os/rt/include/chmtx.h ****   void chMtxLockS(mutex_t *mp);
 105:../../os/rt/include/chmtx.h ****   bool chMtxTryLock(mutex_t *mp);
 106:../../os/rt/include/chmtx.h ****   bool chMtxTryLockS(mutex_t *mp);
 107:../../os/rt/include/chmtx.h ****   void chMtxUnlock(mutex_t *mp);
 108:../../os/rt/include/chmtx.h ****   void chMtxUnlockS(mutex_t *mp);
 109:../../os/rt/include/chmtx.h ****   void chMtxUnlockAll(void);
 110:../../os/rt/include/chmtx.h ****   void chMtxUnlockAllS(void);
 111:../../os/rt/include/chmtx.h **** #ifdef __cplusplus
 112:../../os/rt/include/chmtx.h **** }
 113:../../os/rt/include/chmtx.h **** #endif
 114:../../os/rt/include/chmtx.h **** 
 115:../../os/rt/include/chmtx.h **** /*===========================================================================*/
 116:../../os/rt/include/chmtx.h **** /* Module inline functions.                                                  */
 117:../../os/rt/include/chmtx.h **** /*===========================================================================*/
 118:../../os/rt/include/chmtx.h **** 
 119:../../os/rt/include/chmtx.h **** /**
 120:../../os/rt/include/chmtx.h ****  * @brief   Returns @p true if the mutex queue contains at least a waiting
 121:../../os/rt/include/chmtx.h ****  *          thread.
 122:../../os/rt/include/chmtx.h ****  *
 123:../../os/rt/include/chmtx.h ****  * @param[out] mp       pointer to a @p mutex_t structure
 124:../../os/rt/include/chmtx.h ****  * @return              The mutex queue status.
 125:../../os/rt/include/chmtx.h ****  *
 126:../../os/rt/include/chmtx.h ****  * @sclass
 127:../../os/rt/include/chmtx.h ****  */
 128:../../os/rt/include/chmtx.h **** static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 129:../../os/rt/include/chmtx.h **** 
 130:../../os/rt/include/chmtx.h ****   chDbgCheckClassS();
 131:../../os/rt/include/chmtx.h **** 
 132:../../os/rt/include/chmtx.h ****   return ch_queue_notempty(&mp->queue);
 133:../../os/rt/include/chmtx.h **** }
 134:../../os/rt/include/chmtx.h **** 
 135:../../os/rt/include/chmtx.h **** /**
 136:../../os/rt/include/chmtx.h ****  * @brief   Returns the mutex owner thread.
 137:../../os/rt/include/chmtx.h ****  *
 138:../../os/rt/include/chmtx.h ****  * @param[out] mp       pointer to a @p mutex_t structure
 139:../../os/rt/include/chmtx.h ****  * @return              The owner thread.
 140:../../os/rt/include/chmtx.h ****  * @retval NULL         if the mutex is not owned.
 141:../../os/rt/include/chmtx.h ****  *
 142:../../os/rt/include/chmtx.h ****  * @iclass
 143:../../os/rt/include/chmtx.h ****  */
 144:../../os/rt/include/chmtx.h **** static inline thread_t *chMtxGetOwnerI(mutex_t *mp) {
 145:../../os/rt/include/chmtx.h **** 
 146:../../os/rt/include/chmtx.h ****   chDbgCheckClassI();
 147:../../os/rt/include/chmtx.h **** 
 148:../../os/rt/include/chmtx.h ****   return mp->owner;
 149:../../os/rt/include/chmtx.h **** }
 150:../../os/rt/include/chmtx.h **** 
 151:../../os/rt/include/chmtx.h **** /**
 152:../../os/rt/include/chmtx.h ****  * @brief   Returns the next mutex in the mutexes stack of the current thread.
 153:../../os/rt/include/chmtx.h ****  *
 154:../../os/rt/include/chmtx.h ****  * @return              A pointer to the next mutex in the stack.
 155:../../os/rt/include/chmtx.h ****  * @retval NULL         if the stack is empty.
 156:../../os/rt/include/chmtx.h ****  *
 157:../../os/rt/include/chmtx.h ****  * @xclass
 158:../../os/rt/include/chmtx.h ****  */
 159:../../os/rt/include/chmtx.h **** static inline mutex_t *chMtxGetNextMutexX(void) {
 160:../../os/rt/include/chmtx.h **** 
 161:../../os/rt/include/chmtx.h ****   return chThdGetSelfX()->mtxlist;
 473               		.loc 5 161 0
 474 0016 EB8C      		ldd r14,Y+27
 475 0018 FC8C      		ldd r15,Y+28
 476               	.LBE120:
 477               	.LBE119:
 206:../../os/rt/src/chcond.c ****   thread_t *currtp = chThdGetSelfX();
 207:../../os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 208:../../os/rt/src/chcond.c ****   msg_t msg;
 209:../../os/rt/src/chcond.c **** 
 210:../../os/rt/src/chcond.c ****   chDbgCheckClassS();
 211:../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 212:../../os/rt/src/chcond.c ****   chDbgAssert(mp != NULL, "not owning a mutex");
 213:../../os/rt/src/chcond.c **** 
 214:../../os/rt/src/chcond.c ****   /* Releasing "current" mutex.*/
 215:../../os/rt/src/chcond.c ****   chMtxUnlockS(mp);
 478               		.loc 1 215 0
 479 001a C701      		movw r24,r14
 480               	.LVL34:
 481 001c 0E94 0000 		call chMtxUnlockS
 482               	.LVL35:
 216:../../os/rt/src/chcond.c **** 
 217:../../os/rt/src/chcond.c ****   /* Start waiting on the condition variable, on exit the mutex is taken
 218:../../os/rt/src/chcond.c ****      again.*/
 219:../../os/rt/src/chcond.c ****   currtp->u.wtobjp = cp;
 483               		.loc 1 219 0
 484 0020 1B8B      		std Y+19,r17
 485 0022 0A8B      		std Y+18,r16
 220:../../os/rt/src/chcond.c ****   ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
 486               		.loc 1 220 0
 487 0024 D801      		movw r26,r16
 488               	.LVL36:
 489 0026 F801      		movw r30,r16
 490 0028 00C0      		rjmp .L17
 491               	.LVL37:
 492               	.L20:
 493               	.LBB121:
 494               	.LBB122:
 495               		.file 6 "../../os/rt/include/chschd.h"
   1:../../os/rt/include/chschd.h **** /*
   2:../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chschd.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chschd.h **** 
   5:../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chschd.h **** 
   7:../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chschd.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chschd.h **** 
  11:../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chschd.h **** 
  16:../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chschd.h **** */
  19:../../os/rt/include/chschd.h **** 
  20:../../os/rt/include/chschd.h **** /**
  21:../../os/rt/include/chschd.h ****  * @file    rt/include/chschd.h
  22:../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../os/rt/include/chschd.h ****  *
  24:../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../os/rt/include/chschd.h ****  * @{
  26:../../os/rt/include/chschd.h ****  */
  27:../../os/rt/include/chschd.h **** 
  28:../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../os/rt/include/chschd.h **** 
  31:../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../os/rt/include/chschd.h **** 
  35:../../os/rt/include/chschd.h **** /**
  36:../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../os/rt/include/chschd.h ****  * @{
  38:../../os/rt/include/chschd.h ****  */
  39:../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../os/rt/include/chschd.h **** /** @} */
  45:../../os/rt/include/chschd.h **** 
  46:../../os/rt/include/chschd.h **** /**
  47:../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../os/rt/include/chschd.h ****  * @{
  49:../../os/rt/include/chschd.h ****  */
  50:../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../os/rt/include/chschd.h **** /** @} */
  57:../../os/rt/include/chschd.h **** 
  58:../../os/rt/include/chschd.h **** /**
  59:../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../os/rt/include/chschd.h ****  * @{
  61:../../os/rt/include/chschd.h ****  */
  62:../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../os/rt/include/chschd.h **** 
  83:../../os/rt/include/chschd.h **** /**
  84:../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../os/rt/include/chschd.h ****  */
  88:../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../os/rt/include/chschd.h **** /** @} */
  93:../../os/rt/include/chschd.h **** 
  94:../../os/rt/include/chschd.h **** /**
  95:../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../os/rt/include/chschd.h ****  * @{
  97:../../os/rt/include/chschd.h ****  */
  98:../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../os/rt/include/chschd.h **** /** @} */
 108:../../os/rt/include/chschd.h **** 
 109:../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../os/rt/include/chschd.h **** 
 113:../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../os/rt/include/chschd.h **** 
 117:../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../os/rt/include/chschd.h **** 
 121:../../os/rt/include/chschd.h **** /*===========================================================================*/
 122:../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 123:../../os/rt/include/chschd.h **** /*===========================================================================*/
 124:../../os/rt/include/chschd.h **** 
 125:../../os/rt/include/chschd.h **** /**
 126:../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 127:../../os/rt/include/chschd.h ****  *
 128:../../os/rt/include/chschd.h ****  * @notapi
 129:../../os/rt/include/chschd.h ****  */
 130:../../os/rt/include/chschd.h **** #define firstprio(rlp)              ((rlp)->next->prio)
 131:../../os/rt/include/chschd.h **** 
 132:../../os/rt/include/chschd.h **** /**
 133:../../os/rt/include/chschd.h ****  * @brief   Current thread pointer get macro.
 134:../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 135:../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 136:../../os/rt/include/chschd.h ****  */
 137:../../os/rt/include/chschd.h **** #define __sch_get_currthread()      __instance_get_currthread(currcore)
 138:../../os/rt/include/chschd.h **** 
 139:../../os/rt/include/chschd.h **** /*===========================================================================*/
 140:../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 141:../../os/rt/include/chschd.h **** /*===========================================================================*/
 142:../../os/rt/include/chschd.h **** 
 143:../../os/rt/include/chschd.h **** /*
 144:../../os/rt/include/chschd.h ****  * Scheduler APIs.
 145:../../os/rt/include/chschd.h ****  */
 146:../../os/rt/include/chschd.h **** #ifdef __cplusplus
 147:../../os/rt/include/chschd.h **** extern "C" {
 148:../../os/rt/include/chschd.h **** #endif
 149:../../os/rt/include/chschd.h ****   void chSchObjectInit(os_instance_t *oip,
 150:../../os/rt/include/chschd.h ****                        const os_instance_config_t *oicp);
 151:../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 152:../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 153:../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 154:../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 155:../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 156:../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 157:../../os/rt/include/chschd.h ****   void chSchDoPreemption(void);
 158:../../os/rt/include/chschd.h ****   void chSchPreemption(void);
 159:../../os/rt/include/chschd.h ****   void chSchDoYieldS(void);
 160:../../os/rt/include/chschd.h ****   thread_t *chSchSelectFirst(void);
 161:../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 162:../../os/rt/include/chschd.h ****   void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp);
 163:../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 164:../../os/rt/include/chschd.h **** #ifdef __cplusplus
 165:../../os/rt/include/chschd.h **** }
 166:../../os/rt/include/chschd.h **** #endif
 167:../../os/rt/include/chschd.h **** 
 168:../../os/rt/include/chschd.h **** /*===========================================================================*/
 169:../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 170:../../os/rt/include/chschd.h **** /*===========================================================================*/
 171:../../os/rt/include/chschd.h **** 
 172:../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 173:../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 174:../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 175:../../os/rt/include/chschd.h **** static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 176:../../os/rt/include/chschd.h **** 
 177:../../os/rt/include/chschd.h ****   ch_queue_t *cp = qp;
 178:../../os/rt/include/chschd.h ****   do {
 179:../../os/rt/include/chschd.h ****     cp = cp->next;
 180:../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 496               		.loc 6 180 0
 497 002a 9481      		ldd r25,Z+4
 498 002c 8C81      		ldd r24,Y+4
 499 002e 9817      		cp r25,r24
 500 0030 00F0      		brlo .L19
 501               	.LVL38:
 502               	.L17:
 179:../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 503               		.loc 6 179 0
 504 0032 0190      		ld __tmp_reg__,Z+
 505 0034 F081      		ld r31,Z
 506 0036 E02D      		mov r30,__tmp_reg__
 507               	.LVL39:
 181:../../os/rt/include/chschd.h ****            (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 508               		.loc 6 181 0
 509 0038 0E17      		cp r16,r30
 510 003a 1F07      		cpc r17,r31
 511 003c 01F4      		brne .L20
 512               	.L16:
 182:../../os/rt/include/chschd.h ****   tp->next       = cp;
 513               		.loc 6 182 0
 514 003e B983      		std Y+1,r27
 515 0040 A883      		st Y,r26
 183:../../os/rt/include/chschd.h ****   tp->prev       = cp->prev;
 516               		.loc 6 183 0
 517 0042 1296      		adiw r26,2
 518 0044 ED91      		ld r30,X+
 519 0046 FC91      		ld r31,X
 520 0048 1397      		sbiw r26,2+1
 521               	.LVL40:
 522 004a FB83      		std Y+3,r31
 523 004c EA83      		std Y+2,r30
 184:../../os/rt/include/chschd.h ****   tp->prev->next = tp;
 524               		.loc 6 184 0
 525 004e D183      		std Z+1,r29
 526 0050 C083      		st Z,r28
 185:../../os/rt/include/chschd.h ****   cp->prev       = tp;
 527               		.loc 6 185 0
 528 0052 1396      		adiw r26,2+1
 529 0054 DC93      		st X,r29
 530 0056 CE93      		st -X,r28
 531 0058 1297      		sbiw r26,2
 532               	.LVL41:
 533               	.LBE122:
 534               	.LBE121:
 221:../../os/rt/src/chcond.c ****   chSchGoSleepS(CH_STATE_WTCOND);
 535               		.loc 1 221 0
 536 005a 87E0      		ldi r24,lo8(7)
 537 005c 0E94 0000 		call chSchGoSleepS
 538               	.LVL42:
 222:../../os/rt/src/chcond.c ****   msg = currtp->u.rdymsg;
 539               		.loc 1 222 0
 540 0060 0A88      		ldd __tmp_reg__,Y+18
 541 0062 DB89      		ldd r29,Y+19
 542 0064 C02D      		mov r28,__tmp_reg__
 543               	.LVL43:
 223:../../os/rt/src/chcond.c ****   chMtxLockS(mp);
 544               		.loc 1 223 0
 545 0066 C701      		movw r24,r14
 546 0068 0E94 0000 		call chMtxLockS
 547               	.LVL44:
 224:../../os/rt/src/chcond.c **** 
 225:../../os/rt/src/chcond.c ****   return msg;
 226:../../os/rt/src/chcond.c **** }
 548               		.loc 1 226 0
 549 006c CE01      		movw r24,r28
 550               	/* epilogue start */
 551 006e DF91      		pop r29
 552 0070 CF91      		pop r28
 553               	.LVL45:
 554 0072 1F91      		pop r17
 555 0074 0F91      		pop r16
 556               	.LVL46:
 557 0076 FF90      		pop r15
 558 0078 EF90      		pop r14
 559 007a 0895      		ret
 560               	.LVL47:
 561               	.L19:
 562               	.LBB124:
 563               	.LBB123:
 179:../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 564               		.loc 6 179 0
 565 007c DF01      		movw r26,r30
 566 007e 00C0      		rjmp .L16
 567               	.LBE123:
 568               	.LBE124:
 569               		.cfi_endproc
 570               	.LFE201:
 572               		.section	.text.chCondWait,"ax",@progbits
 573               	.global	chCondWait
 575               	chCondWait:
 576               	.LFB200:
 179:../../os/rt/src/chcond.c ****   msg_t msg;
 577               		.loc 1 179 0
 578               		.cfi_startproc
 579               	.LVL48:
 580               	/* prologue: function */
 581               	/* frame size = 0 */
 582               	/* stack size = 0 */
 583               	.L__stack_usage = 0
 584               	.LBB125:
 585               	.LBB126:
 586               	.LBB127:
 430:../../os/common/ports/AVR/chcore.h **** }
 587               		.loc 3 430 0
 588               	/* #APP */
 589               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 590 0000 F894      		cli
 591               	 ;  0 "" 2
 592               	/* #NOAPP */
 593               	.LBE127:
 594               	.LBE126:
 595               	.LBE125:
 183:../../os/rt/src/chcond.c ****   chSysUnlock();
 596               		.loc 1 183 0
 597 0002 0E94 0000 		call chCondWaitS
 598               	.LVL49:
 599               	.LBB128:
 600               	.LBB129:
 601               	.LBB130:
 602               	.LBB131:
 603               		.loc 3 440 0
 604               	/* #APP */
 605               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 606 0006 7894      		sei
 607               	 ;  0 "" 2
 608               	/* epilogue start */
 609               	/* #NOAPP */
 610               	.LBE131:
 611               	.LBE130:
 612               	.LBE129:
 613               	.LBE128:
 186:../../os/rt/src/chcond.c **** 
 614               		.loc 1 186 0
 615 0008 0895      		ret
 616               		.cfi_endproc
 617               	.LFE200:
 619               		.section	.text.chCondWaitTimeoutS,"ax",@progbits
 620               	.global	chCondWaitTimeoutS
 622               	chCondWaitTimeoutS:
 623               	.LFB203:
 227:../../os/rt/src/chcond.c **** 
 228:../../os/rt/src/chcond.c **** #if (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE) || defined(__DOXYGEN__)
 229:../../os/rt/src/chcond.c **** /**
 230:../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 231:../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 232:../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 233:../../os/rt/src/chcond.c ****  *          is performed atomically.
 234:../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 235:../../os/rt/src/chcond.c ****  * @pre     The configuration option @p CH_CFG_USE_CONDVARS_TIMEOUT must be enabled
 236:../../os/rt/src/chcond.c ****  *          in order to use this function.
 237:../../os/rt/src/chcond.c ****  * @post    Exiting the function because a timeout does not re-acquire the
 238:../../os/rt/src/chcond.c ****  *          mutex, the mutex ownership is lost.
 239:../../os/rt/src/chcond.c ****  *
 240:../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 241:../../os/rt/src/chcond.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 242:../../os/rt/src/chcond.c ****  *                      special values are handled as follow:
 243:../../os/rt/src/chcond.c ****  *                      - @a TIME_INFINITE no timeout.
 244:../../os/rt/src/chcond.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 245:../../os/rt/src/chcond.c ****  *                      .
 246:../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 247:../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 248:../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 249:../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 250:../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 251:../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 252:../../os/rt/src/chcond.c ****  * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 253:../../os/rt/src/chcond.c ****  *                      the specified timeout.
 254:../../os/rt/src/chcond.c ****  *
 255:../../os/rt/src/chcond.c ****  * @api
 256:../../os/rt/src/chcond.c ****  */
 257:../../os/rt/src/chcond.c **** msg_t chCondWaitTimeout(condition_variable_t *cp, sysinterval_t timeout) {
 258:../../os/rt/src/chcond.c ****   msg_t msg;
 259:../../os/rt/src/chcond.c **** 
 260:../../os/rt/src/chcond.c ****   chSysLock();
 261:../../os/rt/src/chcond.c ****   msg = chCondWaitTimeoutS(cp, timeout);
 262:../../os/rt/src/chcond.c ****   chSysUnlock();
 263:../../os/rt/src/chcond.c **** 
 264:../../os/rt/src/chcond.c ****   return msg;
 265:../../os/rt/src/chcond.c **** }
 266:../../os/rt/src/chcond.c **** 
 267:../../os/rt/src/chcond.c **** /**
 268:../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 269:../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 270:../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 271:../../os/rt/src/chcond.c ****  *          is performed atomically.
 272:../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 273:../../os/rt/src/chcond.c ****  * @pre     The configuration option @p CH_CFG_USE_CONDVARS_TIMEOUT must be enabled
 274:../../os/rt/src/chcond.c ****  *          in order to use this function.
 275:../../os/rt/src/chcond.c ****  * @post    Exiting the function because a timeout does not re-acquire the
 276:../../os/rt/src/chcond.c ****  *          mutex, the mutex ownership is lost.
 277:../../os/rt/src/chcond.c ****  *
 278:../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to the @p condition_variable_t structure
 279:../../os/rt/src/chcond.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 280:../../os/rt/src/chcond.c ****  *                      special values are handled as follow:
 281:../../os/rt/src/chcond.c ****  *                      - @a TIME_INFINITE no timeout.
 282:../../os/rt/src/chcond.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 283:../../os/rt/src/chcond.c ****  *                      .
 284:../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 285:../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 286:../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 287:../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 288:../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 289:../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 290:../../os/rt/src/chcond.c ****  * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 291:../../os/rt/src/chcond.c ****  *                      the specified timeout.
 292:../../os/rt/src/chcond.c ****  *
 293:../../os/rt/src/chcond.c ****  * @sclass
 294:../../os/rt/src/chcond.c ****  */
 295:../../os/rt/src/chcond.c **** msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
 624               		.loc 1 295 0
 625               		.cfi_startproc
 626               	.LVL50:
 627 0000 CF92      		push r12
 628               	.LCFI18:
 629               		.cfi_def_cfa_offset 3
 630               		.cfi_offset 12, -2
 631 0002 DF92      		push r13
 632               	.LCFI19:
 633               		.cfi_def_cfa_offset 4
 634               		.cfi_offset 13, -3
 635 0004 EF92      		push r14
 636               	.LCFI20:
 637               		.cfi_def_cfa_offset 5
 638               		.cfi_offset 14, -4
 639 0006 FF92      		push r15
 640               	.LCFI21:
 641               		.cfi_def_cfa_offset 6
 642               		.cfi_offset 15, -5
 643 0008 0F93      		push r16
 644               	.LCFI22:
 645               		.cfi_def_cfa_offset 7
 646               		.cfi_offset 16, -6
 647 000a 1F93      		push r17
 648               	.LCFI23:
 649               		.cfi_def_cfa_offset 8
 650               		.cfi_offset 17, -7
 651 000c CF93      		push r28
 652               	.LCFI24:
 653               		.cfi_def_cfa_offset 9
 654               		.cfi_offset 28, -8
 655 000e DF93      		push r29
 656               	.LCFI25:
 657               		.cfi_def_cfa_offset 10
 658               		.cfi_offset 29, -9
 659               	/* prologue: function */
 660               	/* frame size = 0 */
 661               	/* stack size = 8 */
 662               	.L__stack_usage = 8
 663 0010 6C01      		movw r12,r24
 664 0012 7B01      		movw r14,r22
 665               	.LBB132:
 666               	.LBB133:
 667               		.loc 4 343 0
 668 0014 C091 0000 		lds r28,ch0+5
 669 0018 D091 0000 		lds r29,ch0+5+1
 670               	.LBE133:
 671               	.LBE132:
 672               	.LBB134:
 673               	.LBB135:
 674               		.loc 5 161 0
 675 001c 0B8D      		ldd r16,Y+27
 676 001e 1C8D      		ldd r17,Y+28
 677               	.LBE135:
 678               	.LBE134:
 296:../../os/rt/src/chcond.c ****   thread_t *currtp = chThdGetSelfX();
 297:../../os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 298:../../os/rt/src/chcond.c ****   msg_t msg;
 299:../../os/rt/src/chcond.c **** 
 300:../../os/rt/src/chcond.c ****   chDbgCheckClassS();
 301:../../os/rt/src/chcond.c ****   chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
 302:../../os/rt/src/chcond.c ****   chDbgAssert(mp != NULL, "not owning a mutex");
 303:../../os/rt/src/chcond.c **** 
 304:../../os/rt/src/chcond.c ****   /* Releasing "current" mutex.*/
 305:../../os/rt/src/chcond.c ****   chMtxUnlockS(mp);
 679               		.loc 1 305 0
 680 0020 C801      		movw r24,r16
 681               	.LVL51:
 682 0022 0E94 0000 		call chMtxUnlockS
 683               	.LVL52:
 306:../../os/rt/src/chcond.c **** 
 307:../../os/rt/src/chcond.c ****   /* Start waiting on the condition variable, on exit the mutex is taken
 308:../../os/rt/src/chcond.c ****      again.*/
 309:../../os/rt/src/chcond.c ****   currtp->u.wtobjp = cp;
 684               		.loc 1 309 0
 685 0026 DB8A      		std Y+19,r13
 686 0028 CA8A      		std Y+18,r12
 310:../../os/rt/src/chcond.c ****   ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
 687               		.loc 1 310 0
 688 002a D601      		movw r26,r12
 689               	.LVL53:
 690 002c F601      		movw r30,r12
 691 002e 00C0      		rjmp .L24
 692               	.LVL54:
 693               	.L31:
 694               	.LBB136:
 695               	.LBB137:
 180:../../os/rt/include/chschd.h ****            (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 696               		.loc 6 180 0
 697 0030 9481      		ldd r25,Z+4
 698 0032 8C81      		ldd r24,Y+4
 699 0034 9817      		cp r25,r24
 700 0036 00F0      		brlo .L30
 701               	.LVL55:
 702               	.L24:
 179:../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 703               		.loc 6 179 0
 704 0038 0190      		ld __tmp_reg__,Z+
 705 003a F081      		ld r31,Z
 706 003c E02D      		mov r30,__tmp_reg__
 707               	.LVL56:
 181:../../os/rt/include/chschd.h ****   tp->next       = cp;
 708               		.loc 6 181 0
 709 003e CE16      		cp r12,r30
 710 0040 DF06      		cpc r13,r31
 711 0042 01F4      		brne .L31
 712               	.L23:
 182:../../os/rt/include/chschd.h ****   tp->prev       = cp->prev;
 713               		.loc 6 182 0
 714 0044 B983      		std Y+1,r27
 715 0046 A883      		st Y,r26
 183:../../os/rt/include/chschd.h ****   tp->prev->next = tp;
 716               		.loc 6 183 0
 717 0048 1296      		adiw r26,2
 718 004a ED91      		ld r30,X+
 719 004c FC91      		ld r31,X
 720 004e 1397      		sbiw r26,2+1
 721               	.LVL57:
 722 0050 FB83      		std Y+3,r31
 723 0052 EA83      		std Y+2,r30
 184:../../os/rt/include/chschd.h ****   cp->prev       = tp;
 724               		.loc 6 184 0
 725 0054 D183      		std Z+1,r29
 726 0056 C083      		st Z,r28
 727               		.loc 6 185 0
 728 0058 1396      		adiw r26,2+1
 729 005a DC93      		st X,r29
 730 005c CE93      		st -X,r28
 731 005e 1297      		sbiw r26,2
 732               	.LVL58:
 733               	.LBE137:
 734               	.LBE136:
 311:../../os/rt/src/chcond.c ****   msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 735               		.loc 1 311 0
 736 0060 B701      		movw r22,r14
 737 0062 87E0      		ldi r24,lo8(7)
 738 0064 0E94 0000 		call chSchGoSleepTimeoutS
 739               	.LVL59:
 740 0068 EC01      		movw r28,r24
 741               	.LVL60:
 312:../../os/rt/src/chcond.c ****   if (msg != MSG_TIMEOUT) {
 742               		.loc 1 312 0
 743 006a CF3F      		cpi r28,-1
 744 006c DC07      		cpc r29,r28
 745               	.LVL61:
 746 006e 01F0      		breq .L22
 313:../../os/rt/src/chcond.c ****     chMtxLockS(mp);
 747               		.loc 1 313 0
 748 0070 C801      		movw r24,r16
 749 0072 0E94 0000 		call chMtxLockS
 750               	.LVL62:
 751               	.L22:
 314:../../os/rt/src/chcond.c ****   }
 315:../../os/rt/src/chcond.c **** 
 316:../../os/rt/src/chcond.c ****   return msg;
 317:../../os/rt/src/chcond.c **** }
 752               		.loc 1 317 0
 753 0076 CE01      		movw r24,r28
 754               	/* epilogue start */
 755 0078 DF91      		pop r29
 756 007a CF91      		pop r28
 757               	.LVL63:
 758 007c 1F91      		pop r17
 759 007e 0F91      		pop r16
 760 0080 FF90      		pop r15
 761 0082 EF90      		pop r14
 762               	.LVL64:
 763 0084 DF90      		pop r13
 764 0086 CF90      		pop r12
 765               	.LVL65:
 766 0088 0895      		ret
 767               	.LVL66:
 768               	.L30:
 769               	.LBB139:
 770               	.LBB138:
 179:../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 771               		.loc 6 179 0
 772 008a DF01      		movw r26,r30
 773 008c 00C0      		rjmp .L23
 774               	.LBE138:
 775               	.LBE139:
 776               		.cfi_endproc
 777               	.LFE203:
 779               		.section	.text.chCondWaitTimeout,"ax",@progbits
 780               	.global	chCondWaitTimeout
 782               	chCondWaitTimeout:
 783               	.LFB202:
 257:../../os/rt/src/chcond.c ****   msg_t msg;
 784               		.loc 1 257 0
 785               		.cfi_startproc
 786               	.LVL67:
 787               	/* prologue: function */
 788               	/* frame size = 0 */
 789               	/* stack size = 0 */
 790               	.L__stack_usage = 0
 791               	.LBB140:
 792               	.LBB141:
 793               	.LBB142:
 430:../../os/common/ports/AVR/chcore.h **** }
 794               		.loc 3 430 0
 795               	/* #APP */
 796               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 797 0000 F894      		cli
 798               	 ;  0 "" 2
 799               	/* #NOAPP */
 800               	.LBE142:
 801               	.LBE141:
 802               	.LBE140:
 261:../../os/rt/src/chcond.c ****   chSysUnlock();
 803               		.loc 1 261 0
 804 0002 0E94 0000 		call chCondWaitTimeoutS
 805               	.LVL68:
 806               	.LBB143:
 807               	.LBB144:
 808               	.LBB145:
 809               	.LBB146:
 810               		.loc 3 440 0
 811               	/* #APP */
 812               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 813 0006 7894      		sei
 814               	 ;  0 "" 2
 815               	/* epilogue start */
 816               	/* #NOAPP */
 817               	.LBE146:
 818               	.LBE145:
 819               	.LBE144:
 820               	.LBE143:
 265:../../os/rt/src/chcond.c **** 
 821               		.loc 1 265 0
 822 0008 0895      		ret
 823               		.cfi_endproc
 824               	.LFE202:
 826               		.text
 827               	.Letext0:
 828               		.file 7 "/usr/lib/avr/include/stdint.h"
 829               		.file 8 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 830               		.file 9 "../../os/rt/include/chearly.h"
 831               		.file 10 "../../os/rt/include/chobjects.h"
 832               		.file 11 "../../os/rt/include/chrfcu.h"
 833               		.file 12 "../../os/rt/include/chdebug.h"
 834               		.file 13 "../../os/rt/include/chtime.h"
 835               		.file 14 "../../os/rt/include/chsem.h"
 836               		.file 15 "../../os/rt/include/chsys.h"
 837               		.file 16 "../../os/rt/include/chregistry.h"
 838               		.file 17 "../../os/rt/include/chcond.h"
 839               		.file 18 "../../os/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chcond.c
     /tmp/cc6g3zyo.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc6g3zyo.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc6g3zyo.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc6g3zyo.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6g3zyo.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6g3zyo.s:13     .text.chCondObjectInit:0000000000000000 chCondObjectInit
     /tmp/cc6g3zyo.s:45     .text.chCondSignal:0000000000000000 chCondSignal
     /tmp/cc6g3zyo.s:137    .text.chCondSignalI:0000000000000000 chCondSignalI
     /tmp/cc6g3zyo.s:211    .text.chCondBroadcast:0000000000000000 chCondBroadcast
     /tmp/cc6g3zyo.s:336    .text.chCondBroadcastI:0000000000000000 chCondBroadcastI
     /tmp/cc6g3zyo.s:428    .text.chCondWaitS:0000000000000000 chCondWaitS
     /tmp/cc6g3zyo.s:575    .text.chCondWait:0000000000000000 chCondWait
     /tmp/cc6g3zyo.s:622    .text.chCondWaitTimeoutS:0000000000000000 chCondWaitTimeoutS
     /tmp/cc6g3zyo.s:782    .text.chCondWaitTimeout:0000000000000000 chCondWaitTimeout

UNDEFINED SYMBOLS
chSchWakeupS
chSchReadyI
chSchRescheduleS
ch0
chMtxUnlockS
chSchGoSleepS
chMtxLockS
chSchGoSleepTimeoutS
