   1               		.file	"chregistry.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chRegFirstThread,"ax",@progbits
  11               	.global	chRegFirstThread
  13               	chRegFirstThread:
  14               	.LFB195:
  15               		.file 1 "../../os/rt/src/chregistry.c"
   1:../../os/rt/src/chregistry.c **** /*
   2:../../os/rt/src/chregistry.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/src/chregistry.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/src/chregistry.c **** 
   5:../../os/rt/src/chregistry.c ****     This file is part of ChibiOS.
   6:../../os/rt/src/chregistry.c **** 
   7:../../os/rt/src/chregistry.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/src/chregistry.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/src/chregistry.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/src/chregistry.c **** 
  11:../../os/rt/src/chregistry.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/src/chregistry.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/src/chregistry.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/src/chregistry.c ****     GNU General Public License for more details.
  15:../../os/rt/src/chregistry.c **** 
  16:../../os/rt/src/chregistry.c ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/src/chregistry.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/src/chregistry.c **** */
  19:../../os/rt/src/chregistry.c **** 
  20:../../os/rt/src/chregistry.c **** /**
  21:../../os/rt/src/chregistry.c ****  * @file    rt/src/chregistry.c
  22:../../os/rt/src/chregistry.c ****  * @brief   Threads registry code.
  23:../../os/rt/src/chregistry.c ****  *
  24:../../os/rt/src/chregistry.c ****  * @addtogroup registry
  25:../../os/rt/src/chregistry.c ****  * @details Threads Registry related APIs and services.
  26:../../os/rt/src/chregistry.c ****  *          <h2>Operation mode</h2>
  27:../../os/rt/src/chregistry.c ****  *          The Threads Registry is a double linked list that holds all the
  28:../../os/rt/src/chregistry.c ****  *          active threads in the system.<br>
  29:../../os/rt/src/chregistry.c ****  *          Operations defined for the registry:
  30:../../os/rt/src/chregistry.c ****  *          - <b>First</b>, returns the first, in creation order, active thread
  31:../../os/rt/src/chregistry.c ****  *            in the system.
  32:../../os/rt/src/chregistry.c ****  *          - <b>Next</b>, returns the next, in creation order, active thread
  33:../../os/rt/src/chregistry.c ****  *            in the system.
  34:../../os/rt/src/chregistry.c ****  *          .
  35:../../os/rt/src/chregistry.c ****  *          The registry is meant to be mainly a debug feature, for example,
  36:../../os/rt/src/chregistry.c ****  *          using the registry a debugger can enumerate the active threads
  37:../../os/rt/src/chregistry.c ****  *          in any given moment or the shell can print the active threads
  38:../../os/rt/src/chregistry.c ****  *          and their state.<br>
  39:../../os/rt/src/chregistry.c ****  *          Another possible use is for centralized threads memory management,
  40:../../os/rt/src/chregistry.c ****  *          terminating threads can pulse an event source and an event handler
  41:../../os/rt/src/chregistry.c ****  *          can perform a scansion of the registry in order to recover the
  42:../../os/rt/src/chregistry.c ****  *          memory.
  43:../../os/rt/src/chregistry.c ****  * @pre     In order to use the threads registry the @p CH_CFG_USE_REGISTRY
  44:../../os/rt/src/chregistry.c ****  *          option must be enabled in @p chconf.h.
  45:../../os/rt/src/chregistry.c ****  * @{
  46:../../os/rt/src/chregistry.c ****  */
  47:../../os/rt/src/chregistry.c **** 
  48:../../os/rt/src/chregistry.c **** #include <string.h>
  49:../../os/rt/src/chregistry.c **** 
  50:../../os/rt/src/chregistry.c **** #include "ch.h"
  51:../../os/rt/src/chregistry.c **** 
  52:../../os/rt/src/chregistry.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  53:../../os/rt/src/chregistry.c **** 
  54:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  55:../../os/rt/src/chregistry.c **** /* Module exported variables.                                                */
  56:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  57:../../os/rt/src/chregistry.c **** 
  58:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  59:../../os/rt/src/chregistry.c **** /* Module local types.                                                       */
  60:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  61:../../os/rt/src/chregistry.c **** 
  62:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  63:../../os/rt/src/chregistry.c **** /* Module local variables.                                                   */
  64:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  65:../../os/rt/src/chregistry.c **** 
  66:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  67:../../os/rt/src/chregistry.c **** /* Module local functions.                                                   */
  68:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  69:../../os/rt/src/chregistry.c **** 
  70:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  71:../../os/rt/src/chregistry.c **** /* Module exported functions.                                                */
  72:../../os/rt/src/chregistry.c **** /*===========================================================================*/
  73:../../os/rt/src/chregistry.c **** 
  74:../../os/rt/src/chregistry.c **** /*
  75:../../os/rt/src/chregistry.c ****  * OS signature in ROM plus debug-related information.
  76:../../os/rt/src/chregistry.c ****  */
  77:../../os/rt/src/chregistry.c **** ROMCONST chdebug_t ch_debug = {
  78:../../os/rt/src/chregistry.c ****   .identifier               = {'m', 'a', 'i', 'n'},
  79:../../os/rt/src/chregistry.c ****   .zero                     = (uint8_t)0,
  80:../../os/rt/src/chregistry.c ****   .size                     = (uint8_t)sizeof (chdebug_t),
  81:../../os/rt/src/chregistry.c ****   .version                  = (uint16_t)(((unsigned)CH_KERNEL_MAJOR << 11U) |
  82:../../os/rt/src/chregistry.c ****                                          ((unsigned)CH_KERNEL_MINOR << 6U) |
  83:../../os/rt/src/chregistry.c ****                                          ((unsigned)CH_KERNEL_PATCH << 0U)),
  84:../../os/rt/src/chregistry.c ****   .ptrsize                  = (uint8_t)sizeof (void *),
  85:../../os/rt/src/chregistry.c ****   .timesize                 = (uint8_t)sizeof (systime_t),
  86:../../os/rt/src/chregistry.c ****   .intervalsize             = (uint8_t)sizeof (sysinterval_t),
  87:../../os/rt/src/chregistry.c ****   .threadsize               = (uint8_t)sizeof (thread_t),
  88:../../os/rt/src/chregistry.c ****   .intctxsize               = (uint8_t)sizeof (struct port_intctx),
  89:../../os/rt/src/chregistry.c ****   .off_prio                 = (uint8_t)__CH_OFFSETOF(thread_t, hdr.pqueue.prio),
  90:../../os/rt/src/chregistry.c ****   .off_ctx                  = (uint8_t)__CH_OFFSETOF(thread_t, ctx),
  91:../../os/rt/src/chregistry.c ****   .off_newer                = (uint8_t)__CH_OFFSETOF(thread_t, rqueue.next),
  92:../../os/rt/src/chregistry.c ****   .off_older                = (uint8_t)__CH_OFFSETOF(thread_t, rqueue.prev),
  93:../../os/rt/src/chregistry.c ****   .off_name                 = (uint8_t)__CH_OFFSETOF(thread_t, name),
  94:../../os/rt/src/chregistry.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  95:../../os/rt/src/chregistry.c ****   .off_stklimit             = (uint8_t)__CH_OFFSETOF(thread_t, wabase),
  96:../../os/rt/src/chregistry.c **** #else
  97:../../os/rt/src/chregistry.c ****   .off_stklimit             = (uint8_t)0,
  98:../../os/rt/src/chregistry.c **** #endif
  99:../../os/rt/src/chregistry.c ****   .off_state                = (uint8_t)__CH_OFFSETOF(thread_t, state),
 100:../../os/rt/src/chregistry.c ****   .off_flags                = (uint8_t)__CH_OFFSETOF(thread_t, flags),
 101:../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 102:../../os/rt/src/chregistry.c ****   .off_refs                 = (uint8_t)__CH_OFFSETOF(thread_t, refs),
 103:../../os/rt/src/chregistry.c **** #else
 104:../../os/rt/src/chregistry.c ****   .off_refs                 = (uint8_t)0,
 105:../../os/rt/src/chregistry.c **** #endif
 106:../../os/rt/src/chregistry.c **** #if CH_CFG_TIME_QUANTUM > 0
 107:../../os/rt/src/chregistry.c ****   .off_preempt              = (uint8_t)__CH_OFFSETOF(thread_t, ticks),
 108:../../os/rt/src/chregistry.c **** #else
 109:../../os/rt/src/chregistry.c ****   .off_preempt              = (uint8_t)0,
 110:../../os/rt/src/chregistry.c **** #endif
 111:../../os/rt/src/chregistry.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 112:../../os/rt/src/chregistry.c ****   .off_time                 = (uint8_t)__CH_OFFSETOF(thread_t, time),
 113:../../os/rt/src/chregistry.c **** #else
 114:../../os/rt/src/chregistry.c ****   .off_time                 = (uint8_t)0,
 115:../../os/rt/src/chregistry.c **** #endif
 116:../../os/rt/src/chregistry.c ****   .off_reserved             = {(uint8_t)0, (uint8_t)0, (uint8_t)0, (uint8_t)0},
 117:../../os/rt/src/chregistry.c ****   .instancesnum             = (uint8_t)PORT_CORES_NUMBER,
 118:../../os/rt/src/chregistry.c ****   .off_sys_state            = (uint8_t)__CH_OFFSETOF(ch_system_t, state),
 119:../../os/rt/src/chregistry.c ****   .off_sys_instances        = (uint8_t)__CH_OFFSETOF(ch_system_t, instances[0]),
 120:../../os/rt/src/chregistry.c **** #if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == TRUE)
 121:../../os/rt/src/chregistry.c ****   .off_sys_reglist          = (uint8_t)__CH_OFFSETOF(ch_system_t, reglist),
 122:../../os/rt/src/chregistry.c **** #else
 123:../../os/rt/src/chregistry.c ****   .off_sys_reglist          = (uint8_t)0,
 124:../../os/rt/src/chregistry.c **** #endif
 125:../../os/rt/src/chregistry.c **** #if CH_CFG_SMP_MODE == TRUE
 126:../../os/rt/src/chregistry.c ****   .off_sys_rfcu             = (uint8_t)__CH_OFFSETOF(ch_system_t, rfcu),
 127:../../os/rt/src/chregistry.c **** #else
 128:../../os/rt/src/chregistry.c ****   .off_sys_rfcu             = (uint8_t)0,
 129:../../os/rt/src/chregistry.c **** #endif
 130:../../os/rt/src/chregistry.c ****   .off_sys_reserved         = {(uint8_t)0, (uint8_t)0, (uint8_t)0, (uint8_t)0},
 131:../../os/rt/src/chregistry.c ****   .off_inst_rlist_current   = (uint8_t)__CH_OFFSETOF(os_instance_t, rlist.current),
 132:../../os/rt/src/chregistry.c ****   .off_inst_rlist           = (uint8_t)__CH_OFFSETOF(os_instance_t, rlist),
 133:../../os/rt/src/chregistry.c ****   .off_inst_vtlist          = (uint8_t)__CH_OFFSETOF(os_instance_t, vtlist),
 134:../../os/rt/src/chregistry.c **** #if ((CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE))
 135:../../os/rt/src/chregistry.c ****   .off_inst_reglist         = (uint8_t)__CH_OFFSETOF(os_instance_t, reglist),
 136:../../os/rt/src/chregistry.c **** #else
 137:../../os/rt/src/chregistry.c ****   .off_inst_reglist         = (uint8_t)0,
 138:../../os/rt/src/chregistry.c **** #endif
 139:../../os/rt/src/chregistry.c ****   .off_inst_core_id         = (uint8_t)__CH_OFFSETOF(os_instance_t, core_id),
 140:../../os/rt/src/chregistry.c **** #if CH_CFG_SMP_MODE == FALSE
 141:../../os/rt/src/chregistry.c ****   .off_inst_rfcu            = (uint8_t)__CH_OFFSETOF(os_instance_t, rfcu)
 142:../../os/rt/src/chregistry.c **** #else
 143:../../os/rt/src/chregistry.c ****   .off_inst_rfcu            = (uint8_t)0
 144:../../os/rt/src/chregistry.c **** #endif
 145:../../os/rt/src/chregistry.c **** };
 146:../../os/rt/src/chregistry.c **** 
 147:../../os/rt/src/chregistry.c **** /**
 148:../../os/rt/src/chregistry.c ****  * @brief   Returns the first thread in the system.
 149:../../os/rt/src/chregistry.c ****  * @details Returns the most ancient thread in the system, usually this is
 150:../../os/rt/src/chregistry.c ****  *          the main thread unless it terminated. A reference is added to the
 151:../../os/rt/src/chregistry.c ****  *          returned thread in order to make sure its status is not lost.
 152:../../os/rt/src/chregistry.c ****  * @note    This function cannot return @p NULL because there is always at
 153:../../os/rt/src/chregistry.c ****  *          least one thread in the system.
 154:../../os/rt/src/chregistry.c ****  *
 155:../../os/rt/src/chregistry.c ****  * @return              A reference to the most ancient thread.
 156:../../os/rt/src/chregistry.c ****  *
 157:../../os/rt/src/chregistry.c ****  * @api
 158:../../os/rt/src/chregistry.c ****  */
 159:../../os/rt/src/chregistry.c **** thread_t *chRegFirstThread(void) {
  16               		.loc 1 159 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LBB63:
  23               	.LBB64:
  24               	.LBB65:
  25               		.file 2 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  26               		.loc 2 430 0
  27               	/* #APP */
  28               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
  29 0000 F894      		cli
  30               	 ;  0 "" 2
  31               	.LVL0:
  32               	/* #NOAPP */
  33               	.LBE65:
  34               	.LBE64:
  35               	.LBE63:
 160:../../os/rt/src/chregistry.c ****   thread_t *tp;
 161:../../os/rt/src/chregistry.c ****   uint8_t *p;
 162:../../os/rt/src/chregistry.c **** 
 163:../../os/rt/src/chregistry.c ****   chSysLock();
 164:../../os/rt/src/chregistry.c ****   p = (uint8_t *)REG_HEADER(currcore)->next;
 165:../../os/rt/src/chregistry.c ****   /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
 166:../../os/rt/src/chregistry.c ****   tp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
  36               		.loc 1 166 0
  37 0002 8091 0000 		lds r24,ch0+23
  38 0006 9091 0000 		lds r25,ch0+23+1
  39 000a 0797      		sbiw r24,7
  40               	.LVL1:
  41               	.LBB66:
  42               	.LBB67:
  43               	.LBB68:
  44               	.LBB69:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  45               		.loc 2 440 0
  46               	/* #APP */
  47               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
  48 000c 7894      		sei
  49               	 ;  0 "" 2
  50               	/* epilogue start */
  51               	/* #NOAPP */
  52               	.LBE69:
  53               	.LBE68:
  54               	.LBE67:
  55               	.LBE66:
 167:../../os/rt/src/chregistry.c ****   /*lint -restore*/
 168:../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 169:../../os/rt/src/chregistry.c ****   tp->refs++;
 170:../../os/rt/src/chregistry.c **** #endif
 171:../../os/rt/src/chregistry.c ****   chSysUnlock();
 172:../../os/rt/src/chregistry.c **** 
 173:../../os/rt/src/chregistry.c ****   return tp;
 174:../../os/rt/src/chregistry.c **** }
  56               		.loc 1 174 0
  57 000e 0895      		ret
  58               		.cfi_endproc
  59               	.LFE195:
  61               		.section	.text.chRegNextThread,"ax",@progbits
  62               	.global	chRegNextThread
  64               	chRegNextThread:
  65               	.LFB196:
 175:../../os/rt/src/chregistry.c **** 
 176:../../os/rt/src/chregistry.c **** /**
 177:../../os/rt/src/chregistry.c ****  * @brief   Returns the thread next to the specified one.
 178:../../os/rt/src/chregistry.c ****  * @details The reference counter of the specified thread is decremented and
 179:../../os/rt/src/chregistry.c ****  *          the reference counter of the returned thread is incremented.
 180:../../os/rt/src/chregistry.c ****  *
 181:../../os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 182:../../os/rt/src/chregistry.c ****  * @return              A reference to the next thread.
 183:../../os/rt/src/chregistry.c ****  * @retval NULL         if there is no next thread.
 184:../../os/rt/src/chregistry.c ****  *
 185:../../os/rt/src/chregistry.c ****  * @api
 186:../../os/rt/src/chregistry.c ****  */
 187:../../os/rt/src/chregistry.c **** thread_t *chRegNextThread(thread_t *tp) {
  66               		.loc 1 187 0
  67               		.cfi_startproc
  68               	.LVL2:
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  73               	.LBB70:
  74               	.LBB71:
  75               	.LBB72:
 430:../../os/common/ports/AVR/chcore.h **** }
  76               		.loc 2 430 0
  77               	/* #APP */
  78               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
  79 0000 F894      		cli
  80               	 ;  0 "" 2
  81               	/* #NOAPP */
  82               	.LBE72:
  83               	.LBE71:
  84               	.LBE70:
 188:../../os/rt/src/chregistry.c ****   thread_t *ntp;
 189:../../os/rt/src/chregistry.c ****   ch_queue_t *nqp;
 190:../../os/rt/src/chregistry.c **** 
 191:../../os/rt/src/chregistry.c ****   chSysLock();
 192:../../os/rt/src/chregistry.c **** 
 193:../../os/rt/src/chregistry.c ****   /* Next element in the registry queue.*/
 194:../../os/rt/src/chregistry.c ****   nqp = tp->rqueue.next;
  85               		.loc 1 194 0
  86 0002 FC01      		movw r30,r24
  87 0004 8781      		ldd r24,Z+7
  88 0006 9085      		ldd r25,Z+8
  89               	.LVL3:
 195:../../os/rt/src/chregistry.c ****   if (nqp == REG_HEADER(currcore)) {
  90               		.loc 1 195 0
  91 0008 F0E0      		ldi r31,hi8(ch0+23)
  92 000a 8030      		cpi r24,lo8(ch0+23)
  93 000c 9F07      		cpc r25,r31
  94 000e 01F0      		breq .L5
  95               	.LVL4:
  96               	.LBB73:
 196:../../os/rt/src/chregistry.c ****     ntp = NULL;
 197:../../os/rt/src/chregistry.c ****   }
 198:../../os/rt/src/chregistry.c ****   else {
 199:../../os/rt/src/chregistry.c ****     uint8_t *p = (uint8_t *)nqp;
 200:../../os/rt/src/chregistry.c ****     /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
 201:../../os/rt/src/chregistry.c ****     ntp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
  97               		.loc 1 201 0
  98 0010 0797      		sbiw r24,7
  99               	.LVL5:
 100               	.L4:
 101               	.LBE73:
 102               	.LBB74:
 103               	.LBB75:
 104               	.LBB76:
 105               	.LBB77:
 106               		.loc 2 440 0
 107               	/* #APP */
 108               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 109 0012 7894      		sei
 110               	 ;  0 "" 2
 111               	/* epilogue start */
 112               	/* #NOAPP */
 113               	.LBE77:
 114               	.LBE76:
 115               	.LBE75:
 116               	.LBE74:
 202:../../os/rt/src/chregistry.c ****     /*lint -restore*/
 203:../../os/rt/src/chregistry.c **** 
 204:../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 205:../../os/rt/src/chregistry.c ****     chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 206:../../os/rt/src/chregistry.c **** 
 207:../../os/rt/src/chregistry.c ****     ntp->refs++;
 208:../../os/rt/src/chregistry.c **** #endif
 209:../../os/rt/src/chregistry.c ****   }
 210:../../os/rt/src/chregistry.c ****   chSysUnlock();
 211:../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 212:../../os/rt/src/chregistry.c ****   chThdRelease(tp);
 213:../../os/rt/src/chregistry.c **** #endif
 214:../../os/rt/src/chregistry.c **** 
 215:../../os/rt/src/chregistry.c ****   return ntp;
 216:../../os/rt/src/chregistry.c **** }
 117               		.loc 1 216 0
 118 0014 0895      		ret
 119               	.LVL6:
 120               	.L5:
 196:../../os/rt/src/chregistry.c ****     ntp = NULL;
 121               		.loc 1 196 0
 122 0016 90E0      		ldi r25,0
 123 0018 80E0      		ldi r24,0
 124               	.LVL7:
 125 001a 00C0      		rjmp .L4
 126               		.cfi_endproc
 127               	.LFE196:
 129               		.section	.text.chRegFindThreadByName,"ax",@progbits
 130               	.global	chRegFindThreadByName
 132               	chRegFindThreadByName:
 133               	.LFB197:
 217:../../os/rt/src/chregistry.c **** 
 218:../../os/rt/src/chregistry.c **** /**
 219:../../os/rt/src/chregistry.c ****  * @brief   Retrieves a thread pointer by name.
 220:../../os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 221:../../os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 222:../../os/rt/src/chregistry.c ****  *          returned.
 223:../../os/rt/src/chregistry.c ****  *
 224:../../os/rt/src/chregistry.c ****  * @param[in] name      the thread name
 225:../../os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 226:../../os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 227:../../os/rt/src/chregistry.c ****  *
 228:../../os/rt/src/chregistry.c ****  * @api
 229:../../os/rt/src/chregistry.c ****  */
 230:../../os/rt/src/chregistry.c **** thread_t *chRegFindThreadByName(const char *name) {
 134               		.loc 1 230 0
 135               		.cfi_startproc
 136               	.LVL8:
 137 0000 0F93      		push r16
 138               	.LCFI0:
 139               		.cfi_def_cfa_offset 3
 140               		.cfi_offset 16, -2
 141 0002 1F93      		push r17
 142               	.LCFI1:
 143               		.cfi_def_cfa_offset 4
 144               		.cfi_offset 17, -3
 145 0004 CF93      		push r28
 146               	.LCFI2:
 147               		.cfi_def_cfa_offset 5
 148               		.cfi_offset 28, -4
 149 0006 DF93      		push r29
 150               	.LCFI3:
 151               		.cfi_def_cfa_offset 6
 152               		.cfi_offset 29, -5
 153               	/* prologue: function */
 154               	/* frame size = 0 */
 155               	/* stack size = 4 */
 156               	.L__stack_usage = 4
 157 0008 8C01      		movw r16,r24
 158               	.LBB78:
 159               	.LBB79:
 160               	.LBB80:
 161               	.LBB81:
 162               	.LBB82:
 430:../../os/common/ports/AVR/chcore.h **** }
 163               		.loc 2 430 0
 164               	/* #APP */
 165               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 166 000a F894      		cli
 167               	 ;  0 "" 2
 168               	.LVL9:
 169               	/* #NOAPP */
 170               	.LBE82:
 171               	.LBE81:
 172               	.LBE80:
 166:../../os/rt/src/chregistry.c ****   /*lint -restore*/
 173               		.loc 1 166 0
 174 000c C091 0000 		lds r28,ch0+23
 175 0010 D091 0000 		lds r29,ch0+23+1
 176 0014 2797      		sbiw r28,7
 177               	.LVL10:
 178               	.LBB83:
 179               	.LBB84:
 180               	.LBB85:
 181               	.LBB86:
 182               		.loc 2 440 0
 183               	/* #APP */
 184               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 185 0016 7894      		sei
 186               	 ;  0 "" 2
 187               	.LVL11:
 188               	/* #NOAPP */
 189 0018 00C0      		rjmp .L9
 190               	.LVL12:
 191               	.L15:
 192               	.LBE86:
 193               	.LBE85:
 194               	.LBE84:
 195               	.LBE83:
 196               	.LBE79:
 197               	.LBE78:
 198               	.LBB87:
 199               	.LBB88:
 200               	.LBB89:
 201               	.LBB90:
 202               	.LBB91:
 430:../../os/common/ports/AVR/chcore.h **** }
 203               		.loc 2 430 0
 204               	/* #APP */
 205               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 206 001a F894      		cli
 207               	 ;  0 "" 2
 208               	/* #NOAPP */
 209               	.LBE91:
 210               	.LBE90:
 211               	.LBE89:
 194:../../os/rt/src/chregistry.c ****   if (nqp == REG_HEADER(currcore)) {
 212               		.loc 1 194 0
 213 001c 0F80      		ldd __tmp_reg__,Y+7
 214 001e D885      		ldd r29,Y+8
 215 0020 C02D      		mov r28,__tmp_reg__
 216               	.LVL13:
 195:../../os/rt/src/chregistry.c ****     ntp = NULL;
 217               		.loc 1 195 0
 218 0022 80E0      		ldi r24,hi8(ch0+23)
 219 0024 C030      		cpi r28,lo8(ch0+23)
 220 0026 D807      		cpc r29,r24
 221 0028 01F0      		breq .L14
 222               	.LVL14:
 223               	.LBB92:
 201:../../os/rt/src/chregistry.c ****     /*lint -restore*/
 224               		.loc 1 201 0
 225 002a 2797      		sbiw r28,7
 226               	.LVL15:
 227               	.LBE92:
 228               	.LBB93:
 229               	.LBB94:
 230               	.LBB95:
 231               	.LBB96:
 232               		.loc 2 440 0
 233               	/* #APP */
 234               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 235 002c 7894      		sei
 236               	 ;  0 "" 2
 237               	.LVL16:
 238               	/* #NOAPP */
 239               	.LBE96:
 240               	.LBE95:
 241               	.LBE94:
 242               	.LBE93:
 243               	.LBE88:
 244               	.LBE87:
 231:../../os/rt/src/chregistry.c ****   thread_t *ctp;
 232:../../os/rt/src/chregistry.c **** 
 233:../../os/rt/src/chregistry.c ****   /* Scanning registry.*/
 234:../../os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 235:../../os/rt/src/chregistry.c ****   do {
 236:../../os/rt/src/chregistry.c ****     if (strcmp(chRegGetThreadNameX(ctp), name) == 0) {
 237:../../os/rt/src/chregistry.c ****       return ctp;
 238:../../os/rt/src/chregistry.c ****     }
 239:../../os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 240:../../os/rt/src/chregistry.c ****   } while (ctp != NULL);
 245               		.loc 1 240 0
 246 002e 2097      		sbiw r28,0
 247 0030 01F0      		breq .L6
 248               	.LVL17:
 249               	.L9:
 236:../../os/rt/src/chregistry.c ****       return ctp;
 250               		.loc 1 236 0
 251 0032 B801      		movw r22,r16
 252 0034 8D85      		ldd r24,Y+13
 253 0036 9E85      		ldd r25,Y+14
 254 0038 0E94 0000 		call strcmp
 255               	.LVL18:
 256 003c 892B      		or r24,r25
 257 003e 01F4      		brne .L15
 258               	.LVL19:
 259               	.L6:
 241:../../os/rt/src/chregistry.c **** 
 242:../../os/rt/src/chregistry.c ****   return NULL;
 243:../../os/rt/src/chregistry.c **** }
 260               		.loc 1 243 0
 261 0040 CE01      		movw r24,r28
 262               	/* epilogue start */
 263 0042 DF91      		pop r29
 264 0044 CF91      		pop r28
 265 0046 1F91      		pop r17
 266 0048 0F91      		pop r16
 267               	.LVL20:
 268 004a 0895      		ret
 269               	.LVL21:
 270               	.L14:
 271               	.LBB102:
 272               	.LBB101:
 273               	.LBB100:
 274               	.LBB99:
 275               	.LBB98:
 276               	.LBB97:
 277               		.loc 2 440 0
 278               	/* #APP */
 279               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 280 004c 7894      		sei
 281               	 ;  0 "" 2
 282               	.LVL22:
 283               	/* #NOAPP */
 284               	.LBE97:
 285               	.LBE98:
 286               	.LBE99:
 287               	.LBE100:
 288               	.LBE101:
 289               	.LBE102:
 242:../../os/rt/src/chregistry.c **** }
 290               		.loc 1 242 0
 291 004e D0E0      		ldi r29,0
 292 0050 C0E0      		ldi r28,0
 293               		.loc 1 243 0
 294 0052 CE01      		movw r24,r28
 295               	/* epilogue start */
 296 0054 DF91      		pop r29
 297 0056 CF91      		pop r28
 298 0058 1F91      		pop r17
 299 005a 0F91      		pop r16
 300               	.LVL23:
 301 005c 0895      		ret
 302               		.cfi_endproc
 303               	.LFE197:
 305               		.section	.text.chRegFindThreadByPointer,"ax",@progbits
 306               	.global	chRegFindThreadByPointer
 308               	chRegFindThreadByPointer:
 309               	.LFB198:
 244:../../os/rt/src/chregistry.c **** 
 245:../../os/rt/src/chregistry.c **** /**
 246:../../os/rt/src/chregistry.c ****  * @brief   Confirms that a pointer is a valid thread pointer.
 247:../../os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 248:../../os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 249:../../os/rt/src/chregistry.c ****  *          returned.
 250:../../os/rt/src/chregistry.c ****  *
 251:../../os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 252:../../os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 253:../../os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 254:../../os/rt/src/chregistry.c ****  *
 255:../../os/rt/src/chregistry.c ****  * @api
 256:../../os/rt/src/chregistry.c ****  */
 257:../../os/rt/src/chregistry.c **** thread_t *chRegFindThreadByPointer(thread_t *tp) {
 310               		.loc 1 257 0
 311               		.cfi_startproc
 312               	.LVL24:
 313               	/* prologue: function */
 314               	/* frame size = 0 */
 315               	/* stack size = 0 */
 316               	.L__stack_usage = 0
 317               	.LBB103:
 318               	.LBB104:
 319               	.LBB105:
 320               	.LBB106:
 321               	.LBB107:
 430:../../os/common/ports/AVR/chcore.h **** }
 322               		.loc 2 430 0
 323               	/* #APP */
 324               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 325 0000 F894      		cli
 326               	 ;  0 "" 2
 327               	/* #NOAPP */
 328               	.LBE107:
 329               	.LBE106:
 330               	.LBE105:
 164:../../os/rt/src/chregistry.c ****   /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
 331               		.loc 1 164 0
 332 0002 E091 0000 		lds r30,ch0+23
 333 0006 F091 0000 		lds r31,ch0+23+1
 334               	.LVL25:
 166:../../os/rt/src/chregistry.c ****   /*lint -restore*/
 335               		.loc 1 166 0
 336 000a 3797      		sbiw r30,7
 337               	.LVL26:
 338               	.LBB108:
 339               	.LBB109:
 340               	.LBB110:
 341               	.LBB111:
 342               		.loc 2 440 0
 343               	/* #APP */
 344               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 345 000c 7894      		sei
 346               	 ;  0 "" 2
 347               	/* #NOAPP */
 348 000e 00C0      		rjmp .L31
 349               	.LVL27:
 350               	.L34:
 351               	.LBE111:
 352               	.LBE110:
 353               	.LBE109:
 354               	.LBE108:
 355               	.LBE104:
 356               	.LBE103:
 357               	.LBB112:
 358               	.LBB113:
 359               	.LBB114:
 360               	.LBB115:
 361               	.LBB116:
 430:../../os/common/ports/AVR/chcore.h **** }
 362               		.loc 2 430 0
 363               	/* #APP */
 364               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 365 0010 F894      		cli
 366               	 ;  0 "" 2
 367               	/* #NOAPP */
 368               	.LBE116:
 369               	.LBE115:
 370               	.LBE114:
 194:../../os/rt/src/chregistry.c ****   if (nqp == REG_HEADER(currcore)) {
 371               		.loc 1 194 0
 372 0012 0780      		ldd __tmp_reg__,Z+7
 373 0014 F085      		ldd r31,Z+8
 374 0016 E02D      		mov r30,__tmp_reg__
 375               	.LVL28:
 195:../../os/rt/src/chregistry.c ****     ntp = NULL;
 376               		.loc 1 195 0
 377 0018 20E0      		ldi r18,hi8(ch0+23)
 378 001a E030      		cpi r30,lo8(ch0+23)
 379 001c F207      		cpc r31,r18
 380 001e 01F0      		breq .L32
 381               	.LVL29:
 382               	.LBB117:
 201:../../os/rt/src/chregistry.c ****     /*lint -restore*/
 383               		.loc 1 201 0
 384 0020 3797      		sbiw r30,7
 385               	.LVL30:
 386               	.LBE117:
 387               	.LBB118:
 388               	.LBB119:
 389               	.LBB120:
 390               	.LBB121:
 391               		.loc 2 440 0
 392               	/* #APP */
 393               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 394 0022 7894      		sei
 395               	 ;  0 "" 2
 396               	.LVL31:
 397               	/* #NOAPP */
 398               	.LBE121:
 399               	.LBE120:
 400               	.LBE119:
 401               	.LBE118:
 402               	.LBE113:
 403               	.LBE112:
 258:../../os/rt/src/chregistry.c ****   thread_t *ctp;
 259:../../os/rt/src/chregistry.c **** 
 260:../../os/rt/src/chregistry.c ****   /* Scanning registry.*/
 261:../../os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 262:../../os/rt/src/chregistry.c ****   do {
 263:../../os/rt/src/chregistry.c ****     if (ctp == tp) {
 264:../../os/rt/src/chregistry.c ****       return ctp;
 265:../../os/rt/src/chregistry.c ****     }
 266:../../os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 267:../../os/rt/src/chregistry.c ****   } while (ctp != NULL);
 404               		.loc 1 267 0
 405 0024 3097      		sbiw r30,0
 406 0026 01F0      		breq .L33
 407               	.LVL32:
 408               	.L31:
 263:../../os/rt/src/chregistry.c ****       return ctp;
 409               		.loc 1 263 0
 410 0028 8E17      		cp r24,r30
 411 002a 9F07      		cpc r25,r31
 412 002c 01F4      		brne .L34
 268:../../os/rt/src/chregistry.c **** 
 269:../../os/rt/src/chregistry.c ****   return NULL;
 270:../../os/rt/src/chregistry.c **** }
 413               		.loc 1 270 0
 414 002e CF01      		movw r24,r30
 415               	.LVL33:
 416               	/* epilogue start */
 417 0030 0895      		ret
 418               	.LVL34:
 419               	.L32:
 420               	.LBB127:
 421               	.LBB126:
 422               	.LBB125:
 423               	.LBB124:
 424               	.LBB123:
 425               	.LBB122:
 426               		.loc 2 440 0
 427               	/* #APP */
 428               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 429 0032 7894      		sei
 430               	 ;  0 "" 2
 431               	.LVL35:
 432               	/* #NOAPP */
 433               	.LBE122:
 434               	.LBE123:
 435               	.LBE124:
 436               	.LBE125:
 437               	.LBE126:
 438               	.LBE127:
 269:../../os/rt/src/chregistry.c **** }
 439               		.loc 1 269 0
 440 0034 F0E0      		ldi r31,0
 441 0036 E0E0      		ldi r30,0
 442               		.loc 1 270 0
 443 0038 CF01      		movw r24,r30
 444               	.LVL36:
 445               	/* epilogue start */
 446 003a 0895      		ret
 447               	.LVL37:
 448               	.L33:
 269:../../os/rt/src/chregistry.c **** }
 449               		.loc 1 269 0
 450 003c F0E0      		ldi r31,0
 451 003e E0E0      		ldi r30,0
 452               	.LVL38:
 453               		.loc 1 270 0
 454 0040 CF01      		movw r24,r30
 455               	.LVL39:
 456               	/* epilogue start */
 457 0042 0895      		ret
 458               		.cfi_endproc
 459               	.LFE198:
 461               	.global	ch_debug
 462               		.section	.rodata.ch_debug,"a",@progbits
 465               	ch_debug:
 466 0000 6D        		.byte	109
 467 0001 61        		.byte	97
 468 0002 69        		.byte	105
 469 0003 6E        		.byte	110
 470 0004 00        		.byte	0
 471 0005 2B        		.byte	43
 472 0006 0438      		.word	14340
 473 0008 02        		.byte	2
 474 0009 02        		.byte	2
 475 000a 1E        		.byte	30
 476 000b 04        		.byte	4
 477 000c 05        		.byte	5
 478 000d 07        		.byte	7
 479 000e 09        		.byte	9
 480 000f 0D        		.byte	13
 481 0010 00        		.byte	0
 482 0011 0F        		.byte	15
 483 0012 10        		.byte	16
 484 0013 00        		.byte	0
 485 0014 00        		.byte	0
 486 0015 00        		.byte	0
 487 0016 00        		.byte	0
 488 0017 00        		.byte	0
 489 0018 00        		.byte	0
 490 0019 00        		.byte	0
 491 001a 15        		.byte	21
 492 001b 02        		.byte	2
 493 001c 01        		.byte	1
 494 001d 00        		.byte	0
 495 001e 01        		.byte	1
 496 001f 00        		.byte	0
 497 0020 00        		.byte	0
 498 0021 00        		.byte	0
 499 0022 00        		.byte	0
 500 0023 00        		.byte	0
 501 0024 00        		.byte	0
 502 0025 05        		.byte	5
 503 0026 00        		.byte	0
 504 0027 07        		.byte	7
 505 0028 17        		.byte	23
 506 0029 1B        		.byte	27
 507 002a 1D        		.byte	29
 508               		.text
 509               	.Letext0:
 510               		.file 3 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 511               		.file 4 "/usr/lib/avr/include/stdint.h"
 512               		.file 5 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 513               		.file 6 "../../os/rt/include/chearly.h"
 514               		.file 7 "../../os/rt/include/chobjects.h"
 515               		.file 8 "../../os/rt/include/chrfcu.h"
 516               		.file 9 "../../os/rt/include/chdebug.h"
 517               		.file 10 "../../os/rt/include/chtime.h"
 518               		.file 11 "../../os/rt/include/chlists.h"
 519               		.file 12 "../../os/rt/include/chsem.h"
 520               		.file 13 "../../os/rt/include/chmtx.h"
 521               		.file 14 "../../os/rt/include/chsys.h"
 522               		.file 15 "../../os/rt/include/chregistry.h"
 523               		.file 16 "../../os/oslib/include/chmemcore.h"
 524               		.file 17 "/usr/lib/avr/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chregistry.c
     /tmp/ccTJrysZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccTJrysZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccTJrysZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccTJrysZ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccTJrysZ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccTJrysZ.s:13     .text.chRegFirstThread:0000000000000000 chRegFirstThread
     /tmp/ccTJrysZ.s:64     .text.chRegNextThread:0000000000000000 chRegNextThread
     /tmp/ccTJrysZ.s:132    .text.chRegFindThreadByName:0000000000000000 chRegFindThreadByName
     /tmp/ccTJrysZ.s:308    .text.chRegFindThreadByPointer:0000000000000000 chRegFindThreadByPointer
     /tmp/ccTJrysZ.s:465    .rodata.ch_debug:0000000000000000 ch_debug

UNDEFINED SYMBOLS
ch0
strcmp
__do_copy_data
