   1               		.file	"chvt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_insert_first.constprop.5,"ax",@progbits
  12               	vt_insert_first.constprop.5:
  13               	.LFB209:
  14               		.file 1 "../../os/rt/src/chvt.c"
   1:../../os/rt/src/chvt.c **** /*
   2:../../os/rt/src/chvt.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/src/chvt.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/src/chvt.c **** 
   5:../../os/rt/src/chvt.c ****     This file is part of ChibiOS.
   6:../../os/rt/src/chvt.c **** 
   7:../../os/rt/src/chvt.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/src/chvt.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/src/chvt.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/src/chvt.c **** 
  11:../../os/rt/src/chvt.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/src/chvt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/src/chvt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/src/chvt.c ****     GNU General Public License for more details.
  15:../../os/rt/src/chvt.c **** 
  16:../../os/rt/src/chvt.c ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/src/chvt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/src/chvt.c **** */
  19:../../os/rt/src/chvt.c **** 
  20:../../os/rt/src/chvt.c **** /**
  21:../../os/rt/src/chvt.c ****  * @file    rt/src/chvt.c
  22:../../os/rt/src/chvt.c ****  * @brief   Time and Virtual Timers module code.
  23:../../os/rt/src/chvt.c ****  *
  24:../../os/rt/src/chvt.c ****  * @addtogroup time
  25:../../os/rt/src/chvt.c ****  * @details Time and Virtual Timers related APIs and services.
  26:../../os/rt/src/chvt.c ****  * @{
  27:../../os/rt/src/chvt.c ****  */
  28:../../os/rt/src/chvt.c **** 
  29:../../os/rt/src/chvt.c **** #include <string.h>
  30:../../os/rt/src/chvt.c **** 
  31:../../os/rt/src/chvt.c **** #include "ch.h"
  32:../../os/rt/src/chvt.c **** 
  33:../../os/rt/src/chvt.c **** /*===========================================================================*/
  34:../../os/rt/src/chvt.c **** /* Module local definitions.                                                 */
  35:../../os/rt/src/chvt.c **** /*===========================================================================*/
  36:../../os/rt/src/chvt.c **** 
  37:../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  38:../../os/rt/src/chvt.c **** #define VT_MAX_DELAY                                                        \
  39:../../os/rt/src/chvt.c ****   (((sysinterval_t)TIME_MAX_SYSTIME) &                                      \
  40:../../os/rt/src/chvt.c ****    ~(sysinterval_t)(((sysinterval_t)1 << (CH_CFG_ST_RESOLUTION / 2)) - (sysinterval_t)1))
  41:../../os/rt/src/chvt.c **** #endif
  42:../../os/rt/src/chvt.c **** 
  43:../../os/rt/src/chvt.c **** /*===========================================================================*/
  44:../../os/rt/src/chvt.c **** /* Module exported variables.                                                */
  45:../../os/rt/src/chvt.c **** /*===========================================================================*/
  46:../../os/rt/src/chvt.c **** 
  47:../../os/rt/src/chvt.c **** /*===========================================================================*/
  48:../../os/rt/src/chvt.c **** /* Module local types.                                                       */
  49:../../os/rt/src/chvt.c **** /*===========================================================================*/
  50:../../os/rt/src/chvt.c **** 
  51:../../os/rt/src/chvt.c **** /*===========================================================================*/
  52:../../os/rt/src/chvt.c **** /* Module local variables.                                                   */
  53:../../os/rt/src/chvt.c **** /*===========================================================================*/
  54:../../os/rt/src/chvt.c **** 
  55:../../os/rt/src/chvt.c **** /*===========================================================================*/
  56:../../os/rt/src/chvt.c **** /* Module local functions.                                                   */
  57:../../os/rt/src/chvt.c **** /*===========================================================================*/
  58:../../os/rt/src/chvt.c **** 
  59:../../os/rt/src/chvt.c **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
  60:../../os/rt/src/chvt.c **** /**
  61:../../os/rt/src/chvt.c ****  * @brief   Alarm time setup.
  62:../../os/rt/src/chvt.c ****  * @note    An RFCU fault is registered if the system time skips past
  63:../../os/rt/src/chvt.c ****  *          <tt>(now + delay)</tt>, the deadline is skipped forward
  64:../../os/rt/src/chvt.c ****  *          in order to compensate for the event.
  65:../../os/rt/src/chvt.c ****  *
  66:../../os/rt/src/chvt.c ****  * @param[in] now       last known system time
  67:../../os/rt/src/chvt.c ****  * @param[in] delay     delay over @p now
  68:../../os/rt/src/chvt.c ****  */
  69:../../os/rt/src/chvt.c **** static void vt_set_alarm(systime_t now, sysinterval_t delay) {
  70:../../os/rt/src/chvt.c ****   sysinterval_t currdelta;
  71:../../os/rt/src/chvt.c **** 
  72:../../os/rt/src/chvt.c ****   /* Initial delta is what is configured statically.*/
  73:../../os/rt/src/chvt.c ****   currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  74:../../os/rt/src/chvt.c **** 
  75:../../os/rt/src/chvt.c ****   if (delay < currdelta) {
  76:../../os/rt/src/chvt.c ****     /* We need to avoid that the system time goes past the alarm we are
  77:../../os/rt/src/chvt.c ****        going to set before the alarm is actually set.*/
  78:../../os/rt/src/chvt.c ****     delay = currdelta;
  79:../../os/rt/src/chvt.c ****   }
  80:../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  81:../../os/rt/src/chvt.c ****   else if (delay > VT_MAX_DELAY) {
  82:../../os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle
  83:../../os/rt/src/chvt.c ****        this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
  84:../../os/rt/src/chvt.c ****     delay = VT_MAX_DELAY;
  85:../../os/rt/src/chvt.c ****   }
  86:../../os/rt/src/chvt.c **** #endif
  87:../../os/rt/src/chvt.c **** 
  88:../../os/rt/src/chvt.c ****   /* Deadline skip detection and correction loop.*/
  89:../../os/rt/src/chvt.c ****   while (true) {
  90:../../os/rt/src/chvt.c ****     sysinterval_t nowdelta;
  91:../../os/rt/src/chvt.c ****     systime_t newnow;
  92:../../os/rt/src/chvt.c **** 
  93:../../os/rt/src/chvt.c ****     /* Setting up the alarm on the next deadline.*/
  94:../../os/rt/src/chvt.c ****     port_timer_set_alarm(chTimeAddX(now, delay));
  95:../../os/rt/src/chvt.c **** 
  96:../../os/rt/src/chvt.c ****     /* Check on current time, we need to detect the error condition where
  97:../../os/rt/src/chvt.c ****        current time skipped past the calculated deadline.
  98:../../os/rt/src/chvt.c ****        Note that the "<" condition is intentional, we want to make sure
  99:../../os/rt/src/chvt.c ****        that the alarm is set before the deadline is reached because the
 100:../../os/rt/src/chvt.c ****        comparison could happen on the transition depending on the timer
 101:../../os/rt/src/chvt.c ****        architecture.*/
 102:../../os/rt/src/chvt.c ****     newnow = chVTGetSystemTimeX();
 103:../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(now, newnow);
 104:../../os/rt/src/chvt.c ****     if (likely(nowdelta < delay)) {
 105:../../os/rt/src/chvt.c ****       break;
 106:../../os/rt/src/chvt.c ****     }
 107:../../os/rt/src/chvt.c **** 
 108:../../os/rt/src/chvt.c ****     /* Trying again with a more relaxed minimum delta.*/
 109:../../os/rt/src/chvt.c ****     currdelta += (sysinterval_t)1;
 110:../../os/rt/src/chvt.c **** 
 111:../../os/rt/src/chvt.c ****     /* Current time becomes the new "base" time.*/
 112:../../os/rt/src/chvt.c ****     now = newnow;
 113:../../os/rt/src/chvt.c ****     delay = currdelta;
 114:../../os/rt/src/chvt.c ****   }
 115:../../os/rt/src/chvt.c **** 
 116:../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 117:../../os/rt/src/chvt.c ****   /* Checking if a skip occurred.*/
 118:../../os/rt/src/chvt.c ****   if (currdelta > CH_CFG_ST_TIMEDELTA) {
 119:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 120:../../os/rt/src/chvt.c ****   }
 121:../../os/rt/src/chvt.c **** #else
 122:../../os/rt/src/chvt.c ****   /* Assertions as fallback.*/
 123:../../os/rt/src/chvt.c ****   chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
 124:../../os/rt/src/chvt.c **** #endif
 125:../../os/rt/src/chvt.c **** }
 126:../../os/rt/src/chvt.c **** 
 127:../../os/rt/src/chvt.c **** /**
 128:../../os/rt/src/chvt.c ****  * @brief   Inserts a timer as first element in a delta list.
 129:../../os/rt/src/chvt.c ****  * @note    This is the special case when the delta list is initially empty.
 130:../../os/rt/src/chvt.c ****  */
 131:../../os/rt/src/chvt.c **** static void vt_insert_first(virtual_timers_list_t *vtlp,
  15               		.loc 1 131 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF92      		push r12
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 12, -2
  22 0002 DF92      		push r13
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 13, -3
  26 0004 EF92      		push r14
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 14, -4
  30 0006 FF92      		push r15
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 15, -5
  34 0008 0F93      		push r16
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 16, -6
  38 000a 1F93      		push r17
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 17, -7
  42 000c CF93      		push r28
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 28, -8
  46 000e DF93      		push r29
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 29, -9
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 8 */
  53               	.L__stack_usage = 8
  54 0010 FC01      		movw r30,r24
  55 0012 8B01      		movw r16,r22
  56               	.LVL1:
 132:../../os/rt/src/chvt.c ****                             virtual_timer_t *vtp,
 133:../../os/rt/src/chvt.c ****                             systime_t now,
 134:../../os/rt/src/chvt.c ****                             sysinterval_t delay) {
 135:../../os/rt/src/chvt.c ****   sysinterval_t currdelta;
 136:../../os/rt/src/chvt.c **** 
 137:../../os/rt/src/chvt.c ****   /* The delta list is empty, the current time becomes the new
 138:../../os/rt/src/chvt.c ****      delta list base time, the timer is inserted.*/
 139:../../os/rt/src/chvt.c ****   vtlp->lasttime = now;
  57               		.loc 1 139 0
  58 0014 7093 0000 		sts ch0+13+1,r23
  59 0018 6093 0000 		sts ch0+13,r22
  60               	.LVL2:
  61               	.LBB208:
  62               	.LBB209:
  63               		.file 2 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
 226:../../os/rt/include/chlists.h **** }
 227:../../os/rt/include/chlists.h **** 
 228:../../os/rt/include/chlists.h **** /**
 229:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 230:../../os/rt/include/chlists.h ****  *
 231:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 232:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 233:../../os/rt/include/chlists.h ****  *
 234:../../os/rt/include/chlists.h ****  * @notapi
 235:../../os/rt/include/chlists.h ****  */
 236:../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 237:../../os/rt/include/chlists.h **** 
 238:../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 239:../../os/rt/include/chlists.h **** }
 240:../../os/rt/include/chlists.h **** 
 241:../../os/rt/include/chlists.h **** /**
 242:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 243:../../os/rt/include/chlists.h ****  *
 244:../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 245:../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 246:../../os/rt/include/chlists.h ****  *
 247:../../os/rt/include/chlists.h ****  * @notapi
 248:../../os/rt/include/chlists.h ****  */
 249:../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 250:../../os/rt/include/chlists.h **** 
 251:../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 252:../../os/rt/include/chlists.h **** }
 253:../../os/rt/include/chlists.h **** 
 254:../../os/rt/include/chlists.h **** /**
 255:../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 256:../../os/rt/include/chlists.h ****  *
 257:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 258:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 259:../../os/rt/include/chlists.h ****  *
 260:../../os/rt/include/chlists.h ****  * @notapi
 261:../../os/rt/include/chlists.h ****  */
 262:../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 263:../../os/rt/include/chlists.h **** 
 264:../../os/rt/include/chlists.h ****   p->next       = qp;
 265:../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 266:../../os/rt/include/chlists.h ****   p->prev->next = p;
 267:../../os/rt/include/chlists.h ****   qp->prev      = p;
 268:../../os/rt/include/chlists.h **** }
 269:../../os/rt/include/chlists.h **** 
 270:../../os/rt/include/chlists.h **** /**
 271:../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 272:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 273:../../os/rt/include/chlists.h ****  *          element with the highest priority.
 274:../../os/rt/include/chlists.h ****  *
 275:../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 276:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 277:../../os/rt/include/chlists.h ****  *
 278:../../os/rt/include/chlists.h ****  * @notapi
 279:../../os/rt/include/chlists.h ****  */
 280:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 281:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 282:../../os/rt/include/chlists.h **** 
 283:../../os/rt/include/chlists.h ****   qp->next       = p->next;
 284:../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 285:../../os/rt/include/chlists.h **** 
 286:../../os/rt/include/chlists.h ****   return p;
 287:../../os/rt/include/chlists.h **** }
 288:../../os/rt/include/chlists.h **** 
 289:../../os/rt/include/chlists.h **** /**
 290:../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 291:../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 292:../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 293:../../os/rt/include/chlists.h ****  *
 294:../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 295:../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 296:../../os/rt/include/chlists.h ****  *
 297:../../os/rt/include/chlists.h ****  * @notapi
 298:../../os/rt/include/chlists.h ****  */
 299:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 300:../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 301:../../os/rt/include/chlists.h **** 
 302:../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 303:../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 304:../../os/rt/include/chlists.h **** 
 305:../../os/rt/include/chlists.h ****   return p;
 306:../../os/rt/include/chlists.h **** }
 307:../../os/rt/include/chlists.h **** 
 308:../../os/rt/include/chlists.h **** /**
 309:../../os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 310:../../os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 311:../../os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 312:../../os/rt/include/chlists.h ****  *
 313:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 314:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 315:../../os/rt/include/chlists.h ****  *
 316:../../os/rt/include/chlists.h ****  * @notapi
 317:../../os/rt/include/chlists.h ****  */
 318:../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 319:../../os/rt/include/chlists.h **** 
 320:../../os/rt/include/chlists.h ****   p->prev->next = p->next;
 321:../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 322:../../os/rt/include/chlists.h **** 
 323:../../os/rt/include/chlists.h ****   return p;
 324:../../os/rt/include/chlists.h **** }
 325:../../os/rt/include/chlists.h **** 
 326:../../os/rt/include/chlists.h **** /**
 327:../../os/rt/include/chlists.h ****  * @brief   Priority queue initialization.
 328:../../os/rt/include/chlists.h ****  * @note    The queue header priority is initialized to zero, all other
 329:../../os/rt/include/chlists.h ****  *          elements in the queue are assumed to have priority greater
 330:../../os/rt/include/chlists.h ****  *          than zero.
 331:../../os/rt/include/chlists.h ****  *
 332:../../os/rt/include/chlists.h ****  * @param[out] pqp      pointer to the priority queue header
 333:../../os/rt/include/chlists.h ****  *
 334:../../os/rt/include/chlists.h ****  * @notapi
 335:../../os/rt/include/chlists.h ****  */
 336:../../os/rt/include/chlists.h **** static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 337:../../os/rt/include/chlists.h **** 
 338:../../os/rt/include/chlists.h ****   pqp->next = pqp;
 339:../../os/rt/include/chlists.h ****   pqp->prev = pqp;
 340:../../os/rt/include/chlists.h ****   pqp->prio = (tprio_t)0;
 341:../../os/rt/include/chlists.h **** }
 342:../../os/rt/include/chlists.h **** 
 343:../../os/rt/include/chlists.h **** /**
 344:../../os/rt/include/chlists.h ****  * @brief   Removes the highest priority element from a priority queue and
 345:../../os/rt/include/chlists.h ****  *          returns it.
 346:../../os/rt/include/chlists.h ****  *
 347:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 348:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 349:../../os/rt/include/chlists.h ****  *
 350:../../os/rt/include/chlists.h ****  * @notapi
 351:../../os/rt/include/chlists.h ****  */
 352:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 353:../../os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 354:../../os/rt/include/chlists.h **** 
 355:../../os/rt/include/chlists.h ****   pqp->next       = p->next;
 356:../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 357:../../os/rt/include/chlists.h **** 
 358:../../os/rt/include/chlists.h ****   return p;
 359:../../os/rt/include/chlists.h **** }
 360:../../os/rt/include/chlists.h **** 
 361:../../os/rt/include/chlists.h **** /**
 362:../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it behind
 363:../../os/rt/include/chlists.h ****  *          its peers.
 364:../../os/rt/include/chlists.h ****  * @details The element is positioned behind all elements with higher or
 365:../../os/rt/include/chlists.h ****  *          equal priority.
 366:../../os/rt/include/chlists.h ****  *
 367:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 368:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 369:../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 370:../../os/rt/include/chlists.h ****  *
 371:../../os/rt/include/chlists.h ****  * @notapi
 372:../../os/rt/include/chlists.h ****  */
 373:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_behind(ch_priority_queue_t *pqp,
 374:../../os/rt/include/chlists.h ****                                                            ch_priority_queue_t *p) {
 375:../../os/rt/include/chlists.h **** 
 376:../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 377:../../os/rt/include/chlists.h ****   do {
 378:../../os/rt/include/chlists.h ****     pqp = pqp->next;
 379:../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio >= p->prio));
 380:../../os/rt/include/chlists.h **** 
 381:../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 382:../../os/rt/include/chlists.h ****   p->next       = pqp;
 383:../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 384:../../os/rt/include/chlists.h ****   p->prev->next = p;
 385:../../os/rt/include/chlists.h ****   pqp->prev     = p;
 386:../../os/rt/include/chlists.h **** 
 387:../../os/rt/include/chlists.h ****   return p;
 388:../../os/rt/include/chlists.h **** }
 389:../../os/rt/include/chlists.h **** 
 390:../../os/rt/include/chlists.h **** /**
 391:../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it ahead of
 392:../../os/rt/include/chlists.h ****  *          its peers.
 393:../../os/rt/include/chlists.h ****  * @details The element is positioned ahead of all elements with higher or
 394:../../os/rt/include/chlists.h ****  *          equal priority.
 395:../../os/rt/include/chlists.h ****  *
 396:../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 397:../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 398:../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 399:../../os/rt/include/chlists.h ****  *
 400:../../os/rt/include/chlists.h ****  * @notapi
 401:../../os/rt/include/chlists.h ****  */
 402:../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
 403:../../os/rt/include/chlists.h ****                                                           ch_priority_queue_t *p) {
 404:../../os/rt/include/chlists.h **** 
 405:../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 406:../../os/rt/include/chlists.h ****   do {
 407:../../os/rt/include/chlists.h ****     pqp = pqp->next;
 408:../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio > p->prio));
 409:../../os/rt/include/chlists.h **** 
 410:../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 411:../../os/rt/include/chlists.h ****   p->next       = pqp;
 412:../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 413:../../os/rt/include/chlists.h ****   p->prev->next = p;
 414:../../os/rt/include/chlists.h ****   pqp->prev     = p;
 415:../../os/rt/include/chlists.h **** 
 416:../../os/rt/include/chlists.h ****   return p;
 417:../../os/rt/include/chlists.h **** }
 418:../../os/rt/include/chlists.h **** 
 419:../../os/rt/include/chlists.h **** /**
 420:../../os/rt/include/chlists.h ****  * @brief   Delta list initialization.
 421:../../os/rt/include/chlists.h ****  *
 422:../../os/rt/include/chlists.h ****  * @param[out] dlhp    pointer to the delta list header
 423:../../os/rt/include/chlists.h ****  *
 424:../../os/rt/include/chlists.h ****  * @notapi
 425:../../os/rt/include/chlists.h ****  */
 426:../../os/rt/include/chlists.h **** static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 427:../../os/rt/include/chlists.h **** 
 428:../../os/rt/include/chlists.h ****   dlhp->next  = dlhp;
 429:../../os/rt/include/chlists.h ****   dlhp->prev  = dlhp;
 430:../../os/rt/include/chlists.h ****   dlhp->delta = (sysinterval_t)-1;
 431:../../os/rt/include/chlists.h **** }
 432:../../os/rt/include/chlists.h **** 
 433:../../os/rt/include/chlists.h **** /**
 434:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified delta list is empty.
 435:../../os/rt/include/chlists.h ****  *
 436:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 437:../../os/rt/include/chlists.h ****  * @return              The status of the delta list.
 438:../../os/rt/include/chlists.h ****  *
 439:../../os/rt/include/chlists.h ****  * @notapi
 440:../../os/rt/include/chlists.h ****  */
 441:../../os/rt/include/chlists.h **** static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
 442:../../os/rt/include/chlists.h **** 
 443:../../os/rt/include/chlists.h ****   return (bool)(dlhp == dlhp->next);
 444:../../os/rt/include/chlists.h **** }
 445:../../os/rt/include/chlists.h **** 
 446:../../os/rt/include/chlists.h **** /**
 447:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 448:../../os/rt/include/chlists.h ****  *
 449:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 450:../../os/rt/include/chlists.h ****  * @return              The status of the delta list.
 451:../../os/rt/include/chlists.h ****  *
 452:../../os/rt/include/chlists.h ****  * @notapi
 453:../../os/rt/include/chlists.h ****  */
 454:../../os/rt/include/chlists.h **** static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {
 455:../../os/rt/include/chlists.h **** 
 456:../../os/rt/include/chlists.h ****   return (bool)(dlhp != dlhp->next);
 457:../../os/rt/include/chlists.h **** }
 458:../../os/rt/include/chlists.h **** 
 459:../../os/rt/include/chlists.h **** /**
 460:../../os/rt/include/chlists.h ****  * @brief   Last element in the delta list check.
 461:../../os/rt/include/chlists.h ****  *
 462:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 463:../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 464:../../os/rt/include/chlists.h ****  *
 465:../../os/rt/include/chlists.h ****  * @notapi
 466:../../os/rt/include/chlists.h ****  */
 467:../../os/rt/include/chlists.h **** static inline bool ch_dlist_islast(ch_delta_list_t *dlhp,
 468:../../os/rt/include/chlists.h ****                                    ch_delta_list_t *dlp) {
 469:../../os/rt/include/chlists.h **** 
 470:../../os/rt/include/chlists.h ****   return (bool)(dlp->next == dlhp);
 471:../../os/rt/include/chlists.h **** }
 472:../../os/rt/include/chlists.h **** 
 473:../../os/rt/include/chlists.h **** /**
 474:../../os/rt/include/chlists.h ****  * @brief   Fist element in the delta list check.
 475:../../os/rt/include/chlists.h ****  *
 476:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 477:../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 478:../../os/rt/include/chlists.h ****  *
 479:../../os/rt/include/chlists.h ****  * @notapi
 480:../../os/rt/include/chlists.h ****  */
 481:../../os/rt/include/chlists.h **** static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
 482:../../os/rt/include/chlists.h ****                                     ch_delta_list_t *dlp) {
 483:../../os/rt/include/chlists.h **** 
 484:../../os/rt/include/chlists.h ****   return (bool)(dlhp->next == dlp);
 485:../../os/rt/include/chlists.h **** }
 486:../../os/rt/include/chlists.h **** 
 487:../../os/rt/include/chlists.h **** /**
 488:../../os/rt/include/chlists.h ****  * @brief   Inserts an element after another header element.
 489:../../os/rt/include/chlists.h ****  *
 490:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 491:../../os/rt/include/chlists.h ****  * @param[in] dlp       element to be inserted after the header element
 492:../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 493:../../os/rt/include/chlists.h ****  *
 494:../../os/rt/include/chlists.h ****  * @notapi
 495:../../os/rt/include/chlists.h ****  */
 496:../../os/rt/include/chlists.h **** static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
 497:../../os/rt/include/chlists.h ****                                          ch_delta_list_t *dlp,
 498:../../os/rt/include/chlists.h ****                                          sysinterval_t delta) {
 499:../../os/rt/include/chlists.h **** 
 500:../../os/rt/include/chlists.h ****   dlp->delta      = delta;
  64               		.loc 2 500 0
  65 001c 4483      		std Z+4,r20
  66 001e 5583      		std Z+5,r21
 501:../../os/rt/include/chlists.h ****   dlp->prev       = dlhp;
  67               		.loc 2 501 0
  68 0020 80E0      		ldi r24,lo8(ch0+7)
  69 0022 90E0      		ldi r25,hi8(ch0+7)
  70               	.LVL3:
  71 0024 9383      		std Z+3,r25
  72 0026 8283      		std Z+2,r24
 502:../../os/rt/include/chlists.h ****   dlp->next       = dlp->prev->next;
  73               		.loc 2 502 0
  74 0028 A091 0000 		lds r26,ch0+7
  75 002c B091 0000 		lds r27,ch0+7+1
  76 0030 B183      		std Z+1,r27
  77 0032 A083      		st Z,r26
 503:../../os/rt/include/chlists.h ****   dlp->next->prev = dlp;
  78               		.loc 2 503 0
  79 0034 1396      		adiw r26,2+1
  80 0036 FC93      		st X,r31
  81 0038 EE93      		st -X,r30
  82 003a 1297      		sbiw r26,2
 504:../../os/rt/include/chlists.h ****   dlhp->next      = dlp;
  83               		.loc 2 504 0
  84 003c F093 0000 		sts ch0+7+1,r31
  85 0040 E093 0000 		sts ch0+7,r30
  86               	.LVL4:
  87 0044 EA01      		movw r28,r20
  88 0046 4230      		cpi r20,2
  89 0048 5105      		cpc r21,__zero_reg__
  90 004a 00F4      		brsh .L2
  91 004c C2E0      		ldi r28,lo8(2)
  92 004e D0E0      		ldi r29,0
  93               	.L2:
  94               	.LVL5:
  95               	.LBE209:
  96               	.LBE208:
  97               	.LBB210:
  98               	.LBB211:
  99               		.file 3 "../../os/hal/osal/rt-nil/chcore_timer.h"
   1:../../os/hal/osal/rt-nil/chcore_timer.h **** /*
   2:../../os/hal/osal/rt-nil/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/chcore_timer.h **** 
   4:../../os/hal/osal/rt-nil/chcore_timer.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/chcore_timer.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/chcore_timer.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/chcore_timer.h **** 
   8:../../os/hal/osal/rt-nil/chcore_timer.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  10:../../os/hal/osal/rt-nil/chcore_timer.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/chcore_timer.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/chcore_timer.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/chcore_timer.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/chcore_timer.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/chcore_timer.h **** */
  16:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  17:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  18:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @file    osal/rt-nil//chcore_timer.h
  19:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   System Timer bindings header file.
  20:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  21:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @addtogroup OSAL_CHCORE_TIMER
  22:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @{
  23:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  24:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  25:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  26:../../os/hal/osal/rt-nil/chcore_timer.h **** #define CHCORE_TIMER_H
  27:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  28:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  29:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module constants.                                                         */
  30:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  31:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  32:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  33:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  34:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  36:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Derived constants and error checks.                                       */
  38:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  39:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  40:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  41:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module data structures and types.                                         */
  42:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  43:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  44:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  45:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module macros.                                                            */
  46:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  47:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  48:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  49:../../os/hal/osal/rt-nil/chcore_timer.h **** /* External declarations.                                                    */
  50:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  51:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  52:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  53:../../os/hal/osal/rt-nil/chcore_timer.h **** extern "C" {
  54:../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  55:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStartAlarm(systime_t time);
  56:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStopAlarm(void);
  57:../../os/hal/osal/rt-nil/chcore_timer.h ****   void stSetAlarm(systime_t time);
  58:../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetCounter(void);
  59:../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetAlarm(void);
  60:../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  61:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  62:../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  63:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  64:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  65:../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module inline functions.                                                  */
  66:../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  67:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  68:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  69:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Starts the alarm.
  70:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  71:../../os/hal/osal/rt-nil/chcore_timer.h ****  *          this call.
  72:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  73:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  74:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  75:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  76:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  77:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  78:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  79:../../os/hal/osal/rt-nil/chcore_timer.h ****   stStartAlarm(time);
 100               		.loc 3 79 0
 101 0050 C801      		movw r24,r16
 102               	.LVL6:
 103 0052 8C0F      		add r24,r28
 104 0054 9D1F      		adc r25,r29
 105 0056 0E94 0000 		call stStartAlarm
 106               	.LVL7:
 107               	.LBE211:
 108               	.LBE210:
 140:../../os/rt/src/chvt.c ****   ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
 141:../../os/rt/src/chvt.c **** 
 142:../../os/rt/src/chvt.c ****   /* Initial delta is what is configured statically.*/
 143:../../os/rt/src/chvt.c ****   currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 109               		.loc 1 143 0
 110 005a 82E0      		ldi r24,lo8(2)
 111 005c C82E      		mov r12,r24
 112 005e D12C      		mov r13,__zero_reg__
 113 0060 00C0      		rjmp .L4
 114               	.LVL8:
 115               	.L7:
 116               	.LBB212:
 144:../../os/rt/src/chvt.c **** 
 145:../../os/rt/src/chvt.c ****   /* If the requested delay is lower than the minimum safe delta then it
 146:../../os/rt/src/chvt.c ****      is raised to the minimum safe value.*/
 147:../../os/rt/src/chvt.c ****   if (delay < currdelta) {
 148:../../os/rt/src/chvt.c ****     /* We need to avoid that the system time goes past the alarm we are
 149:../../os/rt/src/chvt.c ****        going to set before the alarm is actually set.*/
 150:../../os/rt/src/chvt.c ****     delay = currdelta;
 151:../../os/rt/src/chvt.c ****   }
 152:../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 153:../../os/rt/src/chvt.c ****   else if (delay > VT_MAX_DELAY) {
 154:../../os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle
 155:../../os/rt/src/chvt.c ****        this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
 156:../../os/rt/src/chvt.c ****     delay = VT_MAX_DELAY;
 157:../../os/rt/src/chvt.c ****   }
 158:../../os/rt/src/chvt.c **** #endif
 159:../../os/rt/src/chvt.c **** 
 160:../../os/rt/src/chvt.c ****   /* Being the first element inserted in the list the alarm timer
 161:../../os/rt/src/chvt.c ****      is started.*/
 162:../../os/rt/src/chvt.c ****   port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 163:../../os/rt/src/chvt.c **** 
 164:../../os/rt/src/chvt.c ****   /* Deadline skip detection and correction loop.*/
 165:../../os/rt/src/chvt.c ****   while (true) {
 166:../../os/rt/src/chvt.c ****     systime_t newnow;
 167:../../os/rt/src/chvt.c **** 
 168:../../os/rt/src/chvt.c ****     /* Check on current time, we need to detect the error condition where
 169:../../os/rt/src/chvt.c ****        current time skipped past the calculated deadline.
 170:../../os/rt/src/chvt.c ****        Note that the "<" condition is intentional, we want to make sure
 171:../../os/rt/src/chvt.c ****        that the alarm is set before the deadline is reached because the
 172:../../os/rt/src/chvt.c ****        comparison could happen on the transition depending on the timer
 173:../../os/rt/src/chvt.c ****        architecture.*/
 174:../../os/rt/src/chvt.c ****     newnow = chVTGetSystemTimeX();
 175:../../os/rt/src/chvt.c ****     if (likely(chTimeDiffX(now, newnow) < delay)) {
 176:../../os/rt/src/chvt.c ****       break;
 177:../../os/rt/src/chvt.c ****     }
 178:../../os/rt/src/chvt.c **** 
 179:../../os/rt/src/chvt.c ****     /* Trying again with a more relaxed minimum delta.*/
 180:../../os/rt/src/chvt.c ****     currdelta += (sysinterval_t)1;
 117               		.loc 1 180 0
 118 0062 E601      		movw r28,r12
 119               	.LVL9:
 120 0064 2196      		adiw r28,1
 121               	.LVL10:
 122               	.LBB213:
 123               	.LBB214:
  80:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  81:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  82:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  83:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  84:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  85:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  86:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  87:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  88:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  89:../../os/hal/osal/rt-nil/chcore_timer.h ****   stStopAlarm();
  90:../../os/hal/osal/rt-nil/chcore_timer.h **** }
  91:../../os/hal/osal/rt-nil/chcore_timer.h **** 
  92:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  93:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Sets the alarm time.
  94:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  95:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  96:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  97:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  98:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  99:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
 100:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 101:../../os/hal/osal/rt-nil/chcore_timer.h ****   stSetAlarm(time);
 124               		.loc 3 101 0
 125 0066 C801      		movw r24,r16
 126 0068 8C0F      		add r24,r28
 127 006a 9D1F      		adc r25,r29
 128 006c 0E94 0000 		call stSetAlarm
 129               	.LVL11:
 130               	.LBE214:
 131               	.LBE213:
 181:../../os/rt/src/chvt.c **** 
 182:../../os/rt/src/chvt.c ****     /* Setting up the alarm on the next deadline.*/
 183:../../os/rt/src/chvt.c ****     port_timer_set_alarm(chTimeAddX(now, currdelta));
 184:../../os/rt/src/chvt.c **** 
 185:../../os/rt/src/chvt.c ****     /* Current time becomes the new "base" time.*/
 186:../../os/rt/src/chvt.c ****     now = newnow;
 132               		.loc 1 186 0
 133 0070 8701      		movw r16,r14
 180:../../os/rt/src/chvt.c **** 
 134               		.loc 1 180 0
 135 0072 6E01      		movw r12,r28
 136               	.LVL12:
 137               	.L4:
 138               	.LBB215:
 139               	.LBB216:
 140               	.LBB217:
 102:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 103:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 104:../../os/hal/osal/rt-nil/chcore_timer.h **** /**
 105:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Returns the system time.
 106:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 107:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @return              The system time.
 108:../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 109:../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
 110:../../os/hal/osal/rt-nil/chcore_timer.h ****  */
 111:../../os/hal/osal/rt-nil/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 112:../../os/hal/osal/rt-nil/chcore_timer.h **** 
 113:../../os/hal/osal/rt-nil/chcore_timer.h ****   return stGetCounter();
 141               		.loc 3 113 0
 142 0074 0E94 0000 		call stGetCounter
 143               	.LVL13:
 144 0078 7C01      		movw r14,r24
 145               	.LBE217:
 146               	.LBE216:
 147               	.LBE215:
 148               	.LBB218:
 149               	.LBB219:
 150               		.file 4 "../../os/rt/include/chtime.h"
   1:../../os/rt/include/chtime.h **** /*
   2:../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chtime.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chtime.h **** 
   5:../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chtime.h **** 
   7:../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chtime.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chtime.h **** 
  11:../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chtime.h **** 
  16:../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chtime.h **** */
  19:../../os/rt/include/chtime.h **** 
  20:../../os/rt/include/chtime.h **** /**
  21:../../os/rt/include/chtime.h ****  * @file    rt/include/chtime.h
  22:../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../os/rt/include/chtime.h ****  *
  24:../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../os/rt/include/chtime.h ****  * @details This module is responsible for handling of system time and time
  26:../../os/rt/include/chtime.h ****  *          intervals.
  27:../../os/rt/include/chtime.h ****  * @{
  28:../../os/rt/include/chtime.h ****  */
  29:../../os/rt/include/chtime.h **** 
  30:../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  31:../../os/rt/include/chtime.h **** #define CHTIME_H
  32:../../os/rt/include/chtime.h **** 
  33:../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  35:../../os/rt/include/chtime.h **** /*===========================================================================*/
  36:../../os/rt/include/chtime.h **** 
  37:../../os/rt/include/chtime.h **** /**
  38:../../os/rt/include/chtime.h ****  * @name    Special time constants
  39:../../os/rt/include/chtime.h ****  * @{
  40:../../os/rt/include/chtime.h ****  */
  41:../../os/rt/include/chtime.h **** /**
  42:../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  43:../../os/rt/include/chtime.h ****  *          specification.
  44:../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  45:../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  46:../../os/rt/include/chtime.h ****  */
  47:../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  48:../../os/rt/include/chtime.h **** 
  49:../../os/rt/include/chtime.h **** /**
  50:../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  51:../../os/rt/include/chtime.h ****  *          specification.
  52:../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  53:../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  54:../../os/rt/include/chtime.h ****  */
  55:../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  56:../../os/rt/include/chtime.h **** 
  57:../../os/rt/include/chtime.h **** /**
  58:../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  59:../../os/rt/include/chtime.h ****  */
  60:../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  61:../../os/rt/include/chtime.h **** 
  62:../../os/rt/include/chtime.h **** /**
  63:../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  64:../../os/rt/include/chtime.h ****  */
  65:../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  66:../../os/rt/include/chtime.h **** /** @} */
  67:../../os/rt/include/chtime.h **** 
  68:../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  70:../../os/rt/include/chtime.h **** /*===========================================================================*/
  71:../../os/rt/include/chtime.h **** 
  72:../../os/rt/include/chtime.h **** /*===========================================================================*/
  73:../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
  74:../../os/rt/include/chtime.h **** /*===========================================================================*/
  75:../../os/rt/include/chtime.h **** 
  76:../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
  77:../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
  78:../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
  79:../../os/rt/include/chtime.h **** #endif
  80:../../os/rt/include/chtime.h **** 
  81:../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
  82:../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
  83:../../os/rt/include/chtime.h **** #endif
  84:../../os/rt/include/chtime.h **** 
  85:../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
  86:../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
  87:../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
  88:../../os/rt/include/chtime.h **** #endif
  89:../../os/rt/include/chtime.h **** 
  90:../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
  91:../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
  92:../../os/rt/include/chtime.h **** #endif
  93:../../os/rt/include/chtime.h **** 
  94:../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
  95:../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
  96:../../os/rt/include/chtime.h **** #endif
  97:../../os/rt/include/chtime.h **** 
  98:../../os/rt/include/chtime.h **** /*===========================================================================*/
  99:../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 100:../../os/rt/include/chtime.h **** /*===========================================================================*/
 101:../../os/rt/include/chtime.h **** 
 102:../../os/rt/include/chtime.h **** /**
 103:../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 104:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 105:../../os/rt/include/chtime.h ****  */
 106:../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 107:../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 108:../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 109:../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 110:../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 111:../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 112:../../os/rt/include/chtime.h **** #endif
 113:../../os/rt/include/chtime.h **** 
 114:../../os/rt/include/chtime.h **** /**
 115:../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 116:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 117:../../os/rt/include/chtime.h ****  */
 118:../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 119:../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 120:../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 121:../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 122:../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 123:../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 124:../../os/rt/include/chtime.h **** #endif
 125:../../os/rt/include/chtime.h **** 
 126:../../os/rt/include/chtime.h **** /**
 127:../../os/rt/include/chtime.h ****  * @brief   Type of a time stamp.
 128:../../os/rt/include/chtime.h ****  */
 129:../../os/rt/include/chtime.h **** typedef uint64_t systimestamp_t;
 130:../../os/rt/include/chtime.h **** 
 131:../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 132:../../os/rt/include/chtime.h **** /**
 133:../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 134:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 135:../../os/rt/include/chtime.h ****  */
 136:../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 137:../../os/rt/include/chtime.h **** 
 138:../../os/rt/include/chtime.h **** /**
 139:../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 140:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 141:../../os/rt/include/chtime.h ****  */
 142:../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 143:../../os/rt/include/chtime.h **** 
 144:../../os/rt/include/chtime.h **** /**
 145:../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 146:../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 147:../../os/rt/include/chtime.h ****  */
 148:../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 149:../../os/rt/include/chtime.h **** 
 150:../../os/rt/include/chtime.h **** /**
 151:../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 152:../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 153:../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 154:../../os/rt/include/chtime.h ****  */
 155:../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 156:../../os/rt/include/chtime.h **** 
 157:../../os/rt/include/chtime.h **** #else
 158:../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 159:../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 160:../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 161:../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 162:../../os/rt/include/chtime.h **** #endif
 163:../../os/rt/include/chtime.h **** 
 164:../../os/rt/include/chtime.h **** /*===========================================================================*/
 165:../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 166:../../os/rt/include/chtime.h **** /*===========================================================================*/
 167:../../os/rt/include/chtime.h **** 
 168:../../os/rt/include/chtime.h **** /**
 169:../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 170:../../os/rt/include/chtime.h ****  * @{
 171:../../os/rt/include/chtime.h ****  */
 172:../../os/rt/include/chtime.h **** /**
 173:../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 174:../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 175:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 176:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 177:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 178:../../os/rt/include/chtime.h ****  *          converted.
 179:../../os/rt/include/chtime.h ****  *
 180:../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 181:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 182:../../os/rt/include/chtime.h ****  *
 183:../../os/rt/include/chtime.h ****  * @api
 184:../../os/rt/include/chtime.h ****  */
 185:../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 186:../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 187:../../os/rt/include/chtime.h **** 
 188:../../os/rt/include/chtime.h **** /**
 189:../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 190:../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 191:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 192:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 193:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 194:../../os/rt/include/chtime.h ****  *          converted.
 195:../../os/rt/include/chtime.h ****  *
 196:../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 197:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 198:../../os/rt/include/chtime.h ****  *
 199:../../os/rt/include/chtime.h ****  * @api
 200:../../os/rt/include/chtime.h ****  */
 201:../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 202:../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 203:../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 204:../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 205:../../os/rt/include/chtime.h **** 
 206:../../os/rt/include/chtime.h **** /**
 207:../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 208:../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 209:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 210:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 211:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 212:../../os/rt/include/chtime.h ****  *          converted.
 213:../../os/rt/include/chtime.h ****  *
 214:../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 215:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 216:../../os/rt/include/chtime.h ****  *
 217:../../os/rt/include/chtime.h ****  * @api
 218:../../os/rt/include/chtime.h ****  */
 219:../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 220:../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 221:../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 222:../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 223:../../os/rt/include/chtime.h **** 
 224:../../os/rt/include/chtime.h **** /**
 225:../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 226:../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 227:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 228:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 229:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 230:../../os/rt/include/chtime.h ****  *          converted.
 231:../../os/rt/include/chtime.h ****  *
 232:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 233:../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 234:../../os/rt/include/chtime.h ****  *
 235:../../os/rt/include/chtime.h ****  * @api
 236:../../os/rt/include/chtime.h ****  */
 237:../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 238:../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 239:../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 240:../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 241:../../os/rt/include/chtime.h **** 
 242:../../os/rt/include/chtime.h **** /**
 243:../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 244:../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 245:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 246:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 247:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 248:../../os/rt/include/chtime.h ****  *          converted.
 249:../../os/rt/include/chtime.h ****  *
 250:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 251:../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 252:../../os/rt/include/chtime.h ****  *
 253:../../os/rt/include/chtime.h ****  * @api
 254:../../os/rt/include/chtime.h ****  */
 255:../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 256:../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 257:../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 258:../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 259:../../os/rt/include/chtime.h **** 
 260:../../os/rt/include/chtime.h **** /**
 261:../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 262:../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 263:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 264:../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 265:../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 266:../../os/rt/include/chtime.h ****  *          converted.
 267:../../os/rt/include/chtime.h ****  *
 268:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 269:../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 270:../../os/rt/include/chtime.h ****  *
 271:../../os/rt/include/chtime.h ****  * @api
 272:../../os/rt/include/chtime.h ****  */
 273:../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 274:../../os/rt/include/chtime.h ****   (time_usecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +        \
 275:../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 276:../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 277:../../os/rt/include/chtime.h **** /** @} */
 278:../../os/rt/include/chtime.h **** 
 279:../../os/rt/include/chtime.h **** /*===========================================================================*/
 280:../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 281:../../os/rt/include/chtime.h **** /*===========================================================================*/
 282:../../os/rt/include/chtime.h **** 
 283:../../os/rt/include/chtime.h **** #ifdef __cplusplus
 284:../../os/rt/include/chtime.h **** extern "C" {
 285:../../os/rt/include/chtime.h **** #endif
 286:../../os/rt/include/chtime.h **** 
 287:../../os/rt/include/chtime.h **** #ifdef __cplusplus
 288:../../os/rt/include/chtime.h **** }
 289:../../os/rt/include/chtime.h **** #endif
 290:../../os/rt/include/chtime.h **** 
 291:../../os/rt/include/chtime.h **** /*===========================================================================*/
 292:../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 293:../../os/rt/include/chtime.h **** /*===========================================================================*/
 294:../../os/rt/include/chtime.h **** 
 295:../../os/rt/include/chtime.h **** /**
 296:../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 297:../../os/rt/include/chtime.h ****  * @{
 298:../../os/rt/include/chtime.h ****  */
 299:../../os/rt/include/chtime.h **** /**
 300:../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 301:../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 302:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 303:../../os/rt/include/chtime.h ****  *
 304:../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 305:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 306:../../os/rt/include/chtime.h ****  *
 307:../../os/rt/include/chtime.h ****  * @special
 308:../../os/rt/include/chtime.h ****  */
 309:../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 310:../../os/rt/include/chtime.h ****   time_conv_t ticks;
 311:../../os/rt/include/chtime.h **** 
 312:../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 313:../../os/rt/include/chtime.h **** 
 314:../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 315:../../os/rt/include/chtime.h ****               "conversion overflow");
 316:../../os/rt/include/chtime.h **** 
 317:../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 318:../../os/rt/include/chtime.h **** }
 319:../../os/rt/include/chtime.h **** 
 320:../../os/rt/include/chtime.h **** /**
 321:../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 322:../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 323:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../os/rt/include/chtime.h ****  *
 325:../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 326:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 327:../../os/rt/include/chtime.h ****  *
 328:../../os/rt/include/chtime.h ****  * @special
 329:../../os/rt/include/chtime.h ****  */
 330:../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 331:../../os/rt/include/chtime.h ****   time_conv_t ticks;
 332:../../os/rt/include/chtime.h **** 
 333:../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 334:../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 335:../../os/rt/include/chtime.h **** 
 336:../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 337:../../os/rt/include/chtime.h ****               "conversion overflow");
 338:../../os/rt/include/chtime.h **** 
 339:../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 340:../../os/rt/include/chtime.h **** }
 341:../../os/rt/include/chtime.h **** 
 342:../../os/rt/include/chtime.h **** /**
 343:../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 344:../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 345:../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 346:../../os/rt/include/chtime.h ****  *
 347:../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 348:../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 349:../../os/rt/include/chtime.h ****  *
 350:../../os/rt/include/chtime.h ****  * @special
 351:../../os/rt/include/chtime.h ****  */
 352:../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 353:../../os/rt/include/chtime.h ****   time_conv_t ticks;
 354:../../os/rt/include/chtime.h **** 
 355:../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 356:../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 357:../../os/rt/include/chtime.h **** 
 358:../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 359:../../os/rt/include/chtime.h ****               "conversion overflow");
 360:../../os/rt/include/chtime.h **** 
 361:../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 362:../../os/rt/include/chtime.h **** }
 363:../../os/rt/include/chtime.h **** 
 364:../../os/rt/include/chtime.h **** /**
 365:../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 366:../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 367:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 368:../../os/rt/include/chtime.h ****  *
 369:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 370:../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 371:../../os/rt/include/chtime.h ****  *
 372:../../os/rt/include/chtime.h ****  * @special
 373:../../os/rt/include/chtime.h ****  */
 374:../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 375:../../os/rt/include/chtime.h ****   time_conv_t secs;
 376:../../os/rt/include/chtime.h **** 
 377:../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 378:../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 379:../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 380:../../os/rt/include/chtime.h **** 
 381:../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 382:../../os/rt/include/chtime.h ****               "conversion overflow");
 383:../../os/rt/include/chtime.h **** 
 384:../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 385:../../os/rt/include/chtime.h **** }
 386:../../os/rt/include/chtime.h **** 
 387:../../os/rt/include/chtime.h **** /**
 388:../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 389:../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 390:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 391:../../os/rt/include/chtime.h ****  *
 392:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 393:../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 394:../../os/rt/include/chtime.h ****  *
 395:../../os/rt/include/chtime.h ****  * @special
 396:../../os/rt/include/chtime.h ****  */
 397:../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 398:../../os/rt/include/chtime.h ****   time_conv_t msecs;
 399:../../os/rt/include/chtime.h **** 
 400:../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 401:../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 402:../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 403:../../os/rt/include/chtime.h **** 
 404:../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 405:../../os/rt/include/chtime.h ****               "conversion overflow");
 406:../../os/rt/include/chtime.h **** 
 407:../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 408:../../os/rt/include/chtime.h **** }
 409:../../os/rt/include/chtime.h **** 
 410:../../os/rt/include/chtime.h **** /**
 411:../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 412:../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 413:../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 414:../../os/rt/include/chtime.h ****  *
 415:../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 416:../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 417:../../os/rt/include/chtime.h ****  *
 418:../../os/rt/include/chtime.h ****  * @special
 419:../../os/rt/include/chtime.h ****  */
 420:../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 421:../../os/rt/include/chtime.h ****   time_conv_t usecs;
 422:../../os/rt/include/chtime.h **** 
 423:../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 424:../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 425:../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 426:../../os/rt/include/chtime.h **** 
 427:../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 428:../../os/rt/include/chtime.h ****               "conversion overflow");
 429:../../os/rt/include/chtime.h **** 
 430:../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 431:../../os/rt/include/chtime.h **** }
 432:../../os/rt/include/chtime.h **** 
 433:../../os/rt/include/chtime.h **** /**
 434:../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 435:../../os/rt/include/chtime.h ****  *
 436:../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 437:../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 438:../../os/rt/include/chtime.h ****  * @return              The new system time.
 439:../../os/rt/include/chtime.h ****  *
 440:../../os/rt/include/chtime.h ****  * @xclass
 441:../../os/rt/include/chtime.h ****  */
 442:../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 443:../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 444:../../os/rt/include/chtime.h **** 
 445:../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 446:../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 447:../../os/rt/include/chtime.h **** #endif
 448:../../os/rt/include/chtime.h **** 
 449:../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 450:../../os/rt/include/chtime.h **** }
 451:../../os/rt/include/chtime.h **** 
 452:../../os/rt/include/chtime.h **** /**
 453:../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 454:../../os/rt/include/chtime.h ****  *
 455:../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 456:../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 457:../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 458:../../os/rt/include/chtime.h ****  *
 459:../../os/rt/include/chtime.h ****  * @xclass
 460:../../os/rt/include/chtime.h ****  */
 461:../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 462:../../os/rt/include/chtime.h **** 
 463:../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 464:../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 465:../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 151               		.loc 4 465 0
 152 007a 801B      		sub r24,r16
 153 007c 910B      		sbc r25,r17
 154               	.LBE219:
 155               	.LBE218:
 175:../../os/rt/src/chvt.c ****       break;
 156               		.loc 1 175 0
 157 007e 8C17      		cp r24,r28
 158 0080 9D07      		cpc r25,r29
 159 0082 00F4      		brsh .L7
 160               	.LBE212:
 187:../../os/rt/src/chvt.c ****     delay = currdelta;
 188:../../os/rt/src/chvt.c ****   }
 189:../../os/rt/src/chvt.c **** 
 190:../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 191:../../os/rt/src/chvt.c ****   /* Checking if a skip occurred.*/
 192:../../os/rt/src/chvt.c ****   if (currdelta > CH_CFG_ST_TIMEDELTA) {
 161               		.loc 1 192 0
 162 0084 83E0      		ldi r24,3
 163 0086 C816      		cp r12,r24
 164 0088 D104      		cpc r13,__zero_reg__
 165 008a 00F4      		brsh .L8
 166               	/* epilogue start */
 193:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 194:../../os/rt/src/chvt.c ****   }
 195:../../os/rt/src/chvt.c **** #else
 196:../../os/rt/src/chvt.c ****   /* Assertions as fallback.*/
 197:../../os/rt/src/chvt.c ****   chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
 198:../../os/rt/src/chvt.c **** #endif
 199:../../os/rt/src/chvt.c **** }
 167               		.loc 1 199 0
 168 008c DF91      		pop r29
 169 008e CF91      		pop r28
 170               	.LVL14:
 171 0090 1F91      		pop r17
 172 0092 0F91      		pop r16
 173               	.LVL15:
 174 0094 FF90      		pop r15
 175 0096 EF90      		pop r14
 176 0098 DF90      		pop r13
 177 009a CF90      		pop r12
 178               	.LVL16:
 179 009c 0895      		ret
 180               	.LVL17:
 181               	.L8:
 182               	.LBB220:
 183               	.LBB221:
 193:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 184               		.loc 1 193 0
 185 009e 61E0      		ldi r22,lo8(1)
 186 00a0 70E0      		ldi r23,0
 187 00a2 80E0      		ldi r24,0
 188 00a4 90E0      		ldi r25,0
 189               	/* epilogue start */
 190               	.LBE221:
 191               	.LBE220:
 192               		.loc 1 199 0
 193 00a6 DF91      		pop r29
 194 00a8 CF91      		pop r28
 195               	.LVL18:
 196 00aa 1F91      		pop r17
 197 00ac 0F91      		pop r16
 198               	.LVL19:
 199 00ae FF90      		pop r15
 200 00b0 EF90      		pop r14
 201 00b2 DF90      		pop r13
 202 00b4 CF90      		pop r12
 203               	.LVL20:
 204               	.LBB223:
 205               	.LBB222:
 193:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 206               		.loc 1 193 0
 207 00b6 0C94 0000 		jmp chRFCUCollectFaultsI
 208               	.LVL21:
 209               	.LBE222:
 210               	.LBE223:
 211               		.cfi_endproc
 212               	.LFE209:
 214               		.section	.text.vt_set_alarm,"ax",@progbits
 216               	vt_set_alarm:
 217               	.LFB195:
  69:../../os/rt/src/chvt.c ****   sysinterval_t currdelta;
 218               		.loc 1 69 0
 219               		.cfi_startproc
 220               	.LVL22:
 221 0000 EF92      		push r14
 222               	.LCFI8:
 223               		.cfi_def_cfa_offset 3
 224               		.cfi_offset 14, -2
 225 0002 FF92      		push r15
 226               	.LCFI9:
 227               		.cfi_def_cfa_offset 4
 228               		.cfi_offset 15, -3
 229 0004 0F93      		push r16
 230               	.LCFI10:
 231               		.cfi_def_cfa_offset 5
 232               		.cfi_offset 16, -4
 233 0006 1F93      		push r17
 234               	.LCFI11:
 235               		.cfi_def_cfa_offset 6
 236               		.cfi_offset 17, -5
 237 0008 CF93      		push r28
 238               	.LCFI12:
 239               		.cfi_def_cfa_offset 7
 240               		.cfi_offset 28, -6
 241 000a DF93      		push r29
 242               	.LCFI13:
 243               		.cfi_def_cfa_offset 8
 244               		.cfi_offset 29, -7
 245               	/* prologue: function */
 246               	/* frame size = 0 */
 247               	/* stack size = 6 */
 248               	.L__stack_usage = 6
 249 000c 8C01      		movw r16,r24
 250 000e EB01      		movw r28,r22
 251               	.LVL23:
 252 0010 6230      		cpi r22,2
 253 0012 7105      		cpc r23,__zero_reg__
 254 0014 00F4      		brsh .L10
 255 0016 C2E0      		ldi r28,lo8(2)
 256 0018 D0E0      		ldi r29,0
 257               	.L10:
 258 001a 82E0      		ldi r24,lo8(2)
 259 001c E82E      		mov r14,r24
 260 001e F12C      		mov r15,__zero_reg__
 261               	.LVL24:
 262 0020 00C0      		rjmp .L12
 263               	.LVL25:
 264               	.L14:
 265               	.LBB252:
 109:../../os/rt/src/chvt.c **** 
 266               		.loc 1 109 0
 267 0022 E701      		movw r28,r14
 268               	.LVL26:
 269 0024 2196      		adiw r28,1
 270               	.LVL27:
 112:../../os/rt/src/chvt.c ****     delay = currdelta;
 271               		.loc 1 112 0
 272 0026 8C01      		movw r16,r24
 109:../../os/rt/src/chvt.c **** 
 273               		.loc 1 109 0
 274 0028 7E01      		movw r14,r28
 275               	.LVL28:
 276               	.L12:
 277               	.LBB253:
 278               	.LBB254:
 101:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 279               		.loc 3 101 0
 280 002a C801      		movw r24,r16
 281 002c 8C0F      		add r24,r28
 282 002e 9D1F      		adc r25,r29
 283 0030 0E94 0000 		call stSetAlarm
 284               	.LVL29:
 285               	.LBE254:
 286               	.LBE253:
 287               	.LBB255:
 288               	.LBB256:
 289               	.LBB257:
 290               		.loc 3 113 0
 291 0034 0E94 0000 		call stGetCounter
 292               	.LVL30:
 293               	.LBE257:
 294               	.LBE256:
 295               	.LBE255:
 296               	.LBB258:
 297               	.LBB259:
 298               		.loc 4 465 0
 299 0038 9C01      		movw r18,r24
 300 003a 201B      		sub r18,r16
 301 003c 310B      		sbc r19,r17
 302               	.LBE259:
 303               	.LBE258:
 104:../../os/rt/src/chvt.c ****       break;
 304               		.loc 1 104 0
 305 003e 2C17      		cp r18,r28
 306 0040 3D07      		cpc r19,r29
 307 0042 00F4      		brsh .L14
 308               	.LBE252:
 118:../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 309               		.loc 1 118 0
 310 0044 83E0      		ldi r24,3
 311 0046 E816      		cp r14,r24
 312 0048 F104      		cpc r15,__zero_reg__
 313 004a 00F4      		brsh .L15
 314               	/* epilogue start */
 125:../../os/rt/src/chvt.c **** 
 315               		.loc 1 125 0
 316 004c DF91      		pop r29
 317 004e CF91      		pop r28
 318               	.LVL31:
 319 0050 1F91      		pop r17
 320 0052 0F91      		pop r16
 321               	.LVL32:
 322 0054 FF90      		pop r15
 323 0056 EF90      		pop r14
 324               	.LVL33:
 325 0058 0895      		ret
 326               	.LVL34:
 327               	.L15:
 328               	.LBB260:
 329               	.LBB261:
 193:../../os/rt/src/chvt.c ****   }
 330               		.loc 1 193 0
 331 005a 61E0      		ldi r22,lo8(1)
 332 005c 70E0      		ldi r23,0
 333 005e 80E0      		ldi r24,0
 334 0060 90E0      		ldi r25,0
 335               	/* epilogue start */
 336               	.LBE261:
 337               	.LBE260:
 125:../../os/rt/src/chvt.c **** 
 338               		.loc 1 125 0
 339 0062 DF91      		pop r29
 340 0064 CF91      		pop r28
 341               	.LVL35:
 342 0066 1F91      		pop r17
 343 0068 0F91      		pop r16
 344               	.LVL36:
 345 006a FF90      		pop r15
 346 006c EF90      		pop r14
 347               	.LVL37:
 348               	.LBB263:
 349               	.LBB262:
 193:../../os/rt/src/chvt.c ****   }
 350               		.loc 1 193 0
 351 006e 0C94 0000 		jmp chRFCUCollectFaultsI
 352               	.LVL38:
 353               	.LBE262:
 354               	.LBE263:
 355               		.cfi_endproc
 356               	.LFE195:
 358               		.section	.text.vt_enqueue.constprop.4,"ax",@progbits
 360               	vt_enqueue.constprop.4:
 361               	.LFB210:
 200:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 201:../../os/rt/src/chvt.c **** 
 202:../../os/rt/src/chvt.c **** /**
 203:../../os/rt/src/chvt.c ****  * @brief   Enqueues a virtual timer in a virtual timers list.
 204:../../os/rt/src/chvt.c ****  */
 205:../../os/rt/src/chvt.c **** static void vt_enqueue(virtual_timers_list_t *vtlp,
 362               		.loc 1 205 0
 363               		.cfi_startproc
 364               	.LVL39:
 365 0000 EF92      		push r14
 366               	.LCFI14:
 367               		.cfi_def_cfa_offset 3
 368               		.cfi_offset 14, -2
 369 0002 FF92      		push r15
 370               	.LCFI15:
 371               		.cfi_def_cfa_offset 4
 372               		.cfi_offset 15, -3
 373 0004 0F93      		push r16
 374               	.LCFI16:
 375               		.cfi_def_cfa_offset 5
 376               		.cfi_offset 16, -4
 377 0006 1F93      		push r17
 378               	.LCFI17:
 379               		.cfi_def_cfa_offset 6
 380               		.cfi_offset 17, -5
 381 0008 CF93      		push r28
 382               	.LCFI18:
 383               		.cfi_def_cfa_offset 7
 384               		.cfi_offset 28, -6
 385 000a DF93      		push r29
 386               	.LCFI19:
 387               		.cfi_def_cfa_offset 8
 388               		.cfi_offset 29, -7
 389               	/* prologue: function */
 390               	/* frame size = 0 */
 391               	/* stack size = 6 */
 392               	.L__stack_usage = 6
 393 000c 8C01      		movw r16,r24
 394 000e 7B01      		movw r14,r22
 395               	.LVL40:
 396               	.LBB264:
 397               	.LBB265:
 398               	.LBB266:
 399               	.LBB267:
 400               		.loc 3 113 0
 401 0010 0E94 0000 		call stGetCounter
 402               	.LVL41:
 403               	.LBE267:
 404               	.LBE266:
 405               	.LBE265:
 406               	.LBB268:
 407               	.LBB269:
 443:../../os/rt/include/chlists.h **** }
 408               		.loc 2 443 0
 409 0014 E091 0000 		lds r30,ch0+7
 410 0018 F091 0000 		lds r31,ch0+7+1
 411               	.LVL42:
 412               	.LBE269:
 413               	.LBE268:
 206:../../os/rt/src/chvt.c ****                        virtual_timer_t *vtp,
 207:../../os/rt/src/chvt.c ****                        sysinterval_t delay) {
 208:../../os/rt/src/chvt.c ****   sysinterval_t delta;
 209:../../os/rt/src/chvt.c **** 
 210:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 211:../../os/rt/src/chvt.c ****   {
 212:../../os/rt/src/chvt.c ****     sysinterval_t nowdelta;
 213:../../os/rt/src/chvt.c ****     systime_t now = chVTGetSystemTimeX();
 214:../../os/rt/src/chvt.c **** 
 215:../../os/rt/src/chvt.c ****     /* Special case where the timers list is empty.*/
 216:../../os/rt/src/chvt.c ****     if (ch_dlist_isempty(&vtlp->dlist)) {
 414               		.loc 1 216 0
 415 001c 20E0      		ldi r18,hi8(ch0+7)
 416 001e E030      		cpi r30,lo8(ch0+7)
 417 0020 F207      		cpc r31,r18
 418 0022 01F4      		brne .+2
 419 0024 00C0      		rjmp .L24
 420               	.LVL43:
 421               	.LBB270:
 422               	.LBB271:
 423               		.loc 4 465 0
 424 0026 2091 0000 		lds r18,ch0+13
 425 002a 3091 0000 		lds r19,ch0+13+1
 426 002e AC01      		movw r20,r24
 427 0030 421B      		sub r20,r18
 428 0032 530B      		sbc r21,r19
 429               	.LVL44:
 430               	.LBE271:
 431               	.LBE270:
 217:../../os/rt/src/chvt.c **** 
 218:../../os/rt/src/chvt.c ****       vt_insert_first(vtlp, vtp, now, delay);
 219:../../os/rt/src/chvt.c **** 
 220:../../os/rt/src/chvt.c ****       return;
 221:../../os/rt/src/chvt.c ****     }
 222:../../os/rt/src/chvt.c **** 
 223:../../os/rt/src/chvt.c ****     /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 224:../../os/rt/src/chvt.c ****        becomes lower than 'deltanow'.*/
 225:../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(vtlp->lasttime, now);
 226:../../os/rt/src/chvt.c ****     delta    = nowdelta + delay;
 432               		.loc 1 226 0
 433 0034 E701      		movw r28,r14
 434 0036 C40F      		add r28,r20
 435 0038 D51F      		adc r29,r21
 436               	.LVL45:
 227:../../os/rt/src/chvt.c **** 
 228:../../os/rt/src/chvt.c ****     /* Scenario where a very large delay exceeded the numeric range, the
 229:../../os/rt/src/chvt.c ****        delta is shortened to make it fit the numeric range, the timer
 230:../../os/rt/src/chvt.c ****        will be triggered "deltanow" cycles earlier.*/
 231:../../os/rt/src/chvt.c ****     if (delta < nowdelta) {
 437               		.loc 1 231 0
 438 003a C417      		cp r28,r20
 439 003c D507      		cpc r29,r21
 440 003e 00F0      		brlo .L25
 232:../../os/rt/src/chvt.c ****       delta = delay;
 233:../../os/rt/src/chvt.c ****     }
 234:../../os/rt/src/chvt.c **** 
 235:../../os/rt/src/chvt.c ****     /* Checking if this timer would become the first in the delta list, this
 236:../../os/rt/src/chvt.c ****        requires changing the current alarm setting.*/
 237:../../os/rt/src/chvt.c ****     if (delta < vtlp->dlist.next->delta) {
 441               		.loc 1 237 0
 442 0040 2481      		ldd r18,Z+4
 443 0042 3581      		ldd r19,Z+5
 444 0044 C217      		cp r28,r18
 445 0046 D307      		cpc r29,r19
 446 0048 00F0      		brlo .L26
 447               	.L19:
 448               	.LVL46:
 449               	.LBE264:
 450               	.LBB272:
 451               	.LBB273:
 505:../../os/rt/include/chlists.h **** }
 506:../../os/rt/include/chlists.h **** 
 507:../../os/rt/include/chlists.h **** /**
 508:../../os/rt/include/chlists.h ****  * @brief   Inserts an element before another header element.
 509:../../os/rt/include/chlists.h ****  *
 510:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 511:../../os/rt/include/chlists.h ****  * @param[in] dlp       element to be inserted before the header element
 512:../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 513:../../os/rt/include/chlists.h ****  *
 514:../../os/rt/include/chlists.h ****  * @notapi
 515:../../os/rt/include/chlists.h ****  */
 516:../../os/rt/include/chlists.h **** static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
 517:../../os/rt/include/chlists.h ****                                           ch_delta_list_t *dlp,
 518:../../os/rt/include/chlists.h ****                                           sysinterval_t delta) {
 519:../../os/rt/include/chlists.h **** 
 520:../../os/rt/include/chlists.h ****   dlp->delta      = delta;
 521:../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 522:../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 523:../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 524:../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 525:../../os/rt/include/chlists.h **** }
 526:../../os/rt/include/chlists.h **** 
 527:../../os/rt/include/chlists.h **** /**
 528:../../os/rt/include/chlists.h ****  * @brief   Inserts an element in a delta list.
 529:../../os/rt/include/chlists.h ****  *
 530:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 531:../../os/rt/include/chlists.h ****  * @param[in] dlep      element to be inserted before the header element
 532:../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 533:../../os/rt/include/chlists.h ****  *
 534:../../os/rt/include/chlists.h ****  * @notapi
 535:../../os/rt/include/chlists.h ****  */
 536:../../os/rt/include/chlists.h **** static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
 537:../../os/rt/include/chlists.h ****                                    ch_delta_list_t *dlep,
 538:../../os/rt/include/chlists.h ****                                    sysinterval_t delta) {
 539:../../os/rt/include/chlists.h ****   ch_delta_list_t *dlp;
 540:../../os/rt/include/chlists.h **** 
 541:../../os/rt/include/chlists.h ****   /* The delta list is scanned in order to find the correct position for
 542:../../os/rt/include/chlists.h ****      this element. */
 543:../../os/rt/include/chlists.h ****   dlp = dlhp->next;
 544:../../os/rt/include/chlists.h ****   while (likely(dlp->delta < delta)) {
 452               		.loc 2 544 0
 453 004a 2C17      		cp r18,r28
 454 004c 3D07      		cpc r19,r29
 455 004e 00F4      		brsh .L20
 456               	.LVL47:
 457               	.L21:
 545:../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 546:../../os/rt/include/chlists.h ****     chDbgAssert(dlp != dlep, "element already in list");
 547:../../os/rt/include/chlists.h **** 
 548:../../os/rt/include/chlists.h ****     delta -= dlp->delta;
 458               		.loc 2 548 0
 459 0050 C21B      		sub r28,r18
 460 0052 D30B      		sbc r29,r19
 461               	.LVL48:
 549:../../os/rt/include/chlists.h ****     dlp = dlp->next;
 462               		.loc 2 549 0
 463 0054 0190      		ld __tmp_reg__,Z+
 464 0056 F081      		ld r31,Z
 465 0058 E02D      		mov r30,__tmp_reg__
 466               	.LVL49:
 544:../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 467               		.loc 2 544 0
 468 005a 2481      		ldd r18,Z+4
 469 005c 3581      		ldd r19,Z+5
 470 005e 2C17      		cp r18,r28
 471 0060 3D07      		cpc r19,r29
 472 0062 00F0      		brlo .L21
 473               	.LVL50:
 474               	.L20:
 475               	.LBB274:
 476               	.LBB275:
 520:../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 477               		.loc 2 520 0
 478 0064 D801      		movw r26,r16
 479 0066 1596      		adiw r26,4+1
 480 0068 DC93      		st X,r29
 481 006a CE93      		st -X,r28
 482 006c 1497      		sbiw r26,4
 521:../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 483               		.loc 2 521 0
 484 006e 1196      		adiw r26,1
 485 0070 FC93      		st X,r31
 486 0072 EE93      		st -X,r30
 522:../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 487               		.loc 2 522 0
 488 0074 8281      		ldd r24,Z+2
 489 0076 9381      		ldd r25,Z+3
 490 0078 1396      		adiw r26,2+1
 491 007a 9C93      		st X,r25
 492 007c 8E93      		st -X,r24
 493 007e 1297      		sbiw r26,2
 523:../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 494               		.loc 2 523 0
 495 0080 DC01      		movw r26,r24
 496 0082 0D93      		st X+,r16
 497 0084 1C93      		st X,r17
 524:../../os/rt/include/chlists.h **** }
 498               		.loc 2 524 0
 499 0086 1383      		std Z+3,r17
 500 0088 0283      		std Z+2,r16
 501               	.LVL51:
 502               	.LBE275:
 503               	.LBE274:
 550:../../os/rt/include/chlists.h ****   }
 551:../../os/rt/include/chlists.h **** 
 552:../../os/rt/include/chlists.h ****   /* The timer is inserted in the delta list.*/
 553:../../os/rt/include/chlists.h ****   ch_dlist_insert_before(dlp, dlep, delta);
 554:../../os/rt/include/chlists.h **** 
 555:../../os/rt/include/chlists.h ****   /* Adjusting delta for the following element.*/
 556:../../os/rt/include/chlists.h ****   dlp->delta -= delta;
 504               		.loc 2 556 0
 505 008a 8481      		ldd r24,Z+4
 506 008c 9581      		ldd r25,Z+5
 507 008e 8C1B      		sub r24,r28
 508 0090 9D0B      		sbc r25,r29
 509 0092 9583      		std Z+5,r25
 510 0094 8483      		std Z+4,r24
 557:../../os/rt/include/chlists.h **** 
 558:../../os/rt/include/chlists.h ****   /* Special case when the inserted element is in last position in the list,
 559:../../os/rt/include/chlists.h ****      the value in the header must be restored, just doing it is faster than
 560:../../os/rt/include/chlists.h ****      checking then doing.*/
 561:../../os/rt/include/chlists.h ****   dlhp->delta = (sysinterval_t)-1;
 511               		.loc 2 561 0
 512 0096 8FEF      		ldi r24,lo8(-1)
 513 0098 9FEF      		ldi r25,lo8(-1)
 514 009a 9093 0000 		sts ch0+11+1,r25
 515 009e 8093 0000 		sts ch0+11,r24
 516               	/* epilogue start */
 517               	.LBE273:
 518               	.LBE272:
 238:../../os/rt/src/chvt.c **** 
 239:../../os/rt/src/chvt.c ****       vt_set_alarm(now, delay);
 240:../../os/rt/src/chvt.c ****     }
 241:../../os/rt/src/chvt.c ****   }
 242:../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA == 0 */
 243:../../os/rt/src/chvt.c **** 
 244:../../os/rt/src/chvt.c ****   /* Delta is initially equal to the specified delay.*/
 245:../../os/rt/src/chvt.c ****   delta = delay;
 246:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA == 0 */
 247:../../os/rt/src/chvt.c **** 
 248:../../os/rt/src/chvt.c ****   ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 249:../../os/rt/src/chvt.c **** }
 519               		.loc 1 249 0
 520 00a2 DF91      		pop r29
 521 00a4 CF91      		pop r28
 522               	.LVL52:
 523 00a6 1F91      		pop r17
 524 00a8 0F91      		pop r16
 525               	.LVL53:
 526 00aa FF90      		pop r15
 527 00ac EF90      		pop r14
 528               	.LVL54:
 529 00ae 0895      		ret
 530               	.LVL55:
 531               	.L25:
 532               	.LBB276:
 232:../../os/rt/src/chvt.c ****     }
 533               		.loc 1 232 0
 534 00b0 E701      		movw r28,r14
 535               	.LVL56:
 237:../../os/rt/src/chvt.c **** 
 536               		.loc 1 237 0
 537 00b2 2481      		ldd r18,Z+4
 538 00b4 3581      		ldd r19,Z+5
 539 00b6 C217      		cp r28,r18
 540 00b8 D307      		cpc r29,r19
 541 00ba 00F4      		brsh .L19
 542               	.L26:
 239:../../os/rt/src/chvt.c ****     }
 543               		.loc 1 239 0
 544 00bc B701      		movw r22,r14
 545 00be 0E94 0000 		call vt_set_alarm
 546               	.LVL57:
 547 00c2 E091 0000 		lds r30,ch0+7
 548 00c6 F091 0000 		lds r31,ch0+7+1
 549 00ca 2481      		ldd r18,Z+4
 550 00cc 3581      		ldd r19,Z+5
 551 00ce 00C0      		rjmp .L19
 552               	.LVL58:
 553               	.L24:
 218:../../os/rt/src/chvt.c **** 
 554               		.loc 1 218 0
 555 00d0 A701      		movw r20,r14
 556 00d2 BC01      		movw r22,r24
 557 00d4 C801      		movw r24,r16
 558               	/* epilogue start */
 559               	.LBE276:
 560               		.loc 1 249 0
 561 00d6 DF91      		pop r29
 562 00d8 CF91      		pop r28
 563 00da 1F91      		pop r17
 564 00dc 0F91      		pop r16
 565               	.LVL59:
 566 00de FF90      		pop r15
 567 00e0 EF90      		pop r14
 568               	.LVL60:
 569               	.LBB277:
 218:../../os/rt/src/chvt.c **** 
 570               		.loc 1 218 0
 571 00e2 0C94 0000 		jmp vt_insert_first.constprop.5
 572               	.LVL61:
 573               	.LBE277:
 574               		.cfi_endproc
 575               	.LFE210:
 577               		.section	.text.chVTDoSetI,"ax",@progbits
 578               	.global	chVTDoSetI
 580               	chVTDoSetI:
 581               	.LFB198:
 250:../../os/rt/src/chvt.c **** 
 251:../../os/rt/src/chvt.c **** /*===========================================================================*/
 252:../../os/rt/src/chvt.c **** /* Module exported functions.                                                */
 253:../../os/rt/src/chvt.c **** /*===========================================================================*/
 254:../../os/rt/src/chvt.c **** 
 255:../../os/rt/src/chvt.c **** /**
 256:../../os/rt/src/chvt.c ****  * @brief   Enables a one-shot virtual timer.
 257:../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
 258:../../os/rt/src/chvt.c ****  *          specified as parameter.
 259:../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
 260:../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
 261:../../os/rt/src/chvt.c ****  *
 262:../../os/rt/src/chvt.c ****  * @param[out] vtp      pointer to a @p virtual_timer_t structure
 263:../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 264:../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
 265:../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 266:../../os/rt/src/chvt.c ****  *                        normal time specification.
 267:../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 268:../../os/rt/src/chvt.c ****  *                      .
 269:../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
 270:../../os/rt/src/chvt.c ****  *                      callback the timer is disabled and the structure can
 271:../../os/rt/src/chvt.c ****  *                      be disposed or reused.
 272:../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
 273:../../os/rt/src/chvt.c ****  *                      function
 274:../../os/rt/src/chvt.c ****  *
 275:../../os/rt/src/chvt.c ****  * @iclass
 276:../../os/rt/src/chvt.c ****  */
 277:../../os/rt/src/chvt.c **** void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
 278:../../os/rt/src/chvt.c ****                 vtfunc_t vtfunc, void *par) {
 582               		.loc 1 278 0
 583               		.cfi_startproc
 584               	.LVL62:
 585               	/* prologue: function */
 586               	/* frame size = 0 */
 587               	/* stack size = 0 */
 588               	.L__stack_usage = 0
 279:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 280:../../os/rt/src/chvt.c **** 
 281:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 282:../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 283:../../os/rt/src/chvt.c **** 
 284:../../os/rt/src/chvt.c ****   /* Timer initialization.*/
 285:../../os/rt/src/chvt.c ****   vtp->par     = par;
 589               		.loc 1 285 0
 590 0000 FC01      		movw r30,r24
 591 0002 3187      		std Z+9,r19
 592 0004 2087      		std Z+8,r18
 286:../../os/rt/src/chvt.c ****   vtp->func    = vtfunc;
 593               		.loc 1 286 0
 594 0006 5783      		std Z+7,r21
 595 0008 4683      		std Z+6,r20
 287:../../os/rt/src/chvt.c ****   vtp->reload  = (sysinterval_t)0;
 596               		.loc 1 287 0
 597 000a 1386      		std Z+11,__zero_reg__
 598 000c 1286      		std Z+10,__zero_reg__
 288:../../os/rt/src/chvt.c **** 
 289:../../os/rt/src/chvt.c ****   /* Inserting the timer in the delta list.*/
 290:../../os/rt/src/chvt.c ****   vt_enqueue(vtlp, vtp, delay);
 599               		.loc 1 290 0
 600 000e 0C94 0000 		jmp vt_enqueue.constprop.4
 601               	.LVL63:
 602               		.cfi_endproc
 603               	.LFE198:
 605               		.section	.text.chVTDoSetContinuousI,"ax",@progbits
 606               	.global	chVTDoSetContinuousI
 608               	chVTDoSetContinuousI:
 609               	.LFB199:
 291:../../os/rt/src/chvt.c **** }
 292:../../os/rt/src/chvt.c **** 
 293:../../os/rt/src/chvt.c **** /**
 294:../../os/rt/src/chvt.c ****  * @brief   Enables a continuous virtual timer.
 295:../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
 296:../../os/rt/src/chvt.c ****  *          specified as parameter.
 297:../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
 298:../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
 299:../../os/rt/src/chvt.c ****  *
 300:../../os/rt/src/chvt.c ****  * @param[out] vtp      pointer to a @p virtual_timer_t structure
 301:../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 302:../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
 303:../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 304:../../os/rt/src/chvt.c ****  *                        normal time specification.
 305:../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 306:../../os/rt/src/chvt.c ****  *                      .
 307:../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
 308:../../os/rt/src/chvt.c ****  *                      callback the timer is restarted.
 309:../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
 310:../../os/rt/src/chvt.c ****  *                      function
 311:../../os/rt/src/chvt.c ****  *
 312:../../os/rt/src/chvt.c ****  * @iclass
 313:../../os/rt/src/chvt.c ****  */
 314:../../os/rt/src/chvt.c **** void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
 315:../../os/rt/src/chvt.c ****                           vtfunc_t vtfunc, void *par) {
 610               		.loc 1 315 0
 611               		.cfi_startproc
 612               	.LVL64:
 613               	/* prologue: function */
 614               	/* frame size = 0 */
 615               	/* stack size = 0 */
 616               	.L__stack_usage = 0
 316:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 317:../../os/rt/src/chvt.c **** 
 318:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 319:../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 320:../../os/rt/src/chvt.c **** 
 321:../../os/rt/src/chvt.c ****   /* Timer initialization.*/
 322:../../os/rt/src/chvt.c ****   vtp->par     = par;
 617               		.loc 1 322 0
 618 0000 FC01      		movw r30,r24
 619 0002 3187      		std Z+9,r19
 620 0004 2087      		std Z+8,r18
 323:../../os/rt/src/chvt.c ****   vtp->func    = vtfunc;
 621               		.loc 1 323 0
 622 0006 5783      		std Z+7,r21
 623 0008 4683      		std Z+6,r20
 324:../../os/rt/src/chvt.c ****   vtp->reload  = delay;
 624               		.loc 1 324 0
 625 000a 7387      		std Z+11,r23
 626 000c 6287      		std Z+10,r22
 325:../../os/rt/src/chvt.c **** 
 326:../../os/rt/src/chvt.c ****   /* Inserting the timer in the delta list.*/
 327:../../os/rt/src/chvt.c ****   vt_enqueue(vtlp, vtp, delay);
 627               		.loc 1 327 0
 628 000e 0C94 0000 		jmp vt_enqueue.constprop.4
 629               	.LVL65:
 630               		.cfi_endproc
 631               	.LFE199:
 633               		.section	.text.chVTDoResetI,"ax",@progbits
 634               	.global	chVTDoResetI
 636               	chVTDoResetI:
 637               	.LFB200:
 328:../../os/rt/src/chvt.c **** }
 329:../../os/rt/src/chvt.c **** 
 330:../../os/rt/src/chvt.c **** /**
 331:../../os/rt/src/chvt.c ****  * @brief   Disables a Virtual Timer.
 332:../../os/rt/src/chvt.c ****  * @pre     The timer must be in armed state before calling this function.
 333:../../os/rt/src/chvt.c ****  *
 334:../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t structure
 335:../../os/rt/src/chvt.c ****  *
 336:../../os/rt/src/chvt.c ****  * @iclass
 337:../../os/rt/src/chvt.c ****  */
 338:../../os/rt/src/chvt.c **** void chVTDoResetI(virtual_timer_t *vtp) {
 638               		.loc 1 338 0
 639               		.cfi_startproc
 640               	.LVL66:
 641 0000 CF93      		push r28
 642               	.LCFI20:
 643               		.cfi_def_cfa_offset 3
 644               		.cfi_offset 28, -2
 645 0002 DF93      		push r29
 646               	.LCFI21:
 647               		.cfi_def_cfa_offset 4
 648               		.cfi_offset 29, -3
 649               	/* prologue: function */
 650               	/* frame size = 0 */
 651               	/* stack size = 2 */
 652               	.L__stack_usage = 2
 653 0004 FC01      		movw r30,r24
 654               	.LVL67:
 655 0006 A081      		ld r26,Z
 656 0008 B181      		ldd r27,Z+1
 339:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 340:../../os/rt/src/chvt.c **** 
 341:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 342:../../os/rt/src/chvt.c ****   chDbgCheck(vtp != NULL);
 343:../../os/rt/src/chvt.c ****   chDbgAssert(chVTIsArmedI(vtp), "timer not armed");
 344:../../os/rt/src/chvt.c **** 
 345:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 346:../../os/rt/src/chvt.c **** 
 347:../../os/rt/src/chvt.c ****   /* The delta of the timer is added to the next timer.*/
 348:../../os/rt/src/chvt.c ****   vtp->dlist.next->delta += vtp->dlist.delta;
 349:../../os/rt/src/chvt.c **** 
 350:../../os/rt/src/chvt.c ****  /* Removing the element from the delta list, marking it as not armed.*/
 351:../../os/rt/src/chvt.c ****   (void) ch_dlist_dequeue(&vtp->dlist);
 352:../../os/rt/src/chvt.c ****   vtp->dlist.next = NULL;
 353:../../os/rt/src/chvt.c **** 
 354:../../os/rt/src/chvt.c ****   /* The above code changes the value in the header when the removed element
 355:../../os/rt/src/chvt.c ****      is the last of the list, restoring it.*/
 356:../../os/rt/src/chvt.c ****   vtlp->dlist.delta = (sysinterval_t)-1;
 357:../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 358:../../os/rt/src/chvt.c ****   systime_t now;
 359:../../os/rt/src/chvt.c ****   sysinterval_t nowdelta, delta;
 360:../../os/rt/src/chvt.c **** 
 361:../../os/rt/src/chvt.c ****   /* If the timer is not the first of the list then it is simply unlinked
 362:../../os/rt/src/chvt.c ****      else the operation is more complex.*/
 363:../../os/rt/src/chvt.c ****   if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 657               		.loc 1 363 0
 658 000a 8091 0000 		lds r24,ch0+7
 659 000e 9091 0000 		lds r25,ch0+7+1
 660               	.LVL68:
 661 0012 E817      		cp r30,r24
 662 0014 F907      		cpc r31,r25
 663 0016 01F0      		breq .L30
 664               	.LVL69:
 665               	.LBB278:
 666               	.LBB279:
 562:../../os/rt/include/chlists.h **** }
 563:../../os/rt/include/chlists.h **** 
 564:../../os/rt/include/chlists.h **** /**
 565:../../os/rt/include/chlists.h ****  * @brief   Dequeues an element from the delta list.
 566:../../os/rt/include/chlists.h ****  *
 567:../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 568:../../os/rt/include/chlists.h ****  *
 569:../../os/rt/include/chlists.h ****  * @notapi
 570:../../os/rt/include/chlists.h ****  */
 571:../../os/rt/include/chlists.h **** static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
 572:../../os/rt/include/chlists.h ****   ch_delta_list_t *dlp = dlhp->next;
 573:../../os/rt/include/chlists.h **** 
 574:../../os/rt/include/chlists.h ****   dlhp->next       = dlp->next;
 575:../../os/rt/include/chlists.h ****   dlhp->next->prev = dlhp;
 576:../../os/rt/include/chlists.h **** 
 577:../../os/rt/include/chlists.h ****   return dlp;
 578:../../os/rt/include/chlists.h **** }
 579:../../os/rt/include/chlists.h **** 
 580:../../os/rt/include/chlists.h **** /**
 581:../../os/rt/include/chlists.h ****  * @brief   Dequeues an element from the delta list.
 582:../../os/rt/include/chlists.h ****  *
 583:../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 584:../../os/rt/include/chlists.h ****  *
 585:../../os/rt/include/chlists.h ****  * @notapi
 586:../../os/rt/include/chlists.h ****  */
 587:../../os/rt/include/chlists.h **** static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 588:../../os/rt/include/chlists.h **** 
 589:../../os/rt/include/chlists.h ****   dlp->prev->next = dlp->next;
 667               		.loc 2 589 0
 668 0018 C281      		ldd r28,Z+2
 669 001a D381      		ldd r29,Z+3
 670 001c B983      		std Y+1,r27
 671 001e A883      		st Y,r26
 590:../../os/rt/include/chlists.h ****   dlp->next->prev = dlp->prev;
 672               		.loc 2 590 0
 673 0020 A081      		ld r26,Z
 674 0022 B181      		ldd r27,Z+1
 675 0024 1396      		adiw r26,2+1
 676 0026 DC93      		st X,r29
 677 0028 CE93      		st -X,r28
 678 002a 1297      		sbiw r26,2
 679               	.LVL70:
 680               	.LBE279:
 681               	.LBE278:
 364:../../os/rt/src/chvt.c **** 
 365:../../os/rt/src/chvt.c ****     /* Removing the element from the delta list.*/
 366:../../os/rt/src/chvt.c ****     (void) ch_dlist_dequeue(&vtp->dlist);
 367:../../os/rt/src/chvt.c **** 
 368:../../os/rt/src/chvt.c ****     /* Adding delta to the next element, if it is not the last one.*/
 369:../../os/rt/src/chvt.c ****     vtp->dlist.next->delta += vtp->dlist.delta;
 682               		.loc 1 369 0
 683 002c 1496      		adiw r26,4
 684 002e 8D91      		ld r24,X+
 685 0030 9C91      		ld r25,X
 686 0032 1597      		sbiw r26,4+1
 687 0034 2481      		ldd r18,Z+4
 688 0036 3581      		ldd r19,Z+5
 689 0038 820F      		add r24,r18
 690 003a 931F      		adc r25,r19
 691 003c 1596      		adiw r26,4+1
 692 003e 9C93      		st X,r25
 693 0040 8E93      		st -X,r24
 694 0042 1497      		sbiw r26,4
 370:../../os/rt/src/chvt.c **** 
 371:../../os/rt/src/chvt.c ****     /* Marking timer as not armed.*/
 372:../../os/rt/src/chvt.c ****     vtp->dlist.next = NULL;
 695               		.loc 1 372 0
 696 0044 1182      		std Z+1,__zero_reg__
 697 0046 1082      		st Z,__zero_reg__
 373:../../os/rt/src/chvt.c **** 
 374:../../os/rt/src/chvt.c ****     /* Special case when the removed element from the last position in the list,
 375:../../os/rt/src/chvt.c ****        the value in the header must be restored, just doing it is faster than
 376:../../os/rt/src/chvt.c ****        checking then doing.*/
 377:../../os/rt/src/chvt.c ****     vtlp->dlist.delta = (sysinterval_t)-1;
 698               		.loc 1 377 0
 699 0048 8FEF      		ldi r24,lo8(-1)
 700 004a 9FEF      		ldi r25,lo8(-1)
 701 004c 9093 0000 		sts ch0+11+1,r25
 702 0050 8093 0000 		sts ch0+11,r24
 703               	.LVL71:
 704               	.L29:
 705               	/* epilogue start */
 378:../../os/rt/src/chvt.c **** 
 379:../../os/rt/src/chvt.c ****     return;
 380:../../os/rt/src/chvt.c ****   }
 381:../../os/rt/src/chvt.c **** 
 382:../../os/rt/src/chvt.c ****   /* Removing the first timer from the list, marking it as not armed.*/
 383:../../os/rt/src/chvt.c ****   ch_dlist_remove_first(&vtlp->dlist);
 384:../../os/rt/src/chvt.c ****   vtp->dlist.next = NULL;
 385:../../os/rt/src/chvt.c **** 
 386:../../os/rt/src/chvt.c ****   /* If the list become empty then the alarm timer is stopped and done.*/
 387:../../os/rt/src/chvt.c ****   if (ch_dlist_isempty(&vtlp->dlist)) {
 388:../../os/rt/src/chvt.c **** 
 389:../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 390:../../os/rt/src/chvt.c **** 
 391:../../os/rt/src/chvt.c ****     return;
 392:../../os/rt/src/chvt.c ****   }
 393:../../os/rt/src/chvt.c **** 
 394:../../os/rt/src/chvt.c ****   /* The delta of the removed timer is added to the new first timer.*/
 395:../../os/rt/src/chvt.c ****   vtlp->dlist.next->delta += vtp->dlist.delta;
 396:../../os/rt/src/chvt.c **** 
 397:../../os/rt/src/chvt.c ****   /* Distance in ticks between the last alarm event and current time.*/
 398:../../os/rt/src/chvt.c ****   now = chVTGetSystemTimeX();
 399:../../os/rt/src/chvt.c ****   nowdelta = chTimeDiffX(vtlp->lasttime, now);
 400:../../os/rt/src/chvt.c **** 
 401:../../os/rt/src/chvt.c ****   /* If the current time surpassed the time of the next element in list
 402:../../os/rt/src/chvt.c ****      then the event interrupt is already pending, just return.*/
 403:../../os/rt/src/chvt.c ****   if (nowdelta >= vtlp->dlist.next->delta) {
 404:../../os/rt/src/chvt.c ****     return;
 405:../../os/rt/src/chvt.c ****   }
 406:../../os/rt/src/chvt.c **** 
 407:../../os/rt/src/chvt.c ****   /* Distance from the next scheduled event and now.*/
 408:../../os/rt/src/chvt.c ****   delta = vtlp->dlist.next->delta - nowdelta;
 409:../../os/rt/src/chvt.c **** 
 410:../../os/rt/src/chvt.c ****   /* Setting up the alarm.*/
 411:../../os/rt/src/chvt.c ****   vt_set_alarm(now, delta);
 412:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 413:../../os/rt/src/chvt.c **** }
 706               		.loc 1 413 0
 707 0054 DF91      		pop r29
 708 0056 CF91      		pop r28
 709 0058 0895      		ret
 710               	.LVL72:
 711               	.L30:
 712               	.LBB280:
 713               	.LBB281:
 574:../../os/rt/include/chlists.h ****   dlhp->next->prev = dlhp;
 714               		.loc 2 574 0
 715 005a B093 0000 		sts ch0+7+1,r27
 716 005e A093 0000 		sts ch0+7,r26
 575:../../os/rt/include/chlists.h **** 
 717               		.loc 2 575 0
 718 0062 80E0      		ldi r24,lo8(ch0+7)
 719 0064 90E0      		ldi r25,hi8(ch0+7)
 720               	.LVL73:
 721 0066 1396      		adiw r26,2+1
 722 0068 9C93      		st X,r25
 723 006a 8E93      		st -X,r24
 724 006c 1297      		sbiw r26,2
 725               	.LVL74:
 726               	.LBE281:
 727               	.LBE280:
 384:../../os/rt/src/chvt.c **** 
 728               		.loc 1 384 0
 729 006e 1182      		std Z+1,__zero_reg__
 730 0070 1082      		st Z,__zero_reg__
 731               	.LVL75:
 732               	.LBB282:
 733               	.LBB283:
 443:../../os/rt/include/chlists.h **** }
 734               		.loc 2 443 0
 735 0072 A091 0000 		lds r26,ch0+7
 736 0076 B091 0000 		lds r27,ch0+7+1
 737               	.LVL76:
 738               	.LBE283:
 739               	.LBE282:
 387:../../os/rt/src/chvt.c **** 
 740               		.loc 1 387 0
 741 007a A817      		cp r26,r24
 742 007c B907      		cpc r27,r25
 743 007e 01F0      		breq .L33
 395:../../os/rt/src/chvt.c **** 
 744               		.loc 1 395 0
 745 0080 1496      		adiw r26,4
 746 0082 8D91      		ld r24,X+
 747 0084 9C91      		ld r25,X
 748 0086 1597      		sbiw r26,4+1
 749               	.LVL77:
 750 0088 2481      		ldd r18,Z+4
 751 008a 3581      		ldd r19,Z+5
 752 008c 820F      		add r24,r18
 753 008e 931F      		adc r25,r19
 754 0090 1596      		adiw r26,4+1
 755 0092 9C93      		st X,r25
 756 0094 8E93      		st -X,r24
 757 0096 1497      		sbiw r26,4
 758               	.LBB284:
 759               	.LBB285:
 760               	.LBB286:
 761               		.loc 3 113 0
 762 0098 0E94 0000 		call stGetCounter
 763               	.LVL78:
 764               	.LBE286:
 765               	.LBE285:
 766               	.LBE284:
 767               	.LBB287:
 768               	.LBB288:
 769               		.loc 4 465 0
 770 009c 2091 0000 		lds r18,ch0+13
 771 00a0 3091 0000 		lds r19,ch0+13+1
 772 00a4 AC01      		movw r20,r24
 773 00a6 421B      		sub r20,r18
 774 00a8 530B      		sbc r21,r19
 775               	.LVL79:
 776               	.LBE288:
 777               	.LBE287:
 403:../../os/rt/src/chvt.c ****     return;
 778               		.loc 1 403 0
 779 00aa E091 0000 		lds r30,ch0+7
 780 00ae F091 0000 		lds r31,ch0+7+1
 781 00b2 6481      		ldd r22,Z+4
 782 00b4 7581      		ldd r23,Z+5
 783 00b6 4617      		cp r20,r22
 784 00b8 5707      		cpc r21,r23
 785 00ba 00F4      		brsh .L29
 786               	.LVL80:
 408:../../os/rt/src/chvt.c **** 
 787               		.loc 1 408 0
 788 00bc 641B      		sub r22,r20
 789 00be 750B      		sbc r23,r21
 790               	.LVL81:
 791               	/* epilogue start */
 792               		.loc 1 413 0
 793 00c0 DF91      		pop r29
 794 00c2 CF91      		pop r28
 411:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 795               		.loc 1 411 0
 796 00c4 0C94 0000 		jmp vt_set_alarm
 797               	.LVL82:
 798               	.L33:
 799               	/* epilogue start */
 800               		.loc 1 413 0
 801 00c8 DF91      		pop r29
 802 00ca CF91      		pop r28
 803               	.LBB289:
 804               	.LBB290:
  89:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 805               		.loc 3 89 0
 806 00cc 0C94 0000 		jmp stStopAlarm
 807               	.LVL83:
 808               	.LBE290:
 809               	.LBE289:
 810               		.cfi_endproc
 811               	.LFE200:
 813               		.section	.text.chVTGetRemainingIntervalI,"ax",@progbits
 814               	.global	chVTGetRemainingIntervalI
 816               	chVTGetRemainingIntervalI:
 817               	.LFB201:
 414:../../os/rt/src/chvt.c **** 
 415:../../os/rt/src/chvt.c **** /**
 416:../../os/rt/src/chvt.c ****  * @brief   Returns the remaining time interval before next timer trigger.
 417:../../os/rt/src/chvt.c ****  * @note    This function can be called while the timer is active.
 418:../../os/rt/src/chvt.c ****  *
 419:../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t structure
 420:../../os/rt/src/chvt.c ****  * @return              The remaining time interval.
 421:../../os/rt/src/chvt.c ****  *
 422:../../os/rt/src/chvt.c ****  * @iclass
 423:../../os/rt/src/chvt.c ****  */
 424:../../os/rt/src/chvt.c **** sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp) {
 818               		.loc 1 424 0
 819               		.cfi_startproc
 820               	.LVL84:
 821 0000 CF93      		push r28
 822               	.LCFI22:
 823               		.cfi_def_cfa_offset 3
 824               		.cfi_offset 28, -2
 825 0002 DF93      		push r29
 826               	.LCFI23:
 827               		.cfi_def_cfa_offset 4
 828               		.cfi_offset 29, -3
 829               	/* prologue: function */
 830               	/* frame size = 0 */
 831               	/* stack size = 2 */
 832               	.L__stack_usage = 2
 833               	.LVL85:
 425:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 426:../../os/rt/src/chvt.c ****   sysinterval_t delta;
 427:../../os/rt/src/chvt.c ****   ch_delta_list_t *dlp;
 428:../../os/rt/src/chvt.c **** 
 429:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 430:../../os/rt/src/chvt.c **** 
 431:../../os/rt/src/chvt.c ****   delta = (sysinterval_t)0;
 432:../../os/rt/src/chvt.c ****   dlp = vtlp->dlist.next;
 834               		.loc 1 432 0
 835 0004 E091 0000 		lds r30,ch0+7
 836 0008 F091 0000 		lds r31,ch0+7+1
 837               	.LVL86:
 431:../../os/rt/src/chvt.c ****   dlp = vtlp->dlist.next;
 838               		.loc 1 431 0
 839 000c D0E0      		ldi r29,0
 840 000e C0E0      		ldi r28,0
 841 0010 00C0      		rjmp .L37
 842               	.LVL87:
 843               	.L35:
 433:../../os/rt/src/chvt.c ****   do {
 434:../../os/rt/src/chvt.c ****     delta += dlp->delta;
 435:../../os/rt/src/chvt.c ****     if (dlp == &vtp->dlist) {
 436:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 437:../../os/rt/src/chvt.c ****       systime_t now = chVTGetSystemTimeX();
 438:../../os/rt/src/chvt.c ****       sysinterval_t nowdelta = chTimeDiffX(vtlp->lasttime, now);
 439:../../os/rt/src/chvt.c ****       if (nowdelta > delta) {
 440:../../os/rt/src/chvt.c ****         return (sysinterval_t)0;
 441:../../os/rt/src/chvt.c ****       }
 442:../../os/rt/src/chvt.c ****       return delta - nowdelta;
 443:../../os/rt/src/chvt.c **** #else
 444:../../os/rt/src/chvt.c ****       return delta;
 445:../../os/rt/src/chvt.c **** #endif
 446:../../os/rt/src/chvt.c ****     }
 447:../../os/rt/src/chvt.c ****     dlp = dlp->next;
 844               		.loc 1 447 0
 845 0012 0190      		ld __tmp_reg__,Z+
 846 0014 F081      		ld r31,Z
 847 0016 E02D      		mov r30,__tmp_reg__
 848               	.LVL88:
 448:../../os/rt/src/chvt.c ****   } while (dlp != &vtlp->dlist);
 849               		.loc 1 448 0
 850 0018 30E0      		ldi r19,hi8(ch0+7)
 851 001a E030      		cpi r30,lo8(ch0+7)
 852 001c F307      		cpc r31,r19
 853 001e 01F0      		breq .L40
 854               	.LVL89:
 855               	.L37:
 434:../../os/rt/src/chvt.c ****     if (dlp == &vtp->dlist) {
 856               		.loc 1 434 0
 857 0020 2481      		ldd r18,Z+4
 858 0022 3581      		ldd r19,Z+5
 859 0024 C20F      		add r28,r18
 860 0026 D31F      		adc r29,r19
 861               	.LVL90:
 435:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 862               		.loc 1 435 0
 863 0028 E817      		cp r30,r24
 864 002a F907      		cpc r31,r25
 865 002c 01F4      		brne .L35
 866               	.LBB291:
 867               	.LBB292:
 868               	.LBB293:
 869               	.LBB294:
 870               		.loc 3 113 0
 871 002e 0E94 0000 		call stGetCounter
 872               	.LVL91:
 873               	.LBE294:
 874               	.LBE293:
 875               	.LBE292:
 876               	.LBB295:
 877               	.LBB296:
 878               		.loc 4 465 0
 879 0032 2091 0000 		lds r18,ch0+13
 880 0036 3091 0000 		lds r19,ch0+13+1
 881 003a 821B      		sub r24,r18
 882 003c 930B      		sbc r25,r19
 883               	.LVL92:
 884               	.LBE296:
 885               	.LBE295:
 439:../../os/rt/src/chvt.c ****         return (sysinterval_t)0;
 886               		.loc 1 439 0
 887 003e C817      		cp r28,r24
 888 0040 D907      		cpc r29,r25
 889 0042 00F0      		brlo .L38
 442:../../os/rt/src/chvt.c **** #else
 890               		.loc 1 442 0
 891 0044 9E01      		movw r18,r28
 892 0046 281B      		sub r18,r24
 893 0048 390B      		sbc r19,r25
 894 004a C901      		movw r24,r18
 895               	/* epilogue start */
 896               	.LBE291:
 449:../../os/rt/src/chvt.c **** 
 450:../../os/rt/src/chvt.c ****   chDbgAssert(false, "timer not in list");
 451:../../os/rt/src/chvt.c **** 
 452:../../os/rt/src/chvt.c ****   return (sysinterval_t)-1;
 453:../../os/rt/src/chvt.c **** }
 897               		.loc 1 453 0
 898 004c DF91      		pop r29
 899 004e CF91      		pop r28
 900               	.LVL93:
 901 0050 0895      		ret
 902               	.LVL94:
 903               	.L38:
 904               	.LBB297:
 440:../../os/rt/src/chvt.c ****       }
 905               		.loc 1 440 0
 906 0052 90E0      		ldi r25,0
 907 0054 80E0      		ldi r24,0
 908               	/* epilogue start */
 909               	.LBE297:
 910               		.loc 1 453 0
 911 0056 DF91      		pop r29
 912 0058 CF91      		pop r28
 913               	.LVL95:
 914 005a 0895      		ret
 915               	.LVL96:
 916               	.L40:
 452:../../os/rt/src/chvt.c **** }
 917               		.loc 1 452 0
 918 005c 8FEF      		ldi r24,lo8(-1)
 919 005e 9FEF      		ldi r25,lo8(-1)
 920               	.LVL97:
 921               	/* epilogue start */
 922               		.loc 1 453 0
 923 0060 DF91      		pop r29
 924 0062 CF91      		pop r28
 925               	.LVL98:
 926 0064 0895      		ret
 927               		.cfi_endproc
 928               	.LFE201:
 930               		.section	.text.chVTDoTickI,"ax",@progbits
 931               	.global	chVTDoTickI
 933               	chVTDoTickI:
 934               	.LFB202:
 454:../../os/rt/src/chvt.c **** 
 455:../../os/rt/src/chvt.c **** /**
 456:../../os/rt/src/chvt.c ****  * @brief   Virtual timers ticker.
 457:../../os/rt/src/chvt.c ****  * @note    The system lock is released before entering the callback and
 458:../../os/rt/src/chvt.c ****  *          re-acquired immediately after. It is callback's responsibility
 459:../../os/rt/src/chvt.c ****  *          to acquire the lock if needed. This is done in order to reduce
 460:../../os/rt/src/chvt.c ****  *          interrupts jitter when many timers are in use.
 461:../../os/rt/src/chvt.c ****  *
 462:../../os/rt/src/chvt.c ****  * @iclass
 463:../../os/rt/src/chvt.c ****  */
 464:../../os/rt/src/chvt.c **** void chVTDoTickI(void) {
 935               		.loc 1 464 0
 936               		.cfi_startproc
 937 0000 CF92      		push r12
 938               	.LCFI24:
 939               		.cfi_def_cfa_offset 3
 940               		.cfi_offset 12, -2
 941 0002 DF92      		push r13
 942               	.LCFI25:
 943               		.cfi_def_cfa_offset 4
 944               		.cfi_offset 13, -3
 945 0004 EF92      		push r14
 946               	.LCFI26:
 947               		.cfi_def_cfa_offset 5
 948               		.cfi_offset 14, -4
 949 0006 FF92      		push r15
 950               	.LCFI27:
 951               		.cfi_def_cfa_offset 6
 952               		.cfi_offset 15, -5
 953 0008 0F93      		push r16
 954               	.LCFI28:
 955               		.cfi_def_cfa_offset 7
 956               		.cfi_offset 16, -6
 957 000a 1F93      		push r17
 958               	.LCFI29:
 959               		.cfi_def_cfa_offset 8
 960               		.cfi_offset 17, -7
 961 000c CF93      		push r28
 962               	.LCFI30:
 963               		.cfi_def_cfa_offset 9
 964               		.cfi_offset 28, -8
 965 000e DF93      		push r29
 966               	.LCFI31:
 967               		.cfi_def_cfa_offset 10
 968               		.cfi_offset 29, -9
 969               	/* prologue: function */
 970               	/* frame size = 0 */
 971               	/* stack size = 8 */
 972               	.L__stack_usage = 8
 973               	.LVL99:
 974               	.LBB298:
 975               	.LBB299:
 976               	.LBB300:
 977               	.LBB301:
 561:../../os/rt/include/chlists.h **** }
 978               		.loc 2 561 0
 979 0010 EE24      		clr r14
 980 0012 EA94      		dec r14
 981 0014 FE2C      		mov r15,r14
 982 0016 00C0      		rjmp .L44
 983               	.LVL100:
 984               	.L43:
 985               	.LBE301:
 986               	.LBE300:
 987               	.LBE299:
 465:../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 466:../../os/rt/src/chvt.c **** 
 467:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 468:../../os/rt/src/chvt.c **** 
 469:../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 470:../../os/rt/src/chvt.c ****   vtlp->systime++;
 471:../../os/rt/src/chvt.c ****   if (ch_dlist_notempty(&vtlp->dlist)) {
 472:../../os/rt/src/chvt.c ****     /* The list is not empty, processing elements on top.*/
 473:../../os/rt/src/chvt.c ****     --vtlp->dlist.next->delta;
 474:../../os/rt/src/chvt.c ****     while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 475:../../os/rt/src/chvt.c ****       virtual_timer_t *vtp;
 476:../../os/rt/src/chvt.c **** 
 477:../../os/rt/src/chvt.c ****       /* Triggered timer.*/
 478:../../os/rt/src/chvt.c ****       vtp = (virtual_timer_t *)vtlp->dlist.next;
 479:../../os/rt/src/chvt.c **** 
 480:../../os/rt/src/chvt.c ****       /* Removing the element from the delta list, marking it as not armed.*/
 481:../../os/rt/src/chvt.c ****       (void) ch_dlist_dequeue(&vtp->dlist);
 482:../../os/rt/src/chvt.c ****       vtp->dlist.next = NULL;
 483:../../os/rt/src/chvt.c **** 
 484:../../os/rt/src/chvt.c ****       chSysUnlockFromISR();
 485:../../os/rt/src/chvt.c ****       vtp->func(vtp, vtp->par);
 486:../../os/rt/src/chvt.c ****       chSysLockFromISR();
 487:../../os/rt/src/chvt.c **** 
 488:../../os/rt/src/chvt.c ****       /* If a reload is defined the timer needs to be restarted.*/
 489:../../os/rt/src/chvt.c ****       if (vtp->reload > (sysinterval_t)0) {
 490:../../os/rt/src/chvt.c ****         ch_dlist_insert(&vtlp->dlist, &vtp->dlist, vtp->reload);
 491:../../os/rt/src/chvt.c ****       }
 492:../../os/rt/src/chvt.c ****     }
 493:../../os/rt/src/chvt.c ****   }
 494:../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 495:../../os/rt/src/chvt.c ****   virtual_timer_t *vtp;
 496:../../os/rt/src/chvt.c ****   sysinterval_t nowdelta;
 497:../../os/rt/src/chvt.c ****   systime_t now;
 498:../../os/rt/src/chvt.c **** 
 499:../../os/rt/src/chvt.c ****   /* Looping through timers consuming all timers with deltas lower or equal
 500:../../os/rt/src/chvt.c ****      than the interval between "now" and "lasttime".*/
 501:../../os/rt/src/chvt.c ****   while (true) {
 502:../../os/rt/src/chvt.c ****     systime_t lasttime;
 503:../../os/rt/src/chvt.c **** 
 504:../../os/rt/src/chvt.c ****     /* First timer in the delta list.*/
 505:../../os/rt/src/chvt.c ****     vtp = (virtual_timer_t *)vtlp->dlist.next;
 506:../../os/rt/src/chvt.c **** 
 507:../../os/rt/src/chvt.c ****     /* Delta between current time and last execution time.*/
 508:../../os/rt/src/chvt.c ****     now = chVTGetSystemTimeX();
 509:../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(vtlp->lasttime, now);
 510:../../os/rt/src/chvt.c **** 
 511:../../os/rt/src/chvt.c ****     /* Loop break condition.
 512:../../os/rt/src/chvt.c ****        Note that the list scan is limited by the delta list header having
 513:../../os/rt/src/chvt.c ****        "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
 514:../../os/rt/src/chvt.c ****        deltas*/
 515:../../os/rt/src/chvt.c ****     if (nowdelta < vtp->dlist.delta) {
 516:../../os/rt/src/chvt.c ****       break;
 517:../../os/rt/src/chvt.c ****     }
 518:../../os/rt/src/chvt.c **** 
 519:../../os/rt/src/chvt.c ****     /* Last time deadline is updated to the next timer's time.*/
 520:../../os/rt/src/chvt.c ****     lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 521:../../os/rt/src/chvt.c ****     vtlp->lasttime = lasttime;
 522:../../os/rt/src/chvt.c **** 
 523:../../os/rt/src/chvt.c ****     /* Removing the timer from the list, marking it as not armed.*/
 524:../../os/rt/src/chvt.c ****     (void) ch_dlist_dequeue(&vtp->dlist);
 525:../../os/rt/src/chvt.c ****     vtp->dlist.next = NULL;
 526:../../os/rt/src/chvt.c **** 
 527:../../os/rt/src/chvt.c ****     /* If the list becomes empty then the alarm is disabled.*/
 528:../../os/rt/src/chvt.c ****     if (ch_dlist_isempty(&vtlp->dlist)) {
 529:../../os/rt/src/chvt.c ****       port_timer_stop_alarm();
 530:../../os/rt/src/chvt.c ****     }
 531:../../os/rt/src/chvt.c **** 
 532:../../os/rt/src/chvt.c ****     /* The callback is invoked outside the kernel critical section, it
 533:../../os/rt/src/chvt.c ****        is re-entered on the callback return. Note that "lasttime" can be
 534:../../os/rt/src/chvt.c ****        modified within the callback if some timer function is called.*/
 535:../../os/rt/src/chvt.c ****     chSysUnlockFromISR();
 536:../../os/rt/src/chvt.c **** 
 537:../../os/rt/src/chvt.c ****     vtp->func(vtp, vtp->par);
 988               		.loc 1 537 0
 989 0018 6885      		ldd r22,Y+8
 990 001a 7985      		ldd r23,Y+9
 991 001c EE81      		ldd r30,Y+6
 992 001e FF81      		ldd r31,Y+7
 993 0020 CE01      		movw r24,r28
 994 0022 0995      		icall
 995               	.LVL101:
 538:../../os/rt/src/chvt.c **** 
 539:../../os/rt/src/chvt.c ****     chSysLockFromISR();
 540:../../os/rt/src/chvt.c **** 
 541:../../os/rt/src/chvt.c ****     /* If a reload is defined the timer needs to be restarted.*/
 542:../../os/rt/src/chvt.c ****     if (unlikely(vtp->reload > (sysinterval_t)0)) {
 996               		.loc 1 542 0
 997 0024 8A85      		ldd r24,Y+10
 998 0026 9B85      		ldd r25,Y+11
 999 0028 892B      		or r24,r25
 1000 002a 01F0      		breq .+2
 1001 002c 00C0      		rjmp .L56
 1002               	.LVL102:
 1003               	.L44:
 505:../../os/rt/src/chvt.c **** 
 1004               		.loc 1 505 0
 1005 002e C091 0000 		lds r28,ch0+7
 1006 0032 D091 0000 		lds r29,ch0+7+1
 1007               	.LVL103:
 1008               	.LBB315:
 1009               	.LBB316:
 1010               	.LBB317:
 1011               		.loc 3 113 0
 1012 0036 0E94 0000 		call stGetCounter
 1013               	.LVL104:
 1014               	.LBE317:
 1015               	.LBE316:
 1016               	.LBE315:
 509:../../os/rt/src/chvt.c **** 
 1017               		.loc 1 509 0
 1018 003a 0091 0000 		lds r16,ch0+13
 1019 003e 1091 0000 		lds r17,ch0+13+1
 1020               	.LVL105:
 1021               	.LBB318:
 1022               	.LBB319:
 1023               		.loc 4 465 0
 1024 0042 9C01      		movw r18,r24
 1025 0044 201B      		sub r18,r16
 1026 0046 310B      		sbc r19,r17
 1027               	.LVL106:
 1028               	.LBE319:
 1029               	.LBE318:
 515:../../os/rt/src/chvt.c ****       break;
 1030               		.loc 1 515 0
 1031 0048 6C81      		ldd r22,Y+4
 1032 004a 7D81      		ldd r23,Y+5
 1033 004c 2617      		cp r18,r22
 1034 004e 3707      		cpc r19,r23
 1035 0050 00F0      		brlo .L42
 1036               	.LVL107:
 1037               	.LBB320:
 1038               	.LBB321:
 449:../../os/rt/include/chtime.h **** }
 1039               		.loc 4 449 0
 1040 0052 060F      		add r16,r22
 1041 0054 171F      		adc r17,r23
 1042               	.LVL108:
 1043               	.LBE321:
 1044               	.LBE320:
 521:../../os/rt/src/chvt.c **** 
 1045               		.loc 1 521 0
 1046 0056 1093 0000 		sts ch0+13+1,r17
 1047 005a 0093 0000 		sts ch0+13,r16
 1048               	.LVL109:
 1049               	.LBB322:
 1050               	.LBB323:
 589:../../os/rt/include/chlists.h ****   dlp->next->prev = dlp->prev;
 1051               		.loc 2 589 0
 1052 005e EA81      		ldd r30,Y+2
 1053 0060 FB81      		ldd r31,Y+3
 1054 0062 8881      		ld r24,Y
 1055 0064 9981      		ldd r25,Y+1
 1056 0066 9183      		std Z+1,r25
 1057 0068 8083      		st Z,r24
 1058               		.loc 2 590 0
 1059 006a A881      		ld r26,Y
 1060 006c B981      		ldd r27,Y+1
 1061 006e 1396      		adiw r26,2+1
 1062 0070 FC93      		st X,r31
 1063 0072 EE93      		st -X,r30
 1064 0074 1297      		sbiw r26,2
 1065               	.LVL110:
 1066               	.LBE323:
 1067               	.LBE322:
 525:../../os/rt/src/chvt.c **** 
 1068               		.loc 1 525 0
 1069 0076 1982      		std Y+1,__zero_reg__
 1070 0078 1882      		st Y,__zero_reg__
 528:../../os/rt/src/chvt.c ****       port_timer_stop_alarm();
 1071               		.loc 1 528 0
 1072 007a 8091 0000 		lds r24,ch0+7
 1073 007e 9091 0000 		lds r25,ch0+7+1
 1074 0082 8050      		subi r24,lo8(ch0+7)
 1075 0084 9040      		sbci r25,hi8(ch0+7)
 1076 0086 01F4      		brne .L43
 1077               	.LBB324:
 1078               	.LBB325:
  89:../../os/hal/osal/rt-nil/chcore_timer.h **** }
 1079               		.loc 3 89 0
 1080 0088 0E94 0000 		call stStopAlarm
 1081               	.LVL111:
 1082 008c 00C0      		rjmp .L43
 1083               	.L42:
 1084               	.LBE325:
 1085               	.LBE324:
 1086               	.LBE298:
 543:../../os/rt/src/chvt.c ****       sysinterval_t delta, delay;
 544:../../os/rt/src/chvt.c **** 
 545:../../os/rt/src/chvt.c ****       /* Refreshing the now delta after spending time in the callback for
 546:../../os/rt/src/chvt.c ****          a more accurate detection of too fast reloads.*/
 547:../../os/rt/src/chvt.c ****       now = chVTGetSystemTimeX();
 548:../../os/rt/src/chvt.c ****       nowdelta = chTimeDiffX(lasttime, now);
 549:../../os/rt/src/chvt.c **** 
 550:../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 551:../../os/rt/src/chvt.c ****       /* Checking if the required reload is feasible.*/
 552:../../os/rt/src/chvt.c ****       if (nowdelta > vtp->reload) {
 553:../../os/rt/src/chvt.c ****         /* System time is already past the deadline, logging the fault and
 554:../../os/rt/src/chvt.c ****            proceeding with a minimum delay.*/
 555:../../os/rt/src/chvt.c **** 
 556:../../os/rt/src/chvt.c ****         chDbgAssert(false, "skipped deadline");
 557:../../os/rt/src/chvt.c ****         chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
 558:../../os/rt/src/chvt.c **** 
 559:../../os/rt/src/chvt.c ****         delay = (sysinterval_t)0;
 560:../../os/rt/src/chvt.c ****       }
 561:../../os/rt/src/chvt.c ****       else {
 562:../../os/rt/src/chvt.c ****         /* Enqueuing the timer again using the calculated delta.*/
 563:../../os/rt/src/chvt.c ****         delay = vtp->reload - nowdelta;
 564:../../os/rt/src/chvt.c ****       }
 565:../../os/rt/src/chvt.c **** #else
 566:../../os/rt/src/chvt.c ****       /* Assertions as fallback.*/
 567:../../os/rt/src/chvt.c ****       chDbgAssert(nowdelta <= vtp->reload, "skipped deadline");
 568:../../os/rt/src/chvt.c **** 
 569:../../os/rt/src/chvt.c ****       /* Enqueuing the timer again using the calculated delta.*/
 570:../../os/rt/src/chvt.c ****       delay = vtp->reload - nowdelta;
 571:../../os/rt/src/chvt.c **** #endif
 572:../../os/rt/src/chvt.c **** 
 573:../../os/rt/src/chvt.c ****       /* Special case where the timers list is empty.*/
 574:../../os/rt/src/chvt.c ****       if (ch_dlist_isempty(&vtlp->dlist)) {
 575:../../os/rt/src/chvt.c **** 
 576:../../os/rt/src/chvt.c ****         vt_insert_first(vtlp, vtp, now, delay);
 577:../../os/rt/src/chvt.c **** 
 578:../../os/rt/src/chvt.c ****         return;
 579:../../os/rt/src/chvt.c ****       }
 580:../../os/rt/src/chvt.c **** 
 581:../../os/rt/src/chvt.c ****       /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 582:../../os/rt/src/chvt.c ****          becomes lower than 'nowdelta'. In that case the delta is shortened
 583:../../os/rt/src/chvt.c ****          to make it fit the numeric range and the timer will be triggered
 584:../../os/rt/src/chvt.c ****          "nowdelta" cycles earlier.*/
 585:../../os/rt/src/chvt.c ****       delta = nowdelta + delay;
 586:../../os/rt/src/chvt.c ****       if (delta < nowdelta) {
 587:../../os/rt/src/chvt.c ****         delta = delay;
 588:../../os/rt/src/chvt.c ****       }
 589:../../os/rt/src/chvt.c **** 
 590:../../os/rt/src/chvt.c ****       /* Insert into delta list. */
 591:../../os/rt/src/chvt.c ****       ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 592:../../os/rt/src/chvt.c ****     }
 593:../../os/rt/src/chvt.c ****   }
 594:../../os/rt/src/chvt.c **** 
 595:../../os/rt/src/chvt.c ****   /* If the list is empty, nothing else to do.*/
 596:../../os/rt/src/chvt.c ****   if (ch_dlist_isempty(&vtlp->dlist)) {
 1087               		.loc 1 596 0
 1088 008e 4091 0000 		lds r20,ch0+7
 1089 0092 5091 0000 		lds r21,ch0+7+1
 1090 0096 4050      		subi r20,lo8(ch0+7)
 1091 0098 5040      		sbci r21,hi8(ch0+7)
 1092 009a 01F4      		brne .+2
 1093 009c 00C0      		rjmp .L41
 597:../../os/rt/src/chvt.c ****     return;
 598:../../os/rt/src/chvt.c ****   }
 599:../../os/rt/src/chvt.c **** 
 600:../../os/rt/src/chvt.c ****   /* The "unprocessed nowdelta" time slice is added to "last time"
 601:../../os/rt/src/chvt.c ****      and subtracted to next timer's delta.*/
 602:../../os/rt/src/chvt.c ****   vtlp->lasttime += nowdelta;
 1094               		.loc 1 602 0
 1095 009e 9093 0000 		sts ch0+13+1,r25
 1096 00a2 8093 0000 		sts ch0+13,r24
 603:../../os/rt/src/chvt.c ****   vtp->dlist.delta -= nowdelta;
 1097               		.loc 1 603 0
 1098 00a6 621B      		sub r22,r18
 1099 00a8 730B      		sbc r23,r19
 1100 00aa 7D83      		std Y+5,r23
 1101 00ac 6C83      		std Y+4,r22
 1102               	/* epilogue start */
 604:../../os/rt/src/chvt.c **** 
 605:../../os/rt/src/chvt.c ****   /* Update alarm time to next timer.*/
 606:../../os/rt/src/chvt.c ****   vt_set_alarm(now, vtp->dlist.delta);
 607:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 608:../../os/rt/src/chvt.c **** }
 1103               		.loc 1 608 0
 1104 00ae DF91      		pop r29
 1105 00b0 CF91      		pop r28
 1106               	.LVL112:
 1107 00b2 1F91      		pop r17
 1108 00b4 0F91      		pop r16
 1109 00b6 FF90      		pop r15
 1110 00b8 EF90      		pop r14
 1111 00ba DF90      		pop r13
 1112 00bc CF90      		pop r12
 606:../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 1113               		.loc 1 606 0
 1114 00be 0C94 0000 		jmp vt_set_alarm
 1115               	.LVL113:
 1116               	.L56:
 1117               	.LBB329:
 1118               	.LBB326:
 1119               	.LBB305:
 1120               	.LBB306:
 1121               	.LBB307:
 1122               		.loc 3 113 0
 1123 00c2 0E94 0000 		call stGetCounter
 1124               	.LVL114:
 1125 00c6 6C01      		movw r12,r24
 1126               	.LVL115:
 1127               	.LBE307:
 1128               	.LBE306:
 1129               	.LBE305:
 1130               	.LBB308:
 1131               	.LBB309:
 1132               		.loc 4 465 0
 1133 00c8 801B      		sub r24,r16
 1134 00ca 910B      		sbc r25,r17
 1135 00cc 8C01      		movw r16,r24
 1136               	.LVL116:
 1137               	.LBE309:
 1138               	.LBE308:
 552:../../os/rt/src/chvt.c ****         /* System time is already past the deadline, logging the fault and
 1139               		.loc 1 552 0
 1140 00ce 4A85      		ldd r20,Y+10
 1141 00d0 5B85      		ldd r21,Y+11
 1142 00d2 4817      		cp r20,r24
 1143 00d4 5907      		cpc r21,r25
 1144 00d6 00F0      		brlo .L57
 1145               	.LVL117:
 1146               	.LBB310:
 1147               	.LBB311:
 443:../../os/rt/include/chlists.h **** }
 1148               		.loc 2 443 0
 1149 00d8 E091 0000 		lds r30,ch0+7
 1150 00dc F091 0000 		lds r31,ch0+7+1
 1151               	.LVL118:
 1152               	.LBE311:
 1153               	.LBE310:
 574:../../os/rt/src/chvt.c **** 
 1154               		.loc 1 574 0
 1155 00e0 20E0      		ldi r18,hi8(ch0+7)
 1156 00e2 E030      		cpi r30,lo8(ch0+7)
 1157 00e4 F207      		cpc r31,r18
 1158 00e6 01F4      		brne .+2
 1159 00e8 00C0      		rjmp .L58
 1160               	.LVL119:
 1161               	.L47:
 1162               	.LBB313:
 1163               	.LBB304:
 544:../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 1164               		.loc 2 544 0
 1165 00ea 8481      		ldd r24,Z+4
 1166 00ec 9581      		ldd r25,Z+5
 1167 00ee 8417      		cp r24,r20
 1168 00f0 9507      		cpc r25,r21
 1169 00f2 00F4      		brsh .L48
 1170               	.LVL120:
 1171               	.L49:
 548:../../os/rt/include/chlists.h ****     dlp = dlp->next;
 1172               		.loc 2 548 0
 1173 00f4 481B      		sub r20,r24
 1174 00f6 590B      		sbc r21,r25
 1175               	.LVL121:
 549:../../os/rt/include/chlists.h ****   }
 1176               		.loc 2 549 0
 1177 00f8 0190      		ld __tmp_reg__,Z+
 1178 00fa F081      		ld r31,Z
 1179 00fc E02D      		mov r30,__tmp_reg__
 1180               	.LVL122:
 544:../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 1181               		.loc 2 544 0
 1182 00fe 8481      		ldd r24,Z+4
 1183 0100 9581      		ldd r25,Z+5
 1184 0102 8417      		cp r24,r20
 1185 0104 9507      		cpc r25,r21
 1186 0106 00F0      		brlo .L49
 1187               	.L48:
 1188               	.LVL123:
 1189               	.LBB302:
 1190               	.LBB303:
 520:../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 1191               		.loc 2 520 0
 1192 0108 5D83      		std Y+5,r21
 1193 010a 4C83      		std Y+4,r20
 521:../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 1194               		.loc 2 521 0
 1195 010c F983      		std Y+1,r31
 1196 010e E883      		st Y,r30
 522:../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 1197               		.loc 2 522 0
 1198 0110 A281      		ldd r26,Z+2
 1199 0112 B381      		ldd r27,Z+3
 1200 0114 BB83      		std Y+3,r27
 1201 0116 AA83      		std Y+2,r26
 523:../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 1202               		.loc 2 523 0
 1203 0118 CD93      		st X+,r28
 1204 011a DC93      		st X,r29
 524:../../os/rt/include/chlists.h **** }
 1205               		.loc 2 524 0
 1206 011c D383      		std Z+3,r29
 1207 011e C283      		std Z+2,r28
 1208               	.LVL124:
 1209               	.LBE303:
 1210               	.LBE302:
 556:../../os/rt/include/chlists.h **** 
 1211               		.loc 2 556 0
 1212 0120 8481      		ldd r24,Z+4
 1213 0122 9581      		ldd r25,Z+5
 1214 0124 841B      		sub r24,r20
 1215 0126 950B      		sbc r25,r21
 1216 0128 9583      		std Z+5,r25
 1217 012a 8483      		std Z+4,r24
 561:../../os/rt/include/chlists.h **** }
 1218               		.loc 2 561 0
 1219 012c F092 0000 		sts ch0+11+1,r15
 1220 0130 E092 0000 		sts ch0+11,r14
 1221 0134 00C0      		rjmp .L44
 1222               	.LVL125:
 1223               	.L41:
 1224               	/* epilogue start */
 1225               	.LBE304:
 1226               	.LBE313:
 1227               	.LBE326:
 1228               	.LBE329:
 1229               		.loc 1 608 0
 1230 0136 DF91      		pop r29
 1231 0138 CF91      		pop r28
 1232               	.LVL126:
 1233 013a 1F91      		pop r17
 1234 013c 0F91      		pop r16
 1235 013e FF90      		pop r15
 1236 0140 EF90      		pop r14
 1237 0142 DF90      		pop r13
 1238 0144 CF90      		pop r12
 1239 0146 0895      		ret
 1240               	.LVL127:
 1241               	.L57:
 1242               	.LBB330:
 1243               	.LBB327:
 557:../../os/rt/src/chvt.c **** 
 1244               		.loc 1 557 0
 1245 0148 62E0      		ldi r22,lo8(2)
 1246 014a 70E0      		ldi r23,0
 1247 014c 80E0      		ldi r24,0
 1248 014e 90E0      		ldi r25,0
 1249 0150 0E94 0000 		call chRFCUCollectFaultsI
 1250               	.LVL128:
 1251               	.LBB314:
 1252               	.LBB312:
 443:../../os/rt/include/chlists.h **** }
 1253               		.loc 2 443 0
 1254 0154 E091 0000 		lds r30,ch0+7
 1255 0158 F091 0000 		lds r31,ch0+7+1
 1256               	.LVL129:
 1257               	.LBE312:
 1258               	.LBE314:
 574:../../os/rt/src/chvt.c **** 
 1259               		.loc 1 574 0
 1260 015c 90E0      		ldi r25,hi8(ch0+7)
 1261 015e E030      		cpi r30,lo8(ch0+7)
 1262 0160 F907      		cpc r31,r25
 1263 0162 01F0      		breq .L52
 1264 0164 A801      		movw r20,r16
 1265 0166 00C0      		rjmp .L47
 1266               	.LVL130:
 1267               	.L58:
 563:../../os/rt/src/chvt.c ****       }
 1268               		.loc 1 563 0
 1269 0168 481B      		sub r20,r24
 1270 016a 590B      		sbc r21,r25
 1271               	.LVL131:
 1272               	.L46:
 576:../../os/rt/src/chvt.c **** 
 1273               		.loc 1 576 0
 1274 016c B601      		movw r22,r12
 1275 016e CE01      		movw r24,r28
 1276               	/* epilogue start */
 1277               	.LBE327:
 1278               	.LBE330:
 1279               		.loc 1 608 0
 1280 0170 DF91      		pop r29
 1281 0172 CF91      		pop r28
 1282               	.LVL132:
 1283 0174 1F91      		pop r17
 1284 0176 0F91      		pop r16
 1285 0178 FF90      		pop r15
 1286 017a EF90      		pop r14
 1287 017c DF90      		pop r13
 1288 017e CF90      		pop r12
 1289               	.LBB331:
 1290               	.LBB328:
 576:../../os/rt/src/chvt.c **** 
 1291               		.loc 1 576 0
 1292 0180 0C94 0000 		jmp vt_insert_first.constprop.5
 1293               	.LVL133:
 1294               	.L52:
 559:../../os/rt/src/chvt.c ****       }
 1295               		.loc 1 559 0
 1296 0184 50E0      		ldi r21,0
 1297 0186 40E0      		ldi r20,0
 1298 0188 00C0      		rjmp .L46
 1299               	.LBE328:
 1300               	.LBE331:
 1301               		.cfi_endproc
 1302               	.LFE202:
 1304               		.section	.text.chVTGetTimeStampI,"ax",@progbits
 1305               	.global	chVTGetTimeStampI
 1307               	chVTGetTimeStampI:
 1308               	.LFB203:
 609:../../os/rt/src/chvt.c **** 
 610:../../os/rt/src/chvt.c **** #if (CH_CFG_USE_TIMESTAMP == TRUE) || defined(__DOXYGEN__)
 611:../../os/rt/src/chvt.c **** /**
 612:../../os/rt/src/chvt.c ****  * @brief   Generates a monotonic time stamp.
 613:../../os/rt/src/chvt.c ****  * @details This function generates a monotonic time stamp synchronized with
 614:../../os/rt/src/chvt.c ****  *          the system time. The time stamp has the same resolution of
 615:../../os/rt/src/chvt.c ****  *          system time.
 616:../../os/rt/src/chvt.c ****  * @note    There is an assumption, this function must be called at
 617:../../os/rt/src/chvt.c ****  *          least once before the system time wraps back to zero or
 618:../../os/rt/src/chvt.c ****  *          synchronization is lost. You may use a periodic virtual timer with
 619:../../os/rt/src/chvt.c ****  *          a very large interval in order to keep time stamps synchronized
 620:../../os/rt/src/chvt.c ****  *          by calling this function.
 621:../../os/rt/src/chvt.c ****  *
 622:../../os/rt/src/chvt.c ****  * @return              The time stamp.
 623:../../os/rt/src/chvt.c ****  *
 624:../../os/rt/src/chvt.c ****  * @iclass
 625:../../os/rt/src/chvt.c ****  */
 626:../../os/rt/src/chvt.c **** systimestamp_t chVTGetTimeStampI(void) {
 1309               		.loc 1 626 0
 1310               		.cfi_startproc
 1311 0000 2F92      		push r2
 1312               	.LCFI32:
 1313               		.cfi_def_cfa_offset 3
 1314               		.cfi_offset 2, -2
 1315 0002 3F92      		push r3
 1316               	.LCFI33:
 1317               		.cfi_def_cfa_offset 4
 1318               		.cfi_offset 3, -3
 1319 0004 4F92      		push r4
 1320               	.LCFI34:
 1321               		.cfi_def_cfa_offset 5
 1322               		.cfi_offset 4, -4
 1323 0006 5F92      		push r5
 1324               	.LCFI35:
 1325               		.cfi_def_cfa_offset 6
 1326               		.cfi_offset 5, -5
 1327 0008 6F92      		push r6
 1328               	.LCFI36:
 1329               		.cfi_def_cfa_offset 7
 1330               		.cfi_offset 6, -6
 1331 000a 7F92      		push r7
 1332               	.LCFI37:
 1333               		.cfi_def_cfa_offset 8
 1334               		.cfi_offset 7, -7
 1335 000c 8F92      		push r8
 1336               	.LCFI38:
 1337               		.cfi_def_cfa_offset 9
 1338               		.cfi_offset 8, -8
 1339 000e 9F92      		push r9
 1340               	.LCFI39:
 1341               		.cfi_def_cfa_offset 10
 1342               		.cfi_offset 9, -9
 1343 0010 AF92      		push r10
 1344               	.LCFI40:
 1345               		.cfi_def_cfa_offset 11
 1346               		.cfi_offset 10, -10
 1347 0012 BF92      		push r11
 1348               	.LCFI41:
 1349               		.cfi_def_cfa_offset 12
 1350               		.cfi_offset 11, -11
 1351 0014 CF92      		push r12
 1352               	.LCFI42:
 1353               		.cfi_def_cfa_offset 13
 1354               		.cfi_offset 12, -12
 1355 0016 DF92      		push r13
 1356               	.LCFI43:
 1357               		.cfi_def_cfa_offset 14
 1358               		.cfi_offset 13, -13
 1359 0018 EF92      		push r14
 1360               	.LCFI44:
 1361               		.cfi_def_cfa_offset 15
 1362               		.cfi_offset 14, -14
 1363 001a FF92      		push r15
 1364               	.LCFI45:
 1365               		.cfi_def_cfa_offset 16
 1366               		.cfi_offset 15, -15
 1367 001c 0F93      		push r16
 1368               	.LCFI46:
 1369               		.cfi_def_cfa_offset 17
 1370               		.cfi_offset 16, -16
 1371 001e 1F93      		push r17
 1372               	.LCFI47:
 1373               		.cfi_def_cfa_offset 18
 1374               		.cfi_offset 17, -17
 1375               	/* prologue: function */
 1376               	/* frame size = 0 */
 1377               	/* stack size = 16 */
 1378               	.L__stack_usage = 16
 1379               	.LVL134:
 1380               	.LBB332:
 1381               	.LBB333:
 1382               	.LBB334:
 1383               		.loc 3 113 0
 1384 0020 0E94 0000 		call stGetCounter
 1385               	.LVL135:
 1386               	.LBE334:
 1387               	.LBE333:
 1388               	.LBE332:
 627:../../os/rt/src/chvt.c ****   os_instance_t * oip = currcore;
 628:../../os/rt/src/chvt.c ****   systimestamp_t last, stamp;
 629:../../os/rt/src/chvt.c ****   systime_t now;
 630:../../os/rt/src/chvt.c **** 
 631:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 632:../../os/rt/src/chvt.c **** 
 633:../../os/rt/src/chvt.c ****   /* Current system time.*/
 634:../../os/rt/src/chvt.c ****   now = chVTGetSystemTimeX();
 635:../../os/rt/src/chvt.c **** 
 636:../../os/rt/src/chvt.c ****   /* Last time stamp generated.*/
 637:../../os/rt/src/chvt.c ****   last = oip->vtlist.laststamp;
 1389               		.loc 1 637 0
 1390 0024 E0E0      		ldi r30,lo8(ch0)
 1391 0026 F0E0      		ldi r31,hi8(ch0)
 1392 0028 2784      		ldd r2,Z+15
 1393 002a 3088      		ldd r3,Z+16
 1394 002c 4188      		ldd r4,Z+17
 1395 002e 5288      		ldd r5,Z+18
 1396 0030 6388      		ldd r6,Z+19
 1397 0032 7488      		ldd r7,Z+20
 1398 0034 8588      		ldd r8,Z+21
 1399 0036 9688      		ldd r9,Z+22
 1400               	.LVL136:
 1401               	.LBB335:
 1402               	.LBB336:
 1403               		.loc 4 465 0
 1404 0038 8219      		sub r24,r2
 1405 003a 9309      		sbc r25,r3
 1406               	.LBE336:
 1407               	.LBE335:
 638:../../os/rt/src/chvt.c **** 
 639:../../os/rt/src/chvt.c ****   /* Interval between the last time stamp and current time used for a new
 640:../../os/rt/src/chvt.c ****      time stamp. Note that this fails if the interval is larger than a
 641:../../os/rt/src/chvt.c ****      systime_t type.*/
 642:../../os/rt/src/chvt.c ****   stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 1408               		.loc 1 642 0
 1409 003c 9C01      		movw r18,r24
 1410 003e 40E0      		ldi r20,0
 1411 0040 50E0      		ldi r21,0
 1412 0042 60E0      		ldi r22,0
 1413 0044 70E0      		ldi r23,0
 1414 0046 80E0      		ldi r24,0
 1415 0048 90E0      		ldi r25,0
 1416 004a 5101      		movw r10,r2
 1417 004c 6201      		movw r12,r4
 1418 004e 7301      		movw r14,r6
 1419 0050 8401      		movw r16,r8
 1420 0052 0E94 0000 		call __adddi3
 1421               	.LVL137:
 643:../../os/rt/src/chvt.c **** 
 644:../../os/rt/src/chvt.c ****   chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");
 645:../../os/rt/src/chvt.c **** 
 646:../../os/rt/src/chvt.c ****   /* Storing the new stamp.*/
 647:../../os/rt/src/chvt.c ****   oip->vtlist.laststamp = stamp;
 1422               		.loc 1 647 0
 1423 0056 2787      		std Z+15,r18
 1424 0058 308B      		std Z+16,r19
 1425 005a 418B      		std Z+17,r20
 1426 005c 528B      		std Z+18,r21
 1427 005e 638B      		std Z+19,r22
 1428 0060 748B      		std Z+20,r23
 1429 0062 858B      		std Z+21,r24
 1430 0064 968B      		std Z+22,r25
 1431               	/* epilogue start */
 648:../../os/rt/src/chvt.c **** 
 649:../../os/rt/src/chvt.c ****   return stamp;
 650:../../os/rt/src/chvt.c **** }
 1432               		.loc 1 650 0
 1433 0066 1F91      		pop r17
 1434 0068 0F91      		pop r16
 1435 006a FF90      		pop r15
 1436 006c EF90      		pop r14
 1437 006e DF90      		pop r13
 1438 0070 CF90      		pop r12
 1439 0072 BF90      		pop r11
 1440 0074 AF90      		pop r10
 1441 0076 9F90      		pop r9
 1442 0078 8F90      		pop r8
 1443 007a 7F90      		pop r7
 1444 007c 6F90      		pop r6
 1445 007e 5F90      		pop r5
 1446 0080 4F90      		pop r4
 1447 0082 3F90      		pop r3
 1448 0084 2F90      		pop r2
 1449               	.LVL138:
 1450 0086 0895      		ret
 1451               		.cfi_endproc
 1452               	.LFE203:
 1454               		.section	.text.chVTResetTimeStampI,"ax",@progbits
 1455               	.global	chVTResetTimeStampI
 1457               	chVTResetTimeStampI:
 1458               	.LFB204:
 651:../../os/rt/src/chvt.c **** 
 652:../../os/rt/src/chvt.c **** /**
 653:../../os/rt/src/chvt.c ****  * @brief   Resets and re-synchronizes the time stamps monotonic counter.
 654:../../os/rt/src/chvt.c ****  *
 655:../../os/rt/src/chvt.c ****  * @iclass
 656:../../os/rt/src/chvt.c ****  */
 657:../../os/rt/src/chvt.c **** void chVTResetTimeStampI(void) {
 1459               		.loc 1 657 0
 1460               		.cfi_startproc
 1461 0000 0F93      		push r16
 1462               	.LCFI48:
 1463               		.cfi_def_cfa_offset 3
 1464               		.cfi_offset 16, -2
 1465 0002 1F93      		push r17
 1466               	.LCFI49:
 1467               		.cfi_def_cfa_offset 4
 1468               		.cfi_offset 17, -3
 1469               	/* prologue: function */
 1470               	/* frame size = 0 */
 1471               	/* stack size = 2 */
 1472               	.L__stack_usage = 2
 1473               	.LBB337:
 1474               	.LBB338:
 1475               	.LBB339:
 1476               		.loc 3 113 0
 1477 0004 0E94 0000 		call stGetCounter
 1478               	.LVL139:
 1479               	.LBE339:
 1480               	.LBE338:
 1481               	.LBE337:
 658:../../os/rt/src/chvt.c **** 
 659:../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 660:../../os/rt/src/chvt.c **** 
 661:../../os/rt/src/chvt.c ****   currcore->vtlist.laststamp = (systimestamp_t)chVTGetSystemTimeX();
 1482               		.loc 1 661 0
 1483 0008 8C01      		movw r16,r24
 1484 000a E0E0      		ldi r30,lo8(ch0)
 1485 000c F0E0      		ldi r31,hi8(ch0)
 1486 000e 8787      		std Z+15,r24
 1487 0010 108B      		std Z+16,r17
 1488 0012 118A      		std Z+17,__zero_reg__
 1489 0014 128A      		std Z+18,__zero_reg__
 1490 0016 138A      		std Z+19,__zero_reg__
 1491 0018 148A      		std Z+20,__zero_reg__
 1492 001a 158A      		std Z+21,__zero_reg__
 1493 001c 168A      		std Z+22,__zero_reg__
 1494               	/* epilogue start */
 662:../../os/rt/src/chvt.c **** }
 1495               		.loc 1 662 0
 1496 001e 1F91      		pop r17
 1497 0020 0F91      		pop r16
 1498 0022 0895      		ret
 1499               		.cfi_endproc
 1500               	.LFE204:
 1502               		.text
 1503               	.Letext0:
 1504               		.file 5 "/usr/lib/avr/include/stdint.h"
 1505               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1506               		.file 7 "../../os/rt/include/chearly.h"
 1507               		.file 8 "../../os/rt/include/chobjects.h"
 1508               		.file 9 "../../os/rt/include/chrfcu.h"
 1509               		.file 10 "../../os/rt/include/chdebug.h"
 1510               		.file 11 "../../os/common/ports/AVR/chcore.h"
 1511               		.file 12 "../../os/rt/include/chsem.h"
 1512               		.file 13 "../../os/rt/include/chmtx.h"
 1513               		.file 14 "../../os/rt/include/chsys.h"
 1514               		.file 15 "../../os/rt/include/chregistry.h"
 1515               		.file 16 "../../os/oslib/include/chmemcore.h"
 1516               		.file 17 "../../os/rt/include/chvt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chvt.c
     /tmp/cc79OWyn.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc79OWyn.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc79OWyn.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc79OWyn.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc79OWyn.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc79OWyn.s:12     .text.vt_insert_first.constprop.5:0000000000000000 vt_insert_first.constprop.5
     /tmp/cc79OWyn.s:216    .text.vt_set_alarm:0000000000000000 vt_set_alarm
     /tmp/cc79OWyn.s:360    .text.vt_enqueue.constprop.4:0000000000000000 vt_enqueue.constprop.4
     /tmp/cc79OWyn.s:580    .text.chVTDoSetI:0000000000000000 chVTDoSetI
     /tmp/cc79OWyn.s:608    .text.chVTDoSetContinuousI:0000000000000000 chVTDoSetContinuousI
     /tmp/cc79OWyn.s:636    .text.chVTDoResetI:0000000000000000 chVTDoResetI
     /tmp/cc79OWyn.s:816    .text.chVTGetRemainingIntervalI:0000000000000000 chVTGetRemainingIntervalI
     /tmp/cc79OWyn.s:933    .text.chVTDoTickI:0000000000000000 chVTDoTickI
     /tmp/cc79OWyn.s:1307   .text.chVTGetTimeStampI:0000000000000000 chVTGetTimeStampI
     /tmp/cc79OWyn.s:1457   .text.chVTResetTimeStampI:0000000000000000 chVTResetTimeStampI

UNDEFINED SYMBOLS
ch0
stStartAlarm
stSetAlarm
stGetCounter
chRFCUCollectFaultsI
stStopAlarm
__adddi3
