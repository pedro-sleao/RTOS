   1               		.file	"hal_serial_lld.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.notify1,"ax",@progbits
  12               	notify1:
  13               	.LFB244:
  14               		.file 1 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c"
   1:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*
   2:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
   4:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     you may not use this file except in compliance with the License.
   6:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     You may obtain a copy of the License at
   7:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
   8:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  10:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     See the License for the specific language governing permissions and
  14:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     limitations under the License.
  15:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** */
  16:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  17:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
  18:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @file    USARTv1/hal_serial_lld.c
  19:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   AVR/MEGA SERIAL subsystem low level driver code.
  20:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
  21:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @addtogroup SERIAL
  22:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @{
  23:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
  24:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  25:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #include "hal.h"
  26:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  27:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if HAL_USE_SERIAL || defined(__DOXYGEN__)
  28:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  29:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
  30:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /* Driver exported variables.                                               */
  31:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
  32:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  33:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
  34:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART0 serial driver identifier.
  35:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @note    The name does not follow the convention used in the other ports
  36:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *          (COMn) because a name conflict with the AVR headers.
  37:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
  38:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
  39:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** SerialDriver SD1;
  40:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  41:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   /* USARTs are not consistently named across the AVR range. */
  42:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #ifdef USART0_RX_vect
  43:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD1_RX_VECT USART0_RX_vect
  44:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD1_TX_VECT USART0_UDRE_vect
  45:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #elif defined(USART_RX_vect)
  46:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD1_RX_VECT USART_RX_vect
  47:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD1_TX_VECT USART_UDRE_vect
  48:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #elif defined(USART0_RXC_vect)
  49:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD1_RX_VECT USART0_RXC_vect
  50:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD1_TX_VECT USART0_UDRE_vect
  51:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #else
  52:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #error "Cannot find USART to use for SD1"
  53:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #endif
  54:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif /* AVR_SERIAL_USE_USART0 */
  55:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  56:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
  57:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART1 serial driver identifier.
  58:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @note    The name does not follow the convention used in the other ports
  59:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *          (COMn) because a name conflict with the AVR headers.
  60:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
  61:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART1 || defined(__DOXYGEN__)
  62:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** SerialDriver SD2;
  63:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  64:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   /* Check if USART1 exists for this MCU. */
  65:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #ifdef USART1_RX_vect
  66:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD2_RX_VECT USART1_RX_vect
  67:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD2_TX_VECT USART1_UDRE_vect
  68:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #elif defined (USART1_RXC_vect)
  69:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD2_RX_VECT USART1_RXC_vect
  70:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #define AVR_SD2_TX_VECT USART1_UDRE_vect
  71:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #else
  72:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     #error "Cannot find USART to use for SD2"
  73:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   #endif
  74:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif /* AVR_SERIAL_USE_USART1 */
  75:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  76:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
  77:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /* Driver local variables and types.                                        */
  78:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
  79:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  80:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
  81:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   Driver default configuration.
  82:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
  83:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** static const SerialConfig default_config = {
  84:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UBRR2x_F(SERIAL_DEFAULT_BITRATE),
  85:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   USART_CHAR_SIZE_8
  86:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** };
  87:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  88:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
  89:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /* Driver local functions.                                                  */
  90:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
  91:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  92:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** static void set_error(uint8_t sra, SerialDriver *sdp) {
  93:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   eventflags_t sts = 0;
  94:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   uint8_t dor = 0;
  95:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   uint8_t upe = 0;
  96:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   uint8_t fe = 0;
  97:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
  98:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART0
  99:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (&SD1 == sdp) {
 100:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     dor = (1 << DOR0);
 101:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     upe = (1 << UPE0);
 102:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     fe = (1 << FE0);
 103:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   }
 104:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 105:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 106:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART1
 107:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (&SD2 == sdp) {
 108:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     dor = (1 << DOR1);
 109:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     upe = (1 << UPE1);
 110:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     fe = (1 << FE1);
 111:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   }
 112:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 113:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 114:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (sra & dor)
 115:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     sts |= SD_OVERRUN_ERROR;
 116:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (sra & upe)
 117:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     sts |= SD_PARITY_ERROR;
 118:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (sra & fe)
 119:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     sts |= SD_FRAMING_ERROR;
 120:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysLockFromISR();
 121:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   chnAddFlagsI(sdp, sts);
 122:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysUnlockFromISR();
 123:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 124:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 125:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
 126:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** static void notify1(io_queue_t *qp) {
  15               		.loc 1 126 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 127:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 128:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   (void)qp;
 129:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0B |= (1 << UDRIE0);
  22               		.loc 1 129 0
  23 0000 E1EC      		ldi r30,lo8(-63)
  24 0002 F0E0      		ldi r31,0
  25 0004 8081      		ld r24,Z
  26               	.LVL1:
  27 0006 8062      		ori r24,lo8(32)
  28 0008 8083      		st Z,r24
  29               	/* epilogue start */
 130:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
  30               		.loc 1 130 0
  31 000a 0895      		ret
  32               		.cfi_endproc
  33               	.LFE244:
  35               		.section	.text.__vector_18,"ax",@progbits
  36               	.global	__vector_18
  38               	__vector_18:
  39               	.LFB247:
 131:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 132:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 133:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART0 initialization.
 134:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 135:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @param[in] config    the architecture-dependent serial driver configuration
 136:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 137:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** static void usart0_init(const SerialConfig *config) {
 138:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 139:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   uint8_t ucsr0c;
 140:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 141:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UBRR0L = config->sc_brr;
 142:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UBRR0H = (config->sc_brr >> 8) & 0x0f;
 143:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0A = (1 << U2X0);
 144:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 145:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   switch (config->sc_bits_per_char) {
 146:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_5:
 147:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr0c = 0;
 148:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 149:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_6:
 150:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr0c = (1 << UCSZ00);
 151:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 152:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_7:
 153:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr0c = (1 << UCSZ01);
 154:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 155:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_9:
 156:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     UCSR0B |= (1 << UCSZ02);
 157:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
 158:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 159:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_8:
 160:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   default:
 161:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
 162:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   }
 163:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 164:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if defined(__AVR_ATmega162__)
 165:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0C = (1 << URSEL0) | ucsr0c;
 166:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #else
 167:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0C = ucsr0c;
 168:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 169:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 170:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 171:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 172:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART0 de-initialization.
 173:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 174:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** static void usart0_deinit(void) {
 175:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 176:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0A = 0;
 177:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0B = 0;
 178:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if defined(__AVR_ATmega162__)
 179:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0C = (1 << URSEL0);
 180:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #else
 181:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0C = 0;
 182:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 183:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 184:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 185:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 186:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART1 || defined(__DOXYGEN__)
 187:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** static void notify2(io_queue_t *qp) {
 188:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 189:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   (void)qp;
 190:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1B |= (1 << UDRIE1);
 191:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 192:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 193:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 194:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART1 initialization.
 195:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 196:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @param[in] config    the architecture-dependent serial driver configuration
 197:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 198:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** static void usart1_init(const SerialConfig *config) {
 199:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 200:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   uint8_t ucsr1c;
 201:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 202:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UBRR1L = config->sc_brr;
 203:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UBRR1H = (config->sc_brr >> 8) & 0x0f;
 204:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1A = (1 << U2X0);
 205:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);
 206:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   switch (config->sc_bits_per_char) {
 207:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_5:
 208:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   ucsr1c = 0;
 209:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 210:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_6:
 211:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr1c = (1 << UCSZ10);
 212:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 213:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_7:
 214:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr1c = (1 << UCSZ11);
 215:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 216:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_9:
 217:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     UCSR1B |= (1 << UCSZ12);
 218:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr1c = (1 << UCSZ10) | (1 << UCSZ11);
 219:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 220:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_8:
 221:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   default:
 222:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr1c = (1 << UCSZ10) | (1 << UCSZ11);
 223:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   }
 224:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 225:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if defined(__AVR_ATmega162__)
 226:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1C = (1 << URSEL1) | ucsr1c;
 227:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #else
 228:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1C = ucsr1c;
 229:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 230:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 231:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 232:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 233:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART1 de-initialization.
 234:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 235:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** static void usart1_deinit(void) {
 236:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 237:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1A = 0;
 238:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1B = 0;
 239:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if defined(__AVR_ATmega162__)
 240:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1C = (1 << URSEL1);
 241:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #else
 242:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR1C = 0;
 243:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 244:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 245:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 246:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 247:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
 248:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /* Driver interrupt handlers.                                               */
 249:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
 250:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 251:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
 252:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 253:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART0 RX interrupt handler.
 254:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 255:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @isr
 256:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 257:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
  40               		.loc 1 257 0
  41               		.cfi_startproc
  42 0000 1F92      		push r1
  43               	.LCFI0:
  44               		.cfi_def_cfa_offset 3
  45               		.cfi_offset 1, -2
  46 0002 0F92      		push r0
  47               	.LCFI1:
  48               		.cfi_def_cfa_offset 4
  49               		.cfi_offset 0, -3
  50 0004 0FB6      		in r0,__SREG__
  51 0006 0F92      		push r0
  52 0008 1124      		clr __zero_reg__
  53 000a 2F93      		push r18
  54               	.LCFI2:
  55               		.cfi_def_cfa_offset 5
  56               		.cfi_offset 18, -4
  57 000c 3F93      		push r19
  58               	.LCFI3:
  59               		.cfi_def_cfa_offset 6
  60               		.cfi_offset 19, -5
  61 000e 4F93      		push r20
  62               	.LCFI4:
  63               		.cfi_def_cfa_offset 7
  64               		.cfi_offset 20, -6
  65 0010 5F93      		push r21
  66               	.LCFI5:
  67               		.cfi_def_cfa_offset 8
  68               		.cfi_offset 21, -7
  69 0012 6F93      		push r22
  70               	.LCFI6:
  71               		.cfi_def_cfa_offset 9
  72               		.cfi_offset 22, -8
  73 0014 7F93      		push r23
  74               	.LCFI7:
  75               		.cfi_def_cfa_offset 10
  76               		.cfi_offset 23, -9
  77 0016 8F93      		push r24
  78               	.LCFI8:
  79               		.cfi_def_cfa_offset 11
  80               		.cfi_offset 24, -10
  81 0018 9F93      		push r25
  82               	.LCFI9:
  83               		.cfi_def_cfa_offset 12
  84               		.cfi_offset 25, -11
  85 001a AF93      		push r26
  86               	.LCFI10:
  87               		.cfi_def_cfa_offset 13
  88               		.cfi_offset 26, -12
  89 001c BF93      		push r27
  90               	.LCFI11:
  91               		.cfi_def_cfa_offset 14
  92               		.cfi_offset 27, -13
  93 001e EF93      		push r30
  94               	.LCFI12:
  95               		.cfi_def_cfa_offset 15
  96               		.cfi_offset 30, -14
  97 0020 FF93      		push r31
  98               	.LCFI13:
  99               		.cfi_def_cfa_offset 16
 100               		.cfi_offset 31, -15
 101               	/* prologue: Signal */
 102               	/* frame size = 0 */
 103               	/* stack size = 15 */
 104               	.L__stack_usage = 15
 258:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   uint8_t sra;
 259:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 260:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   OSAL_IRQ_PROLOGUE();
 105               		.loc 1 260 0
 106 0022 81E0      		ldi r24,lo8(1)
 107 0024 8093 0000 		sts __avr_in_isr,r24
 261:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 262:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   sra = UCSR0A;
 108               		.loc 1 262 0
 109 0028 8091 C000 		lds r24,192
 110               	.LVL2:
 263:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
 111               		.loc 1 263 0
 112 002c 982F      		mov r25,r24
 113 002e 9C71      		andi r25,lo8(28)
 114 0030 01F0      		breq .L4
 115               	.LVL3:
 116               	.LBB30:
 117               	.LBB31:
 117:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (sra & fe)
 118               		.loc 1 117 0
 119 0032 60E2      		ldi r22,lo8(32)
 116:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     sts |= SD_PARITY_ERROR;
 120               		.loc 1 116 0
 121 0034 82FF      		sbrs r24,2
 122 0036 60E0      		ldi r22,0
 123               	.L5:
 124               	.LVL4:
 118:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     sts |= SD_FRAMING_ERROR;
 125               		.loc 1 118 0
 126 0038 84FD      		sbrc r24,4
 127 003a 00C0      		rjmp .L18
 128               	.L6:
 129               	.LVL5:
 130               	.LBB32:
 131               	.LBB33:
 132               		.file 2 "../../os/hal/osal/rt-nil/osal.h"
   1:../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/osal.h **** 
   4:../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/osal.h **** 
   8:../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/osal.h **** 
  10:../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/osal.h **** */
  16:../../os/hal/osal/rt-nil/osal.h **** 
  17:../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../os/hal/osal/rt-nil/osal.h **** 
  25:../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../os/hal/osal/rt-nil/osal.h **** 
  28:../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../os/hal/osal/rt-nil/osal.h **** 
  32:../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../os/hal/osal/rt-nil/osal.h **** 
  34:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/osal.h **** 
  38:../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../os/hal/osal/rt-nil/osal.h **** 
  46:../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../os/hal/osal/rt-nil/osal.h **** 
  50:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../os/hal/osal/rt-nil/osal.h **** 
  54:../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../os/hal/osal/rt-nil/osal.h **** 
  65:../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../os/hal/osal/rt-nil/osal.h **** 
  75:../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../os/hal/osal/rt-nil/osal.h **** 
  84:../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../os/hal/osal/rt-nil/osal.h **** 
  93:../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../os/hal/osal/rt-nil/osal.h **** 
  98:../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../os/hal/osal/rt-nil/osal.h **** 
 108:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../os/hal/osal/rt-nil/osal.h **** 
 112:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../os/hal/osal/rt-nil/osal.h **** 
 116:../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../os/hal/osal/rt-nil/osal.h **** 
 122:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../os/hal/osal/rt-nil/osal.h **** 
 127:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../os/hal/osal/rt-nil/osal.h **** 
 131:../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../os/hal/osal/rt-nil/osal.h **** 
 138:../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../os/hal/osal/rt-nil/osal.h **** 
 145:../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../os/hal/osal/rt-nil/osal.h **** 
 152:../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../os/hal/osal/rt-nil/osal.h **** 
 159:../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../os/hal/osal/rt-nil/osal.h **** 
 168:../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../os/hal/osal/rt-nil/osal.h **** 
 175:../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../os/hal/osal/rt-nil/osal.h **** 
 182:../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../os/hal/osal/rt-nil/osal.h **** 
 189:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../os/hal/osal/rt-nil/osal.h **** 
 200:../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../os/hal/osal/rt-nil/osal.h **** 
 207:../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../os/hal/osal/rt-nil/osal.h **** };
 220:../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../os/hal/osal/rt-nil/osal.h **** 
 222:../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../os/hal/osal/rt-nil/osal.h **** 
 234:../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../os/hal/osal/rt-nil/osal.h **** 
 247:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../os/hal/osal/rt-nil/osal.h **** 
 251:../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../os/hal/osal/rt-nil/osal.h **** 
 271:../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../os/hal/osal/rt-nil/osal.h **** 
 283:../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../os/hal/osal/rt-nil/osal.h **** 
 289:../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../os/hal/osal/rt-nil/osal.h **** 
 296:../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../os/hal/osal/rt-nil/osal.h **** 
 305:../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../os/hal/osal/rt-nil/osal.h **** 
 311:../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../os/hal/osal/rt-nil/osal.h **** 
 317:../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../os/hal/osal/rt-nil/osal.h **** 
 326:../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../os/hal/osal/rt-nil/osal.h **** 
 345:../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../os/hal/osal/rt-nil/osal.h **** 
 360:../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../os/hal/osal/rt-nil/osal.h **** 
 375:../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../os/hal/osal/rt-nil/osal.h **** 
 390:../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../os/hal/osal/rt-nil/osal.h **** 
 405:../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../os/hal/osal/rt-nil/osal.h **** 
 421:../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../os/hal/osal/rt-nil/osal.h **** 
 438:../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../os/hal/osal/rt-nil/osal.h **** 
 452:../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../os/hal/osal/rt-nil/osal.h **** 
 467:../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../os/hal/osal/rt-nil/osal.h **** 
 483:../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../os/hal/osal/rt-nil/osal.h **** 
 496:../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../os/hal/osal/rt-nil/osal.h **** 
 510:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../os/hal/osal/rt-nil/osal.h **** 
 514:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../os/hal/osal/rt-nil/osal.h **** 
 518:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../os/hal/osal/rt-nil/osal.h **** }
 520:../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../os/hal/osal/rt-nil/osal.h **** 
 522:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../os/hal/osal/rt-nil/osal.h **** 
 526:../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../os/hal/osal/rt-nil/osal.h **** 
 533:../../os/hal/osal/rt-nil/osal.h **** }
 534:../../os/hal/osal/rt-nil/osal.h **** 
 535:../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../os/hal/osal/rt-nil/osal.h **** 
 544:../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../os/hal/osal/rt-nil/osal.h **** }
 546:../../os/hal/osal/rt-nil/osal.h **** 
 547:../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../os/hal/osal/rt-nil/osal.h **** 
 554:../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../os/hal/osal/rt-nil/osal.h **** }
 556:../../os/hal/osal/rt-nil/osal.h **** 
 557:../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../os/hal/osal/rt-nil/osal.h **** 
 564:../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../os/hal/osal/rt-nil/osal.h **** }
 566:../../os/hal/osal/rt-nil/osal.h **** 
 567:../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../os/hal/osal/rt-nil/osal.h **** 
 575:../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../os/hal/osal/rt-nil/osal.h **** }
 577:../../os/hal/osal/rt-nil/osal.h **** 
 578:../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../os/hal/osal/rt-nil/osal.h **** 
 586:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../os/hal/osal/rt-nil/osal.h **** }
 588:../../os/hal/osal/rt-nil/osal.h **** 
 589:../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../os/hal/osal/rt-nil/osal.h **** 
 597:../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../os/hal/osal/rt-nil/osal.h **** }
 599:../../os/hal/osal/rt-nil/osal.h **** 
 600:../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../os/hal/osal/rt-nil/osal.h **** 
 608:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../os/hal/osal/rt-nil/osal.h **** }
 610:../../os/hal/osal/rt-nil/osal.h **** 
 611:../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../os/hal/osal/rt-nil/osal.h **** 
 626:../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../os/hal/osal/rt-nil/osal.h **** }
 628:../../os/hal/osal/rt-nil/osal.h **** 
 629:../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../os/hal/osal/rt-nil/osal.h **** 
 640:../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../os/hal/osal/rt-nil/osal.h **** }
 642:../../os/hal/osal/rt-nil/osal.h **** 
 643:../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../os/hal/osal/rt-nil/osal.h **** 
 655:../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../os/hal/osal/rt-nil/osal.h **** }
 657:../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../os/hal/osal/rt-nil/osal.h **** 
 659:../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../os/hal/osal/rt-nil/osal.h **** 
 667:../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../os/hal/osal/rt-nil/osal.h **** }
 669:../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../os/hal/osal/rt-nil/osal.h **** 
 671:../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../os/hal/osal/rt-nil/osal.h **** 
 682:../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../os/hal/osal/rt-nil/osal.h **** }
 684:../../os/hal/osal/rt-nil/osal.h **** 
 685:../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../os/hal/osal/rt-nil/osal.h **** 
 700:../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../os/hal/osal/rt-nil/osal.h **** }
 702:../../os/hal/osal/rt-nil/osal.h **** 
 703:../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../os/hal/osal/rt-nil/osal.h **** 
 715:../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../os/hal/osal/rt-nil/osal.h **** }
 717:../../os/hal/osal/rt-nil/osal.h **** 
 718:../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../os/hal/osal/rt-nil/osal.h **** 
 729:../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../os/hal/osal/rt-nil/osal.h **** }
 731:../../os/hal/osal/rt-nil/osal.h **** 
 732:../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../os/hal/osal/rt-nil/osal.h **** 
 750:../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../os/hal/osal/rt-nil/osal.h **** }
 752:../../os/hal/osal/rt-nil/osal.h **** 
 753:../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../os/hal/osal/rt-nil/osal.h **** 
 767:../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../os/hal/osal/rt-nil/osal.h **** }
 769:../../os/hal/osal/rt-nil/osal.h **** 
 770:../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../os/hal/osal/rt-nil/osal.h **** 
 784:../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../os/hal/osal/rt-nil/osal.h **** }
 786:../../os/hal/osal/rt-nil/osal.h **** 
 787:../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../os/hal/osal/rt-nil/osal.h **** 
 799:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../os/hal/osal/rt-nil/osal.h **** }
 801:../../os/hal/osal/rt-nil/osal.h **** 
 802:../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../os/hal/osal/rt-nil/osal.h **** 
 824:../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../os/hal/osal/rt-nil/osal.h **** }
 826:../../os/hal/osal/rt-nil/osal.h **** 
 827:../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../os/hal/osal/rt-nil/osal.h **** 
 839:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../os/hal/osal/rt-nil/osal.h **** }
 841:../../os/hal/osal/rt-nil/osal.h **** 
 842:../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../os/hal/osal/rt-nil/osal.h **** 
 854:../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../os/hal/osal/rt-nil/osal.h **** }
 856:../../os/hal/osal/rt-nil/osal.h **** 
 857:../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../os/hal/osal/rt-nil/osal.h **** 
 866:../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
 867:../../os/hal/osal/rt-nil/osal.h **** }
 868:../../os/hal/osal/rt-nil/osal.h **** 
 869:../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../os/hal/osal/rt-nil/osal.h **** 
 895:../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../os/hal/osal/rt-nil/osal.h **** }
 897:../../os/hal/osal/rt-nil/osal.h **** 
 898:../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../os/hal/osal/rt-nil/osal.h **** 
 908:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../os/hal/osal/rt-nil/osal.h **** }
 910:../../os/hal/osal/rt-nil/osal.h **** 
 911:../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../os/hal/osal/rt-nil/osal.h **** 
 921:../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 922:../../os/hal/osal/rt-nil/osal.h **** }
 923:../../os/hal/osal/rt-nil/osal.h **** 
 924:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 925:../../os/hal/osal/rt-nil/osal.h **** /**
 926:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes an event source object.
 927:../../os/hal/osal/rt-nil/osal.h ****  *
 928:../../os/hal/osal/rt-nil/osal.h ****  * @param[out] esp      pointer to the event source object
 929:../../os/hal/osal/rt-nil/osal.h ****  *
 930:../../os/hal/osal/rt-nil/osal.h ****  * @init
 931:../../os/hal/osal/rt-nil/osal.h ****  */
 932:../../os/hal/osal/rt-nil/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 933:../../os/hal/osal/rt-nil/osal.h **** 
 934:../../os/hal/osal/rt-nil/osal.h ****   chEvtObjectInit(esp);
 935:../../os/hal/osal/rt-nil/osal.h **** }
 936:../../os/hal/osal/rt-nil/osal.h **** #else
 937:../../os/hal/osal/rt-nil/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 938:../../os/hal/osal/rt-nil/osal.h **** 
 939:../../os/hal/osal/rt-nil/osal.h ****   osalDbgCheck(esp != NULL);
 940:../../os/hal/osal/rt-nil/osal.h **** 
 941:../../os/hal/osal/rt-nil/osal.h ****   esp->flags = (eventflags_t)0;
 942:../../os/hal/osal/rt-nil/osal.h ****   esp->cb    = NULL;
 943:../../os/hal/osal/rt-nil/osal.h ****   esp->param = NULL;
 944:../../os/hal/osal/rt-nil/osal.h **** }
 945:../../os/hal/osal/rt-nil/osal.h **** #endif
 946:../../os/hal/osal/rt-nil/osal.h **** 
 947:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 948:../../os/hal/osal/rt-nil/osal.h **** /**
 949:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Add flags to an event source object.
 950:../../os/hal/osal/rt-nil/osal.h ****  *
 951:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] esp       pointer to the event flags object
 952:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 953:../../os/hal/osal/rt-nil/osal.h ****  *
 954:../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 955:../../os/hal/osal/rt-nil/osal.h ****  */
 956:../../os/hal/osal/rt-nil/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 957:../../os/hal/osal/rt-nil/osal.h ****                                             eventflags_t flags) {
 958:../../os/hal/osal/rt-nil/osal.h **** 
 959:../../os/hal/osal/rt-nil/osal.h ****   chEvtBroadcastFlagsI(esp, flags);
 133               		.loc 2 959 0
 134 003c 80E0      		ldi r24,lo8(SD1+2)
 135 003e 90E0      		ldi r25,hi8(SD1+2)
 136               	.LVL6:
 137 0040 0E94 0000 		call chEvtBroadcastFlagsI
 138               	.LVL7:
 139               	.L4:
 140               	.LBE33:
 141               	.LBE32:
 142               	.LBE31:
 143               	.LBE30:
 264:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     set_error(sra, &SD1);
 265:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysLockFromISR();
 266:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   sdIncomingDataI(&SD1, UDR0);
 144               		.loc 1 266 0
 145 0044 6091 C600 		lds r22,198
 146 0048 80E0      		ldi r24,lo8(SD1)
 147 004a 90E0      		ldi r25,hi8(SD1)
 148 004c 0E94 0000 		call sdIncomingDataI
 149               	.LVL8:
 267:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysUnlockFromISR();
 268:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 269:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   OSAL_IRQ_EPILOGUE();
 150               		.loc 1 269 0
 151 0050 1092 0000 		sts __avr_in_isr,__zero_reg__
 152 0054 0E94 0000 		call chSchIsPreemptionRequired
 153               	.LVL9:
 154 0058 8111      		cpse r24,__zero_reg__
 155               		.loc 1 269 0 is_stmt 0 discriminator 1
 156 005a 0E94 0000 		call chSchDoPreemption
 157               	.LVL10:
 158               	.L3:
 159               	/* epilogue start */
 270:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 160               		.loc 1 270 0 is_stmt 1
 161 005e FF91      		pop r31
 162 0060 EF91      		pop r30
 163 0062 BF91      		pop r27
 164 0064 AF91      		pop r26
 165 0066 9F91      		pop r25
 166 0068 8F91      		pop r24
 167 006a 7F91      		pop r23
 168 006c 6F91      		pop r22
 169 006e 5F91      		pop r21
 170 0070 4F91      		pop r20
 171 0072 3F91      		pop r19
 172 0074 2F91      		pop r18
 173 0076 0F90      		pop r0
 174 0078 0FBE      		out __SREG__,r0
 175 007a 0F90      		pop r0
 176 007c 1F90      		pop r1
 177 007e 1895      		reti
 178               	.LVL11:
 179               	.L18:
 180               	.LBB35:
 181               	.LBB34:
 119:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysLockFromISR();
 182               		.loc 1 119 0
 183 0080 6064      		ori r22,lo8(64)
 184               	.LVL12:
 185 0082 00C0      		rjmp .L6
 186               	.LBE34:
 187               	.LBE35:
 188               		.cfi_endproc
 189               	.LFE247:
 191               		.section	.text.__vector_19,"ax",@progbits
 192               	.global	__vector_19
 194               	__vector_19:
 195               	.LFB248:
 271:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 272:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 273:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART0 TX interrupt handler.
 274:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 275:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @isr
 276:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 277:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
 196               		.loc 1 277 0
 197               		.cfi_startproc
 198 0000 1F92      		push r1
 199               	.LCFI14:
 200               		.cfi_def_cfa_offset 3
 201               		.cfi_offset 1, -2
 202 0002 0F92      		push r0
 203               	.LCFI15:
 204               		.cfi_def_cfa_offset 4
 205               		.cfi_offset 0, -3
 206 0004 0FB6      		in r0,__SREG__
 207 0006 0F92      		push r0
 208 0008 1124      		clr __zero_reg__
 209 000a 2F93      		push r18
 210               	.LCFI16:
 211               		.cfi_def_cfa_offset 5
 212               		.cfi_offset 18, -4
 213 000c 3F93      		push r19
 214               	.LCFI17:
 215               		.cfi_def_cfa_offset 6
 216               		.cfi_offset 19, -5
 217 000e 4F93      		push r20
 218               	.LCFI18:
 219               		.cfi_def_cfa_offset 7
 220               		.cfi_offset 20, -6
 221 0010 5F93      		push r21
 222               	.LCFI19:
 223               		.cfi_def_cfa_offset 8
 224               		.cfi_offset 21, -7
 225 0012 6F93      		push r22
 226               	.LCFI20:
 227               		.cfi_def_cfa_offset 9
 228               		.cfi_offset 22, -8
 229 0014 7F93      		push r23
 230               	.LCFI21:
 231               		.cfi_def_cfa_offset 10
 232               		.cfi_offset 23, -9
 233 0016 8F93      		push r24
 234               	.LCFI22:
 235               		.cfi_def_cfa_offset 11
 236               		.cfi_offset 24, -10
 237 0018 9F93      		push r25
 238               	.LCFI23:
 239               		.cfi_def_cfa_offset 12
 240               		.cfi_offset 25, -11
 241 001a AF93      		push r26
 242               	.LCFI24:
 243               		.cfi_def_cfa_offset 13
 244               		.cfi_offset 26, -12
 245 001c BF93      		push r27
 246               	.LCFI25:
 247               		.cfi_def_cfa_offset 14
 248               		.cfi_offset 27, -13
 249 001e EF93      		push r30
 250               	.LCFI26:
 251               		.cfi_def_cfa_offset 15
 252               		.cfi_offset 30, -14
 253 0020 FF93      		push r31
 254               	.LCFI27:
 255               		.cfi_def_cfa_offset 16
 256               		.cfi_offset 31, -15
 257               	/* prologue: Signal */
 258               	/* frame size = 0 */
 259               	/* stack size = 15 */
 260               	.L__stack_usage = 15
 278:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   msg_t b;
 279:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 280:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   OSAL_IRQ_PROLOGUE();
 261               		.loc 1 280 0
 262 0022 81E0      		ldi r24,lo8(1)
 263 0024 8093 0000 		sts __avr_in_isr,r24
 281:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 282:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysLockFromISR();
 283:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   b = sdRequestDataI(&SD1);
 264               		.loc 1 283 0
 265 0028 80E0      		ldi r24,lo8(SD1)
 266 002a 90E0      		ldi r25,hi8(SD1)
 267 002c 0E94 0000 		call sdRequestDataI
 268               	.LVL13:
 284:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysUnlockFromISR();
 285:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (b < MSG_OK)
 269               		.loc 1 285 0
 270 0030 97FD      		sbrc r25,7
 271 0032 00C0      		rjmp .L26
 286:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     UCSR0B &= ~(1 << UDRIE0);
 287:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   else
 288:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     UDR0 = b;
 272               		.loc 1 288 0
 273 0034 8093 C600 		sts 198,r24
 274               	.LVL14:
 275               	.L21:
 289:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 290:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   OSAL_IRQ_EPILOGUE();
 276               		.loc 1 290 0
 277 0038 1092 0000 		sts __avr_in_isr,__zero_reg__
 278 003c 0E94 0000 		call chSchIsPreemptionRequired
 279               	.LVL15:
 280 0040 8111      		cpse r24,__zero_reg__
 281               		.loc 1 290 0 is_stmt 0 discriminator 1
 282 0042 0E94 0000 		call chSchDoPreemption
 283               	.LVL16:
 284               	.L19:
 285               	/* epilogue start */
 291:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 286               		.loc 1 291 0 is_stmt 1
 287 0046 FF91      		pop r31
 288 0048 EF91      		pop r30
 289 004a BF91      		pop r27
 290 004c AF91      		pop r26
 291 004e 9F91      		pop r25
 292 0050 8F91      		pop r24
 293 0052 7F91      		pop r23
 294 0054 6F91      		pop r22
 295 0056 5F91      		pop r21
 296 0058 4F91      		pop r20
 297 005a 3F91      		pop r19
 298 005c 2F91      		pop r18
 299 005e 0F90      		pop r0
 300 0060 0FBE      		out __SREG__,r0
 301 0062 0F90      		pop r0
 302 0064 1F90      		pop r1
 303 0066 1895      		reti
 304               	.LVL17:
 305               	.L26:
 286:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     UCSR0B &= ~(1 << UDRIE0);
 306               		.loc 1 286 0
 307 0068 8091 C100 		lds r24,193
 308               	.LVL18:
 309 006c 8F7D      		andi r24,lo8(-33)
 310 006e 8093 C100 		sts 193,r24
 311 0072 00C0      		rjmp .L21
 312               		.cfi_endproc
 313               	.LFE248:
 315               		.section	.text.sd_lld_init,"ax",@progbits
 316               	.global	sd_lld_init
 318               	sd_lld_init:
 319               	.LFB249:
 292:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif /* AVR_SERIAL_USE_USART0 */
 293:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 294:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART1 || defined(__DOXYGEN__)
 295:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 296:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART1 RX interrupt handler.
 297:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 298:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @isr
 299:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 300:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** OSAL_IRQ_HANDLER(AVR_SD2_RX_VECT) {
 301:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   uint8_t sra;
 302:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 303:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   OSAL_IRQ_PROLOGUE();
 304:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 305:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   sra = UCSR1A;
 306:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (sra & ((1 << DOR1) | (1 << UPE1) | (1 << FE1)))
 307:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     set_error(sra, &SD2);
 308:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysLockFromISR();
 309:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   sdIncomingDataI(&SD2, UDR1);
 310:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysUnlockFromISR();
 311:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 312:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   OSAL_IRQ_EPILOGUE();
 313:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 314:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 315:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 316:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   USART1 TX interrupt handler.
 317:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 318:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @isr
 319:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 320:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** OSAL_IRQ_HANDLER(AVR_SD2_TX_VECT) {
 321:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   msg_t b;
 322:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 323:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   OSAL_IRQ_PROLOGUE();
 324:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 325:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysLockFromISR();
 326:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   b = sdRequestDataI(&SD2);
 327:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   osalSysUnlockFromISR();
 328:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (b < MSG_OK)
 329:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     UCSR1B &= ~(1 << UDRIE1);
 330:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   else
 331:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     UDR1 = b;
 332:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 333:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   OSAL_IRQ_EPILOGUE();
 334:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 335:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif /* AVR_SERIAL_USE_USART1 */
 336:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 337:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
 338:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /* Driver exported functions.                                               */
 339:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /*==========================================================================*/
 340:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 341:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 342:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   Low level serial driver initialization.
 343:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 344:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @notapi
 345:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 346:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** void sd_lld_init(void) {
 320               		.loc 1 346 0
 321               		.cfi_startproc
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 347:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 348:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART0
 349:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   sdObjectInit(&SD1, NULL, notify1);
 326               		.loc 1 349 0
 327 0000 40E0      		ldi r20,lo8(gs(notify1))
 328 0002 50E0      		ldi r21,hi8(gs(notify1))
 329 0004 70E0      		ldi r23,0
 330 0006 60E0      		ldi r22,0
 331 0008 80E0      		ldi r24,lo8(SD1)
 332 000a 90E0      		ldi r25,hi8(SD1)
 333 000c 0C94 0000 		jmp sdObjectInit
 334               	.LVL19:
 335               		.cfi_endproc
 336               	.LFE249:
 338               		.section	.text.sd_lld_start,"ax",@progbits
 339               	.global	sd_lld_start
 341               	sd_lld_start:
 342               	.LFB250:
 350:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 351:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART1
 352:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   sdObjectInit(&SD2, NULL, notify2);
 353:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 354:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 355:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 356:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 357:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   Low level serial driver configuration and (re)start.
 358:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 359:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 360:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @param[in] config    the architecture-dependent serial driver configuration.
 361:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *                      If this parameter is set to @p NULL then a default
 362:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *                      configuration is used.
 363:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 364:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @notapi
 365:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 366:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 343               		.loc 1 366 0
 344               		.cfi_startproc
 345               	.LVL20:
 346               	/* prologue: function */
 347               	/* frame size = 0 */
 348               	/* stack size = 0 */
 349               	.L__stack_usage = 0
 367:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 368:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (config == NULL)
 350               		.loc 1 368 0
 351 0000 6115      		cp r22,__zero_reg__
 352 0002 7105      		cpc r23,__zero_reg__
 353 0004 01F0      		breq .L29
 369:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     config = &default_config;
 370:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 371:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART0
 372:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (&SD1 == sdp) {
 354               		.loc 1 372 0
 355 0006 8050      		subi r24,lo8(SD1)
 356 0008 9040      		sbci r25,hi8(SD1)
 357 000a 01F0      		breq .L40
 358               	.LVL21:
 359               	.L28:
 360               	/* epilogue start */
 373:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     usart0_init(config);
 374:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     return;
 375:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   }
 376:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 377:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART1
 378:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (&SD2 == sdp) {
 379:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     usart1_init(config);
 380:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     return;
 381:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   }
 382:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 383:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 361               		.loc 1 383 0
 362 000c 0895      		ret
 363               	.LVL22:
 364               	.L29:
 372:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     usart0_init(config);
 365               		.loc 1 372 0
 366 000e 8050      		subi r24,lo8(SD1)
 367 0010 9040      		sbci r25,hi8(SD1)
 368 0012 01F4      		brne .L28
 369               	.LVL23:
 370               	.LBB38:
 371               	.LBB39:
 141:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UBRR0H = (config->sc_brr >> 8) & 0x0f;
 372               		.loc 1 141 0
 373 0014 83E3      		ldi r24,lo8(51)
 374               	.LVL24:
 375 0016 8093 C400 		sts 196,r24
 142:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0A = (1 << U2X0);
 376               		.loc 1 142 0
 377 001a 1092 C500 		sts 197,__zero_reg__
 143:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 378               		.loc 1 143 0
 379 001e 82E0      		ldi r24,lo8(2)
 380 0020 8093 C000 		sts 192,r24
 144:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   switch (config->sc_bits_per_char) {
 381               		.loc 1 144 0
 382 0024 88E9      		ldi r24,lo8(-104)
 383 0026 8093 C100 		sts 193,r24
 384               	.LVL25:
 385               	.L39:
 161:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   }
 386               		.loc 1 161 0
 387 002a 86E0      		ldi r24,lo8(6)
 388 002c 00C0      		rjmp .L33
 389               	.LVL26:
 390               	.L40:
 141:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UBRR0H = (config->sc_brr >> 8) & 0x0f;
 391               		.loc 1 141 0
 392 002e FB01      		movw r30,r22
 393 0030 8081      		ld r24,Z
 394               	.LVL27:
 395 0032 8093 C400 		sts 196,r24
 142:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0A = (1 << U2X0);
 396               		.loc 1 142 0
 397 0036 8181      		ldd r24,Z+1
 398 0038 8F70      		andi r24,lo8(15)
 399 003a 8093 C500 		sts 197,r24
 143:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 400               		.loc 1 143 0
 401 003e 82E0      		ldi r24,lo8(2)
 402 0040 8093 C000 		sts 192,r24
 144:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   switch (config->sc_bits_per_char) {
 403               		.loc 1 144 0
 404 0044 88E9      		ldi r24,lo8(-104)
 405 0046 8093 C100 		sts 193,r24
 145:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   case USART_CHAR_SIZE_5:
 406               		.loc 1 145 0
 407 004a 8281      		ldd r24,Z+2
 408 004c 8130      		cpi r24,lo8(1)
 409 004e 01F0      		breq .L32
 410 0050 00F0      		brlo .L37
 411 0052 8230      		cpi r24,lo8(2)
 412 0054 01F0      		breq .L34
 413 0056 8430      		cpi r24,lo8(4)
 414 0058 01F4      		brne .L39
 156:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
 415               		.loc 1 156 0
 416 005a 8091 C100 		lds r24,193
 417 005e 8460      		ori r24,lo8(4)
 418 0060 8093 C100 		sts 193,r24
 419               	.LVL28:
 157:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 420               		.loc 1 157 0
 421 0064 86E0      		ldi r24,lo8(6)
 422               	.LVL29:
 423               	.L33:
 167:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 424               		.loc 1 167 0
 425 0066 8093 C200 		sts 194,r24
 426 006a 0895      		ret
 427               	.LVL30:
 428               	.L34:
 153:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 429               		.loc 1 153 0
 430 006c 84E0      		ldi r24,lo8(4)
 431 006e 00C0      		rjmp .L33
 432               	.LVL31:
 433               	.L37:
 147:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 434               		.loc 1 147 0
 435 0070 80E0      		ldi r24,0
 436 0072 00C0      		rjmp .L33
 437               	.L32:
 150:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     break;
 438               		.loc 1 150 0
 439 0074 82E0      		ldi r24,lo8(2)
 440 0076 00C0      		rjmp .L33
 441               	.LBE39:
 442               	.LBE38:
 443               		.cfi_endproc
 444               	.LFE250:
 446               		.section	.text.sd_lld_stop,"ax",@progbits
 447               	.global	sd_lld_stop
 449               	sd_lld_stop:
 450               	.LFB251:
 384:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 385:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** /**
 386:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @brief   Low level serial driver stop.
 387:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @details De-initializes the USART, stops the associated clock, resets the
 388:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *          interrupt vector.
 389:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 390:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 391:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  *
 392:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  * @notapi
 393:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****  */
 394:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** void sd_lld_stop(SerialDriver *sdp) {
 451               		.loc 1 394 0
 452               		.cfi_startproc
 453               	.LVL32:
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 0 */
 457               	.L__stack_usage = 0
 395:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** 
 396:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART0
 397:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (&SD1 == sdp)
 458               		.loc 1 397 0
 459 0000 8050      		subi r24,lo8(SD1)
 460 0002 9040      		sbci r25,hi8(SD1)
 461 0004 01F0      		breq .L43
 462               	/* epilogue start */
 398:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     usart0_deinit();
 399:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 400:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if AVR_SERIAL_USE_USART1
 401:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   if (&SD2 == sdp)
 402:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****     usart1_deinit();
 403:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 404:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** }
 463               		.loc 1 404 0
 464 0006 0895      		ret
 465               	.L43:
 466               	.LBB40:
 467               	.LBB41:
 176:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c ****   UCSR0B = 0;
 468               		.loc 1 176 0
 469 0008 1092 C000 		sts 192,__zero_reg__
 177:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #if defined(__AVR_ATmega162__)
 470               		.loc 1 177 0
 471 000c 1092 C100 		sts 193,__zero_reg__
 181:../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.c **** #endif
 472               		.loc 1 181 0
 473 0010 1092 C200 		sts 194,__zero_reg__
 474               	/* epilogue start */
 475               	.LBE41:
 476               	.LBE40:
 477               		.loc 1 404 0
 478 0014 0895      		ret
 479               		.cfi_endproc
 480               	.LFE251:
 482               		.comm	SD1,73,1
 483               		.text
 484               	.Letext0:
 485               		.file 3 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 486               		.file 4 "/usr/lib/avr/include/stdint.h"
 487               		.file 5 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 488               		.file 6 "../../os/rt/include/chearly.h"
 489               		.file 7 "../../os/rt/include/chobjects.h"
 490               		.file 8 "../../os/rt/include/chrfcu.h"
 491               		.file 9 "../../os/rt/include/chdebug.h"
 492               		.file 10 "../../os/rt/include/chtime.h"
 493               		.file 11 "../../os/rt/include/chlists.h"
 494               		.file 12 "../../os/common/ports/AVR/chcore.h"
 495               		.file 13 "../../os/rt/include/chsem.h"
 496               		.file 14 "../../os/rt/include/chmtx.h"
 497               		.file 15 "../../os/rt/include/chsys.h"
 498               		.file 16 "../../os/rt/include/chregistry.h"
 499               		.file 17 "../../os/rt/include/chevents.h"
 500               		.file 18 "../../os/oslib/include/chmemcore.h"
 501               		.file 19 "../../os/hal/include/hal_queues.h"
 502               		.file 20 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 503               		.file 21 "../../os/hal/include/hal_pwm.h"
 504               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_pwm_lld.h"
 505               		.file 23 "../../os/hal/include/hal_serial.h"
 506               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
 507               		.file 25 "../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_serial_lld.c
     /tmp/cctizJAZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctizJAZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctizJAZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctizJAZ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctizJAZ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cctizJAZ.s:12     .text.notify1:0000000000000000 notify1
     /tmp/cctizJAZ.s:38     .text.__vector_18:0000000000000000 __vector_18
                            *COM*:0000000000000049 SD1
     /tmp/cctizJAZ.s:194    .text.__vector_19:0000000000000000 __vector_19
     /tmp/cctizJAZ.s:318    .text.sd_lld_init:0000000000000000 sd_lld_init
     /tmp/cctizJAZ.s:341    .text.sd_lld_start:0000000000000000 sd_lld_start
     /tmp/cctizJAZ.s:449    .text.sd_lld_stop:0000000000000000 sd_lld_stop

UNDEFINED SYMBOLS
__avr_in_isr
chEvtBroadcastFlagsI
sdIncomingDataI
chSchIsPreemptionRequired
chSchDoPreemption
sdRequestDataI
sdObjectInit
__do_clear_bss
