   1               		.file	"chmboxes.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chMBObjectInit,"ax",@progbits
  11               	.global	chMBObjectInit
  13               	chMBObjectInit:
  14               	.LFB190:
  15               		.file 1 "../../os/oslib/src/chmboxes.c"
   1:../../os/oslib/src/chmboxes.c **** /*
   2:../../os/oslib/src/chmboxes.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/oslib/src/chmboxes.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/oslib/src/chmboxes.c **** 
   5:../../os/oslib/src/chmboxes.c ****     This file is part of ChibiOS.
   6:../../os/oslib/src/chmboxes.c **** 
   7:../../os/oslib/src/chmboxes.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/oslib/src/chmboxes.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/oslib/src/chmboxes.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/oslib/src/chmboxes.c **** 
  11:../../os/oslib/src/chmboxes.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/oslib/src/chmboxes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/oslib/src/chmboxes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/oslib/src/chmboxes.c ****     GNU General Public License for more details.
  15:../../os/oslib/src/chmboxes.c **** 
  16:../../os/oslib/src/chmboxes.c ****     You should have received a copy of the GNU General Public License
  17:../../os/oslib/src/chmboxes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/oslib/src/chmboxes.c **** */
  19:../../os/oslib/src/chmboxes.c **** 
  20:../../os/oslib/src/chmboxes.c **** /**
  21:../../os/oslib/src/chmboxes.c ****  * @file    oslib/src/chmboxes.c
  22:../../os/oslib/src/chmboxes.c ****  * @brief   Mailboxes code.
  23:../../os/oslib/src/chmboxes.c ****  *
  24:../../os/oslib/src/chmboxes.c ****  * @addtogroup oslib_mailboxes
  25:../../os/oslib/src/chmboxes.c ****  * @details Asynchronous messages.
  26:../../os/oslib/src/chmboxes.c ****  *          <h2>Operation mode</h2>
  27:../../os/oslib/src/chmboxes.c ****  *          A mailbox is an asynchronous communication mechanism.<br>
  28:../../os/oslib/src/chmboxes.c ****  *          Operations defined for mailboxes:
  29:../../os/oslib/src/chmboxes.c ****  *          - <b>Post</b>: Posts a message on the mailbox in FIFO order.
  30:../../os/oslib/src/chmboxes.c ****  *          - <b>Post Ahead</b>: Posts a message on the mailbox with urgent
  31:../../os/oslib/src/chmboxes.c ****  *            priority.
  32:../../os/oslib/src/chmboxes.c ****  *          - <b>Fetch</b>: A message is fetched from the mailbox and removed
  33:../../os/oslib/src/chmboxes.c ****  *            from the queue.
  34:../../os/oslib/src/chmboxes.c ****  *          - <b>Reset</b>: The mailbox is emptied and all the stored messages
  35:../../os/oslib/src/chmboxes.c ****  *            are lost.
  36:../../os/oslib/src/chmboxes.c ****  *          .
  37:../../os/oslib/src/chmboxes.c ****  *          A message is a variable of type msg_t that is guaranteed to have
  38:../../os/oslib/src/chmboxes.c ****  *          the same size of and be compatible with (data) pointers (anyway an
  39:../../os/oslib/src/chmboxes.c ****  *          explicit cast is needed).
  40:../../os/oslib/src/chmboxes.c ****  *          If larger messages need to be exchanged then a pointer to a
  41:../../os/oslib/src/chmboxes.c ****  *          structure can be posted in the mailbox but the posting side has
  42:../../os/oslib/src/chmboxes.c ****  *          no predefined way to know when the message has been processed. A
  43:../../os/oslib/src/chmboxes.c ****  *          possible approach is to allocate memory (from a memory pool for
  44:../../os/oslib/src/chmboxes.c ****  *          example) from the posting side and free it on the fetching side.
  45:../../os/oslib/src/chmboxes.c ****  *          Another approach is to set a "done" flag into the structure pointed
  46:../../os/oslib/src/chmboxes.c ****  *          by the message.
  47:../../os/oslib/src/chmboxes.c ****  * @pre     In order to use the mailboxes APIs the @p CH_CFG_USE_MAILBOXES
  48:../../os/oslib/src/chmboxes.c ****  *          option must be enabled in @p chconf.h.
  49:../../os/oslib/src/chmboxes.c ****  * @note    Compatible with RT and NIL.
  50:../../os/oslib/src/chmboxes.c ****  * @{
  51:../../os/oslib/src/chmboxes.c ****  */
  52:../../os/oslib/src/chmboxes.c **** 
  53:../../os/oslib/src/chmboxes.c **** #include "ch.h"
  54:../../os/oslib/src/chmboxes.c **** 
  55:../../os/oslib/src/chmboxes.c **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  56:../../os/oslib/src/chmboxes.c **** 
  57:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  58:../../os/oslib/src/chmboxes.c **** /* Module exported variables.                                                */
  59:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  60:../../os/oslib/src/chmboxes.c **** 
  61:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  62:../../os/oslib/src/chmboxes.c **** /* Module local types.                                                       */
  63:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  64:../../os/oslib/src/chmboxes.c **** 
  65:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  66:../../os/oslib/src/chmboxes.c **** /* Module local variables.                                                   */
  67:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  68:../../os/oslib/src/chmboxes.c **** 
  69:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  70:../../os/oslib/src/chmboxes.c **** /* Module local functions.                                                   */
  71:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  72:../../os/oslib/src/chmboxes.c **** 
  73:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  74:../../os/oslib/src/chmboxes.c **** /* Module exported functions.                                                */
  75:../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  76:../../os/oslib/src/chmboxes.c **** 
  77:../../os/oslib/src/chmboxes.c **** /**
  78:../../os/oslib/src/chmboxes.c ****  * @brief   Initializes a @p mailbox_t object.
  79:../../os/oslib/src/chmboxes.c ****  *
  80:../../os/oslib/src/chmboxes.c ****  * @param[out] mbp      the pointer to the @p mailbox_t structure to be
  81:../../os/oslib/src/chmboxes.c ****  *                      initialized
  82:../../os/oslib/src/chmboxes.c ****  * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
  83:../../os/oslib/src/chmboxes.c ****  * @param[in] n         number of elements in the buffer array
  84:../../os/oslib/src/chmboxes.c ****  *
  85:../../os/oslib/src/chmboxes.c ****  * @init
  86:../../os/oslib/src/chmboxes.c ****  */
  87:../../os/oslib/src/chmboxes.c **** void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {
  16               		.loc 1 87 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
  88:../../os/oslib/src/chmboxes.c **** 
  89:../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));
  90:../../os/oslib/src/chmboxes.c **** 
  91:../../os/oslib/src/chmboxes.c ****   mbp->buffer = buf;
  24               		.loc 1 91 0
  25 0002 7183      		std Z+1,r23
  26 0004 6083      		st Z,r22
  92:../../os/oslib/src/chmboxes.c ****   mbp->rdptr  = buf;
  27               		.loc 1 92 0
  28 0006 7783      		std Z+7,r23
  29 0008 6683      		std Z+6,r22
  93:../../os/oslib/src/chmboxes.c ****   mbp->wrptr  = buf;
  30               		.loc 1 93 0
  31 000a 7583      		std Z+5,r23
  32 000c 6483      		std Z+4,r22
  94:../../os/oslib/src/chmboxes.c ****   mbp->top    = &buf[n];
  33               		.loc 1 94 0
  34 000e 440F      		lsl r20
  35 0010 551F      		rol r21
  36               	.LVL1:
  37 0012 640F      		add r22,r20
  38 0014 751F      		adc r23,r21
  39               	.LVL2:
  40 0016 7383      		std Z+3,r23
  41 0018 6283      		std Z+2,r22
  95:../../os/oslib/src/chmboxes.c ****   mbp->cnt    = (size_t)0;
  42               		.loc 1 95 0
  43 001a 1186      		std Z+9,__zero_reg__
  44 001c 1086      		std Z+8,__zero_reg__
  96:../../os/oslib/src/chmboxes.c ****   mbp->reset  = false;
  45               		.loc 1 96 0
  46 001e 1286      		std Z+10,__zero_reg__
  47               	.LVL3:
  48               	.LBB82:
  49               	.LBB83:
  50               		.file 2 "../../os/rt/include/chthreads.h"
   1:../../os/rt/include/chthreads.h **** /*
   2:../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chthreads.h **** 
   5:../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chthreads.h **** 
   7:../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chthreads.h **** 
  11:../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chthreads.h **** 
  16:../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chthreads.h **** */
  19:../../os/rt/include/chthreads.h **** 
  20:../../os/rt/include/chthreads.h **** /**
  21:../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../os/rt/include/chthreads.h ****  *
  24:../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../os/rt/include/chthreads.h ****  * @{
  26:../../os/rt/include/chthreads.h ****  */
  27:../../os/rt/include/chthreads.h **** 
  28:../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../os/rt/include/chthreads.h **** 
  31:../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../os/rt/include/chthreads.h **** 
  33:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../os/rt/include/chthreads.h **** 
  37:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../os/rt/include/chthreads.h **** 
  41:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../os/rt/include/chthreads.h **** 
  45:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../os/rt/include/chthreads.h **** 
  49:../../os/rt/include/chthreads.h **** /**
  50:../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../os/rt/include/chthreads.h ****  */
  52:../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../os/rt/include/chthreads.h **** 
  54:../../os/rt/include/chthreads.h **** /**
  55:../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../os/rt/include/chthreads.h ****  */
  57:../../os/rt/include/chthreads.h **** typedef struct {
  58:../../os/rt/include/chthreads.h ****   /**
  59:../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../os/rt/include/chthreads.h ****    */
  61:../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../os/rt/include/chthreads.h ****   /**
  63:../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../os/rt/include/chthreads.h ****    */
  65:../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../os/rt/include/chthreads.h ****   /**
  67:../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../os/rt/include/chthreads.h ****    */
  69:../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../os/rt/include/chthreads.h ****   /**
  71:../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../os/rt/include/chthreads.h ****    */
  73:../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../os/rt/include/chthreads.h ****   /**
  75:../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../os/rt/include/chthreads.h ****    */
  77:../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../os/rt/include/chthreads.h ****   /**
  79:../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../os/rt/include/chthreads.h ****    */
  81:../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../os/rt/include/chthreads.h ****   /**
  84:../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../os/rt/include/chthreads.h ****    */
  86:../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../os/rt/include/chthreads.h **** #endif
  88:../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../os/rt/include/chthreads.h **** 
  90:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  91:../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  92:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  93:../../os/rt/include/chthreads.h **** 
  94:../../os/rt/include/chthreads.h **** /**
  95:../../os/rt/include/chthreads.h ****  * @name    Threads queues
  96:../../os/rt/include/chthreads.h ****  * @{
  97:../../os/rt/include/chthreads.h ****  */
  98:../../os/rt/include/chthreads.h **** /**
  99:../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 100:../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 101:../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 102:../../os/rt/include/chthreads.h ****  *
 103:../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 104:../../os/rt/include/chthreads.h ****  */
 105:../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 106:../../os/rt/include/chthreads.h **** 
 107:../../os/rt/include/chthreads.h **** /**
 108:../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 109:../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 110:../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 111:../../os/rt/include/chthreads.h ****  *
 112:../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 113:../../os/rt/include/chthreads.h ****  */
 114:../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 115:../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 116:../../os/rt/include/chthreads.h **** /** @} */
 117:../../os/rt/include/chthreads.h **** 
 118:../../os/rt/include/chthreads.h **** /**
 119:../../os/rt/include/chthreads.h ****  * @name    Working Areas
 120:../../os/rt/include/chthreads.h ****  * @{
 121:../../os/rt/include/chthreads.h ****  */
 122:../../os/rt/include/chthreads.h **** /**
 123:../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 124:../../os/rt/include/chthreads.h ****  *
 125:../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 126:../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 127:../../os/rt/include/chthreads.h ****  *
 128:../../os/rt/include/chthreads.h ****  * @api
 129:../../os/rt/include/chthreads.h ****  */
 130:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 131:../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 132:../../os/rt/include/chthreads.h **** 
 133:../../os/rt/include/chthreads.h **** /**
 134:../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 135:../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 136:../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 137:../../os/rt/include/chthreads.h ****  *
 138:../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 139:../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 140:../../os/rt/include/chthreads.h ****  *
 141:../../os/rt/include/chthreads.h ****  * @api
 142:../../os/rt/include/chthreads.h ****  */
 143:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 144:../../os/rt/include/chthreads.h **** 
 145:../../os/rt/include/chthreads.h **** /**
 146:../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 147:../../os/rt/include/chthreads.h ****  *
 148:../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 149:../../os/rt/include/chthreads.h ****  */
 150:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 151:../../os/rt/include/chthreads.h **** 
 152:../../os/rt/include/chthreads.h **** /**
 153:../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 154:../../os/rt/include/chthreads.h ****  *
 155:../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 156:../../os/rt/include/chthreads.h ****  */
 157:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 158:../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 159:../../os/rt/include/chthreads.h **** /** @} */
 160:../../os/rt/include/chthreads.h **** 
 161:../../os/rt/include/chthreads.h **** /**
 162:../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 163:../../os/rt/include/chthreads.h ****  * @{
 164:../../os/rt/include/chthreads.h ****  */
 165:../../os/rt/include/chthreads.h **** /**
 166:../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 167:../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 168:../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 169:../../os/rt/include/chthreads.h ****  */
 170:../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 171:../../os/rt/include/chthreads.h **** /** @} */
 172:../../os/rt/include/chthreads.h **** 
 173:../../os/rt/include/chthreads.h **** /**
 174:../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 175:../../os/rt/include/chthreads.h ****  * @{
 176:../../os/rt/include/chthreads.h ****  */
 177:../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 178:../../os/rt/include/chthreads.h **** /**
 179:../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 180:../../os/rt/include/chthreads.h ****  *
 181:../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 182:../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 183:../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 184:../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 185:../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 186:../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 187:../../os/rt/include/chthreads.h ****  */
 188:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 189:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 190:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 191:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 192:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 193:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 194:../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 195:../../os/rt/include/chthreads.h ****   NULL                                                                      \
 196:../../os/rt/include/chthreads.h **** }
 197:../../os/rt/include/chthreads.h **** #else
 198:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 199:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 200:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 201:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 202:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 203:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 204:../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 205:../../os/rt/include/chthreads.h **** }
 206:../../os/rt/include/chthreads.h **** #endif
 207:../../os/rt/include/chthreads.h **** 
 208:../../os/rt/include/chthreads.h **** /**
 209:../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../os/rt/include/chthreads.h ****  *
 211:../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 218:../../os/rt/include/chthreads.h ****  */
 219:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 220:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 221:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 222:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 223:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 224:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 225:../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 226:../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 227:../../os/rt/include/chthreads.h **** }
 228:../../os/rt/include/chthreads.h **** /** @} */
 229:../../os/rt/include/chthreads.h **** 
 230:../../os/rt/include/chthreads.h **** /**
 231:../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 232:../../os/rt/include/chthreads.h ****  * @{
 233:../../os/rt/include/chthreads.h ****  */
 234:../../os/rt/include/chthreads.h **** /**
 235:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 236:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 237:../../os/rt/include/chthreads.h ****  *          system tick clock.
 238:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 239:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 240:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 241:../../os/rt/include/chthreads.h ****  *          converted.
 242:../../os/rt/include/chthreads.h ****  *
 243:../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 244:../../os/rt/include/chthreads.h ****  *
 245:../../os/rt/include/chthreads.h ****  * @api
 246:../../os/rt/include/chthreads.h ****  */
 247:../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 248:../../os/rt/include/chthreads.h **** 
 249:../../os/rt/include/chthreads.h **** /**
 250:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 251:../../os/rt/include/chthreads.h ****  *          milliseconds.
 252:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 253:../../os/rt/include/chthreads.h ****  *          system tick clock.
 254:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 255:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 256:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 257:../../os/rt/include/chthreads.h ****  *          converted.
 258:../../os/rt/include/chthreads.h ****  *
 259:../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 260:../../os/rt/include/chthreads.h ****  *
 261:../../os/rt/include/chthreads.h ****  * @api
 262:../../os/rt/include/chthreads.h ****  */
 263:../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 264:../../os/rt/include/chthreads.h **** 
 265:../../os/rt/include/chthreads.h **** /**
 266:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 267:../../os/rt/include/chthreads.h ****  *          microseconds.
 268:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 269:../../os/rt/include/chthreads.h ****  *          system tick clock.
 270:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 271:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 272:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 273:../../os/rt/include/chthreads.h ****  *          converted.
 274:../../os/rt/include/chthreads.h ****  *
 275:../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 276:../../os/rt/include/chthreads.h ****  *
 277:../../os/rt/include/chthreads.h ****  * @api
 278:../../os/rt/include/chthreads.h ****  */
 279:../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 280:../../os/rt/include/chthreads.h **** /** @} */
 281:../../os/rt/include/chthreads.h **** 
 282:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 283:../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 284:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 285:../../os/rt/include/chthreads.h **** 
 286:../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 287:../../os/rt/include/chthreads.h **** extern "C" {
 288:../../os/rt/include/chthreads.h **** #endif
 289:../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 290:../../os/rt/include/chthreads.h ****                                thread_t *tp,
 291:../../os/rt/include/chthreads.h ****                                const char *name,
 292:../../os/rt/include/chthreads.h ****                                tprio_t prio);
 293:../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 294:../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 295:../../os/rt/include/chthreads.h **** #endif
 296:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 297:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 298:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 299:../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 300:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 301:../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 302:../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 303:../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 304:../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 305:../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 306:../../os/rt/include/chthreads.h **** #endif
 307:../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 308:../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 309:../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 310:../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 311:../../os/rt/include/chthreads.h **** #endif
 312:../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 313:../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 314:../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 315:../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 316:../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 317:../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 318:../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 319:../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 320:../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 321:../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 322:../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 323:../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 324:../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 325:../../os/rt/include/chthreads.h ****   void chThdYield(void);
 326:../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 327:../../os/rt/include/chthreads.h **** }
 328:../../os/rt/include/chthreads.h **** #endif
 329:../../os/rt/include/chthreads.h **** 
 330:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 331:../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 332:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 333:../../os/rt/include/chthreads.h **** 
 334:../../os/rt/include/chthreads.h **** /**
 335:../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 336:../../os/rt/include/chthreads.h ****  *
 337:../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 338:../../os/rt/include/chthreads.h ****  *
 339:../../os/rt/include/chthreads.h ****  * @xclass
 340:../../os/rt/include/chthreads.h ****  */
 341:../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 342:../../os/rt/include/chthreads.h **** 
 343:../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
 344:../../os/rt/include/chthreads.h **** }
 345:../../os/rt/include/chthreads.h **** 
 346:../../os/rt/include/chthreads.h **** /**
 347:../../os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 348:../../os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 349:../../os/rt/include/chthreads.h ****  *
 350:../../os/rt/include/chthreads.h ****  * @return              The current thread priority.
 351:../../os/rt/include/chthreads.h ****  *
 352:../../os/rt/include/chthreads.h ****  * @xclass
 353:../../os/rt/include/chthreads.h ****  */
 354:../../os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 355:../../os/rt/include/chthreads.h **** 
 356:../../os/rt/include/chthreads.h ****   return chThdGetSelfX()->hdr.pqueue.prio;
 357:../../os/rt/include/chthreads.h **** }
 358:../../os/rt/include/chthreads.h **** 
 359:../../os/rt/include/chthreads.h **** /**
 360:../../os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 361:../../os/rt/include/chthreads.h ****  * @note    This function is only available when the
 362:../../os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 363:../../os/rt/include/chthreads.h ****  *
 364:../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 365:../../os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 366:../../os/rt/include/chthreads.h ****  *
 367:../../os/rt/include/chthreads.h ****  * @xclass
 368:../../os/rt/include/chthreads.h ****  */
 369:../../os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 370:../../os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 371:../../os/rt/include/chthreads.h **** 
 372:../../os/rt/include/chthreads.h ****   return tp->time;
 373:../../os/rt/include/chthreads.h **** }
 374:../../os/rt/include/chthreads.h **** #endif
 375:../../os/rt/include/chthreads.h **** 
 376:../../os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 377:../../os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 378:../../os/rt/include/chthreads.h **** /**
 379:../../os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 380:../../os/rt/include/chthreads.h ****  *
 381:../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 382:../../os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 383:../../os/rt/include/chthreads.h ****  *
 384:../../os/rt/include/chthreads.h ****  * @xclass
 385:../../os/rt/include/chthreads.h ****  */
 386:../../os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 387:../../os/rt/include/chthreads.h **** 
 388:../../os/rt/include/chthreads.h ****   return tp->wabase;
 389:../../os/rt/include/chthreads.h **** }
 390:../../os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 391:../../os/rt/include/chthreads.h **** 
 392:../../os/rt/include/chthreads.h **** /**
 393:../../os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 394:../../os/rt/include/chthreads.h ****  *
 395:../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 396:../../os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 397:../../os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 398:../../os/rt/include/chthreads.h ****  *
 399:../../os/rt/include/chthreads.h ****  * @xclass
 400:../../os/rt/include/chthreads.h ****  */
 401:../../os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 402:../../os/rt/include/chthreads.h **** 
 403:../../os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 404:../../os/rt/include/chthreads.h **** }
 405:../../os/rt/include/chthreads.h **** 
 406:../../os/rt/include/chthreads.h **** /**
 407:../../os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 408:../../os/rt/include/chthreads.h ****  *
 409:../../os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 410:../../os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 411:../../os/rt/include/chthreads.h ****  *
 412:../../os/rt/include/chthreads.h ****  * @xclass
 413:../../os/rt/include/chthreads.h ****  */
 414:../../os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 415:../../os/rt/include/chthreads.h **** 
 416:../../os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 417:../../os/rt/include/chthreads.h **** }
 418:../../os/rt/include/chthreads.h **** 
 419:../../os/rt/include/chthreads.h **** /**
 420:../../os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 421:../../os/rt/include/chthreads.h ****  *
 422:../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 423:../../os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 424:../../os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 425:../../os/rt/include/chthreads.h ****  *
 426:../../os/rt/include/chthreads.h ****  * @iclass
 427:../../os/rt/include/chthreads.h ****  */
 428:../../os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 429:../../os/rt/include/chthreads.h **** 
 430:../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 431:../../os/rt/include/chthreads.h **** 
 432:../../os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 433:../../os/rt/include/chthreads.h **** }
 434:../../os/rt/include/chthreads.h **** 
 435:../../os/rt/include/chthreads.h **** /**
 436:../../os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified number of ticks.
 437:../../os/rt/include/chthreads.h ****  *
 438:../../os/rt/include/chthreads.h ****  * @param[in] ticks     the delay in system ticks, the special values are
 439:../../os/rt/include/chthreads.h ****  *                      handled as follow:
 440:../../os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 441:../../os/rt/include/chthreads.h ****  *                        state.
 442:../../os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 443:../../os/rt/include/chthreads.h ****  *                      .
 444:../../os/rt/include/chthreads.h ****  *
 445:../../os/rt/include/chthreads.h ****  * @sclass
 446:../../os/rt/include/chthreads.h ****  */
 447:../../os/rt/include/chthreads.h **** static inline void chThdSleepS(sysinterval_t ticks) {
 448:../../os/rt/include/chthreads.h **** 
 449:../../os/rt/include/chthreads.h ****   chDbgCheck(ticks != TIME_IMMEDIATE);
 450:../../os/rt/include/chthreads.h **** 
 451:../../os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 452:../../os/rt/include/chthreads.h **** }
 453:../../os/rt/include/chthreads.h **** 
 454:../../os/rt/include/chthreads.h **** /**
 455:../../os/rt/include/chthreads.h ****  * @brief   Initializes a threads queue object.
 456:../../os/rt/include/chthreads.h ****  *
 457:../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 458:../../os/rt/include/chthreads.h ****  *
 459:../../os/rt/include/chthreads.h ****  * @init
 460:../../os/rt/include/chthreads.h ****  */
 461:../../os/rt/include/chthreads.h **** static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 462:../../os/rt/include/chthreads.h **** 
 463:../../os/rt/include/chthreads.h ****   ch_queue_init(&tqp->queue);
  51               		.loc 2 463 0
  52 0020 0B96      		adiw r24,11
  53               	.LVL4:
  54               	.LBB84:
  55               	.LBB85:
  56               		.file 3 "../../os/rt/include/chlists.h"
   1:../../os/rt/include/chlists.h **** /*
   2:../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chlists.h **** 
   5:../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chlists.h **** 
   7:../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chlists.h **** 
  11:../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chlists.h **** 
  16:../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chlists.h **** */
  19:../../os/rt/include/chlists.h **** 
  20:../../os/rt/include/chlists.h **** /**
  21:../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../os/rt/include/chlists.h ****  *
  24:../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../os/rt/include/chlists.h ****  * @{
  26:../../os/rt/include/chlists.h ****  */
  27:../../os/rt/include/chlists.h **** 
  28:../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../os/rt/include/chlists.h **** 
  31:../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../os/rt/include/chlists.h **** 
  35:../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../os/rt/include/chlists.h **** 
  39:../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../os/rt/include/chlists.h **** 
  43:../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../os/rt/include/chlists.h **** 
  47:../../os/rt/include/chlists.h **** /**
  48:../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../os/rt/include/chlists.h ****  */
  50:../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../os/rt/include/chlists.h **** 
  52:../../os/rt/include/chlists.h **** /**
  53:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../os/rt/include/chlists.h ****  *          and element.
  55:../../os/rt/include/chlists.h ****  */
  56:../../os/rt/include/chlists.h **** struct ch_list {
  57:../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../os/rt/include/chlists.h **** };
  59:../../os/rt/include/chlists.h **** 
  60:../../os/rt/include/chlists.h **** /**
  61:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../os/rt/include/chlists.h ****  */
  63:../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../os/rt/include/chlists.h **** 
  65:../../os/rt/include/chlists.h **** /**
  66:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../os/rt/include/chlists.h ****  *          and element.
  68:../../os/rt/include/chlists.h ****  */
  69:../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../os/rt/include/chlists.h **** };
  73:../../os/rt/include/chlists.h **** 
  74:../../os/rt/include/chlists.h **** /**
  75:../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../os/rt/include/chlists.h ****  *          header and element.
  77:../../os/rt/include/chlists.h ****  */
  78:../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../os/rt/include/chlists.h **** 
  80:../../os/rt/include/chlists.h **** /**
  81:../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../os/rt/include/chlists.h ****  */
  85:../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../os/rt/include/chlists.h **** };
  90:../../os/rt/include/chlists.h **** 
  91:../../os/rt/include/chlists.h **** /**
  92:../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../os/rt/include/chlists.h ****  *          header and element.
  94:../../os/rt/include/chlists.h ****  */
  95:../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../os/rt/include/chlists.h **** 
  97:../../os/rt/include/chlists.h **** /**
  98:../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../os/rt/include/chlists.h ****  */
 100:../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../os/rt/include/chlists.h **** };
 105:../../os/rt/include/chlists.h **** 
 106:../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../os/rt/include/chlists.h **** 
 110:../../os/rt/include/chlists.h **** /**
 111:../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../os/rt/include/chlists.h ****  *
 115:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../os/rt/include/chlists.h ****  */
 117:../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../os/rt/include/chlists.h **** 
 119:../../os/rt/include/chlists.h **** /**
 120:../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../os/rt/include/chlists.h ****  *
 124:../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../os/rt/include/chlists.h ****  */
 126:../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../os/rt/include/chlists.h ****     ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../os/rt/include/chlists.h **** 
 129:../../os/rt/include/chlists.h **** /*===========================================================================*/
 130:../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 131:../../os/rt/include/chlists.h **** /*===========================================================================*/
 132:../../os/rt/include/chlists.h **** 
 133:../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 134:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 135:../../os/rt/include/chlists.h **** extern "C" {
 136:../../os/rt/include/chlists.h **** #endif
 137:../../os/rt/include/chlists.h **** 
 138:../../os/rt/include/chlists.h **** #ifdef __cplusplus
 139:../../os/rt/include/chlists.h **** }
 140:../../os/rt/include/chlists.h **** #endif
 141:../../os/rt/include/chlists.h **** 
 142:../../os/rt/include/chlists.h **** /*===========================================================================*/
 143:../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 144:../../os/rt/include/chlists.h **** /*===========================================================================*/
 145:../../os/rt/include/chlists.h **** 
 146:../../os/rt/include/chlists.h **** /**
 147:../../os/rt/include/chlists.h ****  * @brief   List initialization.
 148:../../os/rt/include/chlists.h ****  *
 149:../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 150:../../os/rt/include/chlists.h ****  *
 151:../../os/rt/include/chlists.h ****  * @notapi
 152:../../os/rt/include/chlists.h ****  */
 153:../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 154:../../os/rt/include/chlists.h **** 
 155:../../os/rt/include/chlists.h ****   lp->next = lp;
 156:../../os/rt/include/chlists.h **** }
 157:../../os/rt/include/chlists.h **** 
 158:../../os/rt/include/chlists.h **** /**
 159:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 160:../../os/rt/include/chlists.h ****  *
 161:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 162:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 163:../../os/rt/include/chlists.h ****  *
 164:../../os/rt/include/chlists.h ****  * @notapi
 165:../../os/rt/include/chlists.h ****  */
 166:../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 167:../../os/rt/include/chlists.h **** 
 168:../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 169:../../os/rt/include/chlists.h **** }
 170:../../os/rt/include/chlists.h **** 
 171:../../os/rt/include/chlists.h **** /**
 172:../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 173:../../os/rt/include/chlists.h ****  *
 174:../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 175:../../os/rt/include/chlists.h ****  * @return              The status of the list.
 176:../../os/rt/include/chlists.h ****  *
 177:../../os/rt/include/chlists.h ****  * @notapi
 178:../../os/rt/include/chlists.h ****  */
 179:../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 180:../../os/rt/include/chlists.h **** 
 181:../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 182:../../os/rt/include/chlists.h **** }
 183:../../os/rt/include/chlists.h **** 
 184:../../os/rt/include/chlists.h **** /**
 185:../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 186:../../os/rt/include/chlists.h ****  *
 187:../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 188:../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 189:../../os/rt/include/chlists.h ****  *
 190:../../os/rt/include/chlists.h ****  * @notapi
 191:../../os/rt/include/chlists.h ****  */
 192:../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 193:../../os/rt/include/chlists.h **** 
 194:../../os/rt/include/chlists.h ****   p->next = lp->next;
 195:../../os/rt/include/chlists.h ****   lp->next = p;
 196:../../os/rt/include/chlists.h **** }
 197:../../os/rt/include/chlists.h **** 
 198:../../os/rt/include/chlists.h **** /**
 199:../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 200:../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 201:../../os/rt/include/chlists.h ****  *
 202:../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 203:../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 204:../../os/rt/include/chlists.h ****  *
 205:../../os/rt/include/chlists.h ****  * @notapi
 206:../../os/rt/include/chlists.h ****  */
 207:../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 208:../../os/rt/include/chlists.h **** 
 209:../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 210:../../os/rt/include/chlists.h ****   lp->next = p->next;
 211:../../os/rt/include/chlists.h **** 
 212:../../os/rt/include/chlists.h ****   return p;
 213:../../os/rt/include/chlists.h **** }
 214:../../os/rt/include/chlists.h **** 
 215:../../os/rt/include/chlists.h **** /**
 216:../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 217:../../os/rt/include/chlists.h ****  *
 218:../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 219:../../os/rt/include/chlists.h ****  *
 220:../../os/rt/include/chlists.h ****  * @notapi
 221:../../os/rt/include/chlists.h ****  */
 222:../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 223:../../os/rt/include/chlists.h **** 
 224:../../os/rt/include/chlists.h ****   qp->next = qp;
  57               		.loc 3 224 0
  58 0022 9487      		std Z+12,r25
  59 0024 8387      		std Z+11,r24
 225:../../os/rt/include/chlists.h ****   qp->prev = qp;
  60               		.loc 3 225 0
  61 0026 9687      		std Z+14,r25
  62 0028 8587      		std Z+13,r24
  63               	.LVL5:
  64               	.LBE85:
  65               	.LBE84:
  66               	.LBE83:
  67               	.LBE82:
  68               	.LBB86:
  69               	.LBB87:
  70               		.loc 2 463 0
  71 002a 0496      		adiw r24,4
  72               	.LVL6:
  73               	.LBB88:
  74               	.LBB89:
 224:../../os/rt/include/chlists.h ****   qp->prev = qp;
  75               		.loc 3 224 0
  76 002c 908B      		std Z+16,r25
  77 002e 8787      		std Z+15,r24
  78               		.loc 3 225 0
  79 0030 928B      		std Z+18,r25
  80 0032 818B      		std Z+17,r24
  81               	.LVL7:
  82               	/* epilogue start */
  83               	.LBE89:
  84               	.LBE88:
  85               	.LBE87:
  86               	.LBE86:
  97:../../os/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qw);
  98:../../os/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qr);
  99:../../os/oslib/src/chmboxes.c **** }
  87               		.loc 1 99 0
  88 0034 0895      		ret
  89               		.cfi_endproc
  90               	.LFE190:
  92               		.section	.text.chMBResetI,"ax",@progbits
  93               	.global	chMBResetI
  95               	chMBResetI:
  96               	.LFB192:
 100:../../os/oslib/src/chmboxes.c **** 
 101:../../os/oslib/src/chmboxes.c **** /**
 102:../../os/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 103:../../os/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 104:../../os/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 105:../../os/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 106:../../os/oslib/src/chmboxes.c ****  *          return @p MSG_RESET until the mailbox is enabled again using
 107:../../os/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 108:../../os/oslib/src/chmboxes.c ****  *
 109:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 110:../../os/oslib/src/chmboxes.c ****  *
 111:../../os/oslib/src/chmboxes.c ****  * @api
 112:../../os/oslib/src/chmboxes.c ****  */
 113:../../os/oslib/src/chmboxes.c **** void chMBReset(mailbox_t *mbp) {
 114:../../os/oslib/src/chmboxes.c **** 
 115:../../os/oslib/src/chmboxes.c ****   chSysLock();
 116:../../os/oslib/src/chmboxes.c ****   chMBResetI(mbp);
 117:../../os/oslib/src/chmboxes.c ****   chSchRescheduleS();
 118:../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 119:../../os/oslib/src/chmboxes.c **** }
 120:../../os/oslib/src/chmboxes.c **** 
 121:../../os/oslib/src/chmboxes.c **** /**
 122:../../os/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 123:../../os/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 124:../../os/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 125:../../os/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 126:../../os/oslib/src/chmboxes.c ****  *          return @p MSG_RESET until the mailbox is enabled again using
 127:../../os/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 128:../../os/oslib/src/chmboxes.c ****  *
 129:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 130:../../os/oslib/src/chmboxes.c ****  *
 131:../../os/oslib/src/chmboxes.c ****  * @api
 132:../../os/oslib/src/chmboxes.c ****  */
 133:../../os/oslib/src/chmboxes.c **** void chMBResetI(mailbox_t *mbp) {
  97               		.loc 1 133 0
  98               		.cfi_startproc
  99               	.LVL8:
 100 0000 CF93      		push r28
 101               	.LCFI0:
 102               		.cfi_def_cfa_offset 3
 103               		.cfi_offset 28, -2
 104 0002 DF93      		push r29
 105               	.LCFI1:
 106               		.cfi_def_cfa_offset 4
 107               		.cfi_offset 29, -3
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 2 */
 111               	.L__stack_usage = 2
 112 0004 EC01      		movw r28,r24
 134:../../os/oslib/src/chmboxes.c **** 
 135:../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 136:../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 137:../../os/oslib/src/chmboxes.c **** 
 138:../../os/oslib/src/chmboxes.c ****   mbp->wrptr = mbp->buffer;
 113               		.loc 1 138 0
 114 0006 8881      		ld r24,Y
 115 0008 9981      		ldd r25,Y+1
 116               	.LVL9:
 117 000a 9D83      		std Y+5,r25
 118 000c 8C83      		std Y+4,r24
 139:../../os/oslib/src/chmboxes.c ****   mbp->rdptr = mbp->buffer;
 119               		.loc 1 139 0
 120 000e 9F83      		std Y+7,r25
 121 0010 8E83      		std Y+6,r24
 140:../../os/oslib/src/chmboxes.c ****   mbp->cnt   = (size_t)0;
 122               		.loc 1 140 0
 123 0012 1986      		std Y+9,__zero_reg__
 124 0014 1886      		std Y+8,__zero_reg__
 141:../../os/oslib/src/chmboxes.c ****   mbp->reset = true;
 125               		.loc 1 141 0
 126 0016 81E0      		ldi r24,lo8(1)
 127 0018 8A87      		std Y+10,r24
 142:../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qw, MSG_RESET);
 128               		.loc 1 142 0
 129 001a 6EEF      		ldi r22,lo8(-2)
 130 001c 7FEF      		ldi r23,lo8(-1)
 131 001e CE01      		movw r24,r28
 132 0020 0B96      		adiw r24,11
 133 0022 0E94 0000 		call chThdDequeueAllI
 134               	.LVL10:
 143:../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 135               		.loc 1 143 0
 136 0026 6EEF      		ldi r22,lo8(-2)
 137 0028 7FEF      		ldi r23,lo8(-1)
 138 002a CE01      		movw r24,r28
 139 002c 0F96      		adiw r24,15
 140               	/* epilogue start */
 144:../../os/oslib/src/chmboxes.c **** }
 141               		.loc 1 144 0
 142 002e DF91      		pop r29
 143 0030 CF91      		pop r28
 144               	.LVL11:
 143:../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 145               		.loc 1 143 0
 146 0032 0C94 0000 		jmp chThdDequeueAllI
 147               	.LVL12:
 148               		.cfi_endproc
 149               	.LFE192:
 151               		.section	.text.chMBReset,"ax",@progbits
 152               	.global	chMBReset
 154               	chMBReset:
 155               	.LFB191:
 113:../../os/oslib/src/chmboxes.c **** 
 156               		.loc 1 113 0
 157               		.cfi_startproc
 158               	.LVL13:
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 0 */
 162               	.L__stack_usage = 0
 163               	.LBB90:
 164               	.LBB91:
 165               	.LBB92:
 166               		.file 4 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 167               		.loc 4 430 0
 168               	/* #APP */
 169               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 170 0000 F894      		cli
 171               	 ;  0 "" 2
 172               	/* #NOAPP */
 173               	.LBE92:
 174               	.LBE91:
 175               	.LBE90:
 116:../../os/oslib/src/chmboxes.c ****   chSchRescheduleS();
 176               		.loc 1 116 0
 177 0002 0E94 0000 		call chMBResetI
 178               	.LVL14:
 117:../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 179               		.loc 1 117 0
 180 0006 0E94 0000 		call chSchRescheduleS
 181               	.LVL15:
 182               	.LBB93:
 183               	.LBB94:
 184               	.LBB95:
 185               	.LBB96:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 186               		.loc 4 440 0
 187               	/* #APP */
 188               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 189 000a 7894      		sei
 190               	 ;  0 "" 2
 191               	/* epilogue start */
 192               	/* #NOAPP */
 193               	.LBE96:
 194               	.LBE95:
 195               	.LBE94:
 196               	.LBE93:
 119:../../os/oslib/src/chmboxes.c **** 
 197               		.loc 1 119 0
 198 000c 0895      		ret
 199               		.cfi_endproc
 200               	.LFE191:
 202               		.section	.text.chMBPostTimeoutS,"ax",@progbits
 203               	.global	chMBPostTimeoutS
 205               	chMBPostTimeoutS:
 206               	.LFB194:
 145:../../os/oslib/src/chmboxes.c **** 
 146:../../os/oslib/src/chmboxes.c **** /**
 147:../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 148:../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 149:../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 150:../../os/oslib/src/chmboxes.c ****  *
 151:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 152:../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 153:../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 154:../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 155:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 156:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 157:../../os/oslib/src/chmboxes.c ****  *                      .
 158:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 159:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 160:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 161:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 162:../../os/oslib/src/chmboxes.c ****  *
 163:../../os/oslib/src/chmboxes.c ****  * @api
 164:../../os/oslib/src/chmboxes.c ****  */
 165:../../os/oslib/src/chmboxes.c **** msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 166:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 167:../../os/oslib/src/chmboxes.c **** 
 168:../../os/oslib/src/chmboxes.c ****   chSysLock();
 169:../../os/oslib/src/chmboxes.c ****   rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 170:../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 171:../../os/oslib/src/chmboxes.c **** 
 172:../../os/oslib/src/chmboxes.c ****   return rdymsg;
 173:../../os/oslib/src/chmboxes.c **** }
 174:../../os/oslib/src/chmboxes.c **** 
 175:../../os/oslib/src/chmboxes.c **** /**
 176:../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 177:../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 178:../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 179:../../os/oslib/src/chmboxes.c ****  *
 180:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 181:../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 182:../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 183:../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 184:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 185:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 186:../../os/oslib/src/chmboxes.c ****  *                      .
 187:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 188:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 189:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 190:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 191:../../os/oslib/src/chmboxes.c ****  *
 192:../../os/oslib/src/chmboxes.c ****  * @sclass
 193:../../os/oslib/src/chmboxes.c ****  */
 194:../../os/oslib/src/chmboxes.c **** msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 207               		.loc 1 194 0
 208               		.cfi_startproc
 209               	.LVL16:
 210 0000 CF92      		push r12
 211               	.LCFI2:
 212               		.cfi_def_cfa_offset 3
 213               		.cfi_offset 12, -2
 214 0002 DF92      		push r13
 215               	.LCFI3:
 216               		.cfi_def_cfa_offset 4
 217               		.cfi_offset 13, -3
 218 0004 EF92      		push r14
 219               	.LCFI4:
 220               		.cfi_def_cfa_offset 5
 221               		.cfi_offset 14, -4
 222 0006 FF92      		push r15
 223               	.LCFI5:
 224               		.cfi_def_cfa_offset 6
 225               		.cfi_offset 15, -5
 226 0008 0F93      		push r16
 227               	.LCFI6:
 228               		.cfi_def_cfa_offset 7
 229               		.cfi_offset 16, -6
 230 000a 1F93      		push r17
 231               	.LCFI7:
 232               		.cfi_def_cfa_offset 8
 233               		.cfi_offset 17, -7
 234 000c CF93      		push r28
 235               	.LCFI8:
 236               		.cfi_def_cfa_offset 9
 237               		.cfi_offset 28, -8
 238 000e DF93      		push r29
 239               	.LCFI9:
 240               		.cfi_def_cfa_offset 10
 241               		.cfi_offset 29, -9
 242               	/* prologue: function */
 243               	/* frame size = 0 */
 244               	/* stack size = 8 */
 245               	.L__stack_usage = 8
 246 0010 EC01      		movw r28,r24
 247 0012 6B01      		movw r12,r22
 248 0014 7A01      		movw r14,r20
 195:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 196:../../os/oslib/src/chmboxes.c **** 
 197:../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 198:../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 199:../../os/oslib/src/chmboxes.c **** 
 200:../../os/oslib/src/chmboxes.c ****   do {
 201:../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 202:../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 203:../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 204:../../os/oslib/src/chmboxes.c ****     }
 205:../../os/oslib/src/chmboxes.c **** 
 206:../../os/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 207:../../os/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (size_t)0) {
 208:../../os/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 209:../../os/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 210:../../os/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 211:../../os/oslib/src/chmboxes.c ****       }
 212:../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 213:../../os/oslib/src/chmboxes.c **** 
 214:../../os/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 215:../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 216:../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 217:../../os/oslib/src/chmboxes.c **** 
 218:../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 219:../../os/oslib/src/chmboxes.c ****     }
 220:../../os/oslib/src/chmboxes.c **** 
 221:../../os/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 222:../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 249               		.loc 1 222 0
 250 0016 8C01      		movw r16,r24
 251 0018 055F      		subi r16,-11
 252 001a 1F4F      		sbci r17,-1
 253 001c 00C0      		rjmp .L9
 254               	.LVL17:
 255               	.L14:
 256 001e 4881      		ld r20,Y
 257 0020 5981      		ldd r21,Y+1
 258 0022 2A81      		ldd r18,Y+2
 259 0024 3B81      		ldd r19,Y+3
 260               	.LVL18:
 261               	.LBB106:
 262               	.LBB107:
 263               	.LBB108:
 264               		.file 5 "../../os/oslib/include/chmboxes.h"
   1:../../os/oslib/include/chmboxes.h **** /*
   2:../../os/oslib/include/chmboxes.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/oslib/include/chmboxes.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/oslib/include/chmboxes.h **** 
   5:../../os/oslib/include/chmboxes.h ****     This file is part of ChibiOS.
   6:../../os/oslib/include/chmboxes.h **** 
   7:../../os/oslib/include/chmboxes.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/oslib/include/chmboxes.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/oslib/include/chmboxes.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/oslib/include/chmboxes.h **** 
  11:../../os/oslib/include/chmboxes.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/oslib/include/chmboxes.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/oslib/include/chmboxes.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/oslib/include/chmboxes.h ****     GNU General Public License for more details.
  15:../../os/oslib/include/chmboxes.h **** 
  16:../../os/oslib/include/chmboxes.h ****     You should have received a copy of the GNU General Public License
  17:../../os/oslib/include/chmboxes.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/oslib/include/chmboxes.h **** */
  19:../../os/oslib/include/chmboxes.h **** 
  20:../../os/oslib/include/chmboxes.h **** /**
  21:../../os/oslib/include/chmboxes.h ****  * @file    oslib/include/chmboxes.h
  22:../../os/oslib/include/chmboxes.h ****  * @brief   Mailboxes macros and structures.
  23:../../os/oslib/include/chmboxes.h ****  *
  24:../../os/oslib/include/chmboxes.h ****  * @addtogroup oslib_mailboxes
  25:../../os/oslib/include/chmboxes.h ****  * @{
  26:../../os/oslib/include/chmboxes.h ****  */
  27:../../os/oslib/include/chmboxes.h **** 
  28:../../os/oslib/include/chmboxes.h **** #ifndef CHMBOXES_H
  29:../../os/oslib/include/chmboxes.h **** #define CHMBOXES_H
  30:../../os/oslib/include/chmboxes.h **** 
  31:../../os/oslib/include/chmboxes.h **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  32:../../os/oslib/include/chmboxes.h **** 
  33:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  34:../../os/oslib/include/chmboxes.h **** /* Module constants.                                                         */
  35:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  36:../../os/oslib/include/chmboxes.h **** 
  37:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  38:../../os/oslib/include/chmboxes.h **** /* Module pre-compile time settings.                                         */
  39:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  40:../../os/oslib/include/chmboxes.h **** 
  41:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  42:../../os/oslib/include/chmboxes.h **** /* Derived constants and error checks.                                       */
  43:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  44:../../os/oslib/include/chmboxes.h **** 
  45:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  46:../../os/oslib/include/chmboxes.h **** /* Module data structures and types.                                         */
  47:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  48:../../os/oslib/include/chmboxes.h **** 
  49:../../os/oslib/include/chmboxes.h **** /**
  50:../../os/oslib/include/chmboxes.h ****  * @brief   Structure representing a mailbox object.
  51:../../os/oslib/include/chmboxes.h ****  */
  52:../../os/oslib/include/chmboxes.h **** typedef struct {
  53:../../os/oslib/include/chmboxes.h ****   msg_t                 *buffer;        /**< @brief Pointer to the mailbox
  54:../../os/oslib/include/chmboxes.h ****                                                     buffer.                 */
  55:../../os/oslib/include/chmboxes.h ****   msg_t                 *top;           /**< @brief Pointer to the location
  56:../../os/oslib/include/chmboxes.h ****                                                     after the buffer.       */
  57:../../os/oslib/include/chmboxes.h ****   msg_t                 *wrptr;         /**< @brief Write pointer.          */
  58:../../os/oslib/include/chmboxes.h ****   msg_t                 *rdptr;         /**< @brief Read pointer.           */
  59:../../os/oslib/include/chmboxes.h ****   size_t                cnt;            /**< @brief Messages in queue.      */
  60:../../os/oslib/include/chmboxes.h ****   bool                  reset;          /**< @brief True in reset state.    */
  61:../../os/oslib/include/chmboxes.h ****   threads_queue_t       qw;             /**< @brief Queued writers.         */
  62:../../os/oslib/include/chmboxes.h ****   threads_queue_t       qr;             /**< @brief Queued readers.         */
  63:../../os/oslib/include/chmboxes.h **** } mailbox_t;
  64:../../os/oslib/include/chmboxes.h **** 
  65:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  66:../../os/oslib/include/chmboxes.h **** /* Module macros.                                                            */
  67:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  68:../../os/oslib/include/chmboxes.h **** 
  69:../../os/oslib/include/chmboxes.h **** /**
  70:../../os/oslib/include/chmboxes.h ****  * @brief   Data part of a static mailbox initializer.
  71:../../os/oslib/include/chmboxes.h ****  * @details This macro should be used when statically initializing a
  72:../../os/oslib/include/chmboxes.h ****  *          mailbox that is part of a bigger structure.
  73:../../os/oslib/include/chmboxes.h ****  *
  74:../../os/oslib/include/chmboxes.h ****  * @param[in] name      the name of the mailbox variable
  75:../../os/oslib/include/chmboxes.h ****  * @param[in] buffer    pointer to the mailbox buffer array of @p msg_t
  76:../../os/oslib/include/chmboxes.h ****  * @param[in] size      number of @p msg_t elements in the buffer array
  77:../../os/oslib/include/chmboxes.h ****  */
  78:../../os/oslib/include/chmboxes.h **** #define __MAILBOX_DATA(name, buffer, size) {                                \
  79:../../os/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  80:../../os/oslib/include/chmboxes.h ****   (msg_t *)(buffer) + size,                                                 \
  81:../../os/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  82:../../os/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  83:../../os/oslib/include/chmboxes.h ****   (size_t)0,                                                                \
  84:../../os/oslib/include/chmboxes.h ****   false,                                                                    \
  85:../../os/oslib/include/chmboxes.h ****   __THREADS_QUEUE_DATA(name.qw),                                            \
  86:../../os/oslib/include/chmboxes.h ****   __THREADS_QUEUE_DATA(name.qr),                                            \
  87:../../os/oslib/include/chmboxes.h **** }
  88:../../os/oslib/include/chmboxes.h **** 
  89:../../os/oslib/include/chmboxes.h **** /**
  90:../../os/oslib/include/chmboxes.h ****  * @brief   Static mailbox initializer.
  91:../../os/oslib/include/chmboxes.h ****  * @details Statically initialized mailboxes require no explicit
  92:../../os/oslib/include/chmboxes.h ****  *          initialization using @p chMBObjectInit().
  93:../../os/oslib/include/chmboxes.h ****  *
  94:../../os/oslib/include/chmboxes.h ****  * @param[in] name      the name of the mailbox variable
  95:../../os/oslib/include/chmboxes.h ****  * @param[in] buffer    pointer to the mailbox buffer array of @p msg_t
  96:../../os/oslib/include/chmboxes.h ****  * @param[in] size      number of @p msg_t elements in the buffer array
  97:../../os/oslib/include/chmboxes.h ****  */
  98:../../os/oslib/include/chmboxes.h **** #define MAILBOX_DECL(name, buffer, size)                                    \
  99:../../os/oslib/include/chmboxes.h ****   mailbox_t name = __MAILBOX_DATA(name, buffer, size)
 100:../../os/oslib/include/chmboxes.h **** 
 101:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
 102:../../os/oslib/include/chmboxes.h **** /* External declarations.                                                    */
 103:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
 104:../../os/oslib/include/chmboxes.h **** 
 105:../../os/oslib/include/chmboxes.h **** #ifdef __cplusplus
 106:../../os/oslib/include/chmboxes.h **** extern "C" {
 107:../../os/oslib/include/chmboxes.h **** #endif
 108:../../os/oslib/include/chmboxes.h ****   void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n);
 109:../../os/oslib/include/chmboxes.h ****   void chMBReset(mailbox_t *mbp);
 110:../../os/oslib/include/chmboxes.h ****   void chMBResetI(mailbox_t *mbp);
 111:../../os/oslib/include/chmboxes.h ****   msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 112:../../os/oslib/include/chmboxes.h ****   msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 113:../../os/oslib/include/chmboxes.h ****   msg_t chMBPostI(mailbox_t *mbp, msg_t msg);
 114:../../os/oslib/include/chmboxes.h ****   msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 115:../../os/oslib/include/chmboxes.h ****   msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 116:../../os/oslib/include/chmboxes.h ****   msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg);
 117:../../os/oslib/include/chmboxes.h ****   msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout);
 118:../../os/oslib/include/chmboxes.h ****   msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout);
 119:../../os/oslib/include/chmboxes.h ****   msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp);
 120:../../os/oslib/include/chmboxes.h **** #ifdef __cplusplus
 121:../../os/oslib/include/chmboxes.h **** }
 122:../../os/oslib/include/chmboxes.h **** #endif
 123:../../os/oslib/include/chmboxes.h **** 
 124:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
 125:../../os/oslib/include/chmboxes.h **** /* Module inline functions.                                                  */
 126:../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
 127:../../os/oslib/include/chmboxes.h **** 
 128:../../os/oslib/include/chmboxes.h **** /**
 129:../../os/oslib/include/chmboxes.h ****  * @brief   Returns the mailbox buffer size as number of messages.
 130:../../os/oslib/include/chmboxes.h ****  *
 131:../../os/oslib/include/chmboxes.h ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 132:../../os/oslib/include/chmboxes.h ****  * @return              The size of the mailbox.
 133:../../os/oslib/include/chmboxes.h ****  *
 134:../../os/oslib/include/chmboxes.h ****  * @iclass
 135:../../os/oslib/include/chmboxes.h ****  */
 136:../../os/oslib/include/chmboxes.h **** static inline size_t chMBGetSizeI(const mailbox_t *mbp) {
 137:../../os/oslib/include/chmboxes.h **** 
 138:../../os/oslib/include/chmboxes.h ****   /*lint -save -e9033 [10.8] Perfectly safe pointers
 139:../../os/oslib/include/chmboxes.h ****     arithmetic.*/
 140:../../os/oslib/include/chmboxes.h ****   return (size_t)(mbp->top - mbp->buffer);
 265               		.loc 5 140 0
 266 0026 C901      		movw r24,r18
 267 0028 841B      		sub r24,r20
 268 002a 950B      		sbc r25,r21
 269 002c 9595      		asr r25
 270 002e 8795      		ror r24
 271               	.LBE108:
 272               	.LBE107:
 273               	.LBE106:
 207:../../os/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 274               		.loc 1 207 0
 275 0030 6885      		ldd r22,Y+8
 276 0032 7985      		ldd r23,Y+9
 277 0034 8617      		cp r24,r22
 278 0036 9707      		cpc r25,r23
 279 0038 01F4      		brne .L13
 280               		.loc 1 222 0
 281 003a B701      		movw r22,r14
 282 003c C801      		movw r24,r16
 283 003e 0E94 0000 		call chThdEnqueueTimeoutS
 284               	.LVL19:
 223:../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 285               		.loc 1 223 0
 286 0042 0097      		sbiw r24,0
 287 0044 01F4      		brne .L5
 288               	.LVL20:
 289               	.L9:
 202:../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 290               		.loc 1 202 0
 291 0046 8A85      		ldd r24,Y+10
 292 0048 8823      		tst r24
 293 004a 01F0      		breq .L14
 203:../../os/oslib/src/chmboxes.c ****     }
 294               		.loc 1 203 0
 295 004c 8EEF      		ldi r24,lo8(-2)
 296 004e 9FEF      		ldi r25,lo8(-1)
 297               	.L5:
 298               	/* epilogue start */
 224:../../os/oslib/src/chmboxes.c **** 
 225:../../os/oslib/src/chmboxes.c ****   return rdymsg;
 226:../../os/oslib/src/chmboxes.c **** }
 299               		.loc 1 226 0
 300 0050 DF91      		pop r29
 301 0052 CF91      		pop r28
 302               	.LVL21:
 303 0054 1F91      		pop r17
 304 0056 0F91      		pop r16
 305               	.LVL22:
 306 0058 FF90      		pop r15
 307 005a EF90      		pop r14
 308               	.LVL23:
 309 005c DF90      		pop r13
 310 005e CF90      		pop r12
 311               	.LVL24:
 312 0060 0895      		ret
 313               	.LVL25:
 314               	.L13:
 208:../../os/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 315               		.loc 1 208 0
 316 0062 EC81      		ldd r30,Y+4
 317 0064 FD81      		ldd r31,Y+5
 318 0066 CF01      		movw r24,r30
 319 0068 0296      		adiw r24,2
 320 006a 9D83      		std Y+5,r25
 321 006c 8C83      		std Y+4,r24
 322 006e D182      		std Z+1,r13
 323 0070 C082      		st Z,r12
 209:../../os/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 324               		.loc 1 209 0
 325 0072 8217      		cp r24,r18
 326 0074 9307      		cpc r25,r19
 327 0076 00F0      		brlo .L8
 210:../../os/oslib/src/chmboxes.c ****       }
 328               		.loc 1 210 0
 329 0078 5D83      		std Y+5,r21
 330 007a 4C83      		std Y+4,r20
 331               	.L8:
 332               	.LVL26:
 333               	.LBB109:
 334               	.LBB110:
 212:../../os/oslib/src/chmboxes.c **** 
 335               		.loc 1 212 0
 336 007c 8885      		ldd r24,Y+8
 337 007e 9985      		ldd r25,Y+9
 338 0080 0196      		adiw r24,1
 339 0082 9987      		std Y+9,r25
 340 0084 8887      		std Y+8,r24
 215:../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 341               		.loc 1 215 0
 342 0086 70E0      		ldi r23,0
 343 0088 60E0      		ldi r22,0
 344 008a CE01      		movw r24,r28
 345 008c 0F96      		adiw r24,15
 346 008e 0E94 0000 		call chThdDequeueNextI
 347               	.LVL27:
 216:../../os/oslib/src/chmboxes.c **** 
 348               		.loc 1 216 0
 349 0092 0E94 0000 		call chSchRescheduleS
 350               	.LVL28:
 351 0096 90E0      		ldi r25,0
 352 0098 80E0      		ldi r24,0
 353 009a 00C0      		rjmp .L5
 354               	.LBE110:
 355               	.LBE109:
 356               		.cfi_endproc
 357               	.LFE194:
 359               		.section	.text.chMBPostTimeout,"ax",@progbits
 360               	.global	chMBPostTimeout
 362               	chMBPostTimeout:
 363               	.LFB193:
 165:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 364               		.loc 1 165 0
 365               		.cfi_startproc
 366               	.LVL29:
 367               	/* prologue: function */
 368               	/* frame size = 0 */
 369               	/* stack size = 0 */
 370               	.L__stack_usage = 0
 371               	.LBB111:
 372               	.LBB112:
 373               	.LBB113:
 430:../../os/common/ports/AVR/chcore.h **** }
 374               		.loc 4 430 0
 375               	/* #APP */
 376               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 377 0000 F894      		cli
 378               	 ;  0 "" 2
 379               	/* #NOAPP */
 380               	.LBE113:
 381               	.LBE112:
 382               	.LBE111:
 169:../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 383               		.loc 1 169 0
 384 0002 0E94 0000 		call chMBPostTimeoutS
 385               	.LVL30:
 386               	.LBB114:
 387               	.LBB115:
 388               	.LBB116:
 389               	.LBB117:
 390               		.loc 4 440 0
 391               	/* #APP */
 392               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 393 0006 7894      		sei
 394               	 ;  0 "" 2
 395               	/* epilogue start */
 396               	/* #NOAPP */
 397               	.LBE117:
 398               	.LBE116:
 399               	.LBE115:
 400               	.LBE114:
 173:../../os/oslib/src/chmboxes.c **** 
 401               		.loc 1 173 0
 402 0008 0895      		ret
 403               		.cfi_endproc
 404               	.LFE193:
 406               		.section	.text.chMBPostI,"ax",@progbits
 407               	.global	chMBPostI
 409               	chMBPostI:
 410               	.LFB195:
 227:../../os/oslib/src/chmboxes.c **** 
 228:../../os/oslib/src/chmboxes.c **** /**
 229:../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 230:../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 231:../../os/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 232:../../os/oslib/src/chmboxes.c ****  *
 233:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 234:../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 235:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 236:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 237:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 238:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 239:../../os/oslib/src/chmboxes.c ****  *                      posted.
 240:../../os/oslib/src/chmboxes.c ****  *
 241:../../os/oslib/src/chmboxes.c ****  * @iclass
 242:../../os/oslib/src/chmboxes.c ****  */
 243:../../os/oslib/src/chmboxes.c **** msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 411               		.loc 1 243 0
 412               		.cfi_startproc
 413               	.LVL31:
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 0 */
 417               	.L__stack_usage = 0
 418 0000 FC01      		movw r30,r24
 244:../../os/oslib/src/chmboxes.c **** 
 245:../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 246:../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 247:../../os/oslib/src/chmboxes.c **** 
 248:../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 249:../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 419               		.loc 1 249 0
 420 0002 8285      		ldd r24,Z+10
 421               	.LVL32:
 422 0004 8111      		cpse r24,__zero_reg__
 423 0006 00C0      		rjmp .L19
 424               	.LVL33:
 425 0008 4081      		ld r20,Z
 426 000a 5181      		ldd r21,Z+1
 427 000c 2281      		ldd r18,Z+2
 428 000e 3381      		ldd r19,Z+3
 429               	.LVL34:
 430               	.LBB118:
 431               	.LBB119:
 432               	.LBB120:
 433               		.loc 5 140 0
 434 0010 C901      		movw r24,r18
 435 0012 841B      		sub r24,r20
 436 0014 950B      		sbc r25,r21
 437 0016 9595      		asr r25
 438 0018 8795      		ror r24
 439               	.LBE120:
 440               	.LBE119:
 441               	.LBE118:
 250:../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 251:../../os/oslib/src/chmboxes.c ****   }
 252:../../os/oslib/src/chmboxes.c **** 
 253:../../os/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 254:../../os/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (size_t)0) {
 442               		.loc 1 254 0
 443 001a A085      		ldd r26,Z+8
 444 001c B185      		ldd r27,Z+9
 445 001e 8A17      		cp r24,r26
 446 0020 9B07      		cpc r25,r27
 447 0022 01F0      		breq .L20
 255:../../os/oslib/src/chmboxes.c ****     *mbp->wrptr++ = msg;
 448               		.loc 1 255 0
 449 0024 A481      		ldd r26,Z+4
 450 0026 B581      		ldd r27,Z+5
 451 0028 CD01      		movw r24,r26
 452 002a 0296      		adiw r24,2
 453 002c 9583      		std Z+5,r25
 454 002e 8483      		std Z+4,r24
 455 0030 6D93      		st X+,r22
 456 0032 7C93      		st X,r23
 256:../../os/oslib/src/chmboxes.c ****     if (mbp->wrptr >= mbp->top) {
 457               		.loc 1 256 0
 458 0034 8217      		cp r24,r18
 459 0036 9307      		cpc r25,r19
 460 0038 00F0      		brlo .L18
 257:../../os/oslib/src/chmboxes.c ****       mbp->wrptr = mbp->buffer;
 461               		.loc 1 257 0
 462 003a 5583      		std Z+5,r21
 463 003c 4483      		std Z+4,r20
 464               	.L18:
 258:../../os/oslib/src/chmboxes.c ****     }
 259:../../os/oslib/src/chmboxes.c ****     mbp->cnt++;
 465               		.loc 1 259 0
 466 003e 8085      		ldd r24,Z+8
 467 0040 9185      		ldd r25,Z+9
 468 0042 0196      		adiw r24,1
 469 0044 9187      		std Z+9,r25
 470 0046 8087      		std Z+8,r24
 260:../../os/oslib/src/chmboxes.c **** 
 261:../../os/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 262:../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 471               		.loc 1 262 0
 472 0048 70E0      		ldi r23,0
 473 004a 60E0      		ldi r22,0
 474               	.LVL35:
 475 004c CF01      		movw r24,r30
 476 004e 0F96      		adiw r24,15
 477 0050 0E94 0000 		call chThdDequeueNextI
 478               	.LVL36:
 263:../../os/oslib/src/chmboxes.c **** 
 264:../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 479               		.loc 1 264 0
 480 0054 90E0      		ldi r25,0
 481 0056 80E0      		ldi r24,0
 482 0058 0895      		ret
 483               	.LVL37:
 484               	.L19:
 250:../../os/oslib/src/chmboxes.c ****   }
 485               		.loc 1 250 0
 486 005a 8EEF      		ldi r24,lo8(-2)
 487 005c 9FEF      		ldi r25,lo8(-1)
 488 005e 0895      		ret
 489               	.LVL38:
 490               	.L20:
 265:../../os/oslib/src/chmboxes.c ****   }
 266:../../os/oslib/src/chmboxes.c **** 
 267:../../os/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 268:../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 491               		.loc 1 268 0
 492 0060 8FEF      		ldi r24,lo8(-1)
 493 0062 9FEF      		ldi r25,lo8(-1)
 494               	/* epilogue start */
 269:../../os/oslib/src/chmboxes.c **** }
 495               		.loc 1 269 0
 496 0064 0895      		ret
 497               		.cfi_endproc
 498               	.LFE195:
 500               		.section	.text.chMBPostAheadTimeoutS,"ax",@progbits
 501               	.global	chMBPostAheadTimeoutS
 503               	chMBPostAheadTimeoutS:
 504               	.LFB197:
 270:../../os/oslib/src/chmboxes.c **** 
 271:../../os/oslib/src/chmboxes.c **** /**
 272:../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 273:../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 274:../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 275:../../os/oslib/src/chmboxes.c ****  *
 276:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 277:../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 278:../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 279:../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 280:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 281:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 282:../../os/oslib/src/chmboxes.c ****  *                      .
 283:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 284:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 285:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 286:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 287:../../os/oslib/src/chmboxes.c ****  *
 288:../../os/oslib/src/chmboxes.c ****  * @api
 289:../../os/oslib/src/chmboxes.c ****  */
 290:../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 291:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 292:../../os/oslib/src/chmboxes.c **** 
 293:../../os/oslib/src/chmboxes.c ****   chSysLock();
 294:../../os/oslib/src/chmboxes.c ****   rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 295:../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 296:../../os/oslib/src/chmboxes.c **** 
 297:../../os/oslib/src/chmboxes.c ****   return rdymsg;
 298:../../os/oslib/src/chmboxes.c **** }
 299:../../os/oslib/src/chmboxes.c **** 
 300:../../os/oslib/src/chmboxes.c **** /**
 301:../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 302:../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 303:../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 304:../../os/oslib/src/chmboxes.c ****  *
 305:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 306:../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 307:../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 308:../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 309:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 310:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 311:../../os/oslib/src/chmboxes.c ****  *                      .
 312:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 313:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 314:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 315:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 316:../../os/oslib/src/chmboxes.c ****  *
 317:../../os/oslib/src/chmboxes.c ****  * @sclass
 318:../../os/oslib/src/chmboxes.c ****  */
 319:../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 505               		.loc 1 319 0
 506               		.cfi_startproc
 507               	.LVL39:
 508 0000 CF92      		push r12
 509               	.LCFI10:
 510               		.cfi_def_cfa_offset 3
 511               		.cfi_offset 12, -2
 512 0002 DF92      		push r13
 513               	.LCFI11:
 514               		.cfi_def_cfa_offset 4
 515               		.cfi_offset 13, -3
 516 0004 EF92      		push r14
 517               	.LCFI12:
 518               		.cfi_def_cfa_offset 5
 519               		.cfi_offset 14, -4
 520 0006 FF92      		push r15
 521               	.LCFI13:
 522               		.cfi_def_cfa_offset 6
 523               		.cfi_offset 15, -5
 524 0008 0F93      		push r16
 525               	.LCFI14:
 526               		.cfi_def_cfa_offset 7
 527               		.cfi_offset 16, -6
 528 000a 1F93      		push r17
 529               	.LCFI15:
 530               		.cfi_def_cfa_offset 8
 531               		.cfi_offset 17, -7
 532 000c CF93      		push r28
 533               	.LCFI16:
 534               		.cfi_def_cfa_offset 9
 535               		.cfi_offset 28, -8
 536 000e DF93      		push r29
 537               	.LCFI17:
 538               		.cfi_def_cfa_offset 10
 539               		.cfi_offset 29, -9
 540               	/* prologue: function */
 541               	/* frame size = 0 */
 542               	/* stack size = 8 */
 543               	.L__stack_usage = 8
 544 0010 EC01      		movw r28,r24
 545 0012 6B01      		movw r12,r22
 546 0014 7A01      		movw r14,r20
 320:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 321:../../os/oslib/src/chmboxes.c **** 
 322:../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 323:../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 324:../../os/oslib/src/chmboxes.c **** 
 325:../../os/oslib/src/chmboxes.c ****   do {
 326:../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 327:../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 328:../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 329:../../os/oslib/src/chmboxes.c ****     }
 330:../../os/oslib/src/chmboxes.c **** 
 331:../../os/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 332:../../os/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (size_t)0) {
 333:../../os/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 334:../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 335:../../os/oslib/src/chmboxes.c ****       }
 336:../../os/oslib/src/chmboxes.c ****       *mbp->rdptr = msg;
 337:../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 338:../../os/oslib/src/chmboxes.c **** 
 339:../../os/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 340:../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 341:../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 342:../../os/oslib/src/chmboxes.c **** 
 343:../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 344:../../os/oslib/src/chmboxes.c ****     }
 345:../../os/oslib/src/chmboxes.c **** 
 346:../../os/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 347:../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 547               		.loc 1 347 0
 548 0016 8C01      		movw r16,r24
 549 0018 055F      		subi r16,-11
 550 001a 1F4F      		sbci r17,-1
 551 001c 00C0      		rjmp .L26
 552               	.LVL40:
 553               	.L32:
 554 001e 2881      		ld r18,Y
 555 0020 3981      		ldd r19,Y+1
 556 0022 4A81      		ldd r20,Y+2
 557 0024 5B81      		ldd r21,Y+3
 558               	.LVL41:
 559               	.LBB130:
 560               	.LBB131:
 561               	.LBB132:
 562               		.loc 5 140 0
 563 0026 CA01      		movw r24,r20
 564 0028 821B      		sub r24,r18
 565 002a 930B      		sbc r25,r19
 566 002c 9595      		asr r25
 567 002e 8795      		ror r24
 568               	.LBE132:
 569               	.LBE131:
 570               	.LBE130:
 332:../../os/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 571               		.loc 1 332 0
 572 0030 6885      		ldd r22,Y+8
 573 0032 7985      		ldd r23,Y+9
 574 0034 8617      		cp r24,r22
 575 0036 9707      		cpc r25,r23
 576 0038 01F4      		brne .L31
 577               		.loc 1 347 0
 578 003a B701      		movw r22,r14
 579 003c C801      		movw r24,r16
 580 003e 0E94 0000 		call chThdEnqueueTimeoutS
 581               	.LVL42:
 348:../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 582               		.loc 1 348 0
 583 0042 0097      		sbiw r24,0
 584 0044 01F4      		brne .L21
 585               	.LVL43:
 586               	.L26:
 327:../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 587               		.loc 1 327 0
 588 0046 8A85      		ldd r24,Y+10
 589 0048 8823      		tst r24
 590 004a 01F0      		breq .L32
 328:../../os/oslib/src/chmboxes.c ****     }
 591               		.loc 1 328 0
 592 004c 8EEF      		ldi r24,lo8(-2)
 593 004e 9FEF      		ldi r25,lo8(-1)
 594               	.L21:
 595               	/* epilogue start */
 349:../../os/oslib/src/chmboxes.c **** 
 350:../../os/oslib/src/chmboxes.c ****   return rdymsg;
 351:../../os/oslib/src/chmboxes.c **** }
 596               		.loc 1 351 0
 597 0050 DF91      		pop r29
 598 0052 CF91      		pop r28
 599               	.LVL44:
 600 0054 1F91      		pop r17
 601 0056 0F91      		pop r16
 602               	.LVL45:
 603 0058 FF90      		pop r15
 604 005a EF90      		pop r14
 605               	.LVL46:
 606 005c DF90      		pop r13
 607 005e CF90      		pop r12
 608               	.LVL47:
 609 0060 0895      		ret
 610               	.LVL48:
 611               	.L31:
 333:../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 612               		.loc 1 333 0
 613 0062 EE81      		ldd r30,Y+6
 614 0064 FF81      		ldd r31,Y+7
 615 0066 3297      		sbiw r30,2
 616 0068 E217      		cp r30,r18
 617 006a F307      		cpc r31,r19
 618 006c 00F4      		brsh .L30
 334:../../os/oslib/src/chmboxes.c ****       }
 619               		.loc 1 334 0
 620 006e FA01      		movw r30,r20
 621 0070 3297      		sbiw r30,2
 622               	.L30:
 623 0072 FF83      		std Y+7,r31
 624 0074 EE83      		std Y+6,r30
 625               	.LVL49:
 626               	.LBB133:
 627               	.LBB134:
 336:../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 628               		.loc 1 336 0
 629 0076 D182      		std Z+1,r13
 630 0078 C082      		st Z,r12
 337:../../os/oslib/src/chmboxes.c **** 
 631               		.loc 1 337 0
 632 007a 8885      		ldd r24,Y+8
 633 007c 9985      		ldd r25,Y+9
 634 007e 0196      		adiw r24,1
 635 0080 9987      		std Y+9,r25
 636 0082 8887      		std Y+8,r24
 340:../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 637               		.loc 1 340 0
 638 0084 70E0      		ldi r23,0
 639 0086 60E0      		ldi r22,0
 640 0088 CE01      		movw r24,r28
 641 008a 0F96      		adiw r24,15
 642 008c 0E94 0000 		call chThdDequeueNextI
 643               	.LVL50:
 341:../../os/oslib/src/chmboxes.c **** 
 644               		.loc 1 341 0
 645 0090 0E94 0000 		call chSchRescheduleS
 646               	.LVL51:
 647 0094 90E0      		ldi r25,0
 648 0096 80E0      		ldi r24,0
 649 0098 00C0      		rjmp .L21
 650               	.LBE134:
 651               	.LBE133:
 652               		.cfi_endproc
 653               	.LFE197:
 655               		.section	.text.chMBPostAheadTimeout,"ax",@progbits
 656               	.global	chMBPostAheadTimeout
 658               	chMBPostAheadTimeout:
 659               	.LFB196:
 290:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 660               		.loc 1 290 0
 661               		.cfi_startproc
 662               	.LVL52:
 663               	/* prologue: function */
 664               	/* frame size = 0 */
 665               	/* stack size = 0 */
 666               	.L__stack_usage = 0
 667               	.LBB135:
 668               	.LBB136:
 669               	.LBB137:
 430:../../os/common/ports/AVR/chcore.h **** }
 670               		.loc 4 430 0
 671               	/* #APP */
 672               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 673 0000 F894      		cli
 674               	 ;  0 "" 2
 675               	/* #NOAPP */
 676               	.LBE137:
 677               	.LBE136:
 678               	.LBE135:
 294:../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 679               		.loc 1 294 0
 680 0002 0E94 0000 		call chMBPostAheadTimeoutS
 681               	.LVL53:
 682               	.LBB138:
 683               	.LBB139:
 684               	.LBB140:
 685               	.LBB141:
 686               		.loc 4 440 0
 687               	/* #APP */
 688               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 689 0006 7894      		sei
 690               	 ;  0 "" 2
 691               	/* epilogue start */
 692               	/* #NOAPP */
 693               	.LBE141:
 694               	.LBE140:
 695               	.LBE139:
 696               	.LBE138:
 298:../../os/oslib/src/chmboxes.c **** 
 697               		.loc 1 298 0
 698 0008 0895      		ret
 699               		.cfi_endproc
 700               	.LFE196:
 702               		.section	.text.chMBPostAheadI,"ax",@progbits
 703               	.global	chMBPostAheadI
 705               	chMBPostAheadI:
 706               	.LFB198:
 352:../../os/oslib/src/chmboxes.c **** 
 353:../../os/oslib/src/chmboxes.c **** /**
 354:../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 355:../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 356:../../os/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 357:../../os/oslib/src/chmboxes.c ****  *
 358:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 359:../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 360:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 361:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 362:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 363:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 364:../../os/oslib/src/chmboxes.c ****  *                      posted.
 365:../../os/oslib/src/chmboxes.c ****  *
 366:../../os/oslib/src/chmboxes.c ****  * @iclass
 367:../../os/oslib/src/chmboxes.c ****  */
 368:../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 707               		.loc 1 368 0
 708               		.cfi_startproc
 709               	.LVL54:
 710               	/* prologue: function */
 711               	/* frame size = 0 */
 712               	/* stack size = 0 */
 713               	.L__stack_usage = 0
 714 0000 FC01      		movw r30,r24
 369:../../os/oslib/src/chmboxes.c **** 
 370:../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 371:../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 372:../../os/oslib/src/chmboxes.c **** 
 373:../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 374:../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 715               		.loc 1 374 0
 716 0002 8285      		ldd r24,Z+10
 717               	.LVL55:
 718 0004 8111      		cpse r24,__zero_reg__
 719 0006 00C0      		rjmp .L38
 720               	.LVL56:
 721 0008 2081      		ld r18,Z
 722 000a 3181      		ldd r19,Z+1
 723 000c 4281      		ldd r20,Z+2
 724 000e 5381      		ldd r21,Z+3
 725               	.LVL57:
 726               	.LBB142:
 727               	.LBB143:
 728               	.LBB144:
 729               		.loc 5 140 0
 730 0010 CA01      		movw r24,r20
 731 0012 821B      		sub r24,r18
 732 0014 930B      		sbc r25,r19
 733 0016 9595      		asr r25
 734 0018 8795      		ror r24
 735               	.LBE144:
 736               	.LBE143:
 737               	.LBE142:
 375:../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 376:../../os/oslib/src/chmboxes.c ****   }
 377:../../os/oslib/src/chmboxes.c **** 
 378:../../os/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 379:../../os/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (size_t)0) {
 738               		.loc 1 379 0
 739 001a A085      		ldd r26,Z+8
 740 001c B185      		ldd r27,Z+9
 741 001e 8A17      		cp r24,r26
 742 0020 9B07      		cpc r25,r27
 743 0022 01F0      		breq .L39
 380:../../os/oslib/src/chmboxes.c ****     if (--mbp->rdptr < mbp->buffer) {
 744               		.loc 1 380 0
 745 0024 A681      		ldd r26,Z+6
 746 0026 B781      		ldd r27,Z+7
 747 0028 1297      		sbiw r26,2
 748 002a A217      		cp r26,r18
 749 002c B307      		cpc r27,r19
 750 002e 00F4      		brsh .L40
 381:../../os/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->top - 1;
 751               		.loc 1 381 0
 752 0030 DA01      		movw r26,r20
 753 0032 1297      		sbiw r26,2
 754               	.L40:
 755 0034 B783      		std Z+7,r27
 756 0036 A683      		std Z+6,r26
 382:../../os/oslib/src/chmboxes.c ****     }
 383:../../os/oslib/src/chmboxes.c ****     *mbp->rdptr = msg;
 757               		.loc 1 383 0
 758 0038 6D93      		st X+,r22
 759 003a 7C93      		st X,r23
 384:../../os/oslib/src/chmboxes.c ****     mbp->cnt++;
 760               		.loc 1 384 0
 761 003c 8085      		ldd r24,Z+8
 762 003e 9185      		ldd r25,Z+9
 763 0040 0196      		adiw r24,1
 764 0042 9187      		std Z+9,r25
 765 0044 8087      		std Z+8,r24
 385:../../os/oslib/src/chmboxes.c **** 
 386:../../os/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 387:../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 766               		.loc 1 387 0
 767 0046 70E0      		ldi r23,0
 768 0048 60E0      		ldi r22,0
 769               	.LVL58:
 770 004a CF01      		movw r24,r30
 771 004c 0F96      		adiw r24,15
 772 004e 0E94 0000 		call chThdDequeueNextI
 773               	.LVL59:
 388:../../os/oslib/src/chmboxes.c **** 
 389:../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 774               		.loc 1 389 0
 775 0052 90E0      		ldi r25,0
 776 0054 80E0      		ldi r24,0
 777 0056 0895      		ret
 778               	.LVL60:
 779               	.L38:
 375:../../os/oslib/src/chmboxes.c ****   }
 780               		.loc 1 375 0
 781 0058 8EEF      		ldi r24,lo8(-2)
 782 005a 9FEF      		ldi r25,lo8(-1)
 783 005c 0895      		ret
 784               	.LVL61:
 785               	.L39:
 390:../../os/oslib/src/chmboxes.c ****   }
 391:../../os/oslib/src/chmboxes.c **** 
 392:../../os/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 393:../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 786               		.loc 1 393 0
 787 005e 8FEF      		ldi r24,lo8(-1)
 788 0060 9FEF      		ldi r25,lo8(-1)
 789               	/* epilogue start */
 394:../../os/oslib/src/chmboxes.c **** }
 790               		.loc 1 394 0
 791 0062 0895      		ret
 792               		.cfi_endproc
 793               	.LFE198:
 795               		.section	.text.chMBFetchTimeoutS,"ax",@progbits
 796               	.global	chMBFetchTimeoutS
 798               	chMBFetchTimeoutS:
 799               	.LFB200:
 395:../../os/oslib/src/chmboxes.c **** 
 396:../../os/oslib/src/chmboxes.c **** /**
 397:../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 398:../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 399:../../os/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 400:../../os/oslib/src/chmboxes.c ****  *
 401:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 402:../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 403:../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 404:../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 405:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 406:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 407:../../os/oslib/src/chmboxes.c ****  *                      .
 408:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 409:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 410:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 411:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 412:../../os/oslib/src/chmboxes.c ****  *
 413:../../os/oslib/src/chmboxes.c ****  * @api
 414:../../os/oslib/src/chmboxes.c ****  */
 415:../../os/oslib/src/chmboxes.c **** msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 416:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 417:../../os/oslib/src/chmboxes.c **** 
 418:../../os/oslib/src/chmboxes.c ****   chSysLock();
 419:../../os/oslib/src/chmboxes.c ****   rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 420:../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 421:../../os/oslib/src/chmboxes.c **** 
 422:../../os/oslib/src/chmboxes.c ****   return rdymsg;
 423:../../os/oslib/src/chmboxes.c **** }
 424:../../os/oslib/src/chmboxes.c **** 
 425:../../os/oslib/src/chmboxes.c **** /**
 426:../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 427:../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 428:../../os/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 429:../../os/oslib/src/chmboxes.c ****  *
 430:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 431:../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 432:../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 433:../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 434:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 435:../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 436:../../os/oslib/src/chmboxes.c ****  *                      .
 437:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 438:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 439:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 440:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 441:../../os/oslib/src/chmboxes.c ****  *
 442:../../os/oslib/src/chmboxes.c ****  * @sclass
 443:../../os/oslib/src/chmboxes.c ****  */
 444:../../os/oslib/src/chmboxes.c **** msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 800               		.loc 1 444 0
 801               		.cfi_startproc
 802               	.LVL62:
 803 0000 CF92      		push r12
 804               	.LCFI18:
 805               		.cfi_def_cfa_offset 3
 806               		.cfi_offset 12, -2
 807 0002 DF92      		push r13
 808               	.LCFI19:
 809               		.cfi_def_cfa_offset 4
 810               		.cfi_offset 13, -3
 811 0004 EF92      		push r14
 812               	.LCFI20:
 813               		.cfi_def_cfa_offset 5
 814               		.cfi_offset 14, -4
 815 0006 FF92      		push r15
 816               	.LCFI21:
 817               		.cfi_def_cfa_offset 6
 818               		.cfi_offset 15, -5
 819 0008 0F93      		push r16
 820               	.LCFI22:
 821               		.cfi_def_cfa_offset 7
 822               		.cfi_offset 16, -6
 823 000a 1F93      		push r17
 824               	.LCFI23:
 825               		.cfi_def_cfa_offset 8
 826               		.cfi_offset 17, -7
 827 000c CF93      		push r28
 828               	.LCFI24:
 829               		.cfi_def_cfa_offset 9
 830               		.cfi_offset 28, -8
 831 000e DF93      		push r29
 832               	.LCFI25:
 833               		.cfi_def_cfa_offset 10
 834               		.cfi_offset 29, -9
 835               	/* prologue: function */
 836               	/* frame size = 0 */
 837               	/* stack size = 8 */
 838               	.L__stack_usage = 8
 839 0010 EC01      		movw r28,r24
 840 0012 6B01      		movw r12,r22
 841 0014 7A01      		movw r14,r20
 445:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 446:../../os/oslib/src/chmboxes.c **** 
 447:../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 448:../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 449:../../os/oslib/src/chmboxes.c **** 
 450:../../os/oslib/src/chmboxes.c ****   do {
 451:../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 452:../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 453:../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 454:../../os/oslib/src/chmboxes.c ****     }
 455:../../os/oslib/src/chmboxes.c **** 
 456:../../os/oslib/src/chmboxes.c ****     /* Is there a message in queue? if so then fetch.*/
 457:../../os/oslib/src/chmboxes.c ****     if (chMBGetUsedCountI(mbp) > (size_t)0) {
 458:../../os/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 459:../../os/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 460:../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 461:../../os/oslib/src/chmboxes.c ****       }
 462:../../os/oslib/src/chmboxes.c ****       mbp->cnt--;
 463:../../os/oslib/src/chmboxes.c **** 
 464:../../os/oslib/src/chmboxes.c ****       /* If there is a writer waiting then makes it ready.*/
 465:../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qw, MSG_OK);
 466:../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 467:../../os/oslib/src/chmboxes.c **** 
 468:../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 469:../../os/oslib/src/chmboxes.c ****     }
 470:../../os/oslib/src/chmboxes.c **** 
 471:../../os/oslib/src/chmboxes.c ****     /* No message in the queue, waiting for a message to become available.*/
 472:../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 842               		.loc 1 472 0
 843 0016 8C01      		movw r16,r24
 844 0018 015F      		subi r16,-15
 845 001a 1F4F      		sbci r17,-1
 846 001c 00C0      		rjmp .L45
 847               	.LVL63:
 848               	.L50:
 457:../../os/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 849               		.loc 1 457 0
 850 001e 8885      		ldd r24,Y+8
 851 0020 9985      		ldd r25,Y+9
 852 0022 892B      		or r24,r25
 853 0024 01F4      		brne .L49
 854               		.loc 1 472 0
 855 0026 B701      		movw r22,r14
 856 0028 C801      		movw r24,r16
 857 002a 0E94 0000 		call chThdEnqueueTimeoutS
 858               	.LVL64:
 473:../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 859               		.loc 1 473 0
 860 002e 0097      		sbiw r24,0
 861 0030 01F4      		brne .L41
 862               	.LVL65:
 863               	.L45:
 452:../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 864               		.loc 1 452 0
 865 0032 8A85      		ldd r24,Y+10
 866 0034 8823      		tst r24
 867 0036 01F0      		breq .L50
 453:../../os/oslib/src/chmboxes.c ****     }
 868               		.loc 1 453 0
 869 0038 8EEF      		ldi r24,lo8(-2)
 870 003a 9FEF      		ldi r25,lo8(-1)
 871               	.L41:
 872               	/* epilogue start */
 474:../../os/oslib/src/chmboxes.c **** 
 475:../../os/oslib/src/chmboxes.c ****   return rdymsg;
 476:../../os/oslib/src/chmboxes.c **** }
 873               		.loc 1 476 0
 874 003c DF91      		pop r29
 875 003e CF91      		pop r28
 876               	.LVL66:
 877 0040 1F91      		pop r17
 878 0042 0F91      		pop r16
 879               	.LVL67:
 880 0044 FF90      		pop r15
 881 0046 EF90      		pop r14
 882               	.LVL68:
 883 0048 DF90      		pop r13
 884 004a CF90      		pop r12
 885               	.LVL69:
 886 004c 0895      		ret
 887               	.LVL70:
 888               	.L49:
 889               	.LBB149:
 890               	.LBB150:
 458:../../os/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 891               		.loc 1 458 0
 892 004e EE81      		ldd r30,Y+6
 893 0050 FF81      		ldd r31,Y+7
 894 0052 CF01      		movw r24,r30
 895 0054 0296      		adiw r24,2
 896 0056 9F83      		std Y+7,r25
 897 0058 8E83      		std Y+6,r24
 898 005a 2081      		ld r18,Z
 899 005c 3181      		ldd r19,Z+1
 900 005e F601      		movw r30,r12
 901 0060 3183      		std Z+1,r19
 902 0062 2083      		st Z,r18
 459:../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 903               		.loc 1 459 0
 904 0064 2A81      		ldd r18,Y+2
 905 0066 3B81      		ldd r19,Y+3
 906 0068 8217      		cp r24,r18
 907 006a 9307      		cpc r25,r19
 908 006c 00F0      		brlo .L44
 460:../../os/oslib/src/chmboxes.c ****       }
 909               		.loc 1 460 0
 910 006e 8881      		ld r24,Y
 911 0070 9981      		ldd r25,Y+1
 912 0072 9F83      		std Y+7,r25
 913 0074 8E83      		std Y+6,r24
 914               	.L44:
 462:../../os/oslib/src/chmboxes.c **** 
 915               		.loc 1 462 0
 916 0076 8885      		ldd r24,Y+8
 917 0078 9985      		ldd r25,Y+9
 918 007a 0197      		sbiw r24,1
 919 007c 9987      		std Y+9,r25
 920 007e 8887      		std Y+8,r24
 465:../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 921               		.loc 1 465 0
 922 0080 70E0      		ldi r23,0
 923 0082 60E0      		ldi r22,0
 924 0084 CE01      		movw r24,r28
 925 0086 0B96      		adiw r24,11
 926 0088 0E94 0000 		call chThdDequeueNextI
 927               	.LVL71:
 466:../../os/oslib/src/chmboxes.c **** 
 928               		.loc 1 466 0
 929 008c 0E94 0000 		call chSchRescheduleS
 930               	.LVL72:
 931 0090 90E0      		ldi r25,0
 932 0092 80E0      		ldi r24,0
 933 0094 00C0      		rjmp .L41
 934               	.LBE150:
 935               	.LBE149:
 936               		.cfi_endproc
 937               	.LFE200:
 939               		.section	.text.chMBFetchTimeout,"ax",@progbits
 940               	.global	chMBFetchTimeout
 942               	chMBFetchTimeout:
 943               	.LFB199:
 415:../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 944               		.loc 1 415 0
 945               		.cfi_startproc
 946               	.LVL73:
 947               	/* prologue: function */
 948               	/* frame size = 0 */
 949               	/* stack size = 0 */
 950               	.L__stack_usage = 0
 951               	.LBB151:
 952               	.LBB152:
 953               	.LBB153:
 430:../../os/common/ports/AVR/chcore.h **** }
 954               		.loc 4 430 0
 955               	/* #APP */
 956               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 957 0000 F894      		cli
 958               	 ;  0 "" 2
 959               	/* #NOAPP */
 960               	.LBE153:
 961               	.LBE152:
 962               	.LBE151:
 419:../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 963               		.loc 1 419 0
 964 0002 0E94 0000 		call chMBFetchTimeoutS
 965               	.LVL74:
 966               	.LBB154:
 967               	.LBB155:
 968               	.LBB156:
 969               	.LBB157:
 970               		.loc 4 440 0
 971               	/* #APP */
 972               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 973 0006 7894      		sei
 974               	 ;  0 "" 2
 975               	/* epilogue start */
 976               	/* #NOAPP */
 977               	.LBE157:
 978               	.LBE156:
 979               	.LBE155:
 980               	.LBE154:
 423:../../os/oslib/src/chmboxes.c **** 
 981               		.loc 1 423 0
 982 0008 0895      		ret
 983               		.cfi_endproc
 984               	.LFE199:
 986               		.section	.text.chMBFetchI,"ax",@progbits
 987               	.global	chMBFetchI
 989               	chMBFetchI:
 990               	.LFB201:
 477:../../os/oslib/src/chmboxes.c **** 
 478:../../os/oslib/src/chmboxes.c **** /**
 479:../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 480:../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 481:../../os/oslib/src/chmboxes.c ****  *          condition if the queue is empty.
 482:../../os/oslib/src/chmboxes.c ****  *
 483:../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 484:../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 485:../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 486:../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 487:../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 488:../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 489:../../os/oslib/src/chmboxes.c ****  *                      fetched.
 490:../../os/oslib/src/chmboxes.c ****  *
 491:../../os/oslib/src/chmboxes.c ****  * @iclass
 492:../../os/oslib/src/chmboxes.c ****  */
 493:../../os/oslib/src/chmboxes.c **** msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 991               		.loc 1 493 0
 992               		.cfi_startproc
 993               	.LVL75:
 994               	/* prologue: function */
 995               	/* frame size = 0 */
 996               	/* stack size = 0 */
 997               	.L__stack_usage = 0
 998 0000 FC01      		movw r30,r24
 494:../../os/oslib/src/chmboxes.c **** 
 495:../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 496:../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 497:../../os/oslib/src/chmboxes.c **** 
 498:../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 499:../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 999               		.loc 1 499 0
 1000 0002 8285      		ldd r24,Z+10
 1001               	.LVL76:
 1002 0004 8111      		cpse r24,__zero_reg__
 1003 0006 00C0      		rjmp .L55
 1004               	.LVL77:
 500:../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 501:../../os/oslib/src/chmboxes.c ****   }
 502:../../os/oslib/src/chmboxes.c **** 
 503:../../os/oslib/src/chmboxes.c ****   /* Is there a message in queue? if so then fetch.*/
 504:../../os/oslib/src/chmboxes.c ****   if (chMBGetUsedCountI(mbp) > (size_t)0) {
 1005               		.loc 1 504 0
 1006 0008 8085      		ldd r24,Z+8
 1007 000a 9185      		ldd r25,Z+9
 1008 000c 892B      		or r24,r25
 1009 000e 01F0      		breq .L56
 505:../../os/oslib/src/chmboxes.c ****     *msgp = *mbp->rdptr++;
 1010               		.loc 1 505 0
 1011 0010 A681      		ldd r26,Z+6
 1012 0012 B781      		ldd r27,Z+7
 1013 0014 CD01      		movw r24,r26
 1014 0016 0296      		adiw r24,2
 1015 0018 9783      		std Z+7,r25
 1016 001a 8683      		std Z+6,r24
 1017 001c 2D91      		ld r18,X+
 1018 001e 3C91      		ld r19,X
 1019 0020 DB01      		movw r26,r22
 1020 0022 2D93      		st X+,r18
 1021 0024 3C93      		st X,r19
 506:../../os/oslib/src/chmboxes.c ****     if (mbp->rdptr >= mbp->top) {
 1022               		.loc 1 506 0
 1023 0026 2281      		ldd r18,Z+2
 1024 0028 3381      		ldd r19,Z+3
 1025 002a 8217      		cp r24,r18
 1026 002c 9307      		cpc r25,r19
 1027 002e 00F0      		brlo .L54
 507:../../os/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->buffer;
 1028               		.loc 1 507 0
 1029 0030 8081      		ld r24,Z
 1030 0032 9181      		ldd r25,Z+1
 1031 0034 9783      		std Z+7,r25
 1032 0036 8683      		std Z+6,r24
 1033               	.L54:
 508:../../os/oslib/src/chmboxes.c ****     }
 509:../../os/oslib/src/chmboxes.c ****     mbp->cnt--;
 1034               		.loc 1 509 0
 1035 0038 8085      		ldd r24,Z+8
 1036 003a 9185      		ldd r25,Z+9
 1037 003c 0197      		sbiw r24,1
 1038 003e 9187      		std Z+9,r25
 1039 0040 8087      		std Z+8,r24
 510:../../os/oslib/src/chmboxes.c **** 
 511:../../os/oslib/src/chmboxes.c ****     /* If there is a writer waiting then makes it ready.*/
 512:../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qw, MSG_OK);
 1040               		.loc 1 512 0
 1041 0042 70E0      		ldi r23,0
 1042 0044 60E0      		ldi r22,0
 1043               	.LVL78:
 1044 0046 CF01      		movw r24,r30
 1045 0048 0B96      		adiw r24,11
 1046 004a 0E94 0000 		call chThdDequeueNextI
 1047               	.LVL79:
 513:../../os/oslib/src/chmboxes.c **** 
 514:../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 1048               		.loc 1 514 0
 1049 004e 90E0      		ldi r25,0
 1050 0050 80E0      		ldi r24,0
 1051 0052 0895      		ret
 1052               	.LVL80:
 1053               	.L55:
 500:../../os/oslib/src/chmboxes.c ****   }
 1054               		.loc 1 500 0
 1055 0054 8EEF      		ldi r24,lo8(-2)
 1056 0056 9FEF      		ldi r25,lo8(-1)
 1057 0058 0895      		ret
 1058               	.LVL81:
 1059               	.L56:
 515:../../os/oslib/src/chmboxes.c ****   }
 516:../../os/oslib/src/chmboxes.c **** 
 517:../../os/oslib/src/chmboxes.c ****   /* No message, immediate timeout.*/
 518:../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 1060               		.loc 1 518 0
 1061 005a 8FEF      		ldi r24,lo8(-1)
 1062 005c 9FEF      		ldi r25,lo8(-1)
 1063               	/* epilogue start */
 519:../../os/oslib/src/chmboxes.c **** }
 1064               		.loc 1 519 0
 1065 005e 0895      		ret
 1066               		.cfi_endproc
 1067               	.LFE201:
 1069               		.text
 1070               	.Letext0:
 1071               		.file 6 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1072               		.file 7 "/usr/lib/avr/include/stdint.h"
 1073               		.file 8 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1074               		.file 9 "../../os/rt/include/chearly.h"
 1075               		.file 10 "../../os/rt/include/chobjects.h"
 1076               		.file 11 "../../os/rt/include/chrfcu.h"
 1077               		.file 12 "../../os/rt/include/chdebug.h"
 1078               		.file 13 "../../os/rt/include/chtime.h"
 1079               		.file 14 "../../os/rt/include/chsem.h"
 1080               		.file 15 "../../os/rt/include/chmtx.h"
 1081               		.file 16 "../../os/rt/include/chsys.h"
 1082               		.file 17 "../../os/rt/include/chregistry.h"
 1083               		.file 18 "../../os/oslib/include/chmemcore.h"
 1084               		.file 19 "../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmboxes.c
     /tmp/cctZDdVF.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctZDdVF.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctZDdVF.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctZDdVF.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctZDdVF.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cctZDdVF.s:13     .text.chMBObjectInit:0000000000000000 chMBObjectInit
     /tmp/cctZDdVF.s:95     .text.chMBResetI:0000000000000000 chMBResetI
     /tmp/cctZDdVF.s:154    .text.chMBReset:0000000000000000 chMBReset
     /tmp/cctZDdVF.s:205    .text.chMBPostTimeoutS:0000000000000000 chMBPostTimeoutS
     /tmp/cctZDdVF.s:362    .text.chMBPostTimeout:0000000000000000 chMBPostTimeout
     /tmp/cctZDdVF.s:409    .text.chMBPostI:0000000000000000 chMBPostI
     /tmp/cctZDdVF.s:503    .text.chMBPostAheadTimeoutS:0000000000000000 chMBPostAheadTimeoutS
     /tmp/cctZDdVF.s:658    .text.chMBPostAheadTimeout:0000000000000000 chMBPostAheadTimeout
     /tmp/cctZDdVF.s:705    .text.chMBPostAheadI:0000000000000000 chMBPostAheadI
     /tmp/cctZDdVF.s:798    .text.chMBFetchTimeoutS:0000000000000000 chMBFetchTimeoutS
     /tmp/cctZDdVF.s:942    .text.chMBFetchTimeout:0000000000000000 chMBFetchTimeout
     /tmp/cctZDdVF.s:989    .text.chMBFetchI:0000000000000000 chMBFetchI

UNDEFINED SYMBOLS
chThdDequeueAllI
chSchRescheduleS
chThdEnqueueTimeoutS
chThdDequeueNextI
