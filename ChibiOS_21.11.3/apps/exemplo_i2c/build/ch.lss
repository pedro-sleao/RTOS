
build/ch.elf: formato do arquivo elf32-avr

Seções:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00002862  000028f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b3  00800182  00800182  00002978  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000298c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000858  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00021ecf  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005616  00000000  00000000  000250f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007aea  00000000  00000000  0002a709  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000180c  00000000  00000000  000321f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023fd  00000000  00000000  00033a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000834c  00000000  00000000  00035dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b80  00000000  00000000  0003e149  2**0
                  CONTENTS, READONLY, DEBUGGING

Desmontagem da seção .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	98 c5       	rjmp	.+2864   	; 0xb5e <__vector_11>
      2e:	00 00       	nop
      30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
      32:	00 00       	nop
      34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c5       	rjmp	.+2746   	; 0xaf4 <__vector_14>
      3a:	00 00       	nop
      3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
      46:	00 00       	nop
      48:	d5 c6       	rjmp	.+3498   	; 0xdf4 <__vector_18>
      4a:	00 00       	nop
      4c:	11 c7       	rjmp	.+3618   	; 0xe70 <__vector_19>
      4e:	00 00       	nop
      50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b7 c3       	rjmp	.+1902   	; 0x7d0 <__vector_24>
      62:	00 00       	nop
      64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2210>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2345>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e2 e6       	ldi	r30, 0x62	; 98
      9e:	f8 e2       	ldi	r31, 0x28	; 40
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a2 38       	cpi	r26, 0x82	; 130
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	23 e0       	ldi	r18, 0x03	; 3
      ae:	a2 e8       	ldi	r26, 0x82	; 130
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a5 33       	cpi	r26, 0x35	; 53
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 03 0c 	call	0x1806	; 0x1806 <main>
      c0:	0c 94 2f 14 	jmp	0x285e	; 0x285e <_exit>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
      c6:	51 d3       	rcall	.+1698   	; 0x76a <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
      c8:	84 e2       	ldi	r24, 0x24	; 36
      ca:	91 e0       	ldi	r25, 0x01	; 1
#endif
#if (HAL_USE_EFL == TRUE) || defined(__DOXYGEN__)
  eflInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
      cc:	4f d3       	rcall	.+1694   	; 0x76c <_pal_lld_init>
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
      ce:	5b d2       	rcall	.+1206   	; 0x586 <gptInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
      d0:	77 d2       	rcall	.+1262   	; 0x5c0 <i2cInit>
      d2:	d0 d2       	rcall	.+1440   	; 0x674 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
      d4:	46 d3       	rcall	.+1676   	; 0x762 <boardInit>
      d6:	00 c0       	rjmp	.+0      	; 0xd8 <stInit>

000000d8 <stInit>:

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
      d8:	38 c5       	rjmp	.+2672   	; 0xb4a <st_lld_init>

000000da <iq_read>:
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
      da:	af 92       	push	r10
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	ec 01       	movw	r28, r24
      f0:	6b 01       	movw	r12, r22
      f2:	8a 01       	movw	r16, r20
      f4:	8c 81       	ldd	r24, Y+4	; 0x04
      f6:	9d 81       	ldd	r25, Y+5	; 0x05
      f8:	84 17       	cp	r24, r20
      fa:	95 07       	cpc	r25, r21
      fc:	10 f4       	brcc	.+4      	; 0x102 <iq_read+0x28>
      fe:	0c 81       	ldd	r16, Y+4	; 0x04
     100:	1d 81       	ldd	r17, Y+5	; 0x05
     102:	6c 85       	ldd	r22, Y+12	; 0x0c
     104:	7d 85       	ldd	r23, Y+13	; 0x0d
     106:	e8 84       	ldd	r14, Y+8	; 0x08
     108:	f9 84       	ldd	r15, Y+9	; 0x09
     10a:	e6 1a       	sub	r14, r22
     10c:	f7 0a       	sbc	r15, r23
     10e:	0e 15       	cp	r16, r14
     110:	1f 05       	cpc	r17, r15
     112:	98 f1       	brcs	.+102    	; 0x17a <iq_read+0xa0>
     114:	e0 16       	cp	r14, r16
     116:	f1 06       	cpc	r15, r17
     118:	d0 f0       	brcs	.+52     	; 0x14e <iq_read+0x74>
     11a:	a8 01       	movw	r20, r16
     11c:	c6 01       	movw	r24, r12
     11e:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     122:	8e 81       	ldd	r24, Y+6	; 0x06
     124:	9f 81       	ldd	r25, Y+7	; 0x07
     126:	9d 87       	std	Y+13, r25	; 0x0d
     128:	8c 87       	std	Y+12, r24	; 0x0c
     12a:	8c 81       	ldd	r24, Y+4	; 0x04
     12c:	9d 81       	ldd	r25, Y+5	; 0x05
     12e:	80 1b       	sub	r24, r16
     130:	91 0b       	sbc	r25, r17
     132:	9d 83       	std	Y+5, r25	; 0x05
     134:	8c 83       	std	Y+4, r24	; 0x04
     136:	c8 01       	movw	r24, r16
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	1f 91       	pop	r17
     13e:	0f 91       	pop	r16
     140:	ff 90       	pop	r15
     142:	ef 90       	pop	r14
     144:	df 90       	pop	r13
     146:	cf 90       	pop	r12
     148:	bf 90       	pop	r11
     14a:	af 90       	pop	r10
     14c:	08 95       	ret
     14e:	a7 01       	movw	r20, r14
     150:	c6 01       	movw	r24, r12
     152:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     156:	58 01       	movw	r10, r16
     158:	ae 18       	sub	r10, r14
     15a:	bf 08       	sbc	r11, r15
     15c:	6e 81       	ldd	r22, Y+6	; 0x06
     15e:	7f 81       	ldd	r23, Y+7	; 0x07
     160:	a5 01       	movw	r20, r10
     162:	c6 01       	movw	r24, r12
     164:	8e 0d       	add	r24, r14
     166:	9f 1d       	adc	r25, r15
     168:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     16c:	4e 81       	ldd	r20, Y+6	; 0x06
     16e:	5f 81       	ldd	r21, Y+7	; 0x07
     170:	4a 0d       	add	r20, r10
     172:	5b 1d       	adc	r21, r11
     174:	5d 87       	std	Y+13, r21	; 0x0d
     176:	4c 87       	std	Y+12, r20	; 0x0c
     178:	d8 cf       	rjmp	.-80     	; 0x12a <iq_read+0x50>
     17a:	a8 01       	movw	r20, r16
     17c:	c6 01       	movw	r24, r12
     17e:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     182:	8c 85       	ldd	r24, Y+12	; 0x0c
     184:	9d 85       	ldd	r25, Y+13	; 0x0d
     186:	80 0f       	add	r24, r16
     188:	91 1f       	adc	r25, r17
     18a:	9d 87       	std	Y+13, r25	; 0x0d
     18c:	8c 87       	std	Y+12, r24	; 0x0c
     18e:	cd cf       	rjmp	.-102    	; 0x12a <iq_read+0x50>

00000190 <oq_write>:
     190:	af 92       	push	r10
     192:	bf 92       	push	r11
     194:	cf 92       	push	r12
     196:	df 92       	push	r13
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	6b 01       	movw	r12, r22
     1a8:	8a 01       	movw	r16, r20
     1aa:	8c 81       	ldd	r24, Y+4	; 0x04
     1ac:	9d 81       	ldd	r25, Y+5	; 0x05
     1ae:	84 17       	cp	r24, r20
     1b0:	95 07       	cpc	r25, r21
     1b2:	10 f4       	brcc	.+4      	; 0x1b8 <oq_write+0x28>
     1b4:	0c 81       	ldd	r16, Y+4	; 0x04
     1b6:	1d 81       	ldd	r17, Y+5	; 0x05
     1b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     1ba:	9b 85       	ldd	r25, Y+11	; 0x0b
     1bc:	e8 84       	ldd	r14, Y+8	; 0x08
     1be:	f9 84       	ldd	r15, Y+9	; 0x09
     1c0:	e8 1a       	sub	r14, r24
     1c2:	f9 0a       	sbc	r15, r25
     1c4:	0e 15       	cp	r16, r14
     1c6:	1f 05       	cpc	r17, r15
     1c8:	98 f1       	brcs	.+102    	; 0x230 <oq_write+0xa0>
     1ca:	e0 16       	cp	r14, r16
     1cc:	f1 06       	cpc	r15, r17
     1ce:	d0 f0       	brcs	.+52     	; 0x204 <oq_write+0x74>
     1d0:	a8 01       	movw	r20, r16
     1d2:	b6 01       	movw	r22, r12
     1d4:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     1d8:	8e 81       	ldd	r24, Y+6	; 0x06
     1da:	9f 81       	ldd	r25, Y+7	; 0x07
     1dc:	9b 87       	std	Y+11, r25	; 0x0b
     1de:	8a 87       	std	Y+10, r24	; 0x0a
     1e0:	8c 81       	ldd	r24, Y+4	; 0x04
     1e2:	9d 81       	ldd	r25, Y+5	; 0x05
     1e4:	80 1b       	sub	r24, r16
     1e6:	91 0b       	sbc	r25, r17
     1e8:	9d 83       	std	Y+5, r25	; 0x05
     1ea:	8c 83       	std	Y+4, r24	; 0x04
     1ec:	c8 01       	movw	r24, r16
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	ff 90       	pop	r15
     1f8:	ef 90       	pop	r14
     1fa:	df 90       	pop	r13
     1fc:	cf 90       	pop	r12
     1fe:	bf 90       	pop	r11
     200:	af 90       	pop	r10
     202:	08 95       	ret
     204:	a7 01       	movw	r20, r14
     206:	b6 01       	movw	r22, r12
     208:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     20c:	58 01       	movw	r10, r16
     20e:	ae 18       	sub	r10, r14
     210:	bf 08       	sbc	r11, r15
     212:	b6 01       	movw	r22, r12
     214:	6e 0d       	add	r22, r14
     216:	7f 1d       	adc	r23, r15
     218:	a5 01       	movw	r20, r10
     21a:	8e 81       	ldd	r24, Y+6	; 0x06
     21c:	9f 81       	ldd	r25, Y+7	; 0x07
     21e:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     222:	4e 81       	ldd	r20, Y+6	; 0x06
     224:	5f 81       	ldd	r21, Y+7	; 0x07
     226:	4a 0d       	add	r20, r10
     228:	5b 1d       	adc	r21, r11
     22a:	5b 87       	std	Y+11, r21	; 0x0b
     22c:	4a 87       	std	Y+10, r20	; 0x0a
     22e:	d8 cf       	rjmp	.-80     	; 0x1e0 <oq_write+0x50>
     230:	a8 01       	movw	r20, r16
     232:	b6 01       	movw	r22, r12
     234:	0e 94 41 13 	call	0x2682	; 0x2682 <memcpy>
     238:	8a 85       	ldd	r24, Y+10	; 0x0a
     23a:	9b 85       	ldd	r25, Y+11	; 0x0b
     23c:	80 0f       	add	r24, r16
     23e:	91 1f       	adc	r25, r17
     240:	9b 87       	std	Y+11, r25	; 0x0b
     242:	8a 87       	std	Y+10, r24	; 0x0a
     244:	cd cf       	rjmp	.-102    	; 0x1e0 <oq_write+0x50>

00000246 <iqObjectInit>:
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	fc 01       	movw	r30, r24
     24c:	91 83       	std	Z+1, r25	; 0x01
     24e:	80 83       	st	Z, r24
     250:	93 83       	std	Z+3, r25	; 0x03
     252:	82 83       	std	Z+2, r24	; 0x02
     254:	15 82       	std	Z+5, r1	; 0x05
     256:	14 82       	std	Z+4, r1	; 0x04
     258:	77 83       	std	Z+7, r23	; 0x07
     25a:	66 83       	std	Z+6, r22	; 0x06
     25c:	75 87       	std	Z+13, r23	; 0x0d
     25e:	64 87       	std	Z+12, r22	; 0x0c
     260:	73 87       	std	Z+11, r23	; 0x0b
     262:	62 87       	std	Z+10, r22	; 0x0a
     264:	64 0f       	add	r22, r20
     266:	75 1f       	adc	r23, r21
     268:	71 87       	std	Z+9, r23	; 0x09
     26a:	60 87       	std	Z+8, r22	; 0x08
     26c:	37 87       	std	Z+15, r19	; 0x0f
     26e:	26 87       	std	Z+14, r18	; 0x0e
     270:	11 8b       	std	Z+17, r17	; 0x11
     272:	00 8b       	std	Z+16, r16	; 0x10
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	08 95       	ret

0000027a <iqPutI>:
     27a:	fc 01       	movw	r30, r24
     27c:	a2 85       	ldd	r26, Z+10	; 0x0a
     27e:	b3 85       	ldd	r27, Z+11	; 0x0b
     280:	84 85       	ldd	r24, Z+12	; 0x0c
     282:	95 85       	ldd	r25, Z+13	; 0x0d
     284:	a8 17       	cp	r26, r24
     286:	b9 07       	cpc	r27, r25
     288:	e9 f0       	breq	.+58     	; 0x2c4 <iqPutI+0x4a>
     28a:	84 81       	ldd	r24, Z+4	; 0x04
     28c:	95 81       	ldd	r25, Z+5	; 0x05
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	95 83       	std	Z+5, r25	; 0x05
     292:	84 83       	std	Z+4, r24	; 0x04
     294:	cd 01       	movw	r24, r26
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	93 87       	std	Z+11, r25	; 0x0b
     29a:	82 87       	std	Z+10, r24	; 0x0a
     29c:	6c 93       	st	X, r22
     29e:	22 85       	ldd	r18, Z+10	; 0x0a
     2a0:	33 85       	ldd	r19, Z+11	; 0x0b
     2a2:	80 85       	ldd	r24, Z+8	; 0x08
     2a4:	91 85       	ldd	r25, Z+9	; 0x09
     2a6:	28 17       	cp	r18, r24
     2a8:	39 07       	cpc	r19, r25
     2aa:	20 f0       	brcs	.+8      	; 0x2b4 <iqPutI+0x3a>
     2ac:	86 81       	ldd	r24, Z+6	; 0x06
     2ae:	97 81       	ldd	r25, Z+7	; 0x07
     2b0:	93 87       	std	Z+11, r25	; 0x0b
     2b2:	82 87       	std	Z+10, r24	; 0x0a
     2b4:	cf 01       	movw	r24, r30
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	0e 94 31 0b 	call	0x1662	; 0x1662 <chThdDequeueNextI>
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	08 95       	ret
     2c4:	84 81       	ldd	r24, Z+4	; 0x04
     2c6:	95 81       	ldd	r25, Z+5	; 0x05
     2c8:	89 2b       	or	r24, r25
     2ca:	f9 f2       	breq	.-66     	; 0x28a <iqPutI+0x10>
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	9f ef       	ldi	r25, 0xFF	; 255
     2d0:	08 95       	ret

000002d2 <iqGetTimeout>:
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	ec 01       	movw	r28, r24
     2dc:	8b 01       	movw	r16, r22
     2de:	f8 94       	cli
     2e0:	06 c0       	rjmp	.+12     	; 0x2ee <iqGetTimeout+0x1c>
     2e2:	b8 01       	movw	r22, r16
     2e4:	ce 01       	movw	r24, r28
     2e6:	0e 94 14 0b 	call	0x1628	; 0x1628 <chThdEnqueueTimeoutS>
     2ea:	97 fd       	sbrc	r25, 7
     2ec:	27 c0       	rjmp	.+78     	; 0x33c <iqGetTimeout+0x6a>
     2ee:	8c 81       	ldd	r24, Y+4	; 0x04
     2f0:	9d 81       	ldd	r25, Y+5	; 0x05
     2f2:	89 2b       	or	r24, r25
     2f4:	b1 f3       	breq	.-20     	; 0x2e2 <iqGetTimeout+0x10>
     2f6:	8c 81       	ldd	r24, Y+4	; 0x04
     2f8:	9d 81       	ldd	r25, Y+5	; 0x05
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	9d 83       	std	Y+5, r25	; 0x05
     2fe:	8c 83       	std	Y+4, r24	; 0x04
     300:	ec 85       	ldd	r30, Y+12	; 0x0c
     302:	fd 85       	ldd	r31, Y+13	; 0x0d
     304:	cf 01       	movw	r24, r30
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	9d 87       	std	Y+13, r25	; 0x0d
     30a:	8c 87       	std	Y+12, r24	; 0x0c
     30c:	10 81       	ld	r17, Z
     30e:	28 85       	ldd	r18, Y+8	; 0x08
     310:	39 85       	ldd	r19, Y+9	; 0x09
     312:	82 17       	cp	r24, r18
     314:	93 07       	cpc	r25, r19
     316:	20 f0       	brcs	.+8      	; 0x320 <iqGetTimeout+0x4e>
     318:	8e 81       	ldd	r24, Y+6	; 0x06
     31a:	9f 81       	ldd	r25, Y+7	; 0x07
     31c:	9d 87       	std	Y+13, r25	; 0x0d
     31e:	8c 87       	std	Y+12, r24	; 0x0c
     320:	ee 85       	ldd	r30, Y+14	; 0x0e
     322:	ff 85       	ldd	r31, Y+15	; 0x0f
     324:	30 97       	sbiw	r30, 0x00	; 0
     326:	11 f0       	breq	.+4      	; 0x32c <iqGetTimeout+0x5a>
     328:	ce 01       	movw	r24, r28
     32a:	09 95       	icall
     32c:	78 94       	sei
     32e:	81 2f       	mov	r24, r17
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	08 95       	ret
     33c:	78 94       	sei
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <iqReadTimeout>:
     348:	6f 92       	push	r6
     34a:	7f 92       	push	r7
     34c:	8f 92       	push	r8
     34e:	9f 92       	push	r9
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	6c 01       	movw	r12, r24
     366:	7b 01       	movw	r14, r22
     368:	4a 01       	movw	r8, r20
     36a:	39 01       	movw	r6, r18
     36c:	fc 01       	movw	r30, r24
     36e:	a6 84       	ldd	r10, Z+14	; 0x0e
     370:	b7 84       	ldd	r11, Z+15	; 0x0f
     372:	f8 94       	cli
     374:	41 15       	cp	r20, r1
     376:	51 05       	cpc	r21, r1
     378:	b9 f0       	breq	.+46     	; 0x3a8 <iqReadTimeout+0x60>
     37a:	8a 01       	movw	r16, r20
     37c:	a8 01       	movw	r20, r16
     37e:	b7 01       	movw	r22, r14
     380:	c6 01       	movw	r24, r12
     382:	ab de       	rcall	.-682    	; 0xda <iq_read>
     384:	ec 01       	movw	r28, r24
     386:	89 2b       	or	r24, r25
     388:	01 f1       	breq	.+64     	; 0x3ca <iqReadTimeout+0x82>
     38a:	a1 14       	cp	r10, r1
     38c:	b1 04       	cpc	r11, r1
     38e:	19 f0       	breq	.+6      	; 0x396 <iqReadTimeout+0x4e>
     390:	c6 01       	movw	r24, r12
     392:	f5 01       	movw	r30, r10
     394:	09 95       	icall
     396:	78 94       	sei
     398:	0c 1b       	sub	r16, r28
     39a:	1d 0b       	sbc	r17, r29
     39c:	ec 0e       	add	r14, r28
     39e:	fd 1e       	adc	r15, r29
     3a0:	f8 94       	cli
     3a2:	01 15       	cp	r16, r1
     3a4:	11 05       	cpc	r17, r1
     3a6:	51 f7       	brne	.-44     	; 0x37c <iqReadTimeout+0x34>
     3a8:	c4 01       	movw	r24, r8
     3aa:	78 94       	sei
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	cf 90       	pop	r12
     3bc:	bf 90       	pop	r11
     3be:	af 90       	pop	r10
     3c0:	9f 90       	pop	r9
     3c2:	8f 90       	pop	r8
     3c4:	7f 90       	pop	r7
     3c6:	6f 90       	pop	r6
     3c8:	08 95       	ret
     3ca:	b3 01       	movw	r22, r6
     3cc:	c6 01       	movw	r24, r12
     3ce:	0e 94 14 0b 	call	0x1628	; 0x1628 <chThdEnqueueTimeoutS>
     3d2:	89 2b       	or	r24, r25
     3d4:	99 f2       	breq	.-90     	; 0x37c <iqReadTimeout+0x34>
     3d6:	c4 01       	movw	r24, r8
     3d8:	80 1b       	sub	r24, r16
     3da:	91 0b       	sbc	r25, r17
     3dc:	e6 cf       	rjmp	.-52     	; 0x3aa <iqReadTimeout+0x62>

000003de <oqObjectInit>:
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	fc 01       	movw	r30, r24
     3e4:	91 83       	std	Z+1, r25	; 0x01
     3e6:	80 83       	st	Z, r24
     3e8:	93 83       	std	Z+3, r25	; 0x03
     3ea:	82 83       	std	Z+2, r24	; 0x02
     3ec:	55 83       	std	Z+5, r21	; 0x05
     3ee:	44 83       	std	Z+4, r20	; 0x04
     3f0:	77 83       	std	Z+7, r23	; 0x07
     3f2:	66 83       	std	Z+6, r22	; 0x06
     3f4:	75 87       	std	Z+13, r23	; 0x0d
     3f6:	64 87       	std	Z+12, r22	; 0x0c
     3f8:	73 87       	std	Z+11, r23	; 0x0b
     3fa:	62 87       	std	Z+10, r22	; 0x0a
     3fc:	64 0f       	add	r22, r20
     3fe:	75 1f       	adc	r23, r21
     400:	71 87       	std	Z+9, r23	; 0x09
     402:	60 87       	std	Z+8, r22	; 0x08
     404:	37 87       	std	Z+15, r19	; 0x0f
     406:	26 87       	std	Z+14, r18	; 0x0e
     408:	11 8b       	std	Z+17, r17	; 0x11
     40a:	00 8b       	std	Z+16, r16	; 0x10
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	08 95       	ret

00000412 <oqPutTimeout>:
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ec 01       	movw	r28, r24
     41e:	f6 2e       	mov	r15, r22
     420:	8a 01       	movw	r16, r20
     422:	f8 94       	cli
     424:	06 c0       	rjmp	.+12     	; 0x432 <oqPutTimeout+0x20>
     426:	b8 01       	movw	r22, r16
     428:	ce 01       	movw	r24, r28
     42a:	0e 94 14 0b 	call	0x1628	; 0x1628 <chThdEnqueueTimeoutS>
     42e:	97 fd       	sbrc	r25, 7
     430:	2a c0       	rjmp	.+84     	; 0x486 <oqPutTimeout+0x74>
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	89 2b       	or	r24, r25
     438:	b1 f3       	breq	.-20     	; 0x426 <oqPutTimeout+0x14>
     43a:	8c 81       	ldd	r24, Y+4	; 0x04
     43c:	9d 81       	ldd	r25, Y+5	; 0x05
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	9d 83       	std	Y+5, r25	; 0x05
     442:	8c 83       	std	Y+4, r24	; 0x04
     444:	ea 85       	ldd	r30, Y+10	; 0x0a
     446:	fb 85       	ldd	r31, Y+11	; 0x0b
     448:	cf 01       	movw	r24, r30
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	9b 87       	std	Y+11, r25	; 0x0b
     44e:	8a 87       	std	Y+10, r24	; 0x0a
     450:	f0 82       	st	Z, r15
     452:	2a 85       	ldd	r18, Y+10	; 0x0a
     454:	3b 85       	ldd	r19, Y+11	; 0x0b
     456:	88 85       	ldd	r24, Y+8	; 0x08
     458:	99 85       	ldd	r25, Y+9	; 0x09
     45a:	28 17       	cp	r18, r24
     45c:	39 07       	cpc	r19, r25
     45e:	20 f0       	brcs	.+8      	; 0x468 <oqPutTimeout+0x56>
     460:	8e 81       	ldd	r24, Y+6	; 0x06
     462:	9f 81       	ldd	r25, Y+7	; 0x07
     464:	9b 87       	std	Y+11, r25	; 0x0b
     466:	8a 87       	std	Y+10, r24	; 0x0a
     468:	ee 85       	ldd	r30, Y+14	; 0x0e
     46a:	ff 85       	ldd	r31, Y+15	; 0x0f
     46c:	30 97       	sbiw	r30, 0x00	; 0
     46e:	11 f0       	breq	.+4      	; 0x474 <oqPutTimeout+0x62>
     470:	ce 01       	movw	r24, r28
     472:	09 95       	icall
     474:	78 94       	sei
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	08 95       	ret
     486:	78 94       	sei
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	08 95       	ret

00000494 <oqGetI>:
     494:	cf 93       	push	r28
     496:	fc 01       	movw	r30, r24
     498:	a4 85       	ldd	r26, Z+12	; 0x0c
     49a:	b5 85       	ldd	r27, Z+13	; 0x0d
     49c:	82 85       	ldd	r24, Z+10	; 0x0a
     49e:	93 85       	ldd	r25, Z+11	; 0x0b
     4a0:	8a 17       	cp	r24, r26
     4a2:	9b 07       	cpc	r25, r27
     4a4:	e9 f0       	breq	.+58     	; 0x4e0 <oqGetI+0x4c>
     4a6:	84 81       	ldd	r24, Z+4	; 0x04
     4a8:	95 81       	ldd	r25, Z+5	; 0x05
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	95 83       	std	Z+5, r25	; 0x05
     4ae:	84 83       	std	Z+4, r24	; 0x04
     4b0:	cd 01       	movw	r24, r26
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	95 87       	std	Z+13, r25	; 0x0d
     4b6:	84 87       	std	Z+12, r24	; 0x0c
     4b8:	cc 91       	ld	r28, X
     4ba:	20 85       	ldd	r18, Z+8	; 0x08
     4bc:	31 85       	ldd	r19, Z+9	; 0x09
     4be:	82 17       	cp	r24, r18
     4c0:	93 07       	cpc	r25, r19
     4c2:	48 f4       	brcc	.+18     	; 0x4d6 <oqGetI+0x42>
     4c4:	cf 01       	movw	r24, r30
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	0e 94 31 0b 	call	0x1662	; 0x1662 <chThdDequeueNextI>
     4ce:	8c 2f       	mov	r24, r28
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret
     4d6:	86 81       	ldd	r24, Z+6	; 0x06
     4d8:	97 81       	ldd	r25, Z+7	; 0x07
     4da:	95 87       	std	Z+13, r25	; 0x0d
     4dc:	84 87       	std	Z+12, r24	; 0x0c
     4de:	f2 cf       	rjmp	.-28     	; 0x4c4 <oqGetI+0x30>
     4e0:	84 81       	ldd	r24, Z+4	; 0x04
     4e2:	95 81       	ldd	r25, Z+5	; 0x05
     4e4:	89 2b       	or	r24, r25
     4e6:	f9 f2       	breq	.-66     	; 0x4a6 <oqGetI+0x12>
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     4f0:	6f 92       	push	r6
     4f2:	7f 92       	push	r7
     4f4:	8f 92       	push	r8
     4f6:	9f 92       	push	r9
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	6c 01       	movw	r12, r24
     50e:	7b 01       	movw	r14, r22
     510:	4a 01       	movw	r8, r20
     512:	39 01       	movw	r6, r18
  qnotify_t nfy = oqp->q_notify;
     514:	fc 01       	movw	r30, r24
     516:	a6 84       	ldd	r10, Z+14	; 0x0e
     518:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     51a:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     51c:	41 15       	cp	r20, r1
     51e:	51 05       	cpc	r21, r1
     520:	b9 f0       	breq	.+46     	; 0x550 <oqWriteTimeout+0x60>
     522:	8a 01       	movw	r16, r20
    size_t done;

    done = oq_write(oqp, bp, n);
     524:	a8 01       	movw	r20, r16
     526:	b7 01       	movw	r22, r14
     528:	c6 01       	movw	r24, r12
     52a:	32 de       	rcall	.-924    	; 0x190 <oq_write>
     52c:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
     52e:	89 2b       	or	r24, r25
     530:	01 f1       	breq	.+64     	; 0x572 <oqWriteTimeout+0x82>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     532:	a1 14       	cp	r10, r1
     534:	b1 04       	cpc	r11, r1
     536:	19 f0       	breq	.+6      	; 0x53e <oqWriteTimeout+0x4e>
        nfy(oqp);
     538:	c6 01       	movw	r24, r12
     53a:	f5 01       	movw	r30, r10
     53c:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     53e:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
     540:	0c 1b       	sub	r16, r28
     542:	1d 0b       	sbc	r17, r29
      bp += done;
     544:	ec 0e       	add	r14, r28
     546:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     548:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     54a:	01 15       	cp	r16, r1
     54c:	11 05       	cpc	r17, r1
     54e:	51 f7       	brne	.-44     	; 0x524 <oqWriteTimeout+0x34>
     550:	c4 01       	movw	r24, r8
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     552:	78 94       	sei
    }
  }

  osalSysUnlock();
  return max - n;
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	bf 90       	pop	r11
     566:	af 90       	pop	r10
     568:	9f 90       	pop	r9
     56a:	8f 90       	pop	r8
     56c:	7f 90       	pop	r7
     56e:	6f 90       	pop	r6
     570:	08 95       	ret
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     572:	b3 01       	movw	r22, r6
     574:	c6 01       	movw	r24, r12
     576:	0e 94 14 0b 	call	0x1628	; 0x1628 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     57a:	89 2b       	or	r24, r25
     57c:	99 f2       	breq	.-90     	; 0x524 <oqWriteTimeout+0x34>
     57e:	c4 01       	movw	r24, r8
     580:	80 1b       	sub	r24, r16
     582:	91 0b       	sbc	r25, r17
     584:	e6 cf       	rjmp	.-52     	; 0x552 <oqWriteTimeout+0x62>

00000586 <gptInit>:
  osalSysLock();
  osalDbgAssert(gptp->state == GPT_CONTINUOUS,
                "invalid state");
  gptChangeIntervalI(gptp, interval);
  osalSysUnlock();
}
     586:	3e c3       	rjmp	.+1660   	; 0xc04 <gpt_lld_init>

00000588 <gptObjectInit>:
     588:	21 e0       	ldi	r18, 0x01	; 1
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
     58e:	12 82       	std	Z+2, r1	; 0x02
     590:	11 82       	std	Z+1, r1	; 0x01
     592:	08 95       	ret

00000594 <gptStart>:
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	ec 01       	movw	r28, r24
     59a:	f8 94       	cli
     59c:	7a 83       	std	Y+2, r23	; 0x02
     59e:	69 83       	std	Y+1, r22	; 0x01
     5a0:	34 d3       	rcall	.+1640   	; 0xc0a <gpt_lld_start>
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	88 83       	st	Y, r24
     5a6:	78 94       	sei
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <gptStartContinuous>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     5b2:	f8 94       	cli
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
     5b4:	23 e0       	ldi	r18, 0x03	; 3
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
  gpt_lld_start_timer(gptp, interval);
     5ba:	d9 d3       	rcall	.+1970   	; 0xd6e <gpt_lld_start_timer>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     5bc:	78 94       	sei
void gptStartContinuous(GPTDriver *gptp, gptcnt_t interval) {

  osalSysLock();
  gptStartContinuousI(gptp, interval);
  osalSysUnlock();
}
     5be:	08 95       	ret

000005c0 <i2cInit>:
i2cflags_t i2cGetErrors(I2CDriver *i2cp) {

  osalDbgCheck(i2cp != NULL);

  return i2c_lld_get_errors(i2cp);
}
     5c0:	51 c2       	rjmp	.+1186   	; 0xa64 <i2c_lld_init>

000005c2 <i2cObjectInit>:
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	fc 01       	movw	r30, r24
     5c6:	20 83       	st	Z, r18
     5c8:	12 82       	std	Z+2, r1	; 0x02
     5ca:	11 82       	std	Z+1, r1	; 0x01
     5cc:	04 96       	adiw	r24, 0x04	; 4
     5ce:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <chMtxObjectInit>

000005d2 <i2cStart>:
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	ec 01       	movw	r28, r24
     5d8:	f8 94       	cli
     5da:	7a 83       	std	Y+2, r23	; 0x02
     5dc:	69 83       	std	Y+1, r22	; 0x01
     5de:	4a d2       	rcall	.+1172   	; 0xa74 <i2c_lld_start>
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	88 83       	st	Y, r24
     5e4:	78 94       	sei
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ec 01       	movw	r28, r24
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     602:	f8 94       	cli
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
     604:	1b 82       	std	Y+3, r1	; 0x03
  i2cp->state = I2C_ACTIVE_TX;
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	88 83       	st	Y, r24
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
     60a:	ce 01       	movw	r24, r28
     60c:	54 d2       	rcall	.+1192   	; 0xab6 <i2c_lld_master_transmit_timeout>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
     60e:	8f 3f       	cpi	r24, 0xFF	; 255
     610:	98 07       	cpc	r25, r24
     612:	61 f0       	breq	.+24     	; 0x62c <i2cMasterTransmitTimeout+0x3c>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
     614:	22 e0       	ldi	r18, 0x02	; 2
     616:	28 83       	st	Y, r18
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     618:	78 94       	sei
  }
  osalSysUnlock();
  return rdymsg;
}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	08 95       	ret
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
     62c:	25 e0       	ldi	r18, 0x05	; 5
     62e:	28 83       	st	Y, r18
     630:	f3 cf       	rjmp	.-26     	; 0x618 <i2cMasterTransmitTimeout+0x28>

00000632 <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     632:	05 96       	adiw	r24, 0x05	; 5
     634:	89 ce       	rjmp	.-750    	; 0x348 <iqReadTimeout>

00000636 <_read>:
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	3f ef       	ldi	r19, 0xFF	; 255
     63a:	05 96       	adiw	r24, 0x05	; 5
     63c:	85 ce       	rjmp	.-758    	; 0x348 <iqReadTimeout>

0000063e <_writet>:
     63e:	47 96       	adiw	r24, 0x17	; 23
     640:	57 cf       	rjmp	.-338    	; 0x4f0 <oqWriteTimeout>

00000642 <_write>:
     642:	2f ef       	ldi	r18, 0xFF	; 255
     644:	3f ef       	ldi	r19, 0xFF	; 255
     646:	47 96       	adiw	r24, 0x17	; 23
     648:	53 cf       	rjmp	.-346    	; 0x4f0 <oqWriteTimeout>

0000064a <_gett>:
     64a:	05 96       	adiw	r24, 0x05	; 5
     64c:	42 ce       	rjmp	.-892    	; 0x2d2 <iqGetTimeout>

0000064e <_get>:
     64e:	6f ef       	ldi	r22, 0xFF	; 255
     650:	7f ef       	ldi	r23, 0xFF	; 255
     652:	05 96       	adiw	r24, 0x05	; 5
     654:	3e ce       	rjmp	.-900    	; 0x2d2 <iqGetTimeout>

00000656 <_putt>:
     656:	47 96       	adiw	r24, 0x17	; 23
     658:	dc ce       	rjmp	.-584    	; 0x412 <oqPutTimeout>

0000065a <_put>:
     65a:	4f ef       	ldi	r20, 0xFF	; 255
     65c:	5f ef       	ldi	r21, 0xFF	; 255
     65e:	47 96       	adiw	r24, 0x17	; 23
     660:	d8 ce       	rjmp	.-592    	; 0x412 <oqPutTimeout>

00000662 <_ctl>:
     662:	61 30       	cpi	r22, 0x01	; 1
     664:	71 05       	cpc	r23, r1
     666:	19 f0       	breq	.+6      	; 0x66e <_ctl+0xc>
     668:	8c ee       	ldi	r24, 0xEC	; 236
     66a:	9f ef       	ldi	r25, 0xFF	; 255
     66c:	08 95       	ret
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret

00000674 <sdInit>:
     674:	34 c4       	rjmp	.+2152   	; 0xede <sd_lld_init>

00000676 <sdObjectInit>:
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	ec 01       	movw	r28, r24
     684:	9b 01       	movw	r18, r22
     686:	7a 01       	movw	r14, r20
     688:	fc 01       	movw	r30, r24
     68a:	80 e1       	ldi	r24, 0x10	; 16
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	81 93       	st	Z+, r24
     690:	91 93       	st	Z+, r25
     692:	fb 83       	std	Y+3, r31	; 0x03
     694:	ea 83       	std	Y+2, r30	; 0x02
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	8c 83       	std	Y+4, r24	; 0x04
     69a:	be 01       	movw	r22, r28
     69c:	67 5d       	subi	r22, 0xD7	; 215
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	8e 01       	movw	r16, r28
     6a2:	40 e1       	ldi	r20, 0x10	; 16
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	ce 01       	movw	r24, r28
     6a8:	05 96       	adiw	r24, 0x05	; 5
     6aa:	cd dd       	rcall	.-1126   	; 0x246 <iqObjectInit>
     6ac:	be 01       	movw	r22, r28
     6ae:	67 5c       	subi	r22, 0xC7	; 199
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	97 01       	movw	r18, r14
     6b4:	40 e1       	ldi	r20, 0x10	; 16
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	ce 01       	movw	r24, r28
     6ba:	47 96       	adiw	r24, 0x17	; 23
     6bc:	90 de       	rcall	.-736    	; 0x3de <oqObjectInit>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <sdStart>:
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
     6d2:	f8 94       	cli
     6d4:	0b d4       	rcall	.+2070   	; 0xeec <sd_lld_start>
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	8c 83       	std	Y+4, r24	; 0x04
     6da:	78 94       	sei
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ec 01       	movw	r28, r24
     6ee:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     6f0:	89 85       	ldd	r24, Y+9	; 0x09
     6f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f4:	89 2b       	or	r24, r25
     6f6:	51 f0       	breq	.+20     	; 0x70c <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     6f8:	61 2f       	mov	r22, r17
     6fa:	ce 01       	movw	r24, r28
     6fc:	05 96       	adiw	r24, 0x05	; 5
     6fe:	bd dd       	rcall	.-1158   	; 0x27a <iqPutI>
     700:	97 fd       	sbrc	r25, 7
     702:	0e c0       	rjmp	.+28     	; 0x720 <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     70c:	64 e0       	ldi	r22, 0x04	; 4
     70e:	ce 01       	movw	r24, r28
     710:	02 96       	adiw	r24, 0x02	; 2
     712:	de d7       	rcall	.+4028   	; 0x16d0 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     714:	61 2f       	mov	r22, r17
     716:	ce 01       	movw	r24, r28
     718:	05 96       	adiw	r24, 0x05	; 5
     71a:	af dd       	rcall	.-1186   	; 0x27a <iqPutI>
     71c:	97 ff       	sbrs	r25, 7
     71e:	f2 cf       	rjmp	.-28     	; 0x704 <sdIncomingDataI+0x1e>
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	ce 01       	movw	r24, r28
     724:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	d1 c7       	rjmp	.+4002   	; 0x16d0 <chEvtBroadcastFlagsI>

0000072e <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
     738:	47 96       	adiw	r24, 0x17	; 23
     73a:	ac de       	rcall	.-680    	; 0x494 <oqGetI>
     73c:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
     73e:	97 fd       	sbrc	r25, 7
     740:	06 c0       	rjmp	.+12     	; 0x74e <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
     742:	ce 01       	movw	r24, r28
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret
     74e:	68 e0       	ldi	r22, 0x08	; 8
     750:	c8 01       	movw	r24, r16
     752:	02 96       	adiw	r24, 0x02	; 2
     754:	bd d7       	rcall	.+3962   	; 0x16d0 <chEvtBroadcastFlagsI>
     756:	ce 01       	movw	r24, r28
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	08 95       	ret

00000762 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
     762:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK  = 0x00;
     766:	1d ba       	out	0x1d, r1	; 29

}
     768:	08 95       	ret

0000076a <hal_lld_init>:
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
}
     76a:	08 95       	ret

0000076c <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     76c:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     76e:	80 81       	ld	r24, Z
     770:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     772:	81 81       	ldd	r24, Z+1	; 0x01
     774:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     77a:	83 81       	ldd	r24, Z+3	; 0x03
     77c:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     77e:	84 81       	ldd	r24, Z+4	; 0x04
     780:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     782:	85 81       	ldd	r24, Z+5	; 0x05
     784:	8a b9       	out	0x0a, r24	; 10

#if defined(PORTL) || defined(__DOXYGEN__)
  PORTL = config->portl.out;
  DDRL = config->portl.dir;
#endif
}
     786:	08 95       	ret

00000788 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     788:	fc 01       	movw	r30, r24

  switch (mode) {
     78a:	42 30       	cpi	r20, 0x02	; 2
     78c:	c9 f0       	breq	.+50     	; 0x7c0 <_pal_lld_setgroupmode+0x38>
     78e:	98 f0       	brcs	.+38     	; 0x7b6 <_pal_lld_setgroupmode+0x2e>
     790:	45 30       	cpi	r20, 0x05	; 5
     792:	b1 f0       	breq	.+44     	; 0x7c0 <_pal_lld_setgroupmode+0x38>
     794:	46 30       	cpi	r20, 0x06	; 6
     796:	21 f4       	brne	.+8      	; 0x7a0 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     798:	81 81       	ldd	r24, Z+1	; 0x01
     79a:	68 2b       	or	r22, r24
     79c:	61 83       	std	Z+1, r22	; 0x01
    break;
  }
}
     79e:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     7a0:	43 30       	cpi	r20, 0x03	; 3
     7a2:	e9 f7       	brne	.-6      	; 0x79e <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	86 2f       	mov	r24, r22
     7a8:	80 95       	com	r24
     7aa:	89 23       	and	r24, r25
     7ac:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	68 2b       	or	r22, r24
     7b2:	62 83       	std	Z+2, r22	; 0x02
    break;
     7b4:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     7b6:	44 23       	and	r20, r20
     7b8:	19 f0       	breq	.+6      	; 0x7c0 <_pal_lld_setgroupmode+0x38>
     7ba:	41 30       	cpi	r20, 0x01	; 1
     7bc:	99 f3       	breq	.-26     	; 0x7a4 <_pal_lld_setgroupmode+0x1c>
     7be:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     7c0:	81 81       	ldd	r24, Z+1	; 0x01
     7c2:	60 95       	com	r22
     7c4:	86 23       	and	r24, r22
     7c6:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	68 23       	and	r22, r24
     7cc:	62 83       	std	Z+2, r22	; 0x02
    break;
     7ce:	08 95       	ret

000007d0 <__vector_24>:
 * @sclass
 */
static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
                                              sysinterval_t timeout) {

  return chThdSuspendTimeoutS(trp, timeout);
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <__avr_in_isr>
     7f8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7fc:	e8 7f       	andi	r30, 0xF8	; 248
     7fe:	e9 35       	cpi	r30, 0x59	; 89
     800:	10 f1       	brcs	.+68     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     802:	84 e9       	ldi	r24, 0x94	; 148
     804:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     808:	6e ef       	ldi	r22, 0xFE	; 254
     80a:	7f ef       	ldi	r23, 0xFF	; 255
     80c:	87 e8       	ldi	r24, 0x87	; 135
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	fe d6       	rcall	.+3580   	; 0x160e <chThdResumeI>
     812:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <I2CD1+0x3>
     816:	81 11       	cpse	r24, r1
     818:	b3 c0       	rjmp	.+358    	; 0x980 <__stack+0x81>
     81a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <__avr_in_isr>
     81e:	57 d5       	rcall	.+2734   	; 0x12ce <chSchIsPreemptionRequired>
     820:	81 11       	cpse	r24, r1
     822:	65 d5       	rcall	.+2762   	; 0x12ee <chSchDoPreemption>
     824:	ff 91       	pop	r31
     826:	ef 91       	pop	r30
     828:	bf 91       	pop	r27
     82a:	af 91       	pop	r26
     82c:	9f 91       	pop	r25
     82e:	8f 91       	pop	r24
     830:	7f 91       	pop	r23
     832:	6f 91       	pop	r22
     834:	5f 91       	pop	r21
     836:	4f 91       	pop	r20
     838:	3f 91       	pop	r19
     83a:	2f 91       	pop	r18
     83c:	0f 90       	pop	r0
     83e:	0f be       	out	0x3f, r0	; 63
     840:	0f 90       	pop	r0
     842:	1f 90       	pop	r1
     844:	18 95       	reti
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	e8 5d       	subi	r30, 0xD8	; 216
     84a:	fb 4f       	sbci	r31, 0xFB	; 251
     84c:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__tablejump2__>
     850:	04 05       	cpc	r16, r4
     852:	01 04       	cpc	r0, r1
     854:	01 04       	cpc	r0, r1
     856:	01 04       	cpc	r0, r1
     858:	01 04       	cpc	r0, r1
     85a:	01 04       	cpc	r0, r1
     85c:	01 04       	cpc	r0, r1
     85e:	01 04       	cpc	r0, r1
     860:	c9 04       	cpc	r12, r9
     862:	01 04       	cpc	r0, r1
     864:	01 04       	cpc	r0, r1
     866:	01 04       	cpc	r0, r1
     868:	01 04       	cpc	r0, r1
     86a:	01 04       	cpc	r0, r1
     86c:	01 04       	cpc	r0, r1
     86e:	01 04       	cpc	r0, r1
     870:	c9 04       	cpc	r12, r9
     872:	01 04       	cpc	r0, r1
     874:	01 04       	cpc	r0, r1
     876:	01 04       	cpc	r0, r1
     878:	01 04       	cpc	r0, r1
     87a:	01 04       	cpc	r0, r1
     87c:	01 04       	cpc	r0, r1
     87e:	01 04       	cpc	r0, r1
     880:	e4 04       	cpc	r14, r4
     882:	01 04       	cpc	r0, r1
     884:	01 04       	cpc	r0, r1
     886:	01 04       	cpc	r0, r1
     888:	01 04       	cpc	r0, r1
     88a:	01 04       	cpc	r0, r1
     88c:	01 04       	cpc	r0, r1
     88e:	01 04       	cpc	r0, r1
     890:	bb 04       	cpc	r11, r11
     892:	01 04       	cpc	r0, r1
     894:	01 04       	cpc	r0, r1
     896:	01 04       	cpc	r0, r1
     898:	01 04       	cpc	r0, r1
     89a:	01 04       	cpc	r0, r1
     89c:	01 04       	cpc	r0, r1
     89e:	01 04       	cpc	r0, r1
     8a0:	e4 04       	cpc	r14, r4
     8a2:	01 04       	cpc	r0, r1
     8a4:	01 04       	cpc	r0, r1
     8a6:	01 04       	cpc	r0, r1
     8a8:	01 04       	cpc	r0, r1
     8aa:	01 04       	cpc	r0, r1
     8ac:	01 04       	cpc	r0, r1
     8ae:	01 04       	cpc	r0, r1
     8b0:	bb 04       	cpc	r11, r11
     8b2:	01 04       	cpc	r0, r1
     8b4:	01 04       	cpc	r0, r1
     8b6:	01 04       	cpc	r0, r1
     8b8:	01 04       	cpc	r0, r1
     8ba:	01 04       	cpc	r0, r1
     8bc:	01 04       	cpc	r0, r1
     8be:	01 04       	cpc	r0, r1
     8c0:	0a 05       	cpc	r16, r10
     8c2:	01 04       	cpc	r0, r1
     8c4:	01 04       	cpc	r0, r1
     8c6:	01 04       	cpc	r0, r1
     8c8:	01 04       	cpc	r0, r1
     8ca:	01 04       	cpc	r0, r1
     8cc:	01 04       	cpc	r0, r1
     8ce:	01 04       	cpc	r0, r1
     8d0:	95 04       	cpc	r9, r5
     8d2:	01 04       	cpc	r0, r1
     8d4:	01 04       	cpc	r0, r1
     8d6:	01 04       	cpc	r0, r1
     8d8:	01 04       	cpc	r0, r1
     8da:	01 04       	cpc	r0, r1
     8dc:	01 04       	cpc	r0, r1
     8de:	01 04       	cpc	r0, r1
     8e0:	bb 04       	cpc	r11, r11
     8e2:	01 04       	cpc	r0, r1
     8e4:	01 04       	cpc	r0, r1
     8e6:	01 04       	cpc	r0, r1
     8e8:	01 04       	cpc	r0, r1
     8ea:	01 04       	cpc	r0, r1
     8ec:	01 04       	cpc	r0, r1
     8ee:	01 04       	cpc	r0, r1
     8f0:	81 04       	cpc	r8, r1
     8f2:	01 04       	cpc	r0, r1
     8f4:	01 04       	cpc	r0, r1
     8f6:	01 04       	cpc	r0, r1
     8f8:	01 04       	cpc	r0, r1
     8fa:	01 04       	cpc	r0, r1
     8fc:	01 04       	cpc	r0, r1
     8fe:	01 04       	cpc	r0, r1
     900:	a6 04       	cpc	r10, r6
     902:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <I2CD1+0x15>
     906:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <I2CD1+0x16>
     90a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <I2CD1+0x19>
     90e:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <I2CD1+0x1a>
     912:	9c 01       	movw	r18, r24
     914:	2f 5f       	subi	r18, 0xFF	; 255
     916:	3f 4f       	sbci	r19, 0xFF	; 255
     918:	30 93 95 02 	sts	0x0295, r19	; 0x800295 <I2CD1+0x1a>
     91c:	20 93 94 02 	sts	0x0294, r18	; 0x800294 <I2CD1+0x19>
     920:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     924:	e8 0f       	add	r30, r24
     926:	f9 1f       	adc	r31, r25
     928:	20 83       	st	Z, r18
     92a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <I2CD1+0x17>
     92e:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <I2CD1+0x18>
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <I2CD1+0x19>
     938:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <I2CD1+0x1a>
     93c:	28 17       	cp	r18, r24
     93e:	39 07       	cpc	r19, r25
     940:	09 f4       	brne	.+2      	; 0x944 <__stack+0x45>
     942:	3e c0       	rjmp	.+124    	; 0x9c0 <__stack+0xc1>
     944:	85 ec       	ldi	r24, 0xC5	; 197
     946:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     94a:	63 cf       	rjmp	.-314    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     94c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     950:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <I2CD1+0x15>
     954:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <I2CD1+0x16>
     958:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <I2CD1+0x19>
     95c:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <I2CD1+0x1a>
     960:	e2 0f       	add	r30, r18
     962:	f3 1f       	adc	r31, r19
     964:	80 83       	st	Z, r24
     966:	84 e9       	ldi	r24, 0x94	; 148
     968:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	87 e8       	ldi	r24, 0x87	; 135
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	4c d6       	rcall	.+3224   	; 0x160e <chThdResumeI>
     976:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <I2CD1+0x3>
     97a:	84 60       	ori	r24, 0x04	; 4
     97c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <I2CD1+0x3>
     980:	84 e9       	ldi	r24, 0x94	; 148
     982:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     986:	6e ef       	ldi	r22, 0xFE	; 254
     988:	7f ef       	ldi	r23, 0xFF	; 255
     98a:	87 e8       	ldi	r24, 0x87	; 135
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	3f d6       	rcall	.+3198   	; 0x160e <chThdResumeI>
     990:	44 cf       	rjmp	.-376    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     992:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <I2CD1+0xe>
     996:	88 0f       	add	r24, r24
     998:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     99c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <I2CD1+0xf>
     9a0:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <I2CD1+0x10>
     9a4:	89 2b       	or	r24, r25
     9a6:	39 f0       	breq	.+14     	; 0x9b6 <__stack+0xb7>
     9a8:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <I2CD1+0x11>
     9ac:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <I2CD1+0x12>
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	45 c0       	rjmp	.+138    	; 0xa40 <__stack+0x141>
     9b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     9ba:	81 60       	ori	r24, 0x01	; 1
     9bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     9c0:	85 e8       	ldi	r24, 0x85	; 133
     9c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9c6:	25 cf       	rjmp	.-438    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     9c8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <I2CD1+0x13>
     9cc:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <I2CD1+0x14>
     9d0:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <I2CD1+0x11>
     9d4:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <I2CD1+0x12>
     9d8:	82 17       	cp	r24, r18
     9da:	93 07       	cpc	r25, r19
     9dc:	08 f5       	brcc	.+66     	; 0xa20 <__stack+0x121>
     9de:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <I2CD1+0xf>
     9e2:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <I2CD1+0x10>
     9e6:	ac 01       	movw	r20, r24
     9e8:	4f 5f       	subi	r20, 0xFF	; 255
     9ea:	5f 4f       	sbci	r21, 0xFF	; 255
     9ec:	50 93 8f 02 	sts	0x028F, r21	; 0x80028f <I2CD1+0x14>
     9f0:	40 93 8e 02 	sts	0x028E, r20	; 0x80028e <I2CD1+0x13>
     9f4:	82 0f       	add	r24, r18
     9f6:	93 1f       	adc	r25, r19
     9f8:	fc 01       	movw	r30, r24
     9fa:	80 81       	ld	r24, Z
     9fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     a00:	85 e8       	ldi	r24, 0x85	; 133
     a02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a06:	05 cf       	rjmp	.-502    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     a08:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <I2CD1+0x3>
     a0c:	81 60       	ori	r24, 0x01	; 1
     a0e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <I2CD1+0x3>
     a12:	b6 cf       	rjmp	.-148    	; 0x980 <__stack+0x81>
     a14:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <I2CD1+0x3>
     a18:	82 60       	ori	r24, 0x02	; 2
     a1a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <I2CD1+0x3>
     a1e:	b0 cf       	rjmp	.-160    	; 0x980 <__stack+0x81>
     a20:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <I2CD1+0x15>
     a24:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <I2CD1+0x16>
     a28:	89 2b       	or	r24, r25
     a2a:	99 f0       	breq	.+38     	; 0xa52 <__stack+0x153>
     a2c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <I2CD1+0x17>
     a30:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <I2CD1+0x18>
     a34:	89 2b       	or	r24, r25
     a36:	69 f0       	breq	.+26     	; 0xa52 <__stack+0x153>
     a38:	85 ea       	ldi	r24, 0xA5	; 165
     a3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a3e:	e9 ce       	rjmp	.-558    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     a40:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <I2CD1+0x13>
     a44:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <I2CD1+0x14>
     a48:	82 17       	cp	r24, r18
     a4a:	93 07       	cpc	r25, r19
     a4c:	09 f0       	breq	.+2      	; 0xa50 <__stack+0x151>
     a4e:	b8 cf       	rjmp	.-144    	; 0x9c0 <__stack+0xc1>
     a50:	b2 cf       	rjmp	.-156    	; 0x9b6 <__stack+0xb7>
     a52:	84 e9       	ldi	r24, 0x94	; 148
     a54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	87 e8       	ldi	r24, 0x87	; 135
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	d6 d5       	rcall	.+2988   	; 0x160e <chThdResumeI>
     a62:	d7 ce       	rjmp	.-594    	; 0x812 <__DATA_REGION_LENGTH__+0x12>

00000a64 <i2c_lld_init>:
     a64:	8b e7       	ldi	r24, 0x7B	; 123
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	ac dd       	rcall	.-1192   	; 0x5c2 <i2cObjectInit>
     a6a:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <I2CD1+0xd>
     a6e:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <I2CD1+0xc>
     a72:	08 95       	ret

00000a74 <i2c_lld_start>:
     a74:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a78:	28 7f       	andi	r18, 0xF8	; 248
     a7a:	20 93 b9 00 	sts	0x00B9, r18	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a7e:	dc 01       	movw	r26, r24
     a80:	11 96       	adiw	r26, 0x01	; 1
     a82:	ed 91       	ld	r30, X+
     a84:	fc 91       	ld	r31, X
     a86:	28 e4       	ldi	r18, 0x48	; 72
     a88:	30 97       	sbiw	r30, 0x00	; 0
     a8a:	91 f0       	breq	.+36     	; 0xab0 <i2c_lld_start+0x3c>
     a8c:	20 81       	ld	r18, Z
     a8e:	31 81       	ldd	r19, Z+1	; 0x01
     a90:	42 81       	ldd	r20, Z+2	; 0x02
     a92:	53 81       	ldd	r21, Z+3	; 0x03
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	74 e2       	ldi	r23, 0x24	; 36
     a98:	84 ef       	ldi	r24, 0xF4	; 244
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 9a 12 	call	0x2534	; 0x2534 <__udivmodsi4>
     aa0:	20 51       	subi	r18, 0x10	; 16
     aa2:	31 09       	sbc	r19, r1
     aa4:	41 09       	sbc	r20, r1
     aa6:	51 09       	sbc	r21, r1
     aa8:	56 95       	lsr	r21
     aaa:	47 95       	ror	r20
     aac:	37 95       	ror	r19
     aae:	27 95       	ror	r18
     ab0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     ab4:	08 95       	ret

00000ab6 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	fc 01       	movw	r30, r24

  i2cp->errors = I2C_NO_ERROR;
     ac0:	13 82       	std	Z+3, r1	; 0x03
  i2cp->addr = addr;
     ac2:	66 87       	std	Z+14, r22	; 0x0e
  i2cp->txbuf = txbuf;
     ac4:	50 8b       	std	Z+16, r21	; 0x10
     ac6:	47 87       	std	Z+15, r20	; 0x0f
  i2cp->txbytes = txbytes;
     ac8:	32 8b       	std	Z+18, r19	; 0x12
     aca:	21 8b       	std	Z+17, r18	; 0x11
  i2cp->txidx = 0;
     acc:	14 8a       	std	Z+20, r1	; 0x14
     ace:	13 8a       	std	Z+19, r1	; 0x13
  i2cp->rxbuf = rxbuf;
     ad0:	16 8b       	std	Z+22, r17	; 0x16
     ad2:	05 8b       	std	Z+21, r16	; 0x15
  i2cp->rxbytes = rxbytes;
     ad4:	f0 8e       	std	Z+24, r15	; 0x18
     ad6:	e7 8a       	std	Z+23, r14	; 0x17
  i2cp->rxidx = 0;
     ad8:	12 8e       	std	Z+26, r1	; 0x1a
     ada:	11 8e       	std	Z+25, r1	; 0x19

  TWCR = ((1 << TWSTA) | (1 << TWINT) | (1 << TWEN) | (1 << TWIE));
     adc:	85 ea       	ldi	r24, 0xA5	; 165
     ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ae2:	6f ef       	ldi	r22, 0xFF	; 255
     ae4:	7f ef       	ldi	r23, 0xFF	; 255
     ae6:	cf 01       	movw	r24, r30
     ae8:	0c 96       	adiw	r24, 0x0c	; 12

  return osalThreadSuspendTimeoutS(&i2cp->thread, TIME_INFINITE);
}
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	7c c5       	rjmp	.+2808   	; 0x15ec <chThdSuspendTimeoutS>

00000af4 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     b1c:	38 d2       	rcall	.+1136   	; 0xf8e <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     b1e:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <__avr_in_isr>
     b22:	d5 d3       	rcall	.+1962   	; 0x12ce <chSchIsPreemptionRequired>
     b24:	81 11       	cpse	r24, r1
     b26:	e3 d3       	rcall	.+1990   	; 0x12ee <chSchDoPreemption>
}
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	bf 91       	pop	r27
     b2e:	af 91       	pop	r26
     b30:	9f 91       	pop	r25
     b32:	8f 91       	pop	r24
     b34:	7f 91       	pop	r23
     b36:	6f 91       	pop	r22
     b38:	5f 91       	pop	r21
     b3a:	4f 91       	pop	r20
     b3c:	3f 91       	pop	r19
     b3e:	2f 91       	pop	r18
     b40:	0f 90       	pop	r0
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	0f 90       	pop	r0
     b46:	1f 90       	pop	r1
     b48:	18 95       	reti

00000b4a <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
     b4e:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
     b50:	9f e7       	ldi	r25, 0x7F	; 127
     b52:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
     b54:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
     b56:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
     b58:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
#else
  #error "Neither TCCR0A nor TCCR0 registers are defined"
#endif

#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
     b5c:	08 95       	ret

00000b5e <__vector_11>:
static uint8_t getTimerIndex(GPTDriver *gptp) {

  uint8_t index = 0;

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  if (gptp == &GPTD1) return index;
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	2f 93       	push	r18
     b6a:	3f 93       	push	r19
     b6c:	4f 93       	push	r20
     b6e:	5f 93       	push	r21
     b70:	6f 93       	push	r22
     b72:	7f 93       	push	r23
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <__avr_in_isr>
     b86:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <GPTD1+0x6>
     b8a:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <GPTD1+0x7>
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <GPTD1+0x7>
     b94:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <GPTD1+0x6>
     b98:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <GPTD1+0x4>
     b9c:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <GPTD1+0x5>
     ba0:	82 17       	cp	r24, r18
     ba2:	93 07       	cpc	r25, r19
     ba4:	b1 f0       	breq	.+44     	; 0xbd2 <__vector_11+0x74>
     ba6:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <__avr_in_isr>
     baa:	91 d3       	rcall	.+1826   	; 0x12ce <chSchIsPreemptionRequired>
     bac:	81 11       	cpse	r24, r1
     bae:	9f d3       	rcall	.+1854   	; 0x12ee <chSchDoPreemption>
     bb0:	ff 91       	pop	r31
     bb2:	ef 91       	pop	r30
     bb4:	bf 91       	pop	r27
     bb6:	af 91       	pop	r26
     bb8:	9f 91       	pop	r25
     bba:	8f 91       	pop	r24
     bbc:	7f 91       	pop	r23
     bbe:	6f 91       	pop	r22
     bc0:	5f 91       	pop	r21
     bc2:	4f 91       	pop	r20
     bc4:	3f 91       	pop	r19
     bc6:	2f 91       	pop	r18
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti
     bd2:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <GPTD1+0x7>
     bd6:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <GPTD1+0x6>
     bda:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <GPTD1>
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	49 f4       	brne	.+18     	; 0xbf4 <__vector_11+0x96>
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <GPTD1>
     be8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     bec:	88 7f       	andi	r24, 0xF8	; 248
     bee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     bf2:	96 bb       	out	0x16, r25	; 22
     bf4:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <GPTD1+0x8>
     bf8:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <GPTD1+0x9>
     bfc:	86 e9       	ldi	r24, 0x96	; 150
     bfe:	92 e0       	ldi	r25, 0x02	; 2
     c00:	09 95       	icall
     c02:	d1 cf       	rjmp	.-94     	; 0xba6 <__vector_11+0x48>

00000c04 <gpt_lld_init>:
     c04:	86 e9       	ldi	r24, 0x96	; 150
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	bf cc       	rjmp	.-1666   	; 0x588 <gptObjectInit>

00000c0a <gpt_lld_start>:
     c0a:	2f 92       	push	r2
     c0c:	3f 92       	push	r3
     c0e:	4f 92       	push	r4
     c10:	5f 92       	push	r5
     c12:	6f 92       	push	r6
     c14:	7f 92       	push	r7
     c16:	8f 92       	push	r8
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	8c 01       	movw	r16, r24
     c30:	dc 01       	movw	r26, r24
     c32:	8c 91       	ld	r24, X
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	b2 e0       	ldi	r27, 0x02	; 2
     c38:	06 39       	cpi	r16, 0x96	; 150
     c3a:	1b 07       	cpc	r17, r27
     c3c:	09 f4       	brne	.+2      	; 0xc40 <gpt_lld_start+0x36>
     c3e:	95 c0       	rjmp	.+298    	; 0xd6a <gpt_lld_start+0x160>
     c40:	28 2e       	mov	r2, r24
     c42:	21 94       	neg	r2
     c44:	d8 01       	movw	r26, r16
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	ed 91       	ld	r30, X+
     c4a:	fc 91       	ld	r31, X
     c4c:	40 80       	ld	r4, Z
     c4e:	51 80       	ldd	r5, Z+1	; 0x01
     c50:	62 80       	ldd	r6, Z+2	; 0x02
     c52:	73 80       	ldd	r7, Z+3	; 0x03
     c54:	66 24       	eor	r6, r6
     c56:	77 24       	eor	r7, r7
     c58:	c0 e0       	ldi	r28, 0x00	; 0
     c5a:	d1 e0       	ldi	r29, 0x01	; 1
     c5c:	31 2c       	mov	r3, r1
     c5e:	c9 90       	ld	r12, Y+
     c60:	d9 90       	ld	r13, Y+
     c62:	f1 2c       	mov	r15, r1
     c64:	e1 2c       	mov	r14, r1
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	74 e2       	ldi	r23, 0x24	; 36
     c6a:	84 ef       	ldi	r24, 0xF4	; 244
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a7 01       	movw	r20, r14
     c70:	96 01       	movw	r18, r12
     c72:	0e 94 9a 12 	call	0x2534	; 0x2534 <__udivmodsi4>
     c76:	ca 01       	movw	r24, r20
     c78:	b9 01       	movw	r22, r18
     c7a:	a3 01       	movw	r20, r6
     c7c:	92 01       	movw	r18, r4
     c7e:	0e 94 9a 12 	call	0x2534	; 0x2534 <__udivmodsi4>
     c82:	49 01       	movw	r8, r18
     c84:	5a 01       	movw	r10, r20
     c86:	b1 e0       	ldi	r27, 0x01	; 1
     c88:	8b 16       	cp	r8, r27
     c8a:	9b 06       	cpc	r9, r27
     c8c:	a1 04       	cpc	r10, r1
     c8e:	b1 04       	cpc	r11, r1
     c90:	08 f0       	brcs	.+2      	; 0xc94 <gpt_lld_start+0x8a>
     c92:	62 c0       	rjmp	.+196    	; 0xd58 <gpt_lld_start+0x14e>
     c94:	a7 01       	movw	r20, r14
     c96:	96 01       	movw	r18, r12
     c98:	c3 01       	movw	r24, r6
     c9a:	b2 01       	movw	r22, r4
     c9c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsi3>
     ca0:	9b 01       	movw	r18, r22
     ca2:	ac 01       	movw	r20, r24
     ca4:	c5 01       	movw	r24, r10
     ca6:	b4 01       	movw	r22, r8
     ca8:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsi3>
     cac:	61 15       	cp	r22, r1
     cae:	74 42       	sbci	r23, 0x24	; 36
     cb0:	84 4f       	sbci	r24, 0xF4	; 244
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <gpt_lld_start+0xae>
     cb6:	51 c0       	rjmp	.+162    	; 0xd5a <gpt_lld_start+0x150>
     cb8:	33 94       	inc	r3
     cba:	f5 e0       	ldi	r31, 0x05	; 5
     cbc:	3f 12       	cpse	r3, r31
     cbe:	cf cf       	rjmp	.-98     	; 0xc5e <gpt_lld_start+0x54>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	d8 01       	movw	r26, r16
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	2c 93       	st	X, r18
     ccc:	e2 2d       	mov	r30, r2
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	e2 95       	swap	r30
     cd2:	f2 95       	swap	r31
     cd4:	f0 7f       	andi	r31, 0xF0	; 240
     cd6:	fe 27       	eor	r31, r30
     cd8:	e0 7f       	andi	r30, 0xF0	; 240
     cda:	fe 27       	eor	r31, r30
     cdc:	e1 5d       	subi	r30, 0xD1	; 209
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	a0 81       	ld	r26, Z
     ce2:	b1 81       	ldd	r27, Z+1	; 0x01
     ce4:	1c 92       	st	X, r1
     ce6:	a2 81       	ldd	r26, Z+2	; 0x02
     ce8:	b3 81       	ldd	r27, Z+3	; 0x03
     cea:	28 e0       	ldi	r18, 0x08	; 8
     cec:	2c 93       	st	X, r18
     cee:	a4 81       	ldd	r26, Z+4	; 0x04
     cf0:	b5 81       	ldd	r27, Z+5	; 0x05
     cf2:	1c 92       	st	X, r1
     cf4:	c6 81       	ldd	r28, Z+6	; 0x06
     cf6:	d7 81       	ldd	r29, Z+7	; 0x07
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	fc 01       	movw	r30, r24
     cfe:	e0 50       	subi	r30, 0x00	; 0
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	20 81       	ld	r18, Z
     d04:	31 81       	ldd	r19, Z+1	; 0x01
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	74 e2       	ldi	r23, 0x24	; 36
     d0e:	84 ef       	ldi	r24, 0xF4	; 244
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 9a 12 	call	0x2534	; 0x2534 <__udivmodsi4>
     d16:	ca 01       	movw	r24, r20
     d18:	b9 01       	movw	r22, r18
     d1a:	d8 01       	movw	r26, r16
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	ed 91       	ld	r30, X+
     d20:	fc 91       	ld	r31, X
     d22:	20 81       	ld	r18, Z
     d24:	31 81       	ldd	r19, Z+1	; 0x01
     d26:	42 81       	ldd	r20, Z+2	; 0x02
     d28:	53 81       	ldd	r21, Z+3	; 0x03
     d2a:	0e 94 9a 12 	call	0x2534	; 0x2534 <__udivmodsi4>
     d2e:	21 50       	subi	r18, 0x01	; 1
     d30:	28 83       	st	Y, r18
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	9f 90       	pop	r9
     d48:	8f 90       	pop	r8
     d4a:	7f 90       	pop	r7
     d4c:	6f 90       	pop	r6
     d4e:	5f 90       	pop	r5
     d50:	4f 90       	pop	r4
     d52:	3f 90       	pop	r3
     d54:	2f 90       	pop	r2
     d56:	08 95       	ret
     d58:	3a 94       	dec	r3
     d5a:	83 2d       	mov	r24, r3
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	fc 01       	movw	r30, r24
     d60:	e6 5d       	subi	r30, 0xD6	; 214
     d62:	fe 4f       	sbci	r31, 0xFE	; 254
     d64:	20 81       	ld	r18, Z
     d66:	27 70       	andi	r18, 0x07	; 7
     d68:	ae cf       	rjmp	.-164    	; 0xcc6 <gpt_lld_start+0xbc>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	69 cf       	rjmp	.-302    	; 0xc40 <gpt_lld_start+0x36>

00000d6e <gpt_lld_start_timer>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] period    period in ticks
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t period) {
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	dc 01       	movw	r26, r24

  gptp->callback = gptp->config->callback;
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	ed 91       	ld	r30, X+
     d78:	fc 91       	ld	r31, X
     d7a:	12 97       	sbiw	r26, 0x02	; 2
     d7c:	84 81       	ldd	r24, Z+4	; 0x04
     d7e:	95 81       	ldd	r25, Z+5	; 0x05
     d80:	19 96       	adiw	r26, 0x09	; 9
     d82:	9c 93       	st	X, r25
     d84:	8e 93       	st	-X, r24
     d86:	18 97       	sbiw	r26, 0x08	; 8
  gptp->period = period;
     d88:	15 96       	adiw	r26, 0x05	; 5
     d8a:	7c 93       	st	X, r23
     d8c:	6e 93       	st	-X, r22
     d8e:	14 97       	sbiw	r26, 0x04	; 4
  gptp->counter = 0;
     d90:	17 96       	adiw	r26, 0x07	; 7
     d92:	1c 92       	st	X, r1
     d94:	1e 92       	st	-X, r1
     d96:	16 97       	sbiw	r26, 0x06	; 6
static uint8_t getTimerIndex(GPTDriver *gptp) {

  uint8_t index = 0;

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  if (gptp == &GPTD1) return index;
     d98:	e1 e0       	ldi	r30, 0x01	; 1
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	a6 39       	cpi	r26, 0x96	; 150
     d9e:	b8 07       	cpc	r27, r24
     da0:	09 f1       	breq	.+66     	; 0xde4 <gpt_lld_start_timer+0x76>
     da2:	e1 95       	neg	r30
  gptp->callback = gptp->config->callback;
  gptp->period = period;
  gptp->counter = 0;

  uint8_t i = getTimerIndex(gptp);
  *regs_table[i].tcnt1 = 0;
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	e2 95       	swap	r30
     da8:	f2 95       	swap	r31
     daa:	f0 7f       	andi	r31, 0xF0	; 240
     dac:	fe 27       	eor	r31, r30
     dae:	e0 7f       	andi	r30, 0xF0	; 240
     db0:	fe 27       	eor	r31, r30
     db2:	e1 5d       	subi	r30, 0xD1	; 209
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	c0 85       	ldd	r28, Z+8	; 0x08
     db8:	d1 85       	ldd	r29, Z+9	; 0x09
     dba:	18 82       	st	Y, r1
  *regs_table[i].tcnt2 = 0;
     dbc:	c2 85       	ldd	r28, Z+10	; 0x0a
     dbe:	d3 85       	ldd	r29, Z+11	; 0x0b
     dc0:	18 82       	st	Y, r1
  *regs_table[i].tifr  = (1 << OCF1A);
     dc2:	c4 85       	ldd	r28, Z+12	; 0x0c
     dc4:	d5 85       	ldd	r29, Z+13	; 0x0d
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	88 83       	st	Y, r24
  *regs_table[i].timsk = (1 << OCIE1A);
     dca:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  *regs_table[i].tccrb |= (gptp->clock_source << CS10);
     dce:	02 80       	ldd	r0, Z+2	; 0x02
     dd0:	f3 81       	ldd	r31, Z+3	; 0x03
     dd2:	e0 2d       	mov	r30, r0
     dd4:	80 81       	ld	r24, Z
     dd6:	13 96       	adiw	r26, 0x03	; 3
     dd8:	9c 91       	ld	r25, X
     dda:	89 2b       	or	r24, r25
     ddc:	80 83       	st	Z, r24
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret
static uint8_t getTimerIndex(GPTDriver *gptp) {

  uint8_t index = 0;

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  if (gptp == &GPTD1) return index;
     de4:	e0 e0       	ldi	r30, 0x00	; 0
     de6:	dd cf       	rjmp	.-70     	; 0xda2 <gpt_lld_start_timer+0x34>

00000de8 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
     de8:	e1 ec       	ldi	r30, 0xC1	; 193
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	80 62       	ori	r24, 0x20	; 32
     df0:	80 83       	st	Z, r24
}
     df2:	08 95       	ret

00000df4 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <__avr_in_isr>

  sra = UCSR0A;
     e1c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
     e20:	98 2f       	mov	r25, r24
     e22:	9c 71       	andi	r25, 0x1C	; 28
     e24:	41 f0       	breq	.+16     	; 0xe36 <__vector_18+0x42>
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    sts |= SD_PARITY_ERROR;
     e26:	60 e2       	ldi	r22, 0x20	; 32
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
     e28:	82 ff       	sbrs	r24, 2
     e2a:	60 e0       	ldi	r22, 0x00	; 0
    sts |= SD_PARITY_ERROR;
  if (sra & fe)
     e2c:	84 fd       	sbrc	r24, 4
     e2e:	1e c0       	rjmp	.+60     	; 0xe6c <__vector_18+0x78>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     e30:	82 ea       	ldi	r24, 0xA2	; 162
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	4d d4       	rcall	.+2202   	; 0x16d0 <chEvtBroadcastFlagsI>

  sra = UCSR0A;
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
     e36:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     e3a:	80 ea       	ldi	r24, 0xA0	; 160
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	53 dc       	rcall	.-1882   	; 0x6e6 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     e40:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <__avr_in_isr>
     e44:	44 d2       	rcall	.+1160   	; 0x12ce <chSchIsPreemptionRequired>
     e46:	81 11       	cpse	r24, r1
     e48:	52 d2       	rcall	.+1188   	; 0x12ee <chSchDoPreemption>
}
     e4a:	ff 91       	pop	r31
     e4c:	ef 91       	pop	r30
     e4e:	bf 91       	pop	r27
     e50:	af 91       	pop	r26
     e52:	9f 91       	pop	r25
     e54:	8f 91       	pop	r24
     e56:	7f 91       	pop	r23
     e58:	6f 91       	pop	r22
     e5a:	5f 91       	pop	r21
     e5c:	4f 91       	pop	r20
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti
  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    sts |= SD_PARITY_ERROR;
  if (sra & fe)
    sts |= SD_FRAMING_ERROR;
     e6c:	60 64       	ori	r22, 0x40	; 64
     e6e:	e0 cf       	rjmp	.-64     	; 0xe30 <__vector_18+0x3c>

00000e70 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
     e98:	80 ea       	ldi	r24, 0xA0	; 160
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	48 dc       	rcall	.-1904   	; 0x72e <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
     e9e:	97 fd       	sbrc	r25, 7
     ea0:	18 c0       	rjmp	.+48     	; 0xed2 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
     ea2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

  OSAL_IRQ_EPILOGUE();
     ea6:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <__avr_in_isr>
     eaa:	11 d2       	rcall	.+1058   	; 0x12ce <chSchIsPreemptionRequired>
     eac:	81 11       	cpse	r24, r1
     eae:	1f d2       	rcall	.+1086   	; 0x12ee <chSchDoPreemption>
}
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
     ed2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     ed6:	8f 7d       	andi	r24, 0xDF	; 223
     ed8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     edc:	e4 cf       	rjmp	.-56     	; 0xea6 <__vector_19+0x36>

00000ede <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
     ede:	44 ef       	ldi	r20, 0xF4	; 244
     ee0:	56 e0       	ldi	r21, 0x06	; 6
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	80 ea       	ldi	r24, 0xA0	; 160
     ee8:	92 e0       	ldi	r25, 0x02	; 2
     eea:	c5 cb       	rjmp	.-2166   	; 0x676 <sdObjectInit>

00000eec <sd_lld_start>:
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
     eec:	61 15       	cp	r22, r1
     eee:	71 05       	cpc	r23, r1
     ef0:	21 f0       	breq	.+8      	; 0xefa <sd_lld_start+0xe>
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
     ef2:	80 5a       	subi	r24, 0xA0	; 160
     ef4:	92 40       	sbci	r25, 0x02	; 2
     ef6:	89 f0       	breq	.+34     	; 0xf1a <sd_lld_start+0x2e>
  if (&SD2 == sdp) {
    usart1_init(config);
    return;
  }
#endif
}
     ef8:	08 95       	ret

  if (config == NULL)
    config = &default_config;

#if AVR_SERIAL_USE_USART0
  if (&SD1 == sdp) {
     efa:	80 5a       	subi	r24, 0xA0	; 160
     efc:	92 40       	sbci	r25, 0x02	; 2
     efe:	e1 f7       	brne	.-8      	; 0xef8 <sd_lld_start+0xc>
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
     f00:	83 e3       	ldi	r24, 0x33	; 51
     f02:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
     f06:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UCSR0A = (1 << U2X0);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     f10:	88 e9       	ldi	r24, 0x98	; 152
     f12:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0B |= (1 << UCSZ02);
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_8:
  default:
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
     f16:	86 e0       	ldi	r24, 0x06	; 6
     f18:	1c c0       	rjmp	.+56     	; 0xf52 <sd_lld_start+0x66>
 */
static void usart0_init(const SerialConfig *config) {

  uint8_t ucsr0c;

  UBRR0L = config->sc_brr;
     f1a:	fb 01       	movw	r30, r22
     f1c:	80 81       	ld	r24, Z
     f1e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	8f 70       	andi	r24, 0x0F	; 15
     f26:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UCSR0A = (1 << U2X0);
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     f30:	88 e9       	ldi	r24, 0x98	; 152
     f32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  switch (config->sc_bits_per_char) {
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 f0       	breq	.+36     	; 0xf60 <sd_lld_start+0x74>
     f3c:	78 f0       	brcs	.+30     	; 0xf5c <sd_lld_start+0x70>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	59 f0       	breq	.+22     	; 0xf58 <sd_lld_start+0x6c>
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	41 f7       	brne	.-48     	; 0xf16 <sd_lld_start+0x2a>
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
    break;
  case USART_CHAR_SIZE_9:
    UCSR0B |= (1 << UCSZ02);
     f46:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     f4a:	84 60       	ori	r24, 0x04	; 4
     f4c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    ucsr0c = (1 << UCSZ00) | (1 << UCSZ01);
     f50:	86 e0       	ldi	r24, 0x06	; 6
  }

#if defined(__AVR_ATmega162__)
  UCSR0C = (1 << URSEL0) | ucsr0c;
#else
  UCSR0C = ucsr0c;
     f52:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     f56:	08 95       	ret
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
    break;
  case USART_CHAR_SIZE_7:
    ucsr0c = (1 << UCSZ01);
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	fb cf       	rjmp	.-10     	; 0xf52 <sd_lld_start+0x66>
  UBRR0H = (config->sc_brr >> 8) & 0x0f;
  UCSR0A = (1 << U2X0);
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  switch (config->sc_bits_per_char) {
  case USART_CHAR_SIZE_5:
    ucsr0c = 0;
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	f9 cf       	rjmp	.-14     	; 0xf52 <sd_lld_start+0x66>
    break;
  case USART_CHAR_SIZE_6:
    ucsr0c = (1 << UCSZ00);
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	f7 cf       	rjmp	.-18     	; 0xf52 <sd_lld_start+0x66>

00000f64 <chSysInit>:
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    ch_delta_list_t *dlp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	c9 ee       	ldi	r28, 0xE9	; 233
     f6a:	d2 e0       	ldi	r29, 0x02	; 2
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	88 83       	st	Y, r24
     f70:	1a 82       	std	Y+2, r1	; 0x02
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	d2 d3       	rcall	.+1956   	; 0x171a <__core_init>
     f76:	01 d4       	rcall	.+2050   	; 0x177a <__heap_init>
     f78:	62 e4       	ldi	r22, 0x42	; 66
     f7a:	71 e0       	ldi	r23, 0x01	; 1
     f7c:	8c ee       	ldi	r24, 0xEC	; 236
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	f6 d1       	rcall	.+1004   	; 0x136e <chInstanceObjectInit>
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	88 83       	st	Y, r24
     f86:	78 94       	sei
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <chSysTimerHandlerI>:
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
     f8e:	68 c0       	rjmp	.+208    	; 0x1060 <chVTDoTickI>

00000f90 <chVTDoSetI>:
  } while (dlp != &vtlp->dlist);

  chDbgAssert(false, "timer not in list");

  return (sysinterval_t)-1;
}
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	dc 01       	movw	r26, r24
     f96:	19 96       	adiw	r26, 0x09	; 9
     f98:	3c 93       	st	X, r19
     f9a:	2e 93       	st	-X, r18
     f9c:	18 97       	sbiw	r26, 0x08	; 8
     f9e:	17 96       	adiw	r26, 0x07	; 7
     fa0:	5c 93       	st	X, r21
     fa2:	4e 93       	st	-X, r20
     fa4:	16 97       	sbiw	r26, 0x06	; 6
     fa6:	1b 96       	adiw	r26, 0x0b	; 11
     fa8:	1c 92       	st	X, r1
     faa:	1e 92       	st	-X, r1
     fac:	1a 97       	sbiw	r26, 0x0a	; 10
     fae:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <ch0+0x7>
     fb2:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <ch0+0x8>
     fb6:	24 81       	ldd	r18, Z+4	; 0x04
     fb8:	35 81       	ldd	r19, Z+5	; 0x05
     fba:	26 17       	cp	r18, r22
     fbc:	37 07       	cpc	r19, r23
     fbe:	50 f4       	brcc	.+20     	; 0xfd4 <chVTDoSetI+0x44>
     fc0:	62 1b       	sub	r22, r18
     fc2:	73 0b       	sbc	r23, r19
     fc4:	01 90       	ld	r0, Z+
     fc6:	f0 81       	ld	r31, Z
     fc8:	e0 2d       	mov	r30, r0
     fca:	24 81       	ldd	r18, Z+4	; 0x04
     fcc:	35 81       	ldd	r19, Z+5	; 0x05
     fce:	26 17       	cp	r18, r22
     fd0:	37 07       	cpc	r19, r23
     fd2:	b0 f3       	brcs	.-20     	; 0xfc0 <chVTDoSetI+0x30>
     fd4:	15 96       	adiw	r26, 0x05	; 5
     fd6:	7c 93       	st	X, r23
     fd8:	6e 93       	st	-X, r22
     fda:	14 97       	sbiw	r26, 0x04	; 4
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	fc 93       	st	X, r31
     fe0:	ee 93       	st	-X, r30
     fe2:	c2 81       	ldd	r28, Z+2	; 0x02
     fe4:	d3 81       	ldd	r29, Z+3	; 0x03
     fe6:	13 96       	adiw	r26, 0x03	; 3
     fe8:	dc 93       	st	X, r29
     fea:	ce 93       	st	-X, r28
     fec:	12 97       	sbiw	r26, 0x02	; 2
     fee:	b9 83       	std	Y+1, r27	; 0x01
     ff0:	a8 83       	st	Y, r26
     ff2:	b3 83       	std	Z+3, r27	; 0x03
     ff4:	a2 83       	std	Z+2, r26	; 0x02
     ff6:	84 81       	ldd	r24, Z+4	; 0x04
     ff8:	95 81       	ldd	r25, Z+5	; 0x05
     ffa:	86 1b       	sub	r24, r22
     ffc:	97 0b       	sbc	r25, r23
     ffe:	95 83       	std	Z+5, r25	; 0x05
    1000:	84 83       	std	Z+4, r24	; 0x04
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <ch0+0xc>
    100a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <ch0+0xb>
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	08 95       	ret

00001014 <chVTDoResetI>:
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	fc 01       	movw	r30, r24
    101a:	a0 81       	ld	r26, Z
    101c:	b1 81       	ldd	r27, Z+1	; 0x01
    101e:	14 96       	adiw	r26, 0x04	; 4
    1020:	8d 91       	ld	r24, X+
    1022:	9c 91       	ld	r25, X
    1024:	15 97       	sbiw	r26, 0x05	; 5
    1026:	24 81       	ldd	r18, Z+4	; 0x04
    1028:	35 81       	ldd	r19, Z+5	; 0x05
    102a:	82 0f       	add	r24, r18
    102c:	93 1f       	adc	r25, r19
    102e:	15 96       	adiw	r26, 0x05	; 5
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
    1034:	14 97       	sbiw	r26, 0x04	; 4
    1036:	c2 81       	ldd	r28, Z+2	; 0x02
    1038:	d3 81       	ldd	r29, Z+3	; 0x03
    103a:	b9 83       	std	Y+1, r27	; 0x01
    103c:	a8 83       	st	Y, r26
    103e:	a0 81       	ld	r26, Z
    1040:	b1 81       	ldd	r27, Z+1	; 0x01
    1042:	13 96       	adiw	r26, 0x03	; 3
    1044:	dc 93       	st	X, r29
    1046:	ce 93       	st	-X, r28
    1048:	12 97       	sbiw	r26, 0x02	; 2
    104a:	11 82       	std	Z+1, r1	; 0x01
    104c:	10 82       	st	Z, r1
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	9f ef       	ldi	r25, 0xFF	; 255
    1052:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <ch0+0xc>
    1056:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <ch0+0xb>
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
    1068:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <ch0+0xd>
    106c:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <ch0+0xe>
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <ch0+0xe>
    1076:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <ch0+0xd>
 *
 * @notapi
 */
static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {

  return (bool)(dlhp != dlhp->next);
    107a:	c0 91 f3 02 	lds	r28, 0x02F3	; 0x8002f3 <ch0+0x7>
    107e:	d0 91 f4 02 	lds	r29, 0x02F4	; 0x8002f4 <ch0+0x8>
  if (ch_dlist_notempty(&vtlp->dlist)) {
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	c3 3f       	cpi	r28, 0xF3	; 243
    1086:	d8 07       	cpc	r29, r24
    1088:	41 f1       	breq	.+80     	; 0x10da <chVTDoTickI+0x7a>
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9d 83       	std	Y+5, r25	; 0x05
    1092:	8c 83       	std	Y+4, r24	; 0x04
  dlp->delta -= delta;

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
    1094:	0f ef       	ldi	r16, 0xFF	; 255
    1096:	1f ef       	ldi	r17, 0xFF	; 255
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
    1098:	1e c0       	rjmp	.+60     	; 0x10d6 <chVTDoTickI+0x76>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
    109a:	ea 81       	ldd	r30, Y+2	; 0x02
    109c:	fb 81       	ldd	r31, Y+3	; 0x03
    109e:	88 81       	ld	r24, Y
    10a0:	99 81       	ldd	r25, Y+1	; 0x01
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
  dlp->next->prev = dlp->prev;
    10a6:	a8 81       	ld	r26, Y
    10a8:	b9 81       	ldd	r27, Y+1	; 0x01
    10aa:	13 96       	adiw	r26, 0x03	; 3
    10ac:	fc 93       	st	X, r31
    10ae:	ee 93       	st	-X, r30
    10b0:	12 97       	sbiw	r26, 0x02	; 2
      /* Triggered timer.*/
      vtp = (virtual_timer_t *)vtlp->dlist.next;

      /* Removing the element from the delta list, marking it as not armed.*/
      (void) ch_dlist_dequeue(&vtp->dlist);
      vtp->dlist.next = NULL;
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	18 82       	st	Y, r1

      chSysUnlockFromISR();
      vtp->func(vtp, vtp->par);
    10b6:	68 85       	ldd	r22, Y+8	; 0x08
    10b8:	79 85       	ldd	r23, Y+9	; 0x09
    10ba:	ee 81       	ldd	r30, Y+6	; 0x06
    10bc:	ff 81       	ldd	r31, Y+7	; 0x07
    10be:	ce 01       	movw	r24, r28
    10c0:	09 95       	icall
      chSysLockFromISR();

      /* If a reload is defined the timer needs to be restarted.*/
      if (vtp->reload > (sysinterval_t)0) {
    10c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	69 f4       	brne	.+26     	; 0x10e4 <chVTDoTickI+0x84>
    10ca:	c0 91 f3 02 	lds	r28, 0x02F3	; 0x8002f3 <ch0+0x7>
    10ce:	d0 91 f4 02 	lds	r29, 0x02F4	; 0x8002f4 <ch0+0x8>
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
  if (ch_dlist_notempty(&vtlp->dlist)) {
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
    10d6:	89 2b       	or	r24, r25
    10d8:	01 f3       	breq	.-64     	; 0x109a <chVTDoTickI+0x3a>
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret
    10e4:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <ch0+0x7>
    10e8:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <ch0+0x8>
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
    10ec:	24 81       	ldd	r18, Z+4	; 0x04
    10ee:	35 81       	ldd	r19, Z+5	; 0x05
    10f0:	28 17       	cp	r18, r24
    10f2:	39 07       	cpc	r19, r25
    10f4:	50 f4       	brcc	.+20     	; 0x110a <chVTDoTickI+0xaa>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    10f6:	82 1b       	sub	r24, r18
    10f8:	93 0b       	sbc	r25, r19
    dlp = dlp->next;
    10fa:	01 90       	ld	r0, Z+
    10fc:	f0 81       	ld	r31, Z
    10fe:	e0 2d       	mov	r30, r0
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
    1100:	24 81       	ldd	r18, Z+4	; 0x04
    1102:	35 81       	ldd	r19, Z+5	; 0x05
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	b0 f3       	brcs	.-20     	; 0x10f6 <chVTDoTickI+0x96>
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {

  dlp->delta      = delta;
    110a:	9d 83       	std	Y+5, r25	; 0x05
    110c:	8c 83       	std	Y+4, r24	; 0x04
  dlp->next       = dlhp;
    110e:	f9 83       	std	Y+1, r31	; 0x01
    1110:	e8 83       	st	Y, r30
  dlp->prev       = dlp->next->prev;
    1112:	a2 81       	ldd	r26, Z+2	; 0x02
    1114:	b3 81       	ldd	r27, Z+3	; 0x03
    1116:	bb 83       	std	Y+3, r27	; 0x03
    1118:	aa 83       	std	Y+2, r26	; 0x02
  dlp->prev->next = dlp;
    111a:	cd 93       	st	X+, r28
    111c:	dc 93       	st	X, r29
  dlhp->prev      = dlp;
    111e:	d3 83       	std	Z+3, r29	; 0x03
    1120:	c2 83       	std	Z+2, r28	; 0x02

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
    1122:	24 81       	ldd	r18, Z+4	; 0x04
    1124:	35 81       	ldd	r19, Z+5	; 0x05
    1126:	28 1b       	sub	r18, r24
    1128:	39 0b       	sbc	r19, r25
    112a:	35 83       	std	Z+5, r19	; 0x05
    112c:	24 83       	std	Z+4, r18	; 0x04

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
    112e:	10 93 f8 02 	sts	0x02F8, r17	; 0x8002f8 <ch0+0xc>
    1132:	00 93 f7 02 	sts	0x02F7, r16	; 0x8002f7 <ch0+0xb>
    1136:	c9 cf       	rjmp	.-110    	; 0x10ca <chVTDoTickI+0x6a>

00001138 <__sch_wakeup>:
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	db 01       	movw	r26, r22
    113e:	1f 96       	adiw	r26, 0x0f	; 15
    1140:	8c 91       	ld	r24, X
    1142:	1f 97       	sbiw	r26, 0x0f	; 15
    1144:	84 30       	cpi	r24, 0x04	; 4
    1146:	f1 f1       	breq	.+124    	; 0x11c4 <__sch_wakeup+0x8c>
    1148:	80 f5       	brcc	.+96     	; 0x11aa <__sch_wakeup+0x72>
    114a:	88 23       	and	r24, r24
    114c:	59 f1       	breq	.+86     	; 0x11a4 <__sch_wakeup+0x6c>
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	31 f4       	brne	.+12     	; 0x115e <__sch_wakeup+0x26>
    1152:	52 96       	adiw	r26, 0x12	; 18
    1154:	ed 91       	ld	r30, X+
    1156:	fc 91       	ld	r31, X
    1158:	53 97       	sbiw	r26, 0x13	; 19
    115a:	11 82       	std	Z+1, r1	; 0x01
    115c:	10 82       	st	Z, r1
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	9f ef       	ldi	r25, 0xFF	; 255
    1162:	53 96       	adiw	r26, 0x13	; 19
    1164:	9c 93       	st	X, r25
    1166:	8e 93       	st	-X, r24
    1168:	52 97       	sbiw	r26, 0x12	; 18
    116a:	1f 96       	adiw	r26, 0x0f	; 15
    116c:	1c 92       	st	X, r1
    116e:	1f 97       	sbiw	r26, 0x0f	; 15
    1170:	1b 96       	adiw	r26, 0x0b	; 11
    1172:	ed 91       	ld	r30, X+
    1174:	fc 91       	ld	r31, X
    1176:	1c 97       	sbiw	r26, 0x0c	; 12
    1178:	14 96       	adiw	r26, 0x04	; 4
    117a:	9c 91       	ld	r25, X
    117c:	14 97       	sbiw	r26, 0x04	; 4
    117e:	01 90       	ld	r0, Z+
    1180:	f0 81       	ld	r31, Z
    1182:	e0 2d       	mov	r30, r0
    1184:	84 81       	ldd	r24, Z+4	; 0x04
    1186:	89 17       	cp	r24, r25
    1188:	d0 f7       	brcc	.-12     	; 0x117e <__sch_wakeup+0x46>
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	fc 93       	st	X, r31
    118e:	ee 93       	st	-X, r30
    1190:	c2 81       	ldd	r28, Z+2	; 0x02
    1192:	d3 81       	ldd	r29, Z+3	; 0x03
    1194:	13 96       	adiw	r26, 0x03	; 3
    1196:	dc 93       	st	X, r29
    1198:	ce 93       	st	-X, r28
    119a:	12 97       	sbiw	r26, 0x02	; 2
    119c:	b9 83       	std	Y+1, r27	; 0x01
    119e:	a8 83       	st	Y, r26
    11a0:	b3 83       	std	Z+3, r27	; 0x03
    11a2:	a2 83       	std	Z+2, r26	; 0x02
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret
    11aa:	87 30       	cpi	r24, 0x07	; 7
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <__sch_wakeup+0x8c>
    11ae:	8c 30       	cpi	r24, 0x0C	; 12
    11b0:	49 f0       	breq	.+18     	; 0x11c4 <__sch_wakeup+0x8c>
    11b2:	85 30       	cpi	r24, 0x05	; 5
    11b4:	a1 f6       	brne	.-88     	; 0x115e <__sch_wakeup+0x26>
    11b6:	52 96       	adiw	r26, 0x12	; 18
    11b8:	ed 91       	ld	r30, X+
    11ba:	fc 91       	ld	r31, X
    11bc:	53 97       	sbiw	r26, 0x13	; 19
    11be:	84 81       	ldd	r24, Z+4	; 0x04
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	84 83       	std	Z+4, r24	; 0x04
    11c4:	12 96       	adiw	r26, 0x02	; 2
    11c6:	ed 91       	ld	r30, X+
    11c8:	fc 91       	ld	r31, X
    11ca:	13 97       	sbiw	r26, 0x03	; 3
    11cc:	8d 91       	ld	r24, X+
    11ce:	9c 91       	ld	r25, X
    11d0:	11 97       	sbiw	r26, 0x01	; 1
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
    11d6:	cd 91       	ld	r28, X+
    11d8:	dc 91       	ld	r29, X
    11da:	11 97       	sbiw	r26, 0x01	; 1
    11dc:	fb 83       	std	Y+3, r31	; 0x03
    11de:	ea 83       	std	Y+2, r30	; 0x02
    11e0:	be cf       	rjmp	.-132    	; 0x115e <__sch_wakeup+0x26>

000011e2 <chSchReadyI>:
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	dc 01       	movw	r26, r24
    11e8:	1f 96       	adiw	r26, 0x0f	; 15
    11ea:	1c 92       	st	X, r1
    11ec:	1f 97       	sbiw	r26, 0x0f	; 15
    11ee:	1b 96       	adiw	r26, 0x0b	; 11
    11f0:	ed 91       	ld	r30, X+
    11f2:	fc 91       	ld	r31, X
    11f4:	1c 97       	sbiw	r26, 0x0c	; 12
    11f6:	14 96       	adiw	r26, 0x04	; 4
    11f8:	8c 91       	ld	r24, X
    11fa:	14 97       	sbiw	r26, 0x04	; 4
    11fc:	01 90       	ld	r0, Z+
    11fe:	f0 81       	ld	r31, Z
    1200:	e0 2d       	mov	r30, r0
    1202:	94 81       	ldd	r25, Z+4	; 0x04
    1204:	98 17       	cp	r25, r24
    1206:	d0 f7       	brcc	.-12     	; 0x11fc <chSchReadyI+0x1a>
    1208:	11 96       	adiw	r26, 0x01	; 1
    120a:	fc 93       	st	X, r31
    120c:	ee 93       	st	-X, r30
    120e:	c2 81       	ldd	r28, Z+2	; 0x02
    1210:	d3 81       	ldd	r29, Z+3	; 0x03
    1212:	13 96       	adiw	r26, 0x03	; 3
    1214:	dc 93       	st	X, r29
    1216:	ce 93       	st	-X, r28
    1218:	12 97       	sbiw	r26, 0x02	; 2
    121a:	b9 83       	std	Y+1, r27	; 0x01
    121c:	a8 83       	st	Y, r26
    121e:	b3 83       	std	Z+3, r27	; 0x03
    1220:	a2 83       	std	Z+2, r26	; 0x02
    1222:	cd 01       	movw	r24, r26
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <chSchGoSleepS>:
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	ec ee       	ldi	r30, 0xEC	; 236
    1230:	f2 e0       	ldi	r31, 0x02	; 2
    1232:	65 81       	ldd	r22, Z+5	; 0x05
    1234:	76 81       	ldd	r23, Z+6	; 0x06
    1236:	db 01       	movw	r26, r22
    1238:	1f 96       	adiw	r26, 0x0f	; 15
    123a:	8c 93       	st	X, r24
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	ec 01       	movw	r28, r24
    1242:	a8 81       	ld	r26, Y
    1244:	b9 81       	ldd	r27, Y+1	; 0x01
    1246:	b1 83       	std	Z+1, r27	; 0x01
    1248:	a0 83       	st	Z, r26
    124a:	13 96       	adiw	r26, 0x03	; 3
    124c:	fc 93       	st	X, r31
    124e:	ee 93       	st	-X, r30
    1250:	12 97       	sbiw	r26, 0x02	; 2
    1252:	21 e0       	ldi	r18, 0x01	; 1
    1254:	2f 87       	std	Y+15, r18	; 0x0f
    1256:	96 83       	std	Z+6, r25	; 0x06
    1258:	85 83       	std	Z+5, r24	; 0x05
    125a:	9c d2       	rcall	.+1336   	; 0x1794 <_port_switch>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <chSchGoSleepTimeoutS>:
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	2c 97       	sbiw	r28, 0x0c	; 12
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	f8 2e       	mov	r15, r24
    127e:	00 91 f1 02 	lds	r16, 0x02F1	; 0x8002f1 <ch0+0x5>
    1282:	10 91 f2 02 	lds	r17, 0x02F2	; 0x8002f2 <ch0+0x6>
    1286:	6f 3f       	cpi	r22, 0xFF	; 255
    1288:	76 07       	cpc	r23, r22
    128a:	f1 f0       	breq	.+60     	; 0x12c8 <chSchGoSleepTimeoutS+0x66>
    128c:	98 01       	movw	r18, r16
    128e:	4c e9       	ldi	r20, 0x9C	; 156
    1290:	58 e0       	ldi	r21, 0x08	; 8
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	7c de       	rcall	.-776    	; 0xf90 <chVTDoSetI>
    1298:	8f 2d       	mov	r24, r15
    129a:	c7 df       	rcall	.-114    	; 0x122a <chSchGoSleepS>
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	89 2b       	or	r24, r25
    12a2:	19 f0       	breq	.+6      	; 0x12aa <chSchGoSleepTimeoutS+0x48>
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	b5 de       	rcall	.-662    	; 0x1014 <chVTDoResetI>
    12aa:	f8 01       	movw	r30, r16
    12ac:	82 89       	ldd	r24, Z+18	; 0x12
    12ae:	93 89       	ldd	r25, Z+19	; 0x13
    12b0:	2c 96       	adiw	r28, 0x0c	; 12
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	08 95       	ret
    12c8:	8f 2d       	mov	r24, r15
    12ca:	af df       	rcall	.-162    	; 0x122a <chSchGoSleepS>
    12cc:	ee cf       	rjmp	.-36     	; 0x12aa <chSchGoSleepTimeoutS+0x48>

000012ce <chSchIsPreemptionRequired>:
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
    12ce:	a0 91 ec 02 	lds	r26, 0x02EC	; 0x8002ec <ch0>
    12d2:	b0 91 ed 02 	lds	r27, 0x02ED	; 0x8002ed <ch0+0x1>
  tprio_t p2 = tp->hdr.pqueue.prio;
    12d6:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <ch0+0x5>
    12da:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <ch0+0x6>
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	14 96       	adiw	r26, 0x04	; 4
    12e2:	2c 91       	ld	r18, X
    12e4:	94 81       	ldd	r25, Z+4	; 0x04
    12e6:	92 17       	cp	r25, r18
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <chSchIsPreemptionRequired+0x1e>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    12ec:	08 95       	ret

000012ee <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
    12f2:	a0 91 f1 02 	lds	r26, 0x02F1	; 0x8002f1 <ch0+0x5>
    12f6:	b0 91 f2 02 	lds	r27, 0x02F2	; 0x8002f2 <ch0+0x6>
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;
    12fa:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <ch0>
    12fe:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <ch0+0x1>

  pqp->next       = p->next;
    1302:	ea 01       	movw	r28, r20
    1304:	e8 81       	ld	r30, Y
    1306:	f9 81       	ldd	r31, Y+1	; 0x01
    1308:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <ch0+0x1>
    130c:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <ch0>
  pqp->next->prev = pqp;
    1310:	8c ee       	ldi	r24, 0xEC	; 236
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	93 83       	std	Z+3, r25	; 0x03
    1316:	82 83       	std	Z+2, r24	; 0x02
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	8f 87       	std	Y+15, r24	; 0x0f
  __instance_set_currthread(oip, ntp);
    131c:	50 93 f2 02 	sts	0x02F2, r21	; 0x8002f2 <ch0+0x6>
    1320:	40 93 f1 02 	sts	0x02F1, r20	; 0x8002f1 <ch0+0x5>

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
    1324:	1f 96       	adiw	r26, 0x0f	; 15
    1326:	1c 92       	st	X, r1
    1328:	1f 97       	sbiw	r26, 0x0f	; 15

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
    132a:	1b 96       	adiw	r26, 0x0b	; 11
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	1c 97       	sbiw	r26, 0x0c	; 12
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio > p->prio));
    1332:	14 96       	adiw	r26, 0x04	; 4
    1334:	2c 91       	ld	r18, X
    1336:	14 97       	sbiw	r26, 0x04	; 4
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
    1338:	01 90       	ld	r0, Z+
    133a:	f0 81       	ld	r31, Z
    133c:	e0 2d       	mov	r30, r0
  } while (unlikely(pqp->prio > p->prio));
    133e:	94 81       	ldd	r25, Z+4	; 0x04
    1340:	29 17       	cp	r18, r25
    1342:	d0 f3       	brcs	.-12     	; 0x1338 <chSchDoPreemption+0x4a>

  /* Insertion on prev.*/
  p->next       = pqp;
    1344:	11 96       	adiw	r26, 0x01	; 1
    1346:	fc 93       	st	X, r31
    1348:	ee 93       	st	-X, r30
  p->prev       = pqp->prev;
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	13 96       	adiw	r26, 0x03	; 3
    1350:	9c 93       	st	X, r25
    1352:	8e 93       	st	-X, r24
    1354:	12 97       	sbiw	r26, 0x02	; 2
  p->prev->next = p;
    1356:	ec 01       	movw	r28, r24
    1358:	b9 83       	std	Y+1, r27	; 0x01
    135a:	a8 83       	st	Y, r26
  pqp->prev     = p;
    135c:	b3 83       	std	Z+3, r27	; 0x03
    135e:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
    1360:	bd 01       	movw	r22, r26
    1362:	ca 01       	movw	r24, r20
    1364:	17 d2       	rcall	.+1070   	; 0x1794 <_port_switch>
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
    136c:	ff cf       	rjmp	.-2      	; 0x136c <__idle_thread>

0000136e <chInstanceObjectInit>:
 * @param[in] oicp      pointer to the @p os_instance_config_t structure
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
    136e:	df 92       	push	r13
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	2b 97       	sbiw	r28, 0x0b	; 11
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	8c 01       	movw	r16, r24
    138e:	7b 01       	movw	r14, r22
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
    1390:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <ch_system+0x2>
    1394:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <ch_system+0x1>

  /* Core associated to this instance.*/
  oip->core_id = core_id;
    1398:	fc 01       	movw	r30, r24
    139a:	14 8e       	std	Z+28, r1	; 0x1c
    139c:	13 8e       	std	Z+27, r1	; 0x1b

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
    139e:	72 a3       	std	Z+34, r23	; 0x22
    13a0:	61 a3       	std	Z+33, r22	; 0x21

  /* Port initialization for the current instance.*/
  port_init(oip);
    13a2:	dd 24       	eor	r13, r13
    13a4:	d3 94       	inc	r13
    13a6:	d0 92 33 03 	sts	0x0333, r13	; 0x800333 <__avr_in_isr>
 *
 * @notapi
 */
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {

  pqp->next = pqp;
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
  pqp->prev = pqp;
    13ae:	93 83       	std	Z+3, r25	; 0x03
    13b0:	82 83       	std	Z+2, r24	; 0x02
  pqp->prio = (tprio_t)0;
    13b2:	14 82       	std	Z+4, r1	; 0x04
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {

  ch_queue_init(&rp->queue);
    13b4:	47 96       	adiw	r24, 0x17	; 23
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
    13b6:	90 8f       	std	Z+24, r25	; 0x18
    13b8:	87 8b       	std	Z+23, r24	; 0x17
  qp->prev = qp;
    13ba:	92 8f       	std	Z+26, r25	; 0x1a
    13bc:	81 8f       	std	Z+25, r24	; 0x19
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
    13be:	15 8e       	std	Z+29, r1	; 0x1d
    13c0:	16 8e       	std	Z+30, r1	; 0x1e
    13c2:	17 8e       	std	Z+31, r1	; 0x1f
    13c4:	10 a2       	std	Z+32, r1	; 0x20
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {

  ch_dlist_init(&vtlp->dlist);
    13c6:	40 97       	sbiw	r24, 0x10	; 16
 *
 * @notapi
 */
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {

  dlhp->next  = dlhp;
    13c8:	90 87       	std	Z+8, r25	; 0x08
    13ca:	87 83       	std	Z+7, r24	; 0x07
  dlhp->prev  = dlhp;
    13cc:	92 87       	std	Z+10, r25	; 0x0a
    13ce:	81 87       	std	Z+9, r24	; 0x09
  dlhp->delta = (sysinterval_t)-1;
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	94 87       	std	Z+12, r25	; 0x0c
    13d6:	83 87       	std	Z+11, r24	; 0x0b
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
    13d8:	16 86       	std	Z+14, r1	; 0x0e
    13da:	15 86       	std	Z+13, r1	; 0x0d
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
    13dc:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <ch0+0xd>
    13e0:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <ch0+0xe>
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
    13e4:	27 87       	std	Z+15, r18	; 0x0f
    13e6:	30 8b       	std	Z+16, r19	; 0x10
    13e8:	11 8a       	std	Z+17, r1	; 0x11
    13ea:	12 8a       	std	Z+18, r1	; 0x12
    13ec:	13 8a       	std	Z+19, r1	; 0x13
    13ee:	14 8a       	std	Z+20, r1	; 0x14
    13f0:	15 8a       	std	Z+21, r1	; 0x15
    13f2:	16 8a       	std	Z+22, r1	; 0x16
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
    13f4:	ef 5b       	subi	r30, 0xBF	; 191
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	11 82       	std	Z+1, r1	; 0x01
    13fa:	10 82       	st	Z, r1
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
    13fc:	b8 01       	movw	r22, r16
    13fe:	6d 5d       	subi	r22, 0xDD	; 221
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	20 e8       	ldi	r18, 0x80	; 128
    1404:	4d e4       	ldi	r20, 0x4D	; 77
    1406:	51 e0       	ldi	r21, 0x01	; 1
    1408:	c8 01       	movw	r24, r16
    140a:	2a d0       	rcall	.+84     	; 0x1460 <__thd_object_init>
    140c:	f8 01       	movw	r30, r16
    140e:	96 83       	std	Z+6, r25	; 0x06
    1410:	85 83       	std	Z+5, r24	; 0x05
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
    1412:	fc 01       	movw	r30, r24
    1414:	d7 86       	std	Z+15, r13	; 0x0f
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
    1416:	88 e4       	ldi	r24, 0x48	; 72
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	f7 01       	movw	r30, r14
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	9c 83       	std	Y+4, r25	; 0x04
    1426:	8b 83       	std	Y+3, r24	; 0x03
    1428:	84 81       	ldd	r24, Z+4	; 0x04
    142a:	95 81       	ldd	r25, Z+5	; 0x05
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	df 82       	std	Y+7, r13	; 0x07
    1432:	86 eb       	ldi	r24, 0xB6	; 182
    1434:	99 e0       	ldi	r25, 0x09	; 9
    1436:	99 87       	std	Y+9, r25	; 0x09
    1438:	88 87       	std	Y+8, r24	; 0x08
    143a:	1b 86       	std	Y+11, r1	; 0x0b
    143c:	1a 86       	std	Y+10, r1	; 0x0a
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	9e d0       	rcall	.+316    	; 0x1580 <chThdCreateI>
  }
#endif
}
    1444:	2b 96       	adiw	r28, 0x0b	; 11
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	08 95       	ret

00001460 <__thd_object_init>:
void chThdResume(thread_reference_t *trp, msg_t msg) {

  chSysLock();
  chThdResumeS(trp, msg);
  chSysUnlock();
}
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	fb 01       	movw	r30, r22
    1466:	24 83       	std	Z+4, r18	; 0x04
    1468:	32 e0       	ldi	r19, 0x02	; 2
    146a:	37 87       	std	Z+15, r19	; 0x0f
    146c:	10 8a       	std	Z+16, r1	; 0x10
    146e:	94 87       	std	Z+12, r25	; 0x0c
    1470:	83 87       	std	Z+11, r24	; 0x0b
    1472:	25 8f       	std	Z+29, r18	; 0x1d
    1474:	14 8e       	std	Z+28, r1	; 0x1c
    1476:	13 8e       	std	Z+27, r1	; 0x1b
    1478:	12 8e       	std	Z+26, r1	; 0x1a
    147a:	21 e0       	ldi	r18, 0x01	; 1
    147c:	21 8b       	std	Z+17, r18	; 0x11
    147e:	56 87       	std	Z+14, r21	; 0x0e
    1480:	45 87       	std	Z+13, r20	; 0x0d
    1482:	9b 01       	movw	r18, r22
    1484:	29 5f       	subi	r18, 0xF9	; 249
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	ac 01       	movw	r20, r24
    148a:	49 5e       	subi	r20, 0xE9	; 233
    148c:	5f 4f       	sbci	r21, 0xFF	; 255
    148e:	50 87       	std	Z+8, r21	; 0x08
    1490:	47 83       	std	Z+7, r20	; 0x07
    1492:	ec 01       	movw	r28, r24
    1494:	a9 8d       	ldd	r26, Y+25	; 0x19
    1496:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1498:	b2 87       	std	Z+10, r27	; 0x0a
    149a:	a1 87       	std	Z+9, r26	; 0x09
    149c:	2d 93       	st	X+, r18
    149e:	3c 93       	st	X, r19
    14a0:	3a 8f       	std	Y+26, r19	; 0x1a
    14a2:	29 8f       	std	Y+25, r18	; 0x19
    14a4:	cb 01       	movw	r24, r22
    14a6:	44 96       	adiw	r24, 0x14	; 20
    14a8:	95 8b       	std	Z+21, r25	; 0x15
    14aa:	84 8b       	std	Z+20, r24	; 0x14
    14ac:	02 96       	adiw	r24, 0x02	; 2
    14ae:	97 8b       	std	Z+23, r25	; 0x17
    14b0:	86 8b       	std	Z+22, r24	; 0x16
    14b2:	91 8f       	std	Z+25, r25	; 0x19
    14b4:	80 8f       	std	Z+24, r24	; 0x18
    14b6:	cb 01       	movw	r24, r22
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <chThdCreateSuspendedI>:
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	dc 01       	movw	r26, r24
    14c4:	14 96       	adiw	r26, 0x04	; 4
    14c6:	2d 91       	ld	r18, X+
    14c8:	3c 91       	ld	r19, X
    14ca:	15 97       	sbiw	r26, 0x05	; 5
    14cc:	f9 01       	movw	r30, r18
    14ce:	7e 97       	sbiw	r30, 0x1e	; 30
    14d0:	e9 01       	movw	r28, r18
    14d2:	e3 97       	sbiw	r28, 0x33	; 51
    14d4:	d6 83       	std	Z+6, r29	; 0x06
    14d6:	c5 83       	std	Z+5, r28	; 0x05
    14d8:	17 96       	adiw	r26, 0x07	; 7
    14da:	9c 91       	ld	r25, X
    14dc:	17 97       	sbiw	r26, 0x07	; 7
    14de:	18 96       	adiw	r26, 0x08	; 8
    14e0:	8c 91       	ld	r24, X
    14e2:	18 97       	sbiw	r26, 0x08	; 8
    14e4:	9a 8b       	std	Y+18, r25	; 0x12
    14e6:	89 8b       	std	Y+17, r24	; 0x11
    14e8:	19 96       	adiw	r26, 0x09	; 9
    14ea:	9c 91       	ld	r25, X
    14ec:	19 97       	sbiw	r26, 0x09	; 9
    14ee:	1a 96       	adiw	r26, 0x0a	; 10
    14f0:	8c 91       	ld	r24, X
    14f2:	1a 97       	sbiw	r26, 0x0a	; 10
    14f4:	98 8b       	std	Y+16, r25	; 0x10
    14f6:	8f 87       	std	Y+15, r24	; 0x0f
    14f8:	89 ef       	ldi	r24, 0xF9	; 249
    14fa:	9b e0       	ldi	r25, 0x0B	; 11
    14fc:	9b 8b       	std	Y+19, r25	; 0x13
    14fe:	8c 8b       	std	Y+20, r24	; 0x14
    1500:	16 96       	adiw	r26, 0x06	; 6
    1502:	8c 91       	ld	r24, X
    1504:	16 97       	sbiw	r26, 0x06	; 6
    1506:	4d 91       	ld	r20, X+
    1508:	5c 91       	ld	r21, X
    150a:	84 83       	std	Z+4, r24	; 0x04
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	97 87       	std	Z+15, r25	; 0x0f
    1510:	10 8a       	std	Z+16, r1	; 0x10
    1512:	6c ee       	ldi	r22, 0xEC	; 236
    1514:	72 e0       	ldi	r23, 0x02	; 2
    1516:	74 87       	std	Z+12, r23	; 0x0c
    1518:	63 87       	std	Z+11, r22	; 0x0b
    151a:	85 8f       	std	Z+29, r24	; 0x1d
    151c:	14 8e       	std	Z+28, r1	; 0x1c
    151e:	13 8e       	std	Z+27, r1	; 0x1b
    1520:	12 8e       	std	Z+26, r1	; 0x1a
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	81 8b       	std	Z+17, r24	; 0x11
    1526:	56 87       	std	Z+14, r21	; 0x0e
    1528:	45 87       	std	Z+13, r20	; 0x0d
    152a:	d9 01       	movw	r26, r18
    152c:	57 97       	sbiw	r26, 0x17	; 23
    152e:	83 e0       	ldi	r24, 0x03	; 3
    1530:	93 e0       	ldi	r25, 0x03	; 3
    1532:	11 96       	adiw	r26, 0x01	; 1
    1534:	9c 93       	st	X, r25
    1536:	8e 93       	st	-X, r24
    1538:	eb 01       	movw	r28, r22
    153a:	89 8d       	ldd	r24, Y+25	; 0x19
    153c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    153e:	13 96       	adiw	r26, 0x03	; 3
    1540:	9c 93       	st	X, r25
    1542:	8e 93       	st	-X, r24
    1544:	12 97       	sbiw	r26, 0x02	; 2
    1546:	ec 01       	movw	r28, r24
    1548:	b9 83       	std	Y+1, r27	; 0x01
    154a:	a8 83       	st	Y, r26
    154c:	eb 01       	movw	r28, r22
    154e:	ba 8f       	std	Y+26, r27	; 0x1a
    1550:	a9 8f       	std	Y+25, r26	; 0x19
    1552:	1d 96       	adiw	r26, 0x0d	; 13
    1554:	0b 2e       	mov	r0, r27
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	0c 92       	st	X, r0
    155a:	11 97       	sbiw	r26, 0x01	; 1
    155c:	ac 93       	st	X, r26
    155e:	12 96       	adiw	r26, 0x02	; 2
    1560:	0b 2e       	mov	r0, r27
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	0c 92       	st	X, r0
    1566:	11 97       	sbiw	r26, 0x01	; 1
    1568:	ac 93       	st	X, r26
    156a:	0a 2e       	mov	r0, r26
    156c:	1b 2e       	mov	r1, r27
    156e:	13 96       	adiw	r26, 0x03	; 3
    1570:	1c 92       	st	X, r1
    1572:	0e 92       	st	-X, r0
    1574:	11 24       	eor	r1, r1
    1576:	12 97       	sbiw	r26, 0x02	; 2
    1578:	cf 01       	movw	r24, r30
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <chThdCreateI>:
    1580:	9e df       	rcall	.-196    	; 0x14be <chThdCreateSuspendedI>
    1582:	2f ce       	rjmp	.-930    	; 0x11e2 <chSchReadyI>

00001584 <chThdExitS>:
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	c0 91 f1 02 	lds	r28, 0x02F1	; 0x8002f1 <ch0+0x5>
    1590:	d0 91 f2 02 	lds	r29, 0x02F2	; 0x8002f2 <ch0+0x6>
    1594:	9b 8b       	std	Y+19, r25	; 0x13
    1596:	8a 8b       	std	Y+18, r24	; 0x12
    1598:	8e 01       	movw	r16, r28
    159a:	0c 5e       	subi	r16, 0xEC	; 236
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	8c 89       	ldd	r24, Y+20	; 0x14
    15a0:	9d 89       	ldd	r25, Y+21	; 0x15
    15a2:	08 17       	cp	r16, r24
    15a4:	19 07       	cpc	r17, r25
    15a6:	59 f0       	breq	.+22     	; 0x15be <chThdExitS+0x3a>
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 81       	ld	r18, Z
    15ac:	31 81       	ldd	r19, Z+1	; 0x01
    15ae:	3d 8b       	std	Y+21, r19	; 0x15
    15b0:	2c 8b       	std	Y+20, r18	; 0x14
    15b2:	17 de       	rcall	.-978    	; 0x11e2 <chSchReadyI>
    15b4:	8c 89       	ldd	r24, Y+20	; 0x14
    15b6:	9d 89       	ldd	r25, Y+21	; 0x15
    15b8:	80 17       	cp	r24, r16
    15ba:	91 07       	cpc	r25, r17
    15bc:	a9 f7       	brne	.-22     	; 0x15a8 <chThdExitS+0x24>
    15be:	89 89       	ldd	r24, Y+17	; 0x11
    15c0:	81 11       	cpse	r24, r1
    15c2:	0c c0       	rjmp	.+24     	; 0x15dc <chThdExitS+0x58>
    15c4:	e9 85       	ldd	r30, Y+9	; 0x09
    15c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    15c8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ca:	98 85       	ldd	r25, Y+8	; 0x08
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    15d0:	af 81       	ldd	r26, Y+7	; 0x07
    15d2:	b8 85       	ldd	r27, Y+8	; 0x08
    15d4:	13 96       	adiw	r26, 0x03	; 3
    15d6:	fc 93       	st	X, r31
    15d8:	ee 93       	st	-X, r30
    15da:	12 97       	sbiw	r26, 0x02	; 2
    15dc:	8f e0       	ldi	r24, 0x0F	; 15
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	21 ce       	rjmp	.-958    	; 0x122a <chSchGoSleepS>

000015e8 <chThdExit>:
    15e8:	f8 94       	cli
    15ea:	cc cf       	rjmp	.-104    	; 0x1584 <chThdExitS>

000015ec <chThdSuspendTimeoutS>:
    15ec:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <ch0+0x5>
    15f0:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <ch0+0x6>
    15f4:	61 15       	cp	r22, r1
    15f6:	71 05       	cpc	r23, r1
    15f8:	39 f0       	breq	.+14     	; 0x1608 <chThdSuspendTimeoutS+0x1c>
    15fa:	dc 01       	movw	r26, r24
    15fc:	ed 93       	st	X+, r30
    15fe:	fc 93       	st	X, r31
    1600:	93 8b       	std	Z+19, r25	; 0x13
    1602:	82 8b       	std	Z+18, r24	; 0x12
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	2d ce       	rjmp	.-934    	; 0x1262 <chSchGoSleepTimeoutS>
    1608:	8f ef       	ldi	r24, 0xFF	; 255
    160a:	9f ef       	ldi	r25, 0xFF	; 255
    160c:	08 95       	ret

0000160e <chThdResumeI>:
    160e:	dc 01       	movw	r26, r24
    1610:	ed 91       	ld	r30, X+
    1612:	fc 91       	ld	r31, X
    1614:	11 97       	sbiw	r26, 0x01	; 1
    1616:	30 97       	sbiw	r30, 0x00	; 0
    1618:	31 f0       	breq	.+12     	; 0x1626 <chThdResumeI+0x18>
    161a:	1d 92       	st	X+, r1
    161c:	1c 92       	st	X, r1
    161e:	73 8b       	std	Z+19, r23	; 0x13
    1620:	62 8b       	std	Z+18, r22	; 0x12
    1622:	cf 01       	movw	r24, r30
    1624:	de cd       	rjmp	.-1092   	; 0x11e2 <chSchReadyI>
    1626:	08 95       	ret

00001628 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
    162c:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <ch0+0x5>
    1630:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <ch0+0x6>
  thread_t *currtp = chThdGetSelfX();

  if (unlikely(TIME_IMMEDIATE == timeout)) {
    1634:	61 15       	cp	r22, r1
    1636:	71 05       	cpc	r23, r1
    1638:	79 f0       	breq	.+30     	; 0x1658 <chThdEnqueueTimeoutS+0x30>
 *
 * @notapi
 */
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {

  p->next       = qp;
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
  p->prev       = qp->prev;
    163e:	ec 01       	movw	r28, r24
    1640:	aa 81       	ldd	r26, Y+2	; 0x02
    1642:	bb 81       	ldd	r27, Y+3	; 0x03
    1644:	b3 83       	std	Z+3, r27	; 0x03
    1646:	a2 83       	std	Z+2, r26	; 0x02
  p->prev->next = p;
    1648:	ed 93       	st	X+, r30
    164a:	fc 93       	st	X, r31
  qp->prev      = p;
    164c:	fb 83       	std	Y+3, r31	; 0x03
    164e:	ea 83       	std	Y+2, r30	; 0x02
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
    1650:	84 e0       	ldi	r24, 0x04	; 4
}
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
    1656:	05 ce       	rjmp	.-1014   	; 0x1262 <chSchGoSleepTimeoutS>
}
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	9f ef       	ldi	r25, 0xFF	; 255
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool ch_queue_notempty(const ch_queue_t *qp) {

  return (bool)(qp->next != qp);
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01

  if (ch_queue_notempty(&tqp->queue)) {
    166c:	e8 17       	cp	r30, r24
    166e:	f9 07       	cpc	r31, r25
    1670:	71 f0       	breq	.+28     	; 0x168e <chThdDequeueNextI+0x2c>
 * @notapi
 */
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  ch_queue_t *p = qp->next;

  qp->next       = p->next;
    1672:	ec 01       	movw	r28, r24
    1674:	a8 81       	ld	r26, Y
    1676:	b9 81       	ldd	r27, Y+1	; 0x01
    1678:	b1 83       	std	Z+1, r27	; 0x01
    167a:	a0 83       	st	Z, r26
  qp->next->prev = qp;
    167c:	13 96       	adiw	r26, 0x03	; 3
    167e:	fc 93       	st	X, r31
    1680:	ee 93       	st	-X, r30
    1682:	12 97       	sbiw	r26, 0x02	; 2

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
    1684:	7b 8b       	std	Y+19, r23	; 0x13
    1686:	6a 8b       	std	Y+18, r22	; 0x12
    chThdDoDequeueNextI(tqp, msg);
  }
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
    168c:	aa cd       	rjmp	.-1196   	; 0x11e2 <chSchReadyI>
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
    1694:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
  qp->prev = qp;
    169a:	93 83       	std	Z+3, r25	; 0x03
    169c:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
    169e:	15 82       	std	Z+5, r1	; 0x05
    16a0:	14 82       	std	Z+4, r1	; 0x04
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
    16a2:	08 95       	ret

000016a4 <chEvtSignalI>:

  chSysLock();
  chEvtSignalI(tp, events);
  chSchRescheduleS();
  chSysUnlock();
}
    16a4:	fc 01       	movw	r30, r24
    16a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    16a8:	68 2b       	or	r22, r24
    16aa:	62 8f       	std	Z+26, r22	; 0x1a
    16ac:	87 85       	ldd	r24, Z+15	; 0x0f
    16ae:	8a 30       	cpi	r24, 0x0A	; 10
    16b0:	59 f0       	breq	.+22     	; 0x16c8 <chEvtSignalI+0x24>
    16b2:	8b 30       	cpi	r24, 0x0B	; 11
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <chEvtSignalI+0x14>
    16b6:	08 95       	ret
    16b8:	82 89       	ldd	r24, Z+18	; 0x12
    16ba:	68 23       	and	r22, r24
    16bc:	86 13       	cpse	r24, r22
    16be:	fb cf       	rjmp	.-10     	; 0x16b6 <chEvtSignalI+0x12>
    16c0:	13 8a       	std	Z+19, r1	; 0x13
    16c2:	12 8a       	std	Z+18, r1	; 0x12
    16c4:	cf 01       	movw	r24, r30
    16c6:	8d cd       	rjmp	.-1254   	; 0x11e2 <chSchReadyI>
    16c8:	82 89       	ldd	r24, Z+18	; 0x12
    16ca:	68 23       	and	r22, r24
    16cc:	c9 f7       	brne	.-14     	; 0x16c0 <chEvtSignalI+0x1c>
    16ce:	08 95       	ret

000016d0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	7c 01       	movw	r14, r24
    16dc:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
    16de:	fc 01       	movw	r30, r24
    16e0:	c0 81       	ld	r28, Z
    16e2:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    16e4:	8c 17       	cp	r24, r28
    16e6:	9d 07       	cpc	r25, r29
    16e8:	91 f0       	breq	.+36     	; 0x170e <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	81 2b       	or	r24, r17
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    16f0:	11 23       	and	r17, r17
    16f2:	19 f0       	breq	.+6      	; 0x16fa <chEvtBroadcastFlagsI+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
    16f4:	8e 81       	ldd	r24, Y+6	; 0x06
    16f6:	81 23       	and	r24, r17
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    16f8:	21 f0       	breq	.+8      	; 0x1702 <chEvtBroadcastFlagsI+0x32>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    16fa:	6c 81       	ldd	r22, Y+4	; 0x04
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	d1 df       	rcall	.-94     	; 0x16a4 <chEvtSignalI>
    }
    elp = elp->next;
    1702:	09 90       	ld	r0, Y+
    1704:	d8 81       	ld	r29, Y
    1706:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    1708:	ec 16       	cp	r14, r28
    170a:	fd 06       	cpc	r15, r29
    170c:	71 f7       	brne	.-36     	; 0x16ea <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	08 95       	ret

0000171a <__core_init>:
  chSysLock();
  p = chCoreAllocFromBaseI(size, align, offset);
  chSysUnlock();

  return p;
}
    171a:	ef e2       	ldi	r30, 0x2F	; 47
    171c:	f3 e0       	ldi	r31, 0x03	; 3
    171e:	8d ee       	ldi	r24, 0xED	; 237
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
    1726:	8d e6       	ldi	r24, 0x6D	; 109
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	93 83       	std	Z+3, r25	; 0x03
    172c:	82 83       	std	Z+2, r24	; 0x02
    172e:	08 95       	ret

00001730 <chCoreAllocFromTop>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1730:	f8 94       	cli
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
    1732:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <ch_memcore+0x2>
    1736:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <ch_memcore+0x3>
    173a:	9f 01       	movw	r18, r30
    173c:	28 1b       	sub	r18, r24
    173e:	39 0b       	sbc	r19, r25
    1740:	c9 01       	movw	r24, r18
    1742:	71 95       	neg	r23
    1744:	61 95       	neg	r22
    1746:	71 09       	sbc	r23, r1
    1748:	86 23       	and	r24, r22
    174a:	97 23       	and	r25, r23
  prev = p - offset;
    174c:	9c 01       	movw	r18, r24
    174e:	24 1b       	sub	r18, r20
    1750:	35 0b       	sbc	r19, r21

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    1752:	40 91 2f 03 	lds	r20, 0x032F	; 0x80032f <ch_memcore>
    1756:	50 91 30 03 	lds	r21, 0x0330	; 0x800330 <ch_memcore+0x1>
    175a:	24 17       	cp	r18, r20
    175c:	35 07       	cpc	r19, r21
    175e:	48 f0       	brcs	.+18     	; 0x1772 <chCoreAllocFromTop+0x42>
    1760:	e2 17       	cp	r30, r18
    1762:	f3 07       	cpc	r31, r19
    1764:	30 f0       	brcs	.+12     	; 0x1772 <chCoreAllocFromTop+0x42>
    return NULL;
  }

  ch_memcore.topmem = prev;
    1766:	30 93 32 03 	sts	0x0332, r19	; 0x800332 <ch_memcore+0x3>
    176a:	20 93 31 03 	sts	0x0331, r18	; 0x800331 <ch_memcore+0x2>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    176e:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    1770:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    return NULL;
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    1778:	08 95       	ret

0000177a <__heap_init>:
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
    177a:	ed e6       	ldi	r30, 0x6D	; 109
    177c:	f2 e0       	ldi	r31, 0x02	; 2
    177e:	88 e9       	ldi	r24, 0x98	; 152
    1780:	9b e0       	ldi	r25, 0x0B	; 11
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
    1786:	13 82       	std	Z+3, r1	; 0x03
    1788:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
    178a:	15 82       	std	Z+5, r1	; 0x05
    178c:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
    178e:	83 e7       	ldi	r24, 0x73	; 115
    1790:	92 e0       	ldi	r25, 0x02	; 2
    1792:	80 cf       	rjmp	.-256    	; 0x1694 <chMtxObjectInit>

00001794 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
    1794:	2f 92       	push	r2
  asm volatile ("push    r3");
    1796:	3f 92       	push	r3
  asm volatile ("push    r4");
    1798:	4f 92       	push	r4
  asm volatile ("push    r5");
    179a:	5f 92       	push	r5
  asm volatile ("push    r6");
    179c:	6f 92       	push	r6
  asm volatile ("push    r7");
    179e:	7f 92       	push	r7
  asm volatile ("push    r8");
    17a0:	8f 92       	push	r8
  asm volatile ("push    r9");
    17a2:	9f 92       	push	r9
  asm volatile ("push    r10");
    17a4:	af 92       	push	r10
  asm volatile ("push    r11");
    17a6:	bf 92       	push	r11
  asm volatile ("push    r12");
    17a8:	cf 92       	push	r12
  asm volatile ("push    r13");
    17aa:	df 92       	push	r13
  asm volatile ("push    r14");
    17ac:	ef 92       	push	r14
  asm volatile ("push    r15");
    17ae:	ff 92       	push	r15
  asm volatile ("push    r16");
    17b0:	0f 93       	push	r16
  asm volatile ("push    r17");
    17b2:	1f 93       	push	r17
  asm volatile ("push    r28");
    17b4:	cf 93       	push	r28
  asm volatile ("push    r29");
    17b6:	df 93       	push	r29

#if defined(__CHIBIOS_RT__)
  asm volatile ("movw    r30, r22");
    17b8:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
    17ba:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
    17bc:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
    17be:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
    17c0:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
    17c2:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
    17c4:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
    17c6:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
    17c8:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
    17ca:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
    17cc:	df 91       	pop	r29
  asm volatile ("pop     r28");
    17ce:	cf 91       	pop	r28
  asm volatile ("pop     r17");
    17d0:	1f 91       	pop	r17
  asm volatile ("pop     r16");
    17d2:	0f 91       	pop	r16
  asm volatile ("pop     r15");
    17d4:	ff 90       	pop	r15
  asm volatile ("pop     r14");
    17d6:	ef 90       	pop	r14
  asm volatile ("pop     r13");
    17d8:	df 90       	pop	r13
  asm volatile ("pop     r12");
    17da:	cf 90       	pop	r12
  asm volatile ("pop     r11");
    17dc:	bf 90       	pop	r11
  asm volatile ("pop     r10");
    17de:	af 90       	pop	r10
  asm volatile ("pop     r9");
    17e0:	9f 90       	pop	r9
  asm volatile ("pop     r8");
    17e2:	8f 90       	pop	r8
  asm volatile ("pop     r7");
    17e4:	7f 90       	pop	r7
  asm volatile ("pop     r6");
    17e6:	6f 90       	pop	r6
  asm volatile ("pop     r5");
    17e8:	5f 90       	pop	r5
  asm volatile ("pop     r4");
    17ea:	4f 90       	pop	r4
  asm volatile ("pop     r3");
    17ec:	3f 90       	pop	r3
  asm volatile ("pop     r2");
    17ee:	2f 90       	pop	r2
  asm volatile ("ret");
    17f0:	08 95       	ret

000017f2 <_port_thread_start>:
    17f2:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
    17f4:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
    17f6:	f1 01       	movw	r30, r2
  asm volatile ("icall");
    17f8:	09 95       	icall
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
    17fa:	f6 ce       	rjmp	.-532    	; 0x15e8 <chThdExit>
}
    17fc:	08 95       	ret

000017fe <gpt_cb>:


volatile uint8_t flag;
void gpt_cb(GPTDriver* gptd) {
  (void) gptd;
  flag = 1;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <flag>
}
    1804:	08 95       	ret

00001806 <main>:

/*
 * Application entry point.
 */
int main(void) {
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	2f 97       	sbiw	r28, 0x0f	; 15
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
  uint8_t rx_buffer[2];
  I2CConfig i2c_config = {.clock_speed = 100000};
    181a:	80 ea       	ldi	r24, 0xA0	; 160
    181c:	96 e8       	ldi	r25, 0x86	; 134
    181e:	a1 e0       	ldi	r26, 0x01	; 1
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	8f 83       	std	Y+7, r24	; 0x07
    1824:	98 87       	std	Y+8, r25	; 0x08
    1826:	a9 87       	std	Y+9, r26	; 0x09
    1828:	ba 87       	std	Y+10, r27	; 0x0a

  GPTConfig driver_config = {.frequency = 15625,
    182a:	86 e0       	ldi	r24, 0x06	; 6
    182c:	ea e0       	ldi	r30, 0x0A	; 10
    182e:	f1 e0       	ldi	r31, 0x01	; 1
    1830:	de 01       	movw	r26, r28
    1832:	11 96       	adiw	r26, 0x01	; 1
    1834:	01 90       	ld	r0, Z+
    1836:	0d 92       	st	X+, r0
    1838:	8a 95       	dec	r24
    183a:	e1 f7       	brne	.-8      	; 0x1834 <main+0x2e>
                             .callback = gpt_cb
  };

  SerialConfig serial_config = {.sc_brr = UBRR2x(9600),
    183c:	8f ec       	ldi	r24, 0xCF	; 207
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9c 87       	std	Y+12, r25	; 0x0c
    1842:	8b 87       	std	Y+11, r24	; 0x0b
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	8d 87       	std	Y+13, r24	; 0x0d
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
    1848:	0e 94 63 00 	call	0xc6	; 0xc6 <halInit>
  chSysInit();
    184c:	8b db       	rcall	.-2282   	; 0xf64 <chSysInit>

  palSetPadMode(IOPORT2, PB0, PAL_MODE_INPUT_PULLUP);
    184e:	43 e0       	ldi	r20, 0x03	; 3
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	83 e2       	ldi	r24, 0x23	; 35
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 c4 03 	call	0x788	; 0x788 <_pal_lld_setgroupmode>

  gptStart(&GPTD1, &driver_config);
    185a:	be 01       	movw	r22, r28
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	86 e9       	ldi	r24, 0x96	; 150
    1862:	92 e0       	ldi	r25, 0x02	; 2
    1864:	0e 94 ca 02 	call	0x594	; 0x594 <gptStart>
  gptStartContinuous(&GPTD1, 15625);
    1868:	69 e0       	ldi	r22, 0x09	; 9
    186a:	7d e3       	ldi	r23, 0x3D	; 61
    186c:	86 e9       	ldi	r24, 0x96	; 150
    186e:	92 e0       	ldi	r25, 0x02	; 2
    1870:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <gptStartContinuous>

  i2cStart(&I2CD1, &i2c_config);
    1874:	be 01       	movw	r22, r28
    1876:	69 5f       	subi	r22, 0xF9	; 249
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	8b e7       	ldi	r24, 0x7B	; 123
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <i2cStart>

  sdStart(&SD1, &serial_config);
    1882:	be 01       	movw	r22, r28
    1884:	65 5f       	subi	r22, 0xF5	; 245
    1886:	7f 4f       	sbci	r23, 0xFF	; 255
    1888:	80 ea       	ldi	r24, 0xA0	; 160
    188a:	92 e0       	ldi	r25, 0x02	; 2
    188c:	0e 94 66 03 	call	0x6cc	; 0x6cc <sdStart>

  while (true) {
    if (flag) {
      i2cMasterTransmitTimeout(&I2CD1, PEER_ADDRESS, 0x00, 0, rx_buffer, 2, TIME_INFINITE);
      chprintf((BaseSequentialStream *) &SD1, "%d", rx_buffer[0]);
    1890:	28 e7       	ldi	r18, 0x78	; 120
    1892:	82 2e       	mov	r8, r18
    1894:	21 e0       	ldi	r18, 0x01	; 1
    1896:	92 2e       	mov	r9, r18
    1898:	30 ea       	ldi	r19, 0xA0	; 160
    189a:	a3 2e       	mov	r10, r19
    189c:	32 e0       	ldi	r19, 0x02	; 2
    189e:	b3 2e       	mov	r11, r19
  i2cStart(&I2CD1, &i2c_config);

  sdStart(&SD1, &serial_config);

  while (true) {
    if (flag) {
    18a0:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <flag>
    18a4:	88 23       	and	r24, r24
    18a6:	e1 f3       	breq	.-8      	; 0x18a0 <main+0x9a>
      i2cMasterTransmitTimeout(&I2CD1, PEER_ADDRESS, 0x00, 0, rx_buffer, 2, TIME_INFINITE);
    18a8:	cc 24       	eor	r12, r12
    18aa:	ca 94       	dec	r12
    18ac:	dc 2c       	mov	r13, r12
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	e9 2e       	mov	r14, r25
    18b2:	f1 2c       	mov	r15, r1
    18b4:	8e 01       	movw	r16, r28
    18b6:	02 5f       	subi	r16, 0xF2	; 242
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	60 e9       	ldi	r22, 0x90	; 144
    18c4:	8b e7       	ldi	r24, 0x7B	; 123
    18c6:	92 e0       	ldi	r25, 0x02	; 2
    18c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <i2cMasterTransmitTimeout>
      chprintf((BaseSequentialStream *) &SD1, "%d", rx_buffer[0]);
    18cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ce:	1f 92       	push	r1
    18d0:	8f 93       	push	r24
    18d2:	9f 92       	push	r9
    18d4:	8f 92       	push	r8
    18d6:	bf 92       	push	r11
    18d8:	af 92       	push	r10
    18da:	49 d3       	rcall	.+1682   	; 0x1f6e <chprintf>
      flag = 0;
    18dc:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <flag>
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	d9 cf       	rjmp	.-78     	; 0x18a0 <main+0x9a>

000018ee <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
    18ee:	2f 92       	push	r2
    18f0:	3f 92       	push	r3
    18f2:	4f 92       	push	r4
    18f4:	5f 92       	push	r5
    18f6:	6f 92       	push	r6
    18f8:	7f 92       	push	r7
    18fa:	8f 92       	push	r8
    18fc:	9f 92       	push	r9
    18fe:	af 92       	push	r10
    1900:	bf 92       	push	r11
    1902:	cf 92       	push	r12
    1904:	df 92       	push	r13
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	64 97       	sbiw	r28, 0x14	; 20
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	2c 01       	movw	r4, r24
    1924:	7b 01       	movw	r14, r22
    1926:	5c 8b       	std	Y+20, r21	; 0x14
    1928:	4b 8b       	std	Y+19, r20	; 0x13
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
    192a:	31 2c       	mov	r3, r1
    192c:	21 2c       	mov	r2, r1
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    192e:	9e 01       	movw	r18, r28
    1930:	24 5f       	subi	r18, 0xF4	; 244
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	3e 87       	std	Y+14, r19	; 0x0e
    1936:	2d 87       	std	Y+13, r18	; 0x0d
    1938:	be 01       	movw	r22, r28
    193a:	6f 5f       	subi	r22, 0xFF	; 255
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	78 8b       	std	Y+16, r23	; 0x10
    1940:	6f 87       	std	Y+15, r22	; 0x0f
    1942:	0c c0       	rjmp	.+24     	; 0x195c <chvprintf+0x6e>
    if (c == 0) {
      return n;
    }
    
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
    1944:	d2 01       	movw	r26, r4
    1946:	ed 91       	ld	r30, X+
    1948:	fc 91       	ld	r31, X
    194a:	06 80       	ldd	r0, Z+6	; 0x06
    194c:	f7 81       	ldd	r31, Z+7	; 0x07
    194e:	e0 2d       	mov	r30, r0
    1950:	c2 01       	movw	r24, r4
    1952:	09 95       	icall
      n++;
    1954:	bf ef       	ldi	r27, 0xFF	; 255
    1956:	2b 1a       	sub	r2, r27
    1958:	3b 0a       	sbc	r3, r27
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    195a:	78 01       	movw	r14, r16
    195c:	87 01       	movw	r16, r14
    195e:	0f 5f       	subi	r16, 0xFF	; 255
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	d7 01       	movw	r26, r14
    1964:	6c 91       	ld	r22, X
    if (c == 0) {
    1966:	66 23       	and	r22, r22
    1968:	09 f4       	brne	.+2      	; 0x196c <chvprintf+0x7e>
    196a:	af c0       	rjmp	.+350    	; 0x1aca <chvprintf+0x1dc>
      return n;
    }
    
    if (c != '%') {
    196c:	65 32       	cpi	r22, 0x25	; 37
    196e:	51 f7       	brne	.-44     	; 0x1944 <chvprintf+0x56>
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
    if (*fmt == '-') {
    1970:	f7 01       	movw	r30, r14
    1972:	81 81       	ldd	r24, Z+1	; 0x01
    
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
    1974:	61 2c       	mov	r6, r1
    if (*fmt == '-') {
    1976:	8d 32       	cpi	r24, 0x2D	; 45
    1978:	31 f4       	brne	.+12     	; 0x1986 <chvprintf+0x98>
      fmt++;
    197a:	87 01       	movw	r16, r14
    197c:	0e 5f       	subi	r16, 0xFE	; 254
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	82 81       	ldd	r24, Z+2	; 0x02
      left_align = true;
    1982:	66 24       	eor	r6, r6
    1984:	63 94       	inc	r6
    }

    /* Sign mode.*/
    do_sign = false;
    1986:	d1 2c       	mov	r13, r1
    if (*fmt == '+') {
    1988:	8b 32       	cpi	r24, 0x2B	; 43
    198a:	39 f4       	brne	.+14     	; 0x199a <chvprintf+0xac>
    198c:	d8 01       	movw	r26, r16
    198e:	11 96       	adiw	r26, 0x01	; 1
    1990:	8c 91       	ld	r24, X
      fmt++;
    1992:	0f 5f       	subi	r16, 0xFF	; 255
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
      do_sign = true;
    1996:	dd 24       	eor	r13, r13
    1998:	d3 94       	inc	r13
    }

    /* Filler mode.*/
    filler = ' ';
    199a:	e0 e2       	ldi	r30, 0x20	; 32
    199c:	7e 2e       	mov	r7, r30
    if (*fmt == '0') {
    199e:	80 33       	cpi	r24, 0x30	; 48
    19a0:	31 f4       	brne	.+12     	; 0x19ae <chvprintf+0xc0>
    19a2:	f8 01       	movw	r30, r16
    19a4:	81 81       	ldd	r24, Z+1	; 0x01
      fmt++;
    19a6:	0f 5f       	subi	r16, 0xFF	; 255
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
      filler = '0';
    19aa:	f0 e3       	ldi	r31, 0x30	; 48
    19ac:	7f 2e       	mov	r7, r31
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
    19ae:	8a 32       	cpi	r24, 0x2A	; 42
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <chvprintf+0xc6>
    19b2:	a5 c0       	rjmp	.+330    	; 0x1afe <chvprintf+0x210>
      width = va_arg(ap, int);
    19b4:	ab 89       	ldd	r26, Y+19	; 0x13
    19b6:	bc 89       	ldd	r27, Y+20	; 0x14
    19b8:	12 96       	adiw	r26, 0x02	; 2
    19ba:	eb 89       	ldd	r30, Y+19	; 0x13
    19bc:	fc 89       	ldd	r31, Y+20	; 0x14
    19be:	80 80       	ld	r8, Z
    19c0:	91 80       	ldd	r9, Z+1	; 0x01
      ++fmt;
      c = *fmt++;
    19c2:	78 01       	movw	r14, r16
    19c4:	f2 e0       	ldi	r31, 0x02	; 2
    19c6:	ef 0e       	add	r14, r31
    19c8:	f1 1c       	adc	r15, r1
    19ca:	f8 01       	movw	r30, r16
    19cc:	81 81       	ldd	r24, Z+1	; 0x01
    19ce:	a7 01       	movw	r20, r14
    19d0:	4f 5f       	subi	r20, 0xFF	; 255
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
        }
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    if (c == '.') {
    19d8:	8e 32       	cpi	r24, 0x2E	; 46
    19da:	09 f4       	brne	.+2      	; 0x19de <chvprintf+0xf0>
    19dc:	39 c1       	rjmp	.+626    	; 0x1c50 <chvprintf+0x362>
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
    19de:	98 2f       	mov	r25, r24
    19e0:	9f 7d       	andi	r25, 0xDF	; 223
    19e2:	9c 34       	cpi	r25, 0x4C	; 76
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <chvprintf+0xfa>
    19e6:	af c0       	rjmp	.+350    	; 0x1b46 <chvprintf+0x258>
      if (c == 0) {
        return n;
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    19e8:	9f eb       	ldi	r25, 0xBF	; 191
    19ea:	98 0f       	add	r25, r24
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	9a 31       	cpi	r25, 0x1A	; 26
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <chvprintf+0x106>
    19f2:	ee c0       	rjmp	.+476    	; 0x1bd0 <chvprintf+0x2e2>
    }

    /* Command decoding.*/
    switch (c) {
    19f4:	ec eb       	ldi	r30, 0xBC	; 188
    19f6:	e8 0f       	add	r30, r24
    19f8:	e5 33       	cpi	r30, 0x35	; 53
    19fa:	08 f4       	brcc	.+2      	; 0x19fe <chvprintf+0x110>
    19fc:	b0 c0       	rjmp	.+352    	; 0x1b5e <chvprintf+0x270>
        l = va_arg(ap, unsigned int);
      }
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	e1 e0       	ldi	r30, 0x01	; 1
    1a02:	8e 1a       	sub	r8, r30
    1a04:	91 08       	sbc	r9, r1
      break;
    1a06:	bc 8b       	std	Y+20, r27	; 0x14
    1a08:	ab 8b       	std	Y+19, r26	; 0x13
    1a0a:	d1 2c       	mov	r13, r1
    1a0c:	c1 2c       	mov	r12, r1
      n++;
      continue;
    }
    
    p = tmpbuf;
    s = tmpbuf;
    1a0e:	9e 01       	movw	r18, r28
    1a10:	2f 5f       	subi	r18, 0xFF	; 255
    1a12:	3f 4f       	sbci	r19, 0xFF	; 255
    1a14:	59 01       	movw	r10, r18
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
    1a16:	97 fc       	sbrc	r9, 7
    1a18:	26 c0       	rjmp	.+76     	; 0x1a66 <chvprintf+0x178>
      width = 0;
    }
    if (left_align == false) {
    1a1a:	61 10       	cpse	r6, r1
    1a1c:	5c c2       	rjmp	.+1208   	; 0x1ed6 <chvprintf+0x5e8>
      width = -width;
    1a1e:	00 27       	eor	r16, r16
    1a20:	11 27       	eor	r17, r17
    1a22:	08 19       	sub	r16, r8
    1a24:	19 09       	sbc	r17, r9
    }
    if (width < 0) {
    1a26:	81 14       	cp	r8, r1
    1a28:	91 04       	cpc	r9, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <chvprintf+0x140>
    1a2c:	53 c2       	rjmp	.+1190   	; 0x1ed4 <chvprintf+0x5e6>
      if ((*s == '-' || *s == '+') && filler == '0') {
    1a2e:	d5 01       	movw	r26, r10
    1a30:	6c 91       	ld	r22, X
    1a32:	d2 01       	movw	r26, r4
    1a34:	ed 91       	ld	r30, X+
    1a36:	fc 91       	ld	r31, X
    1a38:	06 80       	ldd	r0, Z+6	; 0x06
    1a3a:	f7 81       	ldd	r31, Z+7	; 0x07
    1a3c:	e0 2d       	mov	r30, r0
    1a3e:	6d 32       	cpi	r22, 0x2D	; 45
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <chvprintf+0x156>
    1a42:	4c c2       	rjmp	.+1176   	; 0x1edc <chvprintf+0x5ee>
    1a44:	6b 32       	cpi	r22, 0x2B	; 43
    1a46:	39 f4       	brne	.+14     	; 0x1a56 <chvprintf+0x168>
    1a48:	49 c2       	rjmp	.+1170   	; 0x1edc <chvprintf+0x5ee>
    1a4a:	d2 01       	movw	r26, r4
    1a4c:	ed 91       	ld	r30, X+
    1a4e:	fc 91       	ld	r31, X
    1a50:	06 80       	ldd	r0, Z+6	; 0x06
    1a52:	f7 81       	ldd	r31, Z+7	; 0x07
    1a54:	e0 2d       	mov	r30, r0
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
    1a56:	67 2d       	mov	r22, r7
    1a58:	c2 01       	movw	r24, r4
    1a5a:	09 95       	icall
        n++;
      } while (++width != 0);
    1a5c:	0f 5f       	subi	r16, 0xFF	; 255
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	a1 f7       	brne	.-24     	; 0x1a4a <chvprintf+0x15c>
    1a62:	28 0c       	add	r2, r8
    1a64:	39 1c       	adc	r3, r9
    }
    while (--i >= 0) {
    1a66:	91 2c       	mov	r9, r1
    1a68:	81 2c       	mov	r8, r1
    1a6a:	d7 fc       	sbrc	r13, 7
    1a6c:	77 cf       	rjmp	.-274    	; 0x195c <chvprintf+0x6e>
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
      width = -width;
    1a6e:	86 01       	movw	r16, r12
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
    1a70:	f5 01       	movw	r30, r10
    1a72:	61 91       	ld	r22, Z+
    1a74:	5f 01       	movw	r10, r30
    1a76:	d2 01       	movw	r26, r4
    1a78:	ed 91       	ld	r30, X+
    1a7a:	fc 91       	ld	r31, X
    1a7c:	06 80       	ldd	r0, Z+6	; 0x06
    1a7e:	f7 81       	ldd	r31, Z+7	; 0x07
    1a80:	e0 2d       	mov	r30, r0
    1a82:	c2 01       	movw	r24, r4
    1a84:	09 95       	icall
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1a86:	01 50       	subi	r16, 0x01	; 1
    1a88:	11 09       	sbc	r17, r1
    1a8a:	90 f7       	brcc	.-28     	; 0x1a70 <chvprintf+0x182>
    1a8c:	ef ef       	ldi	r30, 0xFF	; 255
    1a8e:	2e 1a       	sub	r2, r30
    1a90:	3e 0a       	sbc	r3, r30
    1a92:	2c 0c       	add	r2, r12
    1a94:	3d 1c       	adc	r3, r13
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1a96:	81 14       	cp	r8, r1
    1a98:	91 04       	cpc	r9, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <chvprintf+0x1b0>
    1a9c:	5f cf       	rjmp	.-322    	; 0x195c <chvprintf+0x6e>
    1a9e:	84 01       	movw	r16, r8
      streamPut(chp, (uint8_t)filler);
    1aa0:	d2 01       	movw	r26, r4
    1aa2:	ed 91       	ld	r30, X+
    1aa4:	fc 91       	ld	r31, X
    1aa6:	06 80       	ldd	r0, Z+6	; 0x06
    1aa8:	f7 81       	ldd	r31, Z+7	; 0x07
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	67 2d       	mov	r22, r7
    1aae:	c2 01       	movw	r24, r4
    1ab0:	09 95       	icall
      n++;
      width--;
    1ab2:	01 50       	subi	r16, 0x01	; 1
    1ab4:	11 09       	sbc	r17, r1
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
    1ab6:	a1 f7       	brne	.-24     	; 0x1aa0 <chvprintf+0x1b2>
    1ab8:	28 0c       	add	r2, r8
    1aba:	39 1c       	adc	r3, r9
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
    1abc:	87 01       	movw	r16, r14
    1abe:	0f 5f       	subi	r16, 0xFF	; 255
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	d7 01       	movw	r26, r14
    1ac4:	6c 91       	ld	r22, X
    if (c == 0) {
    1ac6:	61 11       	cpse	r22, r1
    1ac8:	51 cf       	rjmp	.-350    	; 0x196c <chvprintf+0x7e>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
    1aca:	c1 01       	movw	r24, r2
    1acc:	64 96       	adiw	r28, 0x14	; 20
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	bf 90       	pop	r11
    1aea:	af 90       	pop	r10
    1aec:	9f 90       	pop	r9
    1aee:	8f 90       	pop	r8
    1af0:	7f 90       	pop	r7
    1af2:	6f 90       	pop	r6
    1af4:	5f 90       	pop	r5
    1af6:	4f 90       	pop	r4
    1af8:	3f 90       	pop	r3
    1afa:	2f 90       	pop	r2
    1afc:	08 95       	ret
      c = *fmt++;
    }
    else {
      width = 0;
      while (true) {
        c = *fmt++;
    1afe:	f8 01       	movw	r30, r16
    1b00:	31 96       	adiw	r30, 0x01	; 1
        if (c == 0) {
    1b02:	88 23       	and	r24, r24
    1b04:	11 f3       	breq	.-60     	; 0x1aca <chvprintf+0x1dc>
          return n;
        }
        if (c >= '0' && c <= '9') {
    1b06:	20 ed       	ldi	r18, 0xD0	; 208
    1b08:	28 0f       	add	r18, r24
      width = va_arg(ap, int);
      ++fmt;
      c = *fmt++;
    }
    else {
      width = 0;
    1b0a:	91 2c       	mov	r9, r1
    1b0c:	81 2c       	mov	r8, r1
      while (true) {
        c = *fmt++;
        if (c == 0) {
          return n;
        }
        if (c >= '0' && c <= '9') {
    1b0e:	2a 30       	cpi	r18, 0x0A	; 10
    1b10:	38 f0       	brcs	.+14     	; 0x1b20 <chvprintf+0x232>
    1b12:	0a c2       	rjmp	.+1044   	; 0x1f28 <chvprintf+0x63a>
    1b14:	20 ed       	ldi	r18, 0xD0	; 208
    1b16:	28 0f       	add	r18, r24
      c = *fmt++;
    }
    else {
      width = 0;
      while (true) {
        c = *fmt++;
    1b18:	f7 01       	movw	r30, r14
        if (c == 0) {
          return n;
        }
        if (c >= '0' && c <= '9') {
    1b1a:	2a 30       	cpi	r18, 0x0A	; 10
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <chvprintf+0x232>
    1b1e:	bd c0       	rjmp	.+378    	; 0x1c9a <chvprintf+0x3ac>
          c -= '0';
          width = width * 10 + c;
    1b20:	c4 01       	movw	r24, r8
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0e       	add	r8, r24
    1b2c:	99 1e       	adc	r9, r25
    1b2e:	88 0c       	add	r8, r8
    1b30:	99 1c       	adc	r9, r9
    1b32:	82 0e       	add	r8, r18
    1b34:	91 1c       	adc	r9, r1
      c = *fmt++;
    }
    else {
      width = 0;
      while (true) {
        c = *fmt++;
    1b36:	7f 01       	movw	r14, r30
    1b38:	2f ef       	ldi	r18, 0xFF	; 255
    1b3a:	e2 1a       	sub	r14, r18
    1b3c:	f2 0a       	sbc	r15, r18
    1b3e:	80 81       	ld	r24, Z
        if (c == 0) {
    1b40:	81 11       	cpse	r24, r1
    1b42:	e8 cf       	rjmp	.-48     	; 0x1b14 <chvprintf+0x226>
    1b44:	c2 cf       	rjmp	.-124    	; 0x1aca <chvprintf+0x1dc>
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = true;
      c = *fmt++;
    1b46:	f7 01       	movw	r30, r14
    1b48:	80 81       	ld	r24, Z
      if (c == 0) {
    1b4a:	88 23       	and	r24, r24
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <chvprintf+0x262>
    1b4e:	bd cf       	rjmp	.-134    	; 0x1aca <chvprintf+0x1dc>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    1b50:	ec eb       	ldi	r30, 0xBC	; 188
    1b52:	e8 0f       	add	r30, r24
    1b54:	e5 33       	cpi	r30, 0x35	; 53
    1b56:	08 f4       	brcc	.+2      	; 0x1b5a <chvprintf+0x26c>
    1b58:	42 c0       	rjmp	.+132    	; 0x1bde <chvprintf+0x2f0>
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = true;
      c = *fmt++;
    1b5a:	7a 01       	movw	r14, r20
    1b5c:	50 cf       	rjmp	.-352    	; 0x19fe <chvprintf+0x110>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	ed 54       	subi	r30, 0x4D	; 77
    1b62:	f2 4f       	sbci	r31, 0xF2	; 242
    1b64:	25 c5       	rjmp	.+2634   	; 0x25b0 <__tablejump2__>
    1b66:	f5 0e       	add	r15, r21
    1b68:	ff 0c       	add	r15, r15
    1b6a:	ff 0c       	add	r15, r15
    1b6c:	ff 0c       	add	r15, r15
    1b6e:	ff 0c       	add	r15, r15
    1b70:	f5 0e       	add	r15, r21
    1b72:	ff 0c       	add	r15, r15
    1b74:	ff 0c       	add	r15, r15
    1b76:	ff 0c       	add	r15, r15
    1b78:	ff 0c       	add	r15, r15
    1b7a:	ff 0c       	add	r15, r15
    1b7c:	ef 0e       	add	r14, r31
    1b7e:	e9 0e       	add	r14, r25
    1b80:	ff 0c       	add	r15, r15
    1b82:	ff 0c       	add	r15, r15
    1b84:	ff 0c       	add	r15, r15
    1b86:	ff 0c       	add	r15, r15
    1b88:	a1 0e       	add	r10, r17
    1b8a:	ff 0c       	add	r15, r15
    1b8c:	ff 0c       	add	r15, r15
    1b8e:	e9 0e       	add	r14, r25
    1b90:	ff 0c       	add	r15, r15
    1b92:	ff 0c       	add	r15, r15
    1b94:	ff 0c       	add	r15, r15
    1b96:	ff 0c       	add	r15, r15
    1b98:	ff 0c       	add	r15, r15
    1b9a:	ff 0c       	add	r15, r15
    1b9c:	ff 0c       	add	r15, r15
    1b9e:	ff 0c       	add	r15, r15
    1ba0:	ff 0c       	add	r15, r15
    1ba2:	ff 0c       	add	r15, r15
    1ba4:	5e 0e       	add	r5, r30
    1ba6:	f5 0e       	add	r15, r21
    1ba8:	ff 0c       	add	r15, r15
    1baa:	ff 0c       	add	r15, r15
    1bac:	ff 0c       	add	r15, r15
    1bae:	ff 0c       	add	r15, r15
    1bb0:	f5 0e       	add	r15, r21
    1bb2:	ff 0c       	add	r15, r15
    1bb4:	ff 0c       	add	r15, r15
    1bb6:	ff 0c       	add	r15, r15
    1bb8:	ff 0c       	add	r15, r15
    1bba:	ff 0c       	add	r15, r15
    1bbc:	ef 0e       	add	r14, r31
    1bbe:	e9 0e       	add	r14, r25
    1bc0:	ff 0c       	add	r15, r15
    1bc2:	ff 0c       	add	r15, r15
    1bc4:	72 0e       	add	r7, r18
    1bc6:	ff 0c       	add	r15, r15
    1bc8:	a1 0e       	add	r10, r17
    1bca:	ff 0c       	add	r15, r15
    1bcc:	ff 0c       	add	r15, r15
    1bce:	e9 0e       	add	r14, r25
      if (c == 0) {
        return n;
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    }

    /* Command decoding.*/
    switch (c) {
    1bd2:	ec eb       	ldi	r30, 0xBC	; 188
    1bd4:	e8 0f       	add	r30, r24
    1bd6:	e5 33       	cpi	r30, 0x35	; 53
    1bd8:	08 f0       	brcs	.+2      	; 0x1bdc <chvprintf+0x2ee>
    1bda:	11 cf       	rjmp	.-478    	; 0x19fe <chvprintf+0x110>
    1bdc:	c0 cf       	rjmp	.-128    	; 0x1b5e <chvprintf+0x270>
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	ee 50       	subi	r30, 0x0E	; 14
    1be2:	f2 4f       	sbci	r31, 0xF2	; 242
    1be4:	e5 c4       	rjmp	.+2506   	; 0x25b0 <__tablejump2__>
    1be6:	59 0f       	add	r21, r25
    1be8:	ad 0d       	add	r26, r13
    1bea:	ad 0d       	add	r26, r13
    1bec:	ad 0d       	add	r26, r13
    1bee:	ad 0d       	add	r26, r13
    1bf0:	59 0f       	add	r21, r25
    1bf2:	ad 0d       	add	r26, r13
    1bf4:	ad 0d       	add	r26, r13
    1bf6:	ad 0d       	add	r26, r13
    1bf8:	ad 0d       	add	r26, r13
    1bfa:	ad 0d       	add	r26, r13
    1bfc:	51 0f       	add	r21, r17
    1bfe:	41 0f       	add	r20, r17
    1c00:	ad 0d       	add	r26, r13
    1c02:	ad 0d       	add	r26, r13
    1c04:	ad 0d       	add	r26, r13
    1c06:	ad 0d       	add	r26, r13
    1c08:	63 0f       	add	r22, r19
    1c0a:	ad 0d       	add	r26, r13
    1c0c:	ad 0d       	add	r26, r13
    1c0e:	41 0f       	add	r20, r17
    1c10:	ad 0d       	add	r26, r13
    1c12:	ad 0d       	add	r26, r13
    1c14:	ad 0d       	add	r26, r13
    1c16:	ad 0d       	add	r26, r13
    1c18:	ad 0d       	add	r26, r13
    1c1a:	ad 0d       	add	r26, r13
    1c1c:	ad 0d       	add	r26, r13
    1c1e:	ad 0d       	add	r26, r13
    1c20:	ad 0d       	add	r26, r13
    1c22:	ad 0d       	add	r26, r13
    1c24:	5d 0e       	add	r5, r29
    1c26:	59 0f       	add	r21, r25
    1c28:	ad 0d       	add	r26, r13
    1c2a:	ad 0d       	add	r26, r13
    1c2c:	ad 0d       	add	r26, r13
    1c2e:	ad 0d       	add	r26, r13
    1c30:	59 0f       	add	r21, r25
    1c32:	ad 0d       	add	r26, r13
    1c34:	ad 0d       	add	r26, r13
    1c36:	ad 0d       	add	r26, r13
    1c38:	ad 0d       	add	r26, r13
    1c3a:	ad 0d       	add	r26, r13
    1c3c:	51 0f       	add	r21, r17
    1c3e:	41 0f       	add	r20, r17
    1c40:	ad 0d       	add	r26, r13
    1c42:	ad 0d       	add	r26, r13
    1c44:	71 0e       	add	r7, r17
    1c46:	ad 0d       	add	r26, r13
    1c48:	63 0f       	add	r22, r19
    1c4a:	ad 0d       	add	r26, r13
    1c4c:	ad 0d       	add	r26, r13
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
      c = *fmt++;
    1c4e:	41 0f       	add	r20, r17
    1c50:	f7 01       	movw	r30, r14
      if (c == 0) {
    1c52:	80 81       	ld	r24, Z
    1c54:	88 23       	and	r24, r24
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <chvprintf+0x36c>
        return n;
      }
      if (c == '*') {
    1c58:	38 cf       	rjmp	.-400    	; 0x1aca <chvprintf+0x1dc>
    1c5a:	8a 32       	cpi	r24, 0x2A	; 42
    1c5c:	09 f1       	breq	.+66     	; 0x1ca0 <chvprintf+0x3b2>
        }
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
    1c5e:	fa 01       	movw	r30, r20
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	8d 01       	movw	r16, r26
        c = *fmt++;
      }
      else {
        while (c >= '0' && c <= '9') {
          c -= '0';
          precision = precision * 10 + c;
    1c66:	10 c0       	rjmp	.+32     	; 0x1c88 <chvprintf+0x39a>
    1c68:	c9 01       	movw	r24, r18
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	28 0f       	add	r18, r24
    1c74:	39 1f       	adc	r19, r25
    1c76:	22 0f       	add	r18, r18
    1c78:	33 1f       	adc	r19, r19
    1c7a:	26 0f       	add	r18, r22
          c = *fmt++;
    1c7c:	31 1d       	adc	r19, r1
    1c7e:	d7 01       	movw	r26, r14
          if (c == 0) {
    1c80:	8c 91       	ld	r24, X
    1c82:	88 23       	and	r24, r24
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <chvprintf+0x39a>
    1c86:	21 cf       	rjmp	.-446    	; 0x1aca <chvprintf+0x1dc>
      if (c == '*') {
        precision = va_arg(ap, int);
        c = *fmt++;
      }
      else {
        while (c >= '0' && c <= '9') {
    1c88:	7f 01       	movw	r14, r30
    1c8a:	60 ed       	ldi	r22, 0xD0	; 208
    1c8c:	68 0f       	add	r22, r24
    1c8e:	31 96       	adiw	r30, 0x01	; 1
    1c90:	af 01       	movw	r20, r30
    1c92:	6a 30       	cpi	r22, 0x0A	; 10
    1c94:	48 f3       	brcs	.-46     	; 0x1c68 <chvprintf+0x37a>
    1c96:	d8 01       	movw	r26, r16
    1c98:	a2 ce       	rjmp	.-700    	; 0x19de <chvprintf+0xf0>
    1c9a:	ab 89       	ldd	r26, Y+19	; 0x13
    1c9c:	bc 89       	ldd	r27, Y+20	; 0x14
      c = *fmt++;
      if (c == 0) {
        return n;
      }
      if (c == '*') {
        precision = va_arg(ap, int);
    1c9e:	97 ce       	rjmp	.-722    	; 0x19ce <chvprintf+0xe0>
    1ca0:	2d 91       	ld	r18, X+
    1ca2:	3c 91       	ld	r19, X
        c = *fmt++;
    1ca4:	11 97       	sbiw	r26, 0x01	; 1
    1ca6:	81 81       	ldd	r24, Z+1	; 0x01
    1ca8:	a7 01       	movw	r20, r14
    1caa:	4d 5f       	subi	r20, 0xFD	; 253
      c = *fmt++;
      if (c == 0) {
        return n;
      }
      if (c == '*') {
        precision = va_arg(ap, int);
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
        c = *fmt++;
    1cae:	12 96       	adiw	r26, 0x02	; 2
    1cb0:	b7 01       	movw	r22, r14
    1cb2:	6e 5f       	subi	r22, 0xFE	; 254
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	7b 01       	movw	r14, r22
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = true;
      c = *fmt++;
    1cb8:	92 ce       	rjmp	.-732    	; 0x19de <chvprintf+0xf0>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
    1cba:	7a 01       	movw	r14, r20
    1cbc:	9d 01       	movw	r18, r26
    1cbe:	2e 5f       	subi	r18, 0xFE	; 254
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	3c 8b       	std	Y+20, r19	; 0x14
    1cc4:	2b 8b       	std	Y+19, r18	; 0x13
    1cc6:	8c 91       	ld	r24, X
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	31 e0       	ldi	r19, 0x01	; 1
    1ccc:	83 1a       	sub	r8, r19
      break;
    1cce:	91 08       	sbc	r9, r1
    1cd0:	d1 2c       	mov	r13, r1
    }

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
    1cd2:	c1 2c       	mov	r12, r1
    1cd4:	a0 e2       	ldi	r26, 0x20	; 32
      n++;
      continue;
    }
    
    p = tmpbuf;
    s = tmpbuf;
    1cd6:	7a 2e       	mov	r7, r26
    1cd8:	be 01       	movw	r22, r28
    1cda:	6f 5f       	subi	r22, 0xFF	; 255
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    1cde:	5b 01       	movw	r10, r22
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = true;
      c = *fmt++;
    1ce0:	9a ce       	rjmp	.-716    	; 0x1a16 <chvprintf+0x128>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0) {
    1ce2:	7a 01       	movw	r14, r20
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	02 96       	adiw	r24, 0x02	; 2
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
    1cec:	ad 90       	ld	r10, X+
    1cee:	bc 90       	ld	r11, X
    1cf0:	a1 14       	cp	r10, r1
    1cf2:	b1 04       	cpc	r11, r1
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <chvprintf+0x40a>
    1cf6:	30 c1       	rjmp	.+608    	; 0x1f58 <chvprintf+0x66a>
    1cf8:	d5 01       	movw	r26, r10
    1cfa:	8c 91       	ld	r24, X
        s = "(null)";
      }
      if (precision == 0) {
    1cfc:	a5 01       	movw	r20, r10
    1cfe:	21 15       	cp	r18, r1
    1d00:	31 05       	cpc	r19, r1
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <chvprintf+0x418>
        precision = 32767;
      }
      for (p = s; *p && (--precision >= 0); p++)
    1d04:	fa c0       	rjmp	.+500    	; 0x1efa <chvprintf+0x60c>
    1d06:	88 23       	and	r24, r24
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <chvprintf+0x41e>
    1d0a:	fd c0       	rjmp	.+506    	; 0x1f06 <chvprintf+0x618>
    1d0c:	2e ef       	ldi	r18, 0xFE	; 254
    1d0e:	3f e7       	ldi	r19, 0x7F	; 127
    1d10:	f5 01       	movw	r30, r10
    1d12:	31 96       	adiw	r30, 0x01	; 1
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <chvprintf+0x432>
    1d16:	21 50       	subi	r18, 0x01	; 1
    1d18:	31 09       	sbc	r19, r1
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <chvprintf+0x430>
    1d1c:	fa c0       	rjmp	.+500    	; 0x1f12 <chvprintf+0x624>
    1d1e:	fb 01       	movw	r30, r22
    1d20:	bf 01       	movw	r22, r30
    1d22:	6f 5f       	subi	r22, 0xFF	; 255
    1d24:	7f 4f       	sbci	r23, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	81 11       	cpse	r24, r1
    1d2a:	f5 cf       	rjmp	.-22     	; 0x1d16 <chvprintf+0x428>
    1d2c:	6f 01       	movw	r12, r30
    1d2e:	c4 1a       	sub	r12, r20
    1d30:	d5 0a       	sbc	r13, r21
    1d32:	8c 18       	sub	r8, r12
    1d34:	9d 08       	sbc	r9, r13
    1d36:	b1 e0       	ldi	r27, 0x01	; 1
    1d38:	cb 1a       	sub	r12, r27
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1d3a:	d1 08       	sbc	r13, r1
    1d3c:	e0 e2       	ldi	r30, 0x20	; 32
    1d3e:	7e 2e       	mov	r7, r30
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    1d40:	6a ce       	rjmp	.-812    	; 0x1a16 <chvprintf+0x128>
    1d42:	5a e0       	ldi	r21, 0x0A	; 10
    1d44:	a5 2e       	mov	r10, r21
    1d46:	b1 2c       	mov	r11, r1
    1d48:	c1 2c       	mov	r12, r1
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long) {
    1d4a:	d1 2c       	mov	r13, r1
    1d4c:	41 11       	cpse	r20, r1
        l = va_arg(ap, unsigned long);
      }
      else {
        l = va_arg(ap, unsigned int);
    1d4e:	9f c0       	rjmp	.+318    	; 0x1e8e <chvprintf+0x5a0>
    1d50:	bd 01       	movw	r22, r26
    1d52:	6e 5f       	subi	r22, 0xFE	; 254
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	7c 8b       	std	Y+20, r23	; 0x14
    1d58:	6b 8b       	std	Y+19, r22	; 0x13
    1d5a:	6d 91       	ld	r22, X+
    1d5c:	7c 91       	ld	r23, X
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	0d 85       	ldd	r16, Y+13	; 0x0d
    1d64:	1e 85       	ldd	r17, Y+14	; 0x0e
    i = (int)(l % radix);
    i += '0';
    if (i > '9') {
      i += 'A' - '0' - 10;
    }
    *--q = i;
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <chvprintf+0x47c>
    1d68:	8f 01       	movw	r16, r30
    1d6a:	a6 01       	movw	r20, r12
    1d6c:	95 01       	movw	r18, r10
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
    i += '0';
    1d6e:	04 d4       	rcall	.+2056   	; 0x2578 <__divmodsi4>
    1d70:	db 01       	movw	r26, r22
    1d72:	d0 96       	adiw	r26, 0x30	; 48
    1d74:	ba 8b       	std	Y+18, r27	; 0x12
    if (i > '9') {
    1d76:	a9 8b       	std	Y+17, r26	; 0x11
    1d78:	da 97       	sbiw	r26, 0x3a	; 58
      i += 'A' - '0' - 10;
    1d7a:	24 f0       	brlt	.+8      	; 0x1d84 <chvprintf+0x496>
    1d7c:	fb 01       	movw	r30, r22
    1d7e:	f7 96       	adiw	r30, 0x37	; 55
    1d80:	fa 8b       	std	Y+18, r31	; 0x12
    }
    *--q = i;
    1d82:	e9 8b       	std	Y+17, r30	; 0x11
    1d84:	f8 01       	movw	r30, r16
    1d86:	a9 89       	ldd	r26, Y+17	; 0x11
    l /= radix;
    1d88:	a2 93       	st	-Z, r26
    1d8a:	ca 01       	movw	r24, r20
  } while ((ll /= radix) != 0);
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	61 15       	cp	r22, r1
    1d90:	71 05       	cpc	r23, r1
    1d92:	81 05       	cpc	r24, r1
    1d94:	91 05       	cpc	r25, r1

  i = (int)(p + MAX_FILLER - q);
    1d96:	41 f7       	brne	.-48     	; 0x1d68 <chvprintf+0x47a>
    1d98:	cd 84       	ldd	r12, Y+13	; 0x0d
    1d9a:	de 84       	ldd	r13, Y+14	; 0x0e
    1d9c:	ce 1a       	sub	r12, r30
    1d9e:	df 0a       	sbc	r13, r31
    1da0:	fe 01       	movw	r30, r28
    1da2:	31 96       	adiw	r30, 0x01	; 1
    1da4:	c8 01       	movw	r24, r16
    1da6:	9f 01       	movw	r18, r30
    1da8:	2c 0d       	add	r18, r12
    1daa:	3d 1d       	adc	r19, r13
    1dac:	4a 2f       	mov	r20, r26
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <chvprintf+0x4c8>
    1db0:	dc 01       	movw	r26, r24
    1db2:	4d 91       	ld	r20, X+
  do
    *p++ = *q++;
    1db4:	cd 01       	movw	r24, r26
  while (--i);
    1db6:	41 93       	st	Z+, r20
    1db8:	2e 17       	cp	r18, r30
    1dba:	3f 07       	cpc	r19, r31
    1dbc:	c9 f7       	brne	.-14     	; 0x1db0 <chvprintf+0x4c2>
    1dbe:	8c 18       	sub	r8, r12
    1dc0:	9d 08       	sbc	r9, r13
    1dc2:	f1 e0       	ldi	r31, 0x01	; 1
    1dc4:	cf 1a       	sub	r12, r31
      n++;
      continue;
    }
    
    p = tmpbuf;
    s = tmpbuf;
    1dc6:	d1 08       	sbc	r13, r1
    1dc8:	9e 01       	movw	r18, r28
    1dca:	2f 5f       	subi	r18, 0xFF	; 255
    1dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dce:	59 01       	movw	r10, r18
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    1dd0:	22 ce       	rjmp	.-956    	; 0x1a16 <chvprintf+0x128>
    1dd2:	10 e1       	ldi	r17, 0x10	; 16
    1dd4:	a1 2e       	mov	r10, r17
    1dd6:	b1 2c       	mov	r11, r1
    1dd8:	c1 2c       	mov	r12, r1
    1dda:	d1 2c       	mov	r13, r1
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
    case 'O':
    1ddc:	b7 cf       	rjmp	.-146    	; 0x1d4c <chvprintf+0x45e>
    1dde:	68 e0       	ldi	r22, 0x08	; 8
    1de0:	a6 2e       	mov	r10, r22
    1de2:	b1 2c       	mov	r11, r1
    1de4:	c1 2c       	mov	r12, r1
    1de6:	d1 2c       	mov	r13, r1
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long) {
    1de8:	b1 cf       	rjmp	.-158    	; 0x1d4c <chvprintf+0x45e>
    1dea:	9a 31       	cpi	r25, 0x1A	; 26
    1dec:	08 f4       	brcc	.+2      	; 0x1df0 <chvprintf+0x502>
        l = va_arg(ap, long);
      }
      else {
        l = va_arg(ap, int);
    1dee:	60 c0       	rjmp	.+192    	; 0x1eb0 <chvprintf+0x5c2>
    1df0:	9d 01       	movw	r18, r26
    1df2:	2e 5f       	subi	r18, 0xFE	; 254
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	3c 8b       	std	Y+20, r19	; 0x14
    1df8:	2b 8b       	std	Y+19, r18	; 0x13
    1dfa:	6d 91       	ld	r22, X+
    1dfc:	7c 91       	ld	r23, X
    1dfe:	07 2e       	mov	r0, r23
    1e00:	00 0c       	add	r0, r0
    1e02:	88 0b       	sbc	r24, r24
      }
      if (l < 0) {
    1e04:	99 0b       	sbc	r25, r25
    1e06:	97 fd       	sbrc	r25, 7
        *p++ = '-';
        l = -l;
      }
      else
        if (do_sign) {
    1e08:	95 c0       	rjmp	.+298    	; 0x1f34 <chvprintf+0x646>
    1e0a:	dd 20       	and	r13, r13
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <chvprintf+0x522>
          *p++ = '+';
    1e0e:	9f c0       	rjmp	.+318    	; 0x1f4e <chvprintf+0x660>
    1e10:	bb e2       	ldi	r27, 0x2B	; 43
    1e12:	b9 83       	std	Y+1, r27	; 0x01
    1e14:	fe 01       	movw	r30, r28
    1e16:	32 96       	adiw	r30, 0x02	; 2
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
    1e18:	6f 01       	movw	r12, r30
    1e1a:	86 01       	movw	r16, r12
    1e1c:	05 5f       	subi	r16, 0xF5	; 245
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	58 01       	movw	r10, r16
    i = (int)(l % radix);
    i += '0';
    if (i > '9') {
      i += 'A' - '0' - 10;
    }
    *--q = i;
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <chvprintf+0x538>
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
    1e24:	5f 01       	movw	r10, r30
    1e26:	2a e0       	ldi	r18, 0x0A	; 10
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    i += '0';
    if (i > '9') {
      i += 'A' - '0' - 10;
    }
    *--q = i;
    1e2e:	a4 d3       	rcall	.+1864   	; 0x2578 <__divmodsi4>
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
    i += '0';
    1e30:	f5 01       	movw	r30, r10
    1e32:	60 5d       	subi	r22, 0xD0	; 208
    if (i > '9') {
      i += 'A' - '0' - 10;
    }
    *--q = i;
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	a6 2f       	mov	r26, r22
    l /= radix;
    1e38:	62 93       	st	-Z, r22
    1e3a:	b9 01       	movw	r22, r18
  } while ((ll /= radix) != 0);
    1e3c:	ca 01       	movw	r24, r20
    1e3e:	61 15       	cp	r22, r1
    1e40:	71 05       	cpc	r23, r1
    1e42:	81 05       	cpc	r24, r1
    1e44:	91 05       	cpc	r25, r1
    1e46:	71 f7       	brne	.-36     	; 0x1e24 <chvprintf+0x536>
    1e48:	2a 2f       	mov	r18, r26
    1e4a:	d6 01       	movw	r26, r12

  i = (int)(p + MAX_FILLER - q);
    1e4c:	c5 01       	movw	r24, r10
    1e4e:	0e 1b       	sub	r16, r30
    1e50:	1f 0b       	sbc	r17, r31
    1e52:	0c 0d       	add	r16, r12
    1e54:	1d 1d       	adc	r17, r13
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <chvprintf+0x570>
    1e58:	fc 01       	movw	r30, r24
    1e5a:	21 91       	ld	r18, Z+
  do
    *p++ = *q++;
    1e5c:	cf 01       	movw	r24, r30
  while (--i);
    1e5e:	2d 93       	st	X+, r18
    1e60:	a0 17       	cp	r26, r16
    1e62:	b1 07       	cpc	r27, r17
    1e64:	c9 f7       	brne	.-14     	; 0x1e58 <chvprintf+0x56a>
    1e66:	6d 01       	movw	r12, r26
    1e68:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e6a:	78 89       	ldd	r23, Y+16	; 0x10
    1e6c:	c6 1a       	sub	r12, r22
    1e6e:	d7 0a       	sbc	r13, r23
    1e70:	8c 18       	sub	r8, r12
    1e72:	9d 08       	sbc	r9, r13
    1e74:	71 e0       	ldi	r23, 0x01	; 1
    1e76:	c7 1a       	sub	r12, r23
      n++;
      continue;
    }
    
    p = tmpbuf;
    s = tmpbuf;
    1e78:	d1 08       	sbc	r13, r1
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	01 96       	adiw	r24, 0x01	; 1
    1e7e:	5c 01       	movw	r10, r24
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = true;
      c = *fmt++;
    1e80:	ca cd       	rjmp	.-1132   	; 0x1a16 <chvprintf+0x128>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    1e82:	7a 01       	movw	r14, r20
    1e84:	40 e1       	ldi	r20, 0x10	; 16
    1e86:	a4 2e       	mov	r10, r20
    1e88:	b1 2c       	mov	r11, r1
    1e8a:	c1 2c       	mov	r12, r1
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long) {
        l = va_arg(ap, unsigned long);
    1e8c:	d1 2c       	mov	r13, r1
    1e8e:	9d 01       	movw	r18, r26
    1e90:	2c 5f       	subi	r18, 0xFC	; 252
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	3c 8b       	std	Y+20, r19	; 0x14
    1e96:	2b 8b       	std	Y+19, r18	; 0x13
    1e98:	6d 91       	ld	r22, X+
    1e9a:	7d 91       	ld	r23, X+
    1e9c:	8d 91       	ld	r24, X+
    1e9e:	9c 91       	ld	r25, X
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = true;
      c = *fmt++;
    1ea0:	60 cf       	rjmp	.-320    	; 0x1d62 <chvprintf+0x474>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    1ea2:	7a 01       	movw	r14, r20
    1ea4:	38 e0       	ldi	r19, 0x08	; 8
    1ea6:	a3 2e       	mov	r10, r19
    1ea8:	b1 2c       	mov	r11, r1
    1eaa:	c1 2c       	mov	r12, r1
    1eac:	d1 2c       	mov	r13, r1
    1eae:	ef cf       	rjmp	.-34     	; 0x1e8e <chvprintf+0x5a0>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long) {
        l = va_arg(ap, long);
    1eb0:	a7 01       	movw	r20, r14
    1eb2:	fd 01       	movw	r30, r26
    1eb4:	34 96       	adiw	r30, 0x04	; 4
    1eb6:	fc 8b       	std	Y+20, r31	; 0x14
    1eb8:	eb 8b       	std	Y+19, r30	; 0x13
    1eba:	6d 91       	ld	r22, X+
    1ebc:	7d 91       	ld	r23, X+
    1ebe:	8d 91       	ld	r24, X+
    1ec0:	9c 91       	ld	r25, X
    1ec2:	7a 01       	movw	r14, r20
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = true;
      c = *fmt++;
    1ec4:	a0 cf       	rjmp	.-192    	; 0x1e06 <chvprintf+0x518>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
    1ec6:	7a 01       	movw	r14, r20
    1ec8:	8a e0       	ldi	r24, 0x0A	; 10
    1eca:	a8 2e       	mov	r10, r24
    1ecc:	b1 2c       	mov	r11, r1
    1ece:	c1 2c       	mov	r12, r1
    1ed0:	d1 2c       	mov	r13, r1
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
      width = -width;
    1ed2:	dd cf       	rjmp	.-70     	; 0x1e8e <chvprintf+0x5a0>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
    1ed4:	48 01       	movw	r8, r16
    1ed6:	d7 fe       	sbrs	r13, 7
    1ed8:	ca cd       	rjmp	.-1132   	; 0x1a6e <chvprintf+0x180>
    }
    if (left_align == false) {
      width = -width;
    }
    if (width < 0) {
      if ((*s == '-' || *s == '+') && filler == '0') {
    1eda:	dd cd       	rjmp	.-1094   	; 0x1a96 <chvprintf+0x1a8>
    1edc:	b0 e3       	ldi	r27, 0x30	; 48
    1ede:	7b 12       	cpse	r7, r27
    1ee0:	ba cd       	rjmp	.-1164   	; 0x1a56 <chvprintf+0x168>
    1ee2:	2f ef       	ldi	r18, 0xFF	; 255
    1ee4:	22 1a       	sub	r2, r18
        streamPut(chp, (uint8_t)*s++);
    1ee6:	32 0a       	sbc	r3, r18
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	a3 1a       	sub	r10, r19
    1eec:	b3 0a       	sbc	r11, r19
    1eee:	c2 01       	movw	r24, r4
    1ef0:	09 95       	icall
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	c6 1a       	sub	r12, r22
    1ef6:	d1 08       	sbc	r13, r1
        s = "(null)";
      }
      if (precision == 0) {
        precision = 32767;
      }
      for (p = s; *p && (--precision >= 0); p++)
    1ef8:	a8 cd       	rjmp	.-1200   	; 0x1a4a <chvprintf+0x15c>
    1efa:	88 23       	and	r24, r24
    1efc:	21 f0       	breq	.+8      	; 0x1f06 <chvprintf+0x618>
    1efe:	21 50       	subi	r18, 0x01	; 1
    1f00:	31 09       	sbc	r19, r1
    1f02:	37 ff       	sbrs	r19, 7
    1f04:	05 cf       	rjmp	.-502    	; 0x1d10 <chvprintf+0x422>
    1f06:	cc 24       	eor	r12, r12
    1f08:	ca 94       	dec	r12
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
    1f0a:	dc 2c       	mov	r13, r12
    1f0c:	20 e2       	ldi	r18, 0x20	; 32
    1f0e:	72 2e       	mov	r7, r18
    1f10:	82 cd       	rjmp	.-1276   	; 0x1a16 <chvprintf+0x128>
    1f12:	6f 01       	movw	r12, r30
    1f14:	c4 1a       	sub	r12, r20
    1f16:	d5 0a       	sbc	r13, r21
    1f18:	8c 18       	sub	r8, r12
    1f1a:	9d 08       	sbc	r9, r13
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	c9 1a       	sub	r12, r25
    1f20:	d1 08       	sbc	r13, r1
    1f22:	70 e2       	ldi	r23, 0x20	; 32
    1f24:	77 2e       	mov	r7, r23
      while (true) {
        c = *fmt++;
        if (c == 0) {
          return n;
        }
        if (c >= '0' && c <= '9') {
    1f26:	77 cd       	rjmp	.-1298   	; 0x1a16 <chvprintf+0x128>
    1f28:	ab 89       	ldd	r26, Y+19	; 0x13
      c = *fmt++;
    }
    else {
      width = 0;
      while (true) {
        c = *fmt++;
    1f2a:	bc 89       	ldd	r27, Y+20	; 0x14
      width = va_arg(ap, int);
      ++fmt;
      c = *fmt++;
    }
    else {
      width = 0;
    1f2c:	7f 01       	movw	r14, r30
    1f2e:	91 2c       	mov	r9, r1
    1f30:	81 2c       	mov	r8, r1
      }
      else {
        l = va_arg(ap, int);
      }
      if (l < 0) {
        *p++ = '-';
    1f32:	4d cd       	rjmp	.-1382   	; 0x19ce <chvprintf+0xe0>
    1f34:	3d e2       	ldi	r19, 0x2D	; 45
        l = -l;
    1f36:	39 83       	std	Y+1, r19	; 0x01
    1f38:	90 95       	com	r25
    1f3a:	80 95       	com	r24
    1f3c:	70 95       	com	r23
    1f3e:	61 95       	neg	r22
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	8f 4f       	sbci	r24, 0xFF	; 255
      }
      else {
        l = va_arg(ap, int);
      }
      if (l < 0) {
        *p++ = '-';
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	de 01       	movw	r26, r28
    1f48:	12 96       	adiw	r26, 0x02	; 2
    1f4a:	6d 01       	movw	r12, r26
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    
    p = tmpbuf;
    1f4c:	66 cf       	rjmp	.-308    	; 0x1e1a <chvprintf+0x52c>
    1f4e:	9e 01       	movw	r18, r28
    1f50:	2f 5f       	subi	r18, 0xFF	; 255
    1f52:	3f 4f       	sbci	r19, 0xFF	; 255
    1f54:	69 01       	movw	r12, r18
    1f56:	61 cf       	rjmp	.-318    	; 0x1e1a <chvprintf+0x52c>
    1f58:	4b e7       	ldi	r20, 0x7B	; 123
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0) {
        s = "(null)";
    1f5a:	51 e0       	ldi	r21, 0x01	; 1
      }
      if (precision == 0) {
    1f5c:	5a 01       	movw	r10, r20
    1f5e:	21 15       	cp	r18, r1
    1f60:	31 05       	cpc	r19, r1
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0) {
        s = "(null)";
    1f62:	69 f6       	brne	.-102    	; 0x1efe <chvprintf+0x610>
    1f64:	fb e7       	ldi	r31, 0x7B	; 123
    1f66:	af 2e       	mov	r10, r31
    1f68:	f1 e0       	ldi	r31, 0x01	; 1
    1f6a:	bf 2e       	mov	r11, r31
    1f6c:	cf ce       	rjmp	.-610    	; 0x1d0c <chvprintf+0x41e>

00001f6e <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
    1f76:	ae 01       	movw	r20, r28
    1f78:	47 5f       	subi	r20, 0xF7	; 247
    1f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	b4 dc       	rcall	.-1688   	; 0x18ee <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	08 95       	ret

00001f8c <vfprintf>:
    1f8c:	ab e0       	ldi	r26, 0x0B	; 11
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	eb ec       	ldi	r30, 0xCB	; 203
    1f92:	ff e0       	ldi	r31, 0x0F	; 15
    1f94:	21 c3       	rjmp	.+1602   	; 0x25d8 <__prologue_saves__+0x8>
    1f96:	6c 01       	movw	r12, r24
    1f98:	7b 01       	movw	r14, r22
    1f9a:	3a 01       	movw	r6, r20
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	17 82       	std	Z+7, r1	; 0x07
    1fa0:	16 82       	std	Z+6, r1	; 0x06
    1fa2:	83 81       	ldd	r24, Z+3	; 0x03
    1fa4:	81 ff       	sbrs	r24, 1
    1fa6:	ff c0       	rjmp	.+510    	; 0x21a6 <vfprintf+0x21a>
    1fa8:	ce 01       	movw	r24, r28
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	4c 01       	movw	r8, r24
    1fae:	f6 01       	movw	r30, r12
    1fb0:	b3 80       	ldd	r11, Z+3	; 0x03
    1fb2:	f7 01       	movw	r30, r14
    1fb4:	b3 fc       	sbrc	r11, 3
    1fb6:	05 91       	lpm	r16, Z+
    1fb8:	b3 fe       	sbrs	r11, 3
    1fba:	01 91       	ld	r16, Z+
    1fbc:	7f 01       	movw	r14, r30
    1fbe:	00 23       	and	r16, r16
    1fc0:	41 f1       	breq	.+80     	; 0x2012 <vfprintf+0x86>
    1fc2:	05 32       	cpi	r16, 0x25	; 37
    1fc4:	39 f4       	brne	.+14     	; 0x1fd4 <vfprintf+0x48>
    1fc6:	b3 fc       	sbrc	r11, 3
    1fc8:	05 91       	lpm	r16, Z+
    1fca:	b3 fe       	sbrs	r11, 3
    1fcc:	01 91       	ld	r16, Z+
    1fce:	7f 01       	movw	r14, r30
    1fd0:	05 32       	cpi	r16, 0x25	; 37
    1fd2:	39 f5       	brne	.+78     	; 0x2022 <vfprintf+0x96>
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	80 2f       	mov	r24, r16
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	98 d3       	rcall	.+1840   	; 0x270c <fputc>
    1fdc:	53 01       	movw	r10, r6
    1fde:	35 01       	movw	r6, r10
    1fe0:	e6 cf       	rjmp	.-52     	; 0x1fae <vfprintf+0x22>
    1fe2:	10 68       	ori	r17, 0x80	; 128
    1fe4:	f7 01       	movw	r30, r14
    1fe6:	b3 fc       	sbrc	r11, 3
    1fe8:	05 91       	lpm	r16, Z+
    1fea:	b3 fe       	sbrs	r11, 3
    1fec:	01 91       	ld	r16, Z+
    1fee:	7f 01       	movw	r14, r30
    1ff0:	17 fd       	sbrc	r17, 7
    1ff2:	0d c0       	rjmp	.+26     	; 0x200e <vfprintf+0x82>
    1ff4:	00 23       	and	r16, r16
    1ff6:	69 f0       	breq	.+26     	; 0x2012 <vfprintf+0x86>
    1ff8:	60 2f       	mov	r22, r16
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	8f e6       	ldi	r24, 0x6F	; 111
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	35 d3       	rcall	.+1642   	; 0x266c <strchr_P>
    2002:	89 2b       	or	r24, r25
    2004:	79 f7       	brne	.-34     	; 0x1fe4 <vfprintf+0x58>
    2006:	03 32       	cpi	r16, 0x23	; 35
    2008:	51 f0       	breq	.+20     	; 0x201e <vfprintf+0x92>
    200a:	0c 36       	cpi	r16, 0x6C	; 108
    200c:	51 f3       	breq	.-44     	; 0x1fe2 <vfprintf+0x56>
    200e:	01 11       	cpse	r16, r1
    2010:	0a c0       	rjmp	.+20     	; 0x2026 <vfprintf+0x9a>
    2012:	f6 01       	movw	r30, r12
    2014:	86 81       	ldd	r24, Z+6	; 0x06
    2016:	97 81       	ldd	r25, Z+7	; 0x07
    2018:	2b 96       	adiw	r28, 0x0b	; 11
    201a:	ee e0       	ldi	r30, 0x0E	; 14
    201c:	f9 c2       	rjmp	.+1522   	; 0x2610 <__epilogue_restores__+0x8>
    201e:	10 e1       	ldi	r17, 0x10	; 16
    2020:	e1 cf       	rjmp	.-62     	; 0x1fe4 <vfprintf+0x58>
    2022:	10 e0       	ldi	r17, 0x00	; 0
    2024:	e5 cf       	rjmp	.-54     	; 0x1ff0 <vfprintf+0x64>
    2026:	60 2f       	mov	r22, r16
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	88 e6       	ldi	r24, 0x68	; 104
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	1e d3       	rcall	.+1596   	; 0x266c <strchr_P>
    2030:	89 2b       	or	r24, r25
    2032:	49 f0       	breq	.+18     	; 0x2046 <vfprintf+0xba>
    2034:	53 01       	movw	r10, r6
    2036:	f4 e0       	ldi	r31, 0x04	; 4
    2038:	af 0e       	add	r10, r31
    203a:	b1 1c       	adc	r11, r1
    203c:	b6 01       	movw	r22, r12
    203e:	8f e3       	ldi	r24, 0x3F	; 63
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	64 d3       	rcall	.+1736   	; 0x270c <fputc>
    2044:	cc cf       	rjmp	.-104    	; 0x1fde <vfprintf+0x52>
    2046:	03 36       	cpi	r16, 0x63	; 99
    2048:	09 f4       	brne	.+2      	; 0x204c <vfprintf+0xc0>
    204a:	52 c0       	rjmp	.+164    	; 0x20f0 <vfprintf+0x164>
    204c:	03 37       	cpi	r16, 0x73	; 115
    204e:	09 f4       	brne	.+2      	; 0x2052 <vfprintf+0xc6>
    2050:	59 c0       	rjmp	.+178    	; 0x2104 <vfprintf+0x178>
    2052:	03 35       	cpi	r16, 0x53	; 83
    2054:	09 f4       	brne	.+2      	; 0x2058 <vfprintf+0xcc>
    2056:	55 c0       	rjmp	.+170    	; 0x2102 <vfprintf+0x176>
    2058:	04 36       	cpi	r16, 0x64	; 100
    205a:	19 f0       	breq	.+6      	; 0x2062 <vfprintf+0xd6>
    205c:	09 36       	cpi	r16, 0x69	; 105
    205e:	09 f0       	breq	.+2      	; 0x2062 <vfprintf+0xd6>
    2060:	70 c0       	rjmp	.+224    	; 0x2142 <vfprintf+0x1b6>
    2062:	53 01       	movw	r10, r6
    2064:	17 ff       	sbrs	r17, 7
    2066:	62 c0       	rjmp	.+196    	; 0x212c <vfprintf+0x1a0>
    2068:	f4 e0       	ldi	r31, 0x04	; 4
    206a:	af 0e       	add	r10, r31
    206c:	b1 1c       	adc	r11, r1
    206e:	f3 01       	movw	r30, r6
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	1f 7e       	andi	r17, 0xEF	; 239
    207a:	97 ff       	sbrs	r25, 7
    207c:	08 c0       	rjmp	.+16     	; 0x208e <vfprintf+0x102>
    207e:	90 95       	com	r25
    2080:	80 95       	com	r24
    2082:	70 95       	com	r23
    2084:	61 95       	neg	r22
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	8f 4f       	sbci	r24, 0xFF	; 255
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	10 64       	ori	r17, 0x40	; 64
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	a4 01       	movw	r20, r8
    2094:	83 d3       	rcall	.+1798   	; 0x279c <__ultoa_invert>
    2096:	08 2f       	mov	r16, r24
    2098:	08 19       	sub	r16, r8
    209a:	16 ff       	sbrs	r17, 6
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <vfprintf+0x11a>
    209e:	b6 01       	movw	r22, r12
    20a0:	8d e2       	ldi	r24, 0x2D	; 45
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	33 d3       	rcall	.+1638   	; 0x270c <fputc>
    20a6:	14 ff       	sbrs	r17, 4
    20a8:	13 c0       	rjmp	.+38     	; 0x20d0 <vfprintf+0x144>
    20aa:	fe 01       	movw	r30, r28
    20ac:	e0 0f       	add	r30, r16
    20ae:	f1 1d       	adc	r31, r1
    20b0:	80 81       	ld	r24, Z
    20b2:	80 33       	cpi	r24, 0x30	; 48
    20b4:	69 f0       	breq	.+26     	; 0x20d0 <vfprintf+0x144>
    20b6:	b6 01       	movw	r22, r12
    20b8:	80 e3       	ldi	r24, 0x30	; 48
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	27 d3       	rcall	.+1614   	; 0x270c <fputc>
    20be:	12 ff       	sbrs	r17, 2
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <vfprintf+0x144>
    20c2:	10 72       	andi	r17, 0x20	; 32
    20c4:	81 2f       	mov	r24, r17
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	b6 01       	movw	r22, r12
    20ca:	88 5a       	subi	r24, 0xA8	; 168
    20cc:	9f 4f       	sbci	r25, 0xFF	; 255
    20ce:	1e d3       	rcall	.+1596   	; 0x270c <fputc>
    20d0:	01 50       	subi	r16, 0x01	; 1
    20d2:	10 e0       	ldi	r17, 0x00	; 0
    20d4:	0f 5f       	subi	r16, 0xFF	; 255
    20d6:	1f 4f       	sbci	r17, 0xFF	; 255
    20d8:	08 0d       	add	r16, r8
    20da:	19 1d       	adc	r17, r9
    20dc:	f8 01       	movw	r30, r16
    20de:	82 91       	ld	r24, -Z
    20e0:	8f 01       	movw	r16, r30
    20e2:	b6 01       	movw	r22, r12
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	12 d3       	rcall	.+1572   	; 0x270c <fputc>
    20e8:	08 15       	cp	r16, r8
    20ea:	19 05       	cpc	r17, r9
    20ec:	b9 f7       	brne	.-18     	; 0x20dc <vfprintf+0x150>
    20ee:	77 cf       	rjmp	.-274    	; 0x1fde <vfprintf+0x52>
    20f0:	53 01       	movw	r10, r6
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	a8 0e       	add	r10, r24
    20f6:	b1 1c       	adc	r11, r1
    20f8:	b6 01       	movw	r22, r12
    20fa:	f3 01       	movw	r30, r6
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	a0 cf       	rjmp	.-192    	; 0x2042 <vfprintf+0xb6>
    2102:	11 60       	ori	r17, 0x01	; 1
    2104:	53 01       	movw	r10, r6
    2106:	f2 e0       	ldi	r31, 0x02	; 2
    2108:	af 0e       	add	r10, r31
    210a:	b1 1c       	adc	r11, r1
    210c:	f3 01       	movw	r30, r6
    210e:	60 80       	ld	r6, Z
    2110:	71 80       	ldd	r7, Z+1	; 0x01
    2112:	f3 01       	movw	r30, r6
    2114:	10 fd       	sbrc	r17, 0
    2116:	85 91       	lpm	r24, Z+
    2118:	10 ff       	sbrs	r17, 0
    211a:	81 91       	ld	r24, Z+
    211c:	3f 01       	movw	r6, r30
    211e:	88 23       	and	r24, r24
    2120:	09 f4       	brne	.+2      	; 0x2124 <vfprintf+0x198>
    2122:	5d cf       	rjmp	.-326    	; 0x1fde <vfprintf+0x52>
    2124:	b6 01       	movw	r22, r12
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	f1 d2       	rcall	.+1506   	; 0x270c <fputc>
    212a:	f3 cf       	rjmp	.-26     	; 0x2112 <vfprintf+0x186>
    212c:	f2 e0       	ldi	r31, 0x02	; 2
    212e:	af 0e       	add	r10, r31
    2130:	b1 1c       	adc	r11, r1
    2132:	f3 01       	movw	r30, r6
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	07 2e       	mov	r0, r23
    213a:	00 0c       	add	r0, r0
    213c:	88 0b       	sbc	r24, r24
    213e:	99 0b       	sbc	r25, r25
    2140:	9b cf       	rjmp	.-202    	; 0x2078 <vfprintf+0xec>
    2142:	00 37       	cpi	r16, 0x70	; 112
    2144:	09 f1       	breq	.+66     	; 0x2188 <vfprintf+0x1fc>
    2146:	40 f4       	brcc	.+16     	; 0x2158 <vfprintf+0x1cc>
    2148:	08 35       	cpi	r16, 0x58	; 88
    214a:	01 f1       	breq	.+64     	; 0x218c <vfprintf+0x200>
    214c:	0f 36       	cpi	r16, 0x6F	; 111
    214e:	09 f0       	breq	.+2      	; 0x2152 <vfprintf+0x1c6>
    2150:	60 cf       	rjmp	.-320    	; 0x2012 <vfprintf+0x86>
    2152:	28 e0       	ldi	r18, 0x08	; 8
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	0c c0       	rjmp	.+24     	; 0x2170 <vfprintf+0x1e4>
    2158:	05 37       	cpi	r16, 0x75	; 117
    215a:	39 f0       	breq	.+14     	; 0x216a <vfprintf+0x1de>
    215c:	08 37       	cpi	r16, 0x78	; 120
    215e:	09 f0       	breq	.+2      	; 0x2162 <vfprintf+0x1d6>
    2160:	58 cf       	rjmp	.-336    	; 0x2012 <vfprintf+0x86>
    2162:	14 62       	ori	r17, 0x24	; 36
    2164:	20 e1       	ldi	r18, 0x10	; 16
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <vfprintf+0x1e4>
    216a:	1f 7e       	andi	r17, 0xEF	; 239
    216c:	2a e0       	ldi	r18, 0x0A	; 10
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	53 01       	movw	r10, r6
    2172:	17 ff       	sbrs	r17, 7
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <vfprintf+0x208>
    2176:	f4 e0       	ldi	r31, 0x04	; 4
    2178:	af 0e       	add	r10, r31
    217a:	b1 1c       	adc	r11, r1
    217c:	f3 01       	movw	r30, r6
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	85 cf       	rjmp	.-246    	; 0x2092 <vfprintf+0x106>
    2188:	10 61       	ori	r17, 0x10	; 16
    218a:	eb cf       	rjmp	.-42     	; 0x2162 <vfprintf+0x1d6>
    218c:	14 60       	ori	r17, 0x04	; 4
    218e:	20 e1       	ldi	r18, 0x10	; 16
    2190:	32 e0       	ldi	r19, 0x02	; 2
    2192:	ee cf       	rjmp	.-36     	; 0x2170 <vfprintf+0x1e4>
    2194:	f2 e0       	ldi	r31, 0x02	; 2
    2196:	af 0e       	add	r10, r31
    2198:	b1 1c       	adc	r11, r1
    219a:	f3 01       	movw	r30, r6
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	76 cf       	rjmp	.-276    	; 0x2092 <vfprintf+0x106>
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	9f ef       	ldi	r25, 0xFF	; 255
    21aa:	36 cf       	rjmp	.-404    	; 0x2018 <vfprintf+0x8c>

000021ac <putval>:
    21ac:	20 fd       	sbrc	r18, 0
    21ae:	09 c0       	rjmp	.+18     	; 0x21c2 <putval+0x16>
    21b0:	fc 01       	movw	r30, r24
    21b2:	23 fd       	sbrc	r18, 3
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <putval+0x14>
    21b6:	22 ff       	sbrs	r18, 2
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <putval+0x12>
    21ba:	73 83       	std	Z+3, r23	; 0x03
    21bc:	62 83       	std	Z+2, r22	; 0x02
    21be:	51 83       	std	Z+1, r21	; 0x01
    21c0:	40 83       	st	Z, r20
    21c2:	08 95       	ret

000021c4 <mulacc>:
    21c4:	44 fd       	sbrc	r20, 4
    21c6:	17 c0       	rjmp	.+46     	; 0x21f6 <mulacc+0x32>
    21c8:	46 fd       	sbrc	r20, 6
    21ca:	1d c0       	rjmp	.+58     	; 0x2206 <mulacc+0x42>
    21cc:	db 01       	movw	r26, r22
    21ce:	fc 01       	movw	r30, r24
    21d0:	aa 0f       	add	r26, r26
    21d2:	bb 1f       	adc	r27, r27
    21d4:	ee 1f       	adc	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	10 94       	com	r1
    21da:	d1 f7       	brne	.-12     	; 0x21d0 <mulacc+0xc>
    21dc:	6a 0f       	add	r22, r26
    21de:	7b 1f       	adc	r23, r27
    21e0:	8e 1f       	adc	r24, r30
    21e2:	9f 1f       	adc	r25, r31
    21e4:	66 0f       	add	r22, r22
    21e6:	77 1f       	adc	r23, r23
    21e8:	88 1f       	adc	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	62 0f       	add	r22, r18
    21ee:	71 1d       	adc	r23, r1
    21f0:	81 1d       	adc	r24, r1
    21f2:	91 1d       	adc	r25, r1
    21f4:	08 95       	ret
    21f6:	33 e0       	ldi	r19, 0x03	; 3
    21f8:	66 0f       	add	r22, r22
    21fa:	77 1f       	adc	r23, r23
    21fc:	88 1f       	adc	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	31 50       	subi	r19, 0x01	; 1
    2202:	d1 f7       	brne	.-12     	; 0x21f8 <mulacc+0x34>
    2204:	f3 cf       	rjmp	.-26     	; 0x21ec <mulacc+0x28>
    2206:	34 e0       	ldi	r19, 0x04	; 4
    2208:	f7 cf       	rjmp	.-18     	; 0x21f8 <mulacc+0x34>

0000220a <skip_spaces>:
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	8c 01       	movw	r16, r24
    2214:	c8 01       	movw	r24, r16
    2216:	3e d2       	rcall	.+1148   	; 0x2694 <fgetc>
    2218:	ec 01       	movw	r28, r24
    221a:	97 fd       	sbrc	r25, 7
    221c:	06 c0       	rjmp	.+12     	; 0x222a <skip_spaces+0x20>
    221e:	1e d2       	rcall	.+1084   	; 0x265c <isspace>
    2220:	89 2b       	or	r24, r25
    2222:	c1 f7       	brne	.-16     	; 0x2214 <skip_spaces+0xa>
    2224:	b8 01       	movw	r22, r16
    2226:	ce 01       	movw	r24, r28
    2228:	a1 d2       	rcall	.+1346   	; 0x276c <ungetc>
    222a:	ce 01       	movw	r24, r28
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	08 95       	ret

00002236 <conv_int>:
    2236:	8f 92       	push	r8
    2238:	9f 92       	push	r9
    223a:	af 92       	push	r10
    223c:	bf 92       	push	r11
    223e:	ef 92       	push	r14
    2240:	ff 92       	push	r15
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	8c 01       	movw	r16, r24
    224c:	d6 2f       	mov	r29, r22
    224e:	7a 01       	movw	r14, r20
    2250:	b2 2e       	mov	r11, r18
    2252:	20 d2       	rcall	.+1088   	; 0x2694 <fgetc>
    2254:	9c 01       	movw	r18, r24
    2256:	33 27       	eor	r19, r19
    2258:	2b 32       	cpi	r18, 0x2B	; 43
    225a:	31 05       	cpc	r19, r1
    225c:	29 f0       	breq	.+10     	; 0x2268 <conv_int+0x32>
    225e:	2d 32       	cpi	r18, 0x2D	; 45
    2260:	31 05       	cpc	r19, r1
    2262:	a1 f4       	brne	.+40     	; 0x228c <conv_int+0x56>
    2264:	68 94       	set
    2266:	b7 f8       	bld	r11, 7
    2268:	d1 50       	subi	r29, 0x01	; 1
    226a:	61 f4       	brne	.+24     	; 0x2284 <conv_int+0x4e>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	bf 90       	pop	r11
    227c:	af 90       	pop	r10
    227e:	9f 90       	pop	r9
    2280:	8f 90       	pop	r8
    2282:	08 95       	ret
    2284:	c8 01       	movw	r24, r16
    2286:	06 d2       	rcall	.+1036   	; 0x2694 <fgetc>
    2288:	97 fd       	sbrc	r25, 7
    228a:	f0 cf       	rjmp	.-32     	; 0x226c <conv_int+0x36>
    228c:	cb 2d       	mov	r28, r11
    228e:	cd 7f       	andi	r28, 0xFD	; 253
    2290:	2b 2d       	mov	r18, r11
    2292:	20 73       	andi	r18, 0x30	; 48
    2294:	e9 f4       	brne	.+58     	; 0x22d0 <conv_int+0x9a>
    2296:	80 33       	cpi	r24, 0x30	; 48
    2298:	d9 f4       	brne	.+54     	; 0x22d0 <conv_int+0x9a>
    229a:	aa 24       	eor	r10, r10
    229c:	aa 94       	dec	r10
    229e:	ad 0e       	add	r10, r29
    22a0:	79 f0       	breq	.+30     	; 0x22c0 <conv_int+0x8a>
    22a2:	c8 01       	movw	r24, r16
    22a4:	f7 d1       	rcall	.+1006   	; 0x2694 <fgetc>
    22a6:	97 fd       	sbrc	r25, 7
    22a8:	0b c0       	rjmp	.+22     	; 0x22c0 <conv_int+0x8a>
    22aa:	28 2f       	mov	r18, r24
    22ac:	2f 7d       	andi	r18, 0xDF	; 223
    22ae:	28 35       	cpi	r18, 0x58	; 88
    22b0:	59 f4       	brne	.+22     	; 0x22c8 <conv_int+0x92>
    22b2:	c2 64       	ori	r28, 0x42	; 66
    22b4:	d2 50       	subi	r29, 0x02	; 2
    22b6:	21 f0       	breq	.+8      	; 0x22c0 <conv_int+0x8a>
    22b8:	c8 01       	movw	r24, r16
    22ba:	ec d1       	rcall	.+984    	; 0x2694 <fgetc>
    22bc:	97 ff       	sbrs	r25, 7
    22be:	08 c0       	rjmp	.+16     	; 0x22d0 <conv_int+0x9a>
    22c0:	81 2c       	mov	r8, r1
    22c2:	91 2c       	mov	r9, r1
    22c4:	54 01       	movw	r10, r8
    22c6:	1a c0       	rjmp	.+52     	; 0x22fc <conv_int+0xc6>
    22c8:	b6 fe       	sbrs	r11, 6
    22ca:	29 c0       	rjmp	.+82     	; 0x231e <conv_int+0xe8>
    22cc:	c2 60       	ori	r28, 0x02	; 2
    22ce:	da 2d       	mov	r29, r10
    22d0:	81 2c       	mov	r8, r1
    22d2:	91 2c       	mov	r9, r1
    22d4:	54 01       	movw	r10, r8
    22d6:	20 ed       	ldi	r18, 0xD0	; 208
    22d8:	28 0f       	add	r18, r24
    22da:	28 30       	cpi	r18, 0x08	; 8
    22dc:	18 f1       	brcs	.+70     	; 0x2324 <conv_int+0xee>
    22de:	c4 fd       	sbrc	r28, 4
    22e0:	09 c0       	rjmp	.+18     	; 0x22f4 <conv_int+0xbe>
    22e2:	2a 30       	cpi	r18, 0x0A	; 10
    22e4:	f8 f0       	brcs	.+62     	; 0x2324 <conv_int+0xee>
    22e6:	c6 ff       	sbrs	r28, 6
    22e8:	05 c0       	rjmp	.+10     	; 0x22f4 <conv_int+0xbe>
    22ea:	2f 7d       	andi	r18, 0xDF	; 223
    22ec:	3f ee       	ldi	r19, 0xEF	; 239
    22ee:	32 0f       	add	r19, r18
    22f0:	36 30       	cpi	r19, 0x06	; 6
    22f2:	b8 f0       	brcs	.+46     	; 0x2322 <conv_int+0xec>
    22f4:	b8 01       	movw	r22, r16
    22f6:	3a d2       	rcall	.+1140   	; 0x276c <ungetc>
    22f8:	c1 ff       	sbrs	r28, 1
    22fa:	b8 cf       	rjmp	.-144    	; 0x226c <conv_int+0x36>
    22fc:	c7 ff       	sbrs	r28, 7
    22fe:	08 c0       	rjmp	.+16     	; 0x2310 <conv_int+0xda>
    2300:	b0 94       	com	r11
    2302:	a0 94       	com	r10
    2304:	90 94       	com	r9
    2306:	80 94       	com	r8
    2308:	81 1c       	adc	r8, r1
    230a:	91 1c       	adc	r9, r1
    230c:	a1 1c       	adc	r10, r1
    230e:	b1 1c       	adc	r11, r1
    2310:	2c 2f       	mov	r18, r28
    2312:	b5 01       	movw	r22, r10
    2314:	a4 01       	movw	r20, r8
    2316:	c7 01       	movw	r24, r14
    2318:	49 df       	rcall	.-366    	; 0x21ac <putval>
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	a8 cf       	rjmp	.-176    	; 0x226e <conv_int+0x38>
    231e:	c2 61       	ori	r28, 0x12	; 18
    2320:	d6 cf       	rjmp	.-84     	; 0x22ce <conv_int+0x98>
    2322:	27 50       	subi	r18, 0x07	; 7
    2324:	4c 2f       	mov	r20, r28
    2326:	c5 01       	movw	r24, r10
    2328:	b4 01       	movw	r22, r8
    232a:	4c df       	rcall	.-360    	; 0x21c4 <mulacc>
    232c:	4b 01       	movw	r8, r22
    232e:	5c 01       	movw	r10, r24
    2330:	c2 60       	ori	r28, 0x02	; 2
    2332:	d1 50       	subi	r29, 0x01	; 1
    2334:	19 f3       	breq	.-58     	; 0x22fc <conv_int+0xc6>
    2336:	c8 01       	movw	r24, r16
    2338:	ad d1       	rcall	.+858    	; 0x2694 <fgetc>
    233a:	97 ff       	sbrs	r25, 7
    233c:	cc cf       	rjmp	.-104    	; 0x22d6 <conv_int+0xa0>
    233e:	dc cf       	rjmp	.-72     	; 0x22f8 <conv_int+0xc2>

00002340 <vfscanf>:
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	a0 e0       	ldi	r26, 0x00	; 0
    2344:	e5 ea       	ldi	r30, 0xA5	; 165
    2346:	f1 e1       	ldi	r31, 0x11	; 17
    2348:	46 c1       	rjmp	.+652    	; 0x25d6 <__prologue_saves__+0x6>
    234a:	6c 01       	movw	r12, r24
    234c:	eb 01       	movw	r28, r22
    234e:	5a 01       	movw	r10, r20
    2350:	fc 01       	movw	r30, r24
    2352:	17 82       	std	Z+7, r1	; 0x07
    2354:	16 82       	std	Z+6, r1	; 0x06
    2356:	51 2c       	mov	r5, r1
    2358:	f6 01       	movw	r30, r12
    235a:	f3 80       	ldd	r15, Z+3	; 0x03
    235c:	fe 01       	movw	r30, r28
    235e:	f3 fc       	sbrc	r15, 3
    2360:	85 91       	lpm	r24, Z+
    2362:	f3 fe       	sbrs	r15, 3
    2364:	81 91       	ld	r24, Z+
    2366:	18 2f       	mov	r17, r24
    2368:	ef 01       	movw	r28, r30
    236a:	88 23       	and	r24, r24
    236c:	c9 f0       	breq	.+50     	; 0x23a0 <vfscanf+0x60>
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	75 d1       	rcall	.+746    	; 0x265c <isspace>
    2372:	89 2b       	or	r24, r25
    2374:	19 f0       	breq	.+6      	; 0x237c <vfscanf+0x3c>
    2376:	c6 01       	movw	r24, r12
    2378:	48 df       	rcall	.-368    	; 0x220a <skip_spaces>
    237a:	ee cf       	rjmp	.-36     	; 0x2358 <vfscanf+0x18>
    237c:	15 32       	cpi	r17, 0x25	; 37
    237e:	41 f4       	brne	.+16     	; 0x2390 <vfscanf+0x50>
    2380:	fe 01       	movw	r30, r28
    2382:	f3 fc       	sbrc	r15, 3
    2384:	15 91       	lpm	r17, Z+
    2386:	f3 fe       	sbrs	r15, 3
    2388:	11 91       	ld	r17, Z+
    238a:	ef 01       	movw	r28, r30
    238c:	15 32       	cpi	r17, 0x25	; 37
    238e:	59 f4       	brne	.+22     	; 0x23a6 <vfscanf+0x66>
    2390:	c6 01       	movw	r24, r12
    2392:	80 d1       	rcall	.+768    	; 0x2694 <fgetc>
    2394:	97 fd       	sbrc	r25, 7
    2396:	98 c0       	rjmp	.+304    	; 0x24c8 <vfscanf+0x188>
    2398:	18 17       	cp	r17, r24
    239a:	f1 f2       	breq	.-68     	; 0x2358 <vfscanf+0x18>
    239c:	b6 01       	movw	r22, r12
    239e:	e6 d1       	rcall	.+972    	; 0x276c <ungetc>
    23a0:	85 2d       	mov	r24, r5
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	95 c0       	rjmp	.+298    	; 0x24d0 <vfscanf+0x190>
    23a6:	00 e0       	ldi	r16, 0x00	; 0
    23a8:	1a 32       	cpi	r17, 0x2A	; 42
    23aa:	31 f4       	brne	.+12     	; 0x23b8 <vfscanf+0x78>
    23ac:	f3 fc       	sbrc	r15, 3
    23ae:	15 91       	lpm	r17, Z+
    23b0:	f3 fe       	sbrs	r15, 3
    23b2:	11 91       	ld	r17, Z+
    23b4:	ef 01       	movw	r28, r30
    23b6:	01 e0       	ldi	r16, 0x01	; 1
    23b8:	e1 2c       	mov	r14, r1
    23ba:	20 ed       	ldi	r18, 0xD0	; 208
    23bc:	21 0f       	add	r18, r17
    23be:	2a 30       	cpi	r18, 0x0A	; 10
    23c0:	38 f1       	brcs	.+78     	; 0x2410 <vfscanf+0xd0>
    23c2:	01 ff       	sbrs	r16, 1
    23c4:	34 c0       	rjmp	.+104    	; 0x242e <vfscanf+0xee>
    23c6:	ee 20       	and	r14, r14
    23c8:	59 f3       	breq	.-42     	; 0x23a0 <vfscanf+0x60>
    23ca:	18 36       	cpi	r17, 0x68	; 104
    23cc:	99 f1       	breq	.+102    	; 0x2434 <vfscanf+0xf4>
    23ce:	1c 36       	cpi	r17, 0x6C	; 108
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <vfscanf+0x94>
    23d2:	3a c0       	rjmp	.+116    	; 0x2448 <vfscanf+0x108>
    23d4:	11 23       	and	r17, r17
    23d6:	21 f3       	breq	.-56     	; 0x23a0 <vfscanf+0x60>
    23d8:	61 2f       	mov	r22, r17
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	8f e7       	ldi	r24, 0x7F	; 127
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	45 d1       	rcall	.+650    	; 0x266c <strchr_P>
    23e2:	89 2b       	or	r24, r25
    23e4:	e9 f2       	breq	.-70     	; 0x23a0 <vfscanf+0x60>
    23e6:	91 2c       	mov	r9, r1
    23e8:	81 2c       	mov	r8, r1
    23ea:	00 fd       	sbrc	r16, 0
    23ec:	06 c0       	rjmp	.+12     	; 0x23fa <vfscanf+0xba>
    23ee:	f5 01       	movw	r30, r10
    23f0:	80 80       	ld	r8, Z
    23f2:	91 80       	ldd	r9, Z+1	; 0x01
    23f4:	c5 01       	movw	r24, r10
    23f6:	02 96       	adiw	r24, 0x02	; 2
    23f8:	5c 01       	movw	r10, r24
    23fa:	1e 36       	cpi	r17, 0x6E	; 110
    23fc:	69 f5       	brne	.+90     	; 0x2458 <vfscanf+0x118>
    23fe:	f6 01       	movw	r30, r12
    2400:	46 81       	ldd	r20, Z+6	; 0x06
    2402:	57 81       	ldd	r21, Z+7	; 0x07
    2404:	70 e0       	ldi	r23, 0x00	; 0
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	20 2f       	mov	r18, r16
    240a:	c4 01       	movw	r24, r8
    240c:	cf de       	rcall	.-610    	; 0x21ac <putval>
    240e:	a4 cf       	rjmp	.-184    	; 0x2358 <vfscanf+0x18>
    2410:	02 60       	ori	r16, 0x02	; 2
    2412:	6e 2d       	mov	r22, r14
    2414:	70 e0       	ldi	r23, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	d3 de       	rcall	.-602    	; 0x21c4 <mulacc>
    241e:	e6 2e       	mov	r14, r22
    2420:	fe 01       	movw	r30, r28
    2422:	f3 fc       	sbrc	r15, 3
    2424:	15 91       	lpm	r17, Z+
    2426:	f3 fe       	sbrs	r15, 3
    2428:	11 91       	ld	r17, Z+
    242a:	ef 01       	movw	r28, r30
    242c:	c6 cf       	rjmp	.-116    	; 0x23ba <vfscanf+0x7a>
    242e:	ee 24       	eor	r14, r14
    2430:	ea 94       	dec	r14
    2432:	cb cf       	rjmp	.-106    	; 0x23ca <vfscanf+0x8a>
    2434:	fe 01       	movw	r30, r28
    2436:	f3 fc       	sbrc	r15, 3
    2438:	15 91       	lpm	r17, Z+
    243a:	f3 fe       	sbrs	r15, 3
    243c:	11 91       	ld	r17, Z+
    243e:	ef 01       	movw	r28, r30
    2440:	18 36       	cpi	r17, 0x68	; 104
    2442:	09 f0       	breq	.+2      	; 0x2446 <vfscanf+0x106>
    2444:	c7 cf       	rjmp	.-114    	; 0x23d4 <vfscanf+0x94>
    2446:	08 60       	ori	r16, 0x08	; 8
    2448:	04 60       	ori	r16, 0x04	; 4
    244a:	fe 01       	movw	r30, r28
    244c:	f3 fc       	sbrc	r15, 3
    244e:	15 91       	lpm	r17, Z+
    2450:	f3 fe       	sbrs	r15, 3
    2452:	11 91       	ld	r17, Z+
    2454:	ef 01       	movw	r28, r30
    2456:	be cf       	rjmp	.-132    	; 0x23d4 <vfscanf+0x94>
    2458:	13 36       	cpi	r17, 0x63	; 99
    245a:	b9 f4       	brne	.+46     	; 0x248a <vfscanf+0x14a>
    245c:	01 fd       	sbrc	r16, 1
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <vfscanf+0x124>
    2460:	ee 24       	eor	r14, r14
    2462:	e3 94       	inc	r14
    2464:	c6 01       	movw	r24, r12
    2466:	16 d1       	rcall	.+556    	; 0x2694 <fgetc>
    2468:	97 fd       	sbrc	r25, 7
    246a:	2e c0       	rjmp	.+92     	; 0x24c8 <vfscanf+0x188>
    246c:	81 14       	cp	r8, r1
    246e:	91 04       	cpc	r9, r1
    2470:	29 f0       	breq	.+10     	; 0x247c <vfscanf+0x13c>
    2472:	f4 01       	movw	r30, r8
    2474:	80 83       	st	Z, r24
    2476:	c4 01       	movw	r24, r8
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	4c 01       	movw	r8, r24
    247c:	ea 94       	dec	r14
    247e:	e1 10       	cpse	r14, r1
    2480:	f1 cf       	rjmp	.-30     	; 0x2464 <vfscanf+0x124>
    2482:	00 fd       	sbrc	r16, 0
    2484:	69 cf       	rjmp	.-302    	; 0x2358 <vfscanf+0x18>
    2486:	53 94       	inc	r5
    2488:	67 cf       	rjmp	.-306    	; 0x2358 <vfscanf+0x18>
    248a:	c6 01       	movw	r24, r12
    248c:	be de       	rcall	.-644    	; 0x220a <skip_spaces>
    248e:	97 fd       	sbrc	r25, 7
    2490:	1b c0       	rjmp	.+54     	; 0x24c8 <vfscanf+0x188>
    2492:	1f 36       	cpi	r17, 0x6F	; 111
    2494:	09 f4       	brne	.+2      	; 0x2498 <vfscanf+0x158>
    2496:	3d c0       	rjmp	.+122    	; 0x2512 <vfscanf+0x1d2>
    2498:	30 f4       	brcc	.+12     	; 0x24a6 <vfscanf+0x166>
    249a:	14 36       	cpi	r17, 0x64	; 100
    249c:	41 f0       	breq	.+16     	; 0x24ae <vfscanf+0x16e>
    249e:	19 36       	cpi	r17, 0x69	; 105
    24a0:	39 f0       	breq	.+14     	; 0x24b0 <vfscanf+0x170>
    24a2:	00 64       	ori	r16, 0x40	; 64
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <vfscanf+0x170>
    24a6:	13 37       	cpi	r17, 0x73	; 115
    24a8:	11 f1       	breq	.+68     	; 0x24ee <vfscanf+0x1ae>
    24aa:	15 37       	cpi	r17, 0x75	; 117
    24ac:	d1 f7       	brne	.-12     	; 0x24a2 <vfscanf+0x162>
    24ae:	00 62       	ori	r16, 0x20	; 32
    24b0:	20 2f       	mov	r18, r16
    24b2:	a4 01       	movw	r20, r8
    24b4:	6e 2d       	mov	r22, r14
    24b6:	c6 01       	movw	r24, r12
    24b8:	be de       	rcall	.-644    	; 0x2236 <conv_int>
    24ba:	81 11       	cpse	r24, r1
    24bc:	e2 cf       	rjmp	.-60     	; 0x2482 <vfscanf+0x142>
    24be:	f6 01       	movw	r30, r12
    24c0:	83 81       	ldd	r24, Z+3	; 0x03
    24c2:	80 73       	andi	r24, 0x30	; 48
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <vfscanf+0x188>
    24c6:	6c cf       	rjmp	.-296    	; 0x23a0 <vfscanf+0x60>
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	9f ef       	ldi	r25, 0xFF	; 255
    24cc:	51 10       	cpse	r5, r1
    24ce:	68 cf       	rjmp	.-304    	; 0x23a0 <vfscanf+0x60>
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	ef e0       	ldi	r30, 0x0F	; 15
    24d6:	9b c0       	rjmp	.+310    	; 0x260e <__epilogue_restores__+0x6>
    24d8:	81 14       	cp	r8, r1
    24da:	91 04       	cpc	r9, r1
    24dc:	29 f0       	breq	.+10     	; 0x24e8 <vfscanf+0x1a8>
    24de:	f4 01       	movw	r30, r8
    24e0:	60 82       	st	Z, r6
    24e2:	c4 01       	movw	r24, r8
    24e4:	01 96       	adiw	r24, 0x01	; 1
    24e6:	4c 01       	movw	r8, r24
    24e8:	ea 94       	dec	r14
    24ea:	ee 20       	and	r14, r14
    24ec:	59 f0       	breq	.+22     	; 0x2504 <vfscanf+0x1c4>
    24ee:	c6 01       	movw	r24, r12
    24f0:	d1 d0       	rcall	.+418    	; 0x2694 <fgetc>
    24f2:	3c 01       	movw	r6, r24
    24f4:	97 fd       	sbrc	r25, 7
    24f6:	06 c0       	rjmp	.+12     	; 0x2504 <vfscanf+0x1c4>
    24f8:	b1 d0       	rcall	.+354    	; 0x265c <isspace>
    24fa:	89 2b       	or	r24, r25
    24fc:	69 f3       	breq	.-38     	; 0x24d8 <vfscanf+0x198>
    24fe:	b6 01       	movw	r22, r12
    2500:	c3 01       	movw	r24, r6
    2502:	34 d1       	rcall	.+616    	; 0x276c <ungetc>
    2504:	81 14       	cp	r8, r1
    2506:	91 04       	cpc	r9, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <vfscanf+0x1cc>
    250a:	bb cf       	rjmp	.-138    	; 0x2482 <vfscanf+0x142>
    250c:	f4 01       	movw	r30, r8
    250e:	10 82       	st	Z, r1
    2510:	b8 cf       	rjmp	.-144    	; 0x2482 <vfscanf+0x142>
    2512:	00 61       	ori	r16, 0x10	; 16
    2514:	cd cf       	rjmp	.-102    	; 0x24b0 <vfscanf+0x170>

00002516 <__mulsi3>:
    2516:	db 01       	movw	r26, r22
    2518:	8f 93       	push	r24
    251a:	9f 93       	push	r25
    251c:	4f d0       	rcall	.+158    	; 0x25bc <__muluhisi3>
    251e:	bf 91       	pop	r27
    2520:	af 91       	pop	r26
    2522:	a2 9f       	mul	r26, r18
    2524:	80 0d       	add	r24, r0
    2526:	91 1d       	adc	r25, r1
    2528:	a3 9f       	mul	r26, r19
    252a:	90 0d       	add	r25, r0
    252c:	b2 9f       	mul	r27, r18
    252e:	90 0d       	add	r25, r0
    2530:	11 24       	eor	r1, r1
    2532:	08 95       	ret

00002534 <__udivmodsi4>:
    2534:	a1 e2       	ldi	r26, 0x21	; 33
    2536:	1a 2e       	mov	r1, r26
    2538:	aa 1b       	sub	r26, r26
    253a:	bb 1b       	sub	r27, r27
    253c:	fd 01       	movw	r30, r26
    253e:	0d c0       	rjmp	.+26     	; 0x255a <__udivmodsi4_ep>

00002540 <__udivmodsi4_loop>:
    2540:	aa 1f       	adc	r26, r26
    2542:	bb 1f       	adc	r27, r27
    2544:	ee 1f       	adc	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	a2 17       	cp	r26, r18
    254a:	b3 07       	cpc	r27, r19
    254c:	e4 07       	cpc	r30, r20
    254e:	f5 07       	cpc	r31, r21
    2550:	20 f0       	brcs	.+8      	; 0x255a <__udivmodsi4_ep>
    2552:	a2 1b       	sub	r26, r18
    2554:	b3 0b       	sbc	r27, r19
    2556:	e4 0b       	sbc	r30, r20
    2558:	f5 0b       	sbc	r31, r21

0000255a <__udivmodsi4_ep>:
    255a:	66 1f       	adc	r22, r22
    255c:	77 1f       	adc	r23, r23
    255e:	88 1f       	adc	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	1a 94       	dec	r1
    2564:	69 f7       	brne	.-38     	; 0x2540 <__udivmodsi4_loop>
    2566:	60 95       	com	r22
    2568:	70 95       	com	r23
    256a:	80 95       	com	r24
    256c:	90 95       	com	r25
    256e:	9b 01       	movw	r18, r22
    2570:	ac 01       	movw	r20, r24
    2572:	bd 01       	movw	r22, r26
    2574:	cf 01       	movw	r24, r30
    2576:	08 95       	ret

00002578 <__divmodsi4>:
    2578:	05 2e       	mov	r0, r21
    257a:	97 fb       	bst	r25, 7
    257c:	16 f4       	brtc	.+4      	; 0x2582 <__divmodsi4+0xa>
    257e:	00 94       	com	r0
    2580:	0f d0       	rcall	.+30     	; 0x25a0 <__negsi2>
    2582:	57 fd       	sbrc	r21, 7
    2584:	05 d0       	rcall	.+10     	; 0x2590 <__divmodsi4_neg2>
    2586:	d6 df       	rcall	.-84     	; 0x2534 <__udivmodsi4>
    2588:	07 fc       	sbrc	r0, 7
    258a:	02 d0       	rcall	.+4      	; 0x2590 <__divmodsi4_neg2>
    258c:	46 f4       	brtc	.+16     	; 0x259e <__divmodsi4_exit>
    258e:	08 c0       	rjmp	.+16     	; 0x25a0 <__negsi2>

00002590 <__divmodsi4_neg2>:
    2590:	50 95       	com	r21
    2592:	40 95       	com	r20
    2594:	30 95       	com	r19
    2596:	21 95       	neg	r18
    2598:	3f 4f       	sbci	r19, 0xFF	; 255
    259a:	4f 4f       	sbci	r20, 0xFF	; 255
    259c:	5f 4f       	sbci	r21, 0xFF	; 255

0000259e <__divmodsi4_exit>:
    259e:	08 95       	ret

000025a0 <__negsi2>:
    25a0:	90 95       	com	r25
    25a2:	80 95       	com	r24
    25a4:	70 95       	com	r23
    25a6:	61 95       	neg	r22
    25a8:	7f 4f       	sbci	r23, 0xFF	; 255
    25aa:	8f 4f       	sbci	r24, 0xFF	; 255
    25ac:	9f 4f       	sbci	r25, 0xFF	; 255
    25ae:	08 95       	ret

000025b0 <__tablejump2__>:
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	05 90       	lpm	r0, Z+
    25b6:	f4 91       	lpm	r31, Z
    25b8:	e0 2d       	mov	r30, r0
    25ba:	09 94       	ijmp

000025bc <__muluhisi3>:
    25bc:	40 d0       	rcall	.+128    	; 0x263e <__umulhisi3>
    25be:	a5 9f       	mul	r26, r21
    25c0:	90 0d       	add	r25, r0
    25c2:	b4 9f       	mul	r27, r20
    25c4:	90 0d       	add	r25, r0
    25c6:	a4 9f       	mul	r26, r20
    25c8:	80 0d       	add	r24, r0
    25ca:	91 1d       	adc	r25, r1
    25cc:	11 24       	eor	r1, r1
    25ce:	08 95       	ret

000025d0 <__prologue_saves__>:
    25d0:	2f 92       	push	r2
    25d2:	3f 92       	push	r3
    25d4:	4f 92       	push	r4
    25d6:	5f 92       	push	r5
    25d8:	6f 92       	push	r6
    25da:	7f 92       	push	r7
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	ca 1b       	sub	r28, r26
    25fa:	db 0b       	sbc	r29, r27
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	09 94       	ijmp

00002608 <__epilogue_restores__>:
    2608:	2a 88       	ldd	r2, Y+18	; 0x12
    260a:	39 88       	ldd	r3, Y+17	; 0x11
    260c:	48 88       	ldd	r4, Y+16	; 0x10
    260e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2610:	6e 84       	ldd	r6, Y+14	; 0x0e
    2612:	7d 84       	ldd	r7, Y+13	; 0x0d
    2614:	8c 84       	ldd	r8, Y+12	; 0x0c
    2616:	9b 84       	ldd	r9, Y+11	; 0x0b
    2618:	aa 84       	ldd	r10, Y+10	; 0x0a
    261a:	b9 84       	ldd	r11, Y+9	; 0x09
    261c:	c8 84       	ldd	r12, Y+8	; 0x08
    261e:	df 80       	ldd	r13, Y+7	; 0x07
    2620:	ee 80       	ldd	r14, Y+6	; 0x06
    2622:	fd 80       	ldd	r15, Y+5	; 0x05
    2624:	0c 81       	ldd	r16, Y+4	; 0x04
    2626:	1b 81       	ldd	r17, Y+3	; 0x03
    2628:	aa 81       	ldd	r26, Y+2	; 0x02
    262a:	b9 81       	ldd	r27, Y+1	; 0x01
    262c:	ce 0f       	add	r28, r30
    262e:	d1 1d       	adc	r29, r1
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	ed 01       	movw	r28, r26
    263c:	08 95       	ret

0000263e <__umulhisi3>:
    263e:	a2 9f       	mul	r26, r18
    2640:	b0 01       	movw	r22, r0
    2642:	b3 9f       	mul	r27, r19
    2644:	c0 01       	movw	r24, r0
    2646:	a3 9f       	mul	r26, r19
    2648:	70 0d       	add	r23, r0
    264a:	81 1d       	adc	r24, r1
    264c:	11 24       	eor	r1, r1
    264e:	91 1d       	adc	r25, r1
    2650:	b2 9f       	mul	r27, r18
    2652:	70 0d       	add	r23, r0
    2654:	81 1d       	adc	r24, r1
    2656:	11 24       	eor	r1, r1
    2658:	91 1d       	adc	r25, r1
    265a:	08 95       	ret

0000265c <isspace>:
    265c:	91 11       	cpse	r25, r1
    265e:	fc c0       	rjmp	.+504    	; 0x2858 <__ctype_isfalse>
    2660:	80 32       	cpi	r24, 0x20	; 32
    2662:	19 f0       	breq	.+6      	; 0x266a <isspace+0xe>
    2664:	89 50       	subi	r24, 0x09	; 9
    2666:	85 50       	subi	r24, 0x05	; 5
    2668:	d0 f7       	brcc	.-12     	; 0x265e <isspace+0x2>
    266a:	08 95       	ret

0000266c <strchr_P>:
    266c:	fc 01       	movw	r30, r24
    266e:	05 90       	lpm	r0, Z+
    2670:	06 16       	cp	r0, r22
    2672:	21 f0       	breq	.+8      	; 0x267c <strchr_P+0x10>
    2674:	00 20       	and	r0, r0
    2676:	d9 f7       	brne	.-10     	; 0x266e <strchr_P+0x2>
    2678:	c0 01       	movw	r24, r0
    267a:	08 95       	ret
    267c:	31 97       	sbiw	r30, 0x01	; 1
    267e:	cf 01       	movw	r24, r30
    2680:	08 95       	ret

00002682 <memcpy>:
    2682:	fb 01       	movw	r30, r22
    2684:	dc 01       	movw	r26, r24
    2686:	02 c0       	rjmp	.+4      	; 0x268c <memcpy+0xa>
    2688:	01 90       	ld	r0, Z+
    268a:	0d 92       	st	X+, r0
    268c:	41 50       	subi	r20, 0x01	; 1
    268e:	50 40       	sbci	r21, 0x00	; 0
    2690:	d8 f7       	brcc	.-10     	; 0x2688 <memcpy+0x6>
    2692:	08 95       	ret

00002694 <fgetc>:
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	ec 01       	movw	r28, r24
    269a:	2b 81       	ldd	r18, Y+3	; 0x03
    269c:	20 ff       	sbrs	r18, 0
    269e:	1a c0       	rjmp	.+52     	; 0x26d4 <fgetc+0x40>
    26a0:	26 ff       	sbrs	r18, 6
    26a2:	0c c0       	rjmp	.+24     	; 0x26bc <fgetc+0x28>
    26a4:	2f 7b       	andi	r18, 0xBF	; 191
    26a6:	2b 83       	std	Y+3, r18	; 0x03
    26a8:	8e 81       	ldd	r24, Y+6	; 0x06
    26aa:	9f 81       	ldd	r25, Y+7	; 0x07
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	9f 83       	std	Y+7, r25	; 0x07
    26b0:	8e 83       	std	Y+6, r24	; 0x06
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret
    26bc:	22 ff       	sbrs	r18, 2
    26be:	18 c0       	rjmp	.+48     	; 0x26f0 <fgetc+0x5c>
    26c0:	e8 81       	ld	r30, Y
    26c2:	f9 81       	ldd	r31, Y+1	; 0x01
    26c4:	80 81       	ld	r24, Z
    26c6:	08 2e       	mov	r0, r24
    26c8:	00 0c       	add	r0, r0
    26ca:	99 0b       	sbc	r25, r25
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	29 f4       	brne	.+10     	; 0x26da <fgetc+0x46>
    26d0:	20 62       	ori	r18, 0x20	; 32
    26d2:	2b 83       	std	Y+3, r18	; 0x03
    26d4:	8f ef       	ldi	r24, 0xFF	; 255
    26d6:	9f ef       	ldi	r25, 0xFF	; 255
    26d8:	ee cf       	rjmp	.-36     	; 0x26b6 <fgetc+0x22>
    26da:	31 96       	adiw	r30, 0x01	; 1
    26dc:	f9 83       	std	Y+1, r31	; 0x01
    26de:	e8 83       	st	Y, r30
    26e0:	2e 81       	ldd	r18, Y+6	; 0x06
    26e2:	3f 81       	ldd	r19, Y+7	; 0x07
    26e4:	2f 5f       	subi	r18, 0xFF	; 255
    26e6:	3f 4f       	sbci	r19, 0xFF	; 255
    26e8:	3f 83       	std	Y+7, r19	; 0x07
    26ea:	2e 83       	std	Y+6, r18	; 0x06
    26ec:	99 27       	eor	r25, r25
    26ee:	e3 cf       	rjmp	.-58     	; 0x26b6 <fgetc+0x22>
    26f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    26f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    26f4:	09 95       	icall
    26f6:	97 ff       	sbrs	r25, 7
    26f8:	f3 cf       	rjmp	.-26     	; 0x26e0 <fgetc+0x4c>
    26fa:	2b 81       	ldd	r18, Y+3	; 0x03
    26fc:	01 96       	adiw	r24, 0x01	; 1
    26fe:	21 f0       	breq	.+8      	; 0x2708 <fgetc+0x74>
    2700:	80 e2       	ldi	r24, 0x20	; 32
    2702:	82 2b       	or	r24, r18
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	e6 cf       	rjmp	.-52     	; 0x26d4 <fgetc+0x40>
    2708:	80 e1       	ldi	r24, 0x10	; 16
    270a:	fb cf       	rjmp	.-10     	; 0x2702 <fgetc+0x6e>

0000270c <fputc>:
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	18 2f       	mov	r17, r24
    2716:	09 2f       	mov	r16, r25
    2718:	eb 01       	movw	r28, r22
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	81 fd       	sbrc	r24, 1
    271e:	09 c0       	rjmp	.+18     	; 0x2732 <fputc+0x26>
    2720:	1f ef       	ldi	r17, 0xFF	; 255
    2722:	0f ef       	ldi	r16, 0xFF	; 255
    2724:	81 2f       	mov	r24, r17
    2726:	90 2f       	mov	r25, r16
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	08 95       	ret
    2732:	82 ff       	sbrs	r24, 2
    2734:	14 c0       	rjmp	.+40     	; 0x275e <fputc+0x52>
    2736:	2e 81       	ldd	r18, Y+6	; 0x06
    2738:	3f 81       	ldd	r19, Y+7	; 0x07
    273a:	8c 81       	ldd	r24, Y+4	; 0x04
    273c:	9d 81       	ldd	r25, Y+5	; 0x05
    273e:	28 17       	cp	r18, r24
    2740:	39 07       	cpc	r19, r25
    2742:	3c f4       	brge	.+14     	; 0x2752 <fputc+0x46>
    2744:	e8 81       	ld	r30, Y
    2746:	f9 81       	ldd	r31, Y+1	; 0x01
    2748:	cf 01       	movw	r24, r30
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	99 83       	std	Y+1, r25	; 0x01
    274e:	88 83       	st	Y, r24
    2750:	10 83       	st	Z, r17
    2752:	8e 81       	ldd	r24, Y+6	; 0x06
    2754:	9f 81       	ldd	r25, Y+7	; 0x07
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	9f 83       	std	Y+7, r25	; 0x07
    275a:	8e 83       	std	Y+6, r24	; 0x06
    275c:	e3 cf       	rjmp	.-58     	; 0x2724 <fputc+0x18>
    275e:	e8 85       	ldd	r30, Y+8	; 0x08
    2760:	f9 85       	ldd	r31, Y+9	; 0x09
    2762:	81 2f       	mov	r24, r17
    2764:	09 95       	icall
    2766:	89 2b       	or	r24, r25
    2768:	a1 f3       	breq	.-24     	; 0x2752 <fputc+0x46>
    276a:	da cf       	rjmp	.-76     	; 0x2720 <fputc+0x14>

0000276c <ungetc>:
    276c:	fb 01       	movw	r30, r22
    276e:	23 81       	ldd	r18, Z+3	; 0x03
    2770:	20 ff       	sbrs	r18, 0
    2772:	11 c0       	rjmp	.+34     	; 0x2796 <ungetc+0x2a>
    2774:	26 fd       	sbrc	r18, 6
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <ungetc+0x2a>
    2778:	8f 3f       	cpi	r24, 0xFF	; 255
    277a:	98 07       	cpc	r25, r24
    277c:	71 f0       	breq	.+28     	; 0x279a <ungetc+0x2e>
    277e:	82 83       	std	Z+2, r24	; 0x02
    2780:	2f 7d       	andi	r18, 0xDF	; 223
    2782:	20 64       	ori	r18, 0x40	; 64
    2784:	23 83       	std	Z+3, r18	; 0x03
    2786:	26 81       	ldd	r18, Z+6	; 0x06
    2788:	37 81       	ldd	r19, Z+7	; 0x07
    278a:	21 50       	subi	r18, 0x01	; 1
    278c:	31 09       	sbc	r19, r1
    278e:	37 83       	std	Z+7, r19	; 0x07
    2790:	26 83       	std	Z+6, r18	; 0x06
    2792:	99 27       	eor	r25, r25
    2794:	08 95       	ret
    2796:	8f ef       	ldi	r24, 0xFF	; 255
    2798:	9f ef       	ldi	r25, 0xFF	; 255
    279a:	08 95       	ret

0000279c <__ultoa_invert>:
    279c:	fa 01       	movw	r30, r20
    279e:	aa 27       	eor	r26, r26
    27a0:	28 30       	cpi	r18, 0x08	; 8
    27a2:	51 f1       	breq	.+84     	; 0x27f8 <__ultoa_invert+0x5c>
    27a4:	20 31       	cpi	r18, 0x10	; 16
    27a6:	81 f1       	breq	.+96     	; 0x2808 <__ultoa_invert+0x6c>
    27a8:	e8 94       	clt
    27aa:	6f 93       	push	r22
    27ac:	6e 7f       	andi	r22, 0xFE	; 254
    27ae:	6e 5f       	subi	r22, 0xFE	; 254
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	8f 4f       	sbci	r24, 0xFF	; 255
    27b4:	9f 4f       	sbci	r25, 0xFF	; 255
    27b6:	af 4f       	sbci	r26, 0xFF	; 255
    27b8:	b1 e0       	ldi	r27, 0x01	; 1
    27ba:	3e d0       	rcall	.+124    	; 0x2838 <__ultoa_invert+0x9c>
    27bc:	b4 e0       	ldi	r27, 0x04	; 4
    27be:	3c d0       	rcall	.+120    	; 0x2838 <__ultoa_invert+0x9c>
    27c0:	67 0f       	add	r22, r23
    27c2:	78 1f       	adc	r23, r24
    27c4:	89 1f       	adc	r24, r25
    27c6:	9a 1f       	adc	r25, r26
    27c8:	a1 1d       	adc	r26, r1
    27ca:	68 0f       	add	r22, r24
    27cc:	79 1f       	adc	r23, r25
    27ce:	8a 1f       	adc	r24, r26
    27d0:	91 1d       	adc	r25, r1
    27d2:	a1 1d       	adc	r26, r1
    27d4:	6a 0f       	add	r22, r26
    27d6:	71 1d       	adc	r23, r1
    27d8:	81 1d       	adc	r24, r1
    27da:	91 1d       	adc	r25, r1
    27dc:	a1 1d       	adc	r26, r1
    27de:	20 d0       	rcall	.+64     	; 0x2820 <__ultoa_invert+0x84>
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <__ultoa_invert+0x48>
    27e2:	68 94       	set
    27e4:	3f 91       	pop	r19
    27e6:	2a e0       	ldi	r18, 0x0A	; 10
    27e8:	26 9f       	mul	r18, r22
    27ea:	11 24       	eor	r1, r1
    27ec:	30 19       	sub	r19, r0
    27ee:	30 5d       	subi	r19, 0xD0	; 208
    27f0:	31 93       	st	Z+, r19
    27f2:	de f6       	brtc	.-74     	; 0x27aa <__ultoa_invert+0xe>
    27f4:	cf 01       	movw	r24, r30
    27f6:	08 95       	ret
    27f8:	46 2f       	mov	r20, r22
    27fa:	47 70       	andi	r20, 0x07	; 7
    27fc:	40 5d       	subi	r20, 0xD0	; 208
    27fe:	41 93       	st	Z+, r20
    2800:	b3 e0       	ldi	r27, 0x03	; 3
    2802:	0f d0       	rcall	.+30     	; 0x2822 <__ultoa_invert+0x86>
    2804:	c9 f7       	brne	.-14     	; 0x27f8 <__ultoa_invert+0x5c>
    2806:	f6 cf       	rjmp	.-20     	; 0x27f4 <__ultoa_invert+0x58>
    2808:	46 2f       	mov	r20, r22
    280a:	4f 70       	andi	r20, 0x0F	; 15
    280c:	40 5d       	subi	r20, 0xD0	; 208
    280e:	4a 33       	cpi	r20, 0x3A	; 58
    2810:	18 f0       	brcs	.+6      	; 0x2818 <__ultoa_invert+0x7c>
    2812:	49 5d       	subi	r20, 0xD9	; 217
    2814:	31 fd       	sbrc	r19, 1
    2816:	40 52       	subi	r20, 0x20	; 32
    2818:	41 93       	st	Z+, r20
    281a:	02 d0       	rcall	.+4      	; 0x2820 <__ultoa_invert+0x84>
    281c:	a9 f7       	brne	.-22     	; 0x2808 <__ultoa_invert+0x6c>
    281e:	ea cf       	rjmp	.-44     	; 0x27f4 <__ultoa_invert+0x58>
    2820:	b4 e0       	ldi	r27, 0x04	; 4
    2822:	a6 95       	lsr	r26
    2824:	97 95       	ror	r25
    2826:	87 95       	ror	r24
    2828:	77 95       	ror	r23
    282a:	67 95       	ror	r22
    282c:	ba 95       	dec	r27
    282e:	c9 f7       	brne	.-14     	; 0x2822 <__ultoa_invert+0x86>
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	61 05       	cpc	r22, r1
    2834:	71 05       	cpc	r23, r1
    2836:	08 95       	ret
    2838:	9b 01       	movw	r18, r22
    283a:	ac 01       	movw	r20, r24
    283c:	0a 2e       	mov	r0, r26
    283e:	06 94       	lsr	r0
    2840:	57 95       	ror	r21
    2842:	47 95       	ror	r20
    2844:	37 95       	ror	r19
    2846:	27 95       	ror	r18
    2848:	ba 95       	dec	r27
    284a:	c9 f7       	brne	.-14     	; 0x283e <__ultoa_invert+0xa2>
    284c:	62 0f       	add	r22, r18
    284e:	73 1f       	adc	r23, r19
    2850:	84 1f       	adc	r24, r20
    2852:	95 1f       	adc	r25, r21
    2854:	a0 1d       	adc	r26, r0
    2856:	08 95       	ret

00002858 <__ctype_isfalse>:
    2858:	99 27       	eor	r25, r25
    285a:	88 27       	eor	r24, r24

0000285c <__ctype_istrue>:
    285c:	08 95       	ret

0000285e <_exit>:
    285e:	f8 94       	cli

00002860 <__stop_program>:
    2860:	ff cf       	rjmp	.-2      	; 0x2860 <__stop_program>
