   1               		.file	"chevents.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chEvtRegisterMaskWithFlagsI,"ax",@progbits
  11               	.global	chEvtRegisterMaskWithFlagsI
  13               	chEvtRegisterMaskWithFlagsI:
  14               	.LFB190:
  15               		.file 1 "../../os/rt/src/chevents.c"
   1:../../os/rt/src/chevents.c **** /*
   2:../../os/rt/src/chevents.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/src/chevents.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/src/chevents.c **** 
   5:../../os/rt/src/chevents.c ****     This file is part of ChibiOS.
   6:../../os/rt/src/chevents.c **** 
   7:../../os/rt/src/chevents.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/src/chevents.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/src/chevents.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/src/chevents.c **** 
  11:../../os/rt/src/chevents.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/src/chevents.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/src/chevents.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/src/chevents.c ****     GNU General Public License for more details.
  15:../../os/rt/src/chevents.c **** 
  16:../../os/rt/src/chevents.c ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/src/chevents.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/src/chevents.c **** */
  19:../../os/rt/src/chevents.c **** /*
  20:../../os/rt/src/chevents.c ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../os/rt/src/chevents.c ****  */
  22:../../os/rt/src/chevents.c **** 
  23:../../os/rt/src/chevents.c **** /**
  24:../../os/rt/src/chevents.c ****  * @file    rt/src/chevents.c
  25:../../os/rt/src/chevents.c ****  * @brief   Events code.
  26:../../os/rt/src/chevents.c ****  *
  27:../../os/rt/src/chevents.c ****  * @addtogroup events
  28:../../os/rt/src/chevents.c ****  * @details Event Flags, Event Sources and Event Listeners.
  29:../../os/rt/src/chevents.c ****  *          <h2>Operation mode</h2>
  30:../../os/rt/src/chevents.c ****  *          Each thread has a mask of pending events inside its
  31:../../os/rt/src/chevents.c ****  *          @p thread_t structure.
  32:../../os/rt/src/chevents.c ****  *          Operations defined for events:
  33:../../os/rt/src/chevents.c ****  *          - <b>Wait</b>, the invoking thread goes to sleep until a certain
  34:../../os/rt/src/chevents.c ****  *            AND/OR combination of events are signaled.
  35:../../os/rt/src/chevents.c ****  *          - <b>Clear</b>, a mask of events is cleared from the pending
  36:../../os/rt/src/chevents.c ****  *            events, the cleared events mask is returned (only the
  37:../../os/rt/src/chevents.c ****  *            events that were actually pending and then cleared).
  38:../../os/rt/src/chevents.c ****  *          - <b>Signal</b>, an events mask is directly ORed to the mask of
  39:../../os/rt/src/chevents.c ****  *            the signaled thread.
  40:../../os/rt/src/chevents.c ****  *          - <b>Broadcast</b>, each thread registered on an Event Source is
  41:../../os/rt/src/chevents.c ****  *            signaled with the events specified in its Event Listener.
  42:../../os/rt/src/chevents.c ****  *          - <b>Dispatch</b>, an events mask is scanned and for each bit set
  43:../../os/rt/src/chevents.c ****  *            to one an associated handler function is invoked. Bit masks are
  44:../../os/rt/src/chevents.c ****  *            scanned from bit zero upward.
  45:../../os/rt/src/chevents.c ****  *          .
  46:../../os/rt/src/chevents.c ****  *          An Event Source is a special object that can be "broadcasted" by
  47:../../os/rt/src/chevents.c ****  *          a thread or an interrupt service routine. Broadcasting an Event
  48:../../os/rt/src/chevents.c ****  *          Source has the effect that all the threads registered on the
  49:../../os/rt/src/chevents.c ****  *          Event Source will be signaled with an events mask.<br>
  50:../../os/rt/src/chevents.c ****  *          An unlimited number of Event Sources can exists in a system and
  51:../../os/rt/src/chevents.c ****  *          each thread can be listening on an unlimited number of
  52:../../os/rt/src/chevents.c ****  *          them.
  53:../../os/rt/src/chevents.c ****  * @pre     In order to use the Events APIs the @p CH_CFG_USE_EVENTS option
  54:../../os/rt/src/chevents.c ****  *          must be enabled in @p chconf.h.
  55:../../os/rt/src/chevents.c ****  * @post    Enabling events requires 1-4 (depending on the architecture)
  56:../../os/rt/src/chevents.c ****  *          extra bytes in the @p thread_t structure.
  57:../../os/rt/src/chevents.c ****  * @{
  58:../../os/rt/src/chevents.c ****  */
  59:../../os/rt/src/chevents.c **** 
  60:../../os/rt/src/chevents.c **** #include "ch.h"
  61:../../os/rt/src/chevents.c **** 
  62:../../os/rt/src/chevents.c **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  63:../../os/rt/src/chevents.c **** 
  64:../../os/rt/src/chevents.c **** /*===========================================================================*/
  65:../../os/rt/src/chevents.c **** /* Module local definitions.                                                 */
  66:../../os/rt/src/chevents.c **** /*===========================================================================*/
  67:../../os/rt/src/chevents.c **** 
  68:../../os/rt/src/chevents.c **** /*===========================================================================*/
  69:../../os/rt/src/chevents.c **** /* Module exported variables.                                                */
  70:../../os/rt/src/chevents.c **** /*===========================================================================*/
  71:../../os/rt/src/chevents.c **** 
  72:../../os/rt/src/chevents.c **** /*===========================================================================*/
  73:../../os/rt/src/chevents.c **** /* Module local types.                                                       */
  74:../../os/rt/src/chevents.c **** /*===========================================================================*/
  75:../../os/rt/src/chevents.c **** 
  76:../../os/rt/src/chevents.c **** /*===========================================================================*/
  77:../../os/rt/src/chevents.c **** /* Module local variables.                                                   */
  78:../../os/rt/src/chevents.c **** /*===========================================================================*/
  79:../../os/rt/src/chevents.c **** 
  80:../../os/rt/src/chevents.c **** /*===========================================================================*/
  81:../../os/rt/src/chevents.c **** /* Module local functions.                                                   */
  82:../../os/rt/src/chevents.c **** /*===========================================================================*/
  83:../../os/rt/src/chevents.c **** 
  84:../../os/rt/src/chevents.c **** /*===========================================================================*/
  85:../../os/rt/src/chevents.c **** /* Module exported functions.                                                */
  86:../../os/rt/src/chevents.c **** /*===========================================================================*/
  87:../../os/rt/src/chevents.c **** 
  88:../../os/rt/src/chevents.c **** /**
  89:../../os/rt/src/chevents.c ****  * @brief   Registers an Event Listener on an Event Source.
  90:../../os/rt/src/chevents.c ****  * @details Once a thread has registered as listener on an event source it
  91:../../os/rt/src/chevents.c ****  *          will be notified of all events broadcasted there.
  92:../../os/rt/src/chevents.c ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
  93:../../os/rt/src/chevents.c ****  *          different threads.
  94:../../os/rt/src/chevents.c ****  *
  95:../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the  @p event_source_t structure
  96:../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
  97:../../os/rt/src/chevents.c ****  * @param[in] events    events to be ORed to the thread when
  98:../../os/rt/src/chevents.c ****  *                      the event source is broadcasted
  99:../../os/rt/src/chevents.c ****  * @param[in] wflags    mask of flags the listening thread is interested in
 100:../../os/rt/src/chevents.c ****  *
 101:../../os/rt/src/chevents.c ****  * @iclass
 102:../../os/rt/src/chevents.c ****  */
 103:../../os/rt/src/chevents.c **** void chEvtRegisterMaskWithFlagsI(event_source_t *esp,
 104:../../os/rt/src/chevents.c ****                                  event_listener_t *elp,
 105:../../os/rt/src/chevents.c ****                                  eventmask_t events,
 106:../../os/rt/src/chevents.c ****                                  eventflags_t wflags) {
  16               		.loc 1 106 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 FB01      		movw r30,r22
  32               	.LBB160:
  33               	.LBB161:
  34               		.file 2 "../../os/rt/include/chthreads.h"
   1:../../os/rt/include/chthreads.h **** /*
   2:../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chthreads.h **** 
   5:../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chthreads.h **** 
   7:../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chthreads.h **** 
  11:../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chthreads.h **** 
  16:../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chthreads.h **** */
  19:../../os/rt/include/chthreads.h **** 
  20:../../os/rt/include/chthreads.h **** /**
  21:../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../os/rt/include/chthreads.h ****  *
  24:../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../os/rt/include/chthreads.h ****  * @{
  26:../../os/rt/include/chthreads.h ****  */
  27:../../os/rt/include/chthreads.h **** 
  28:../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../os/rt/include/chthreads.h **** 
  31:../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../os/rt/include/chthreads.h **** 
  33:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../os/rt/include/chthreads.h **** 
  37:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../os/rt/include/chthreads.h **** 
  41:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../os/rt/include/chthreads.h **** 
  45:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../os/rt/include/chthreads.h **** 
  49:../../os/rt/include/chthreads.h **** /**
  50:../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../os/rt/include/chthreads.h ****  */
  52:../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../os/rt/include/chthreads.h **** 
  54:../../os/rt/include/chthreads.h **** /**
  55:../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../os/rt/include/chthreads.h ****  */
  57:../../os/rt/include/chthreads.h **** typedef struct {
  58:../../os/rt/include/chthreads.h ****   /**
  59:../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../os/rt/include/chthreads.h ****    */
  61:../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../os/rt/include/chthreads.h ****   /**
  63:../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../os/rt/include/chthreads.h ****    */
  65:../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../os/rt/include/chthreads.h ****   /**
  67:../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../os/rt/include/chthreads.h ****    */
  69:../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../os/rt/include/chthreads.h ****   /**
  71:../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../os/rt/include/chthreads.h ****    */
  73:../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../os/rt/include/chthreads.h ****   /**
  75:../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../os/rt/include/chthreads.h ****    */
  77:../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../os/rt/include/chthreads.h ****   /**
  79:../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../os/rt/include/chthreads.h ****    */
  81:../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../os/rt/include/chthreads.h ****   /**
  84:../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../os/rt/include/chthreads.h ****    */
  86:../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../os/rt/include/chthreads.h **** #endif
  88:../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../os/rt/include/chthreads.h **** 
  90:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  91:../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
  92:../../os/rt/include/chthreads.h **** /*===========================================================================*/
  93:../../os/rt/include/chthreads.h **** 
  94:../../os/rt/include/chthreads.h **** /**
  95:../../os/rt/include/chthreads.h ****  * @name    Threads queues
  96:../../os/rt/include/chthreads.h ****  * @{
  97:../../os/rt/include/chthreads.h ****  */
  98:../../os/rt/include/chthreads.h **** /**
  99:../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 100:../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 101:../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 102:../../os/rt/include/chthreads.h ****  *
 103:../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 104:../../os/rt/include/chthreads.h ****  */
 105:../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 106:../../os/rt/include/chthreads.h **** 
 107:../../os/rt/include/chthreads.h **** /**
 108:../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 109:../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 110:../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 111:../../os/rt/include/chthreads.h ****  *
 112:../../os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 113:../../os/rt/include/chthreads.h ****  */
 114:../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 115:../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 116:../../os/rt/include/chthreads.h **** /** @} */
 117:../../os/rt/include/chthreads.h **** 
 118:../../os/rt/include/chthreads.h **** /**
 119:../../os/rt/include/chthreads.h ****  * @name    Working Areas
 120:../../os/rt/include/chthreads.h ****  * @{
 121:../../os/rt/include/chthreads.h ****  */
 122:../../os/rt/include/chthreads.h **** /**
 123:../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 124:../../os/rt/include/chthreads.h ****  *
 125:../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 126:../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 127:../../os/rt/include/chthreads.h ****  *
 128:../../os/rt/include/chthreads.h ****  * @api
 129:../../os/rt/include/chthreads.h ****  */
 130:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 131:../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 132:../../os/rt/include/chthreads.h **** 
 133:../../os/rt/include/chthreads.h **** /**
 134:../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 135:../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 136:../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 137:../../os/rt/include/chthreads.h ****  *
 138:../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 139:../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 140:../../os/rt/include/chthreads.h ****  *
 141:../../os/rt/include/chthreads.h ****  * @api
 142:../../os/rt/include/chthreads.h ****  */
 143:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 144:../../os/rt/include/chthreads.h **** 
 145:../../os/rt/include/chthreads.h **** /**
 146:../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 147:../../os/rt/include/chthreads.h ****  *
 148:../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 149:../../os/rt/include/chthreads.h ****  */
 150:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 151:../../os/rt/include/chthreads.h **** 
 152:../../os/rt/include/chthreads.h **** /**
 153:../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 154:../../os/rt/include/chthreads.h ****  *
 155:../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 156:../../os/rt/include/chthreads.h ****  */
 157:../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 158:../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 159:../../os/rt/include/chthreads.h **** /** @} */
 160:../../os/rt/include/chthreads.h **** 
 161:../../os/rt/include/chthreads.h **** /**
 162:../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 163:../../os/rt/include/chthreads.h ****  * @{
 164:../../os/rt/include/chthreads.h ****  */
 165:../../os/rt/include/chthreads.h **** /**
 166:../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 167:../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 168:../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 169:../../os/rt/include/chthreads.h ****  */
 170:../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 171:../../os/rt/include/chthreads.h **** /** @} */
 172:../../os/rt/include/chthreads.h **** 
 173:../../os/rt/include/chthreads.h **** /**
 174:../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 175:../../os/rt/include/chthreads.h ****  * @{
 176:../../os/rt/include/chthreads.h ****  */
 177:../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 178:../../os/rt/include/chthreads.h **** /**
 179:../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 180:../../os/rt/include/chthreads.h ****  *
 181:../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 182:../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 183:../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 184:../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 185:../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 186:../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 187:../../os/rt/include/chthreads.h ****  */
 188:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 189:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 190:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 191:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 192:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 193:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 194:../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 195:../../os/rt/include/chthreads.h ****   NULL                                                                      \
 196:../../os/rt/include/chthreads.h **** }
 197:../../os/rt/include/chthreads.h **** #else
 198:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 199:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 200:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 201:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 202:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 203:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 204:../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 205:../../os/rt/include/chthreads.h **** }
 206:../../os/rt/include/chthreads.h **** #endif
 207:../../os/rt/include/chthreads.h **** 
 208:../../os/rt/include/chthreads.h **** /**
 209:../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../os/rt/include/chthreads.h ****  *
 211:../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 218:../../os/rt/include/chthreads.h ****  */
 219:../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 220:../../os/rt/include/chthreads.h ****   (name),                                                                   \
 221:../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 222:../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 223:../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 224:../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 225:../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 226:../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 227:../../os/rt/include/chthreads.h **** }
 228:../../os/rt/include/chthreads.h **** /** @} */
 229:../../os/rt/include/chthreads.h **** 
 230:../../os/rt/include/chthreads.h **** /**
 231:../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 232:../../os/rt/include/chthreads.h ****  * @{
 233:../../os/rt/include/chthreads.h ****  */
 234:../../os/rt/include/chthreads.h **** /**
 235:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 236:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 237:../../os/rt/include/chthreads.h ****  *          system tick clock.
 238:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 239:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 240:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 241:../../os/rt/include/chthreads.h ****  *          converted.
 242:../../os/rt/include/chthreads.h ****  *
 243:../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 244:../../os/rt/include/chthreads.h ****  *
 245:../../os/rt/include/chthreads.h ****  * @api
 246:../../os/rt/include/chthreads.h ****  */
 247:../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 248:../../os/rt/include/chthreads.h **** 
 249:../../os/rt/include/chthreads.h **** /**
 250:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 251:../../os/rt/include/chthreads.h ****  *          milliseconds.
 252:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 253:../../os/rt/include/chthreads.h ****  *          system tick clock.
 254:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 255:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 256:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 257:../../os/rt/include/chthreads.h ****  *          converted.
 258:../../os/rt/include/chthreads.h ****  *
 259:../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 260:../../os/rt/include/chthreads.h ****  *
 261:../../os/rt/include/chthreads.h ****  * @api
 262:../../os/rt/include/chthreads.h ****  */
 263:../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 264:../../os/rt/include/chthreads.h **** 
 265:../../os/rt/include/chthreads.h **** /**
 266:../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 267:../../os/rt/include/chthreads.h ****  *          microseconds.
 268:../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 269:../../os/rt/include/chthreads.h ****  *          system tick clock.
 270:../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 271:../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 272:../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 273:../../os/rt/include/chthreads.h ****  *          converted.
 274:../../os/rt/include/chthreads.h ****  *
 275:../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 276:../../os/rt/include/chthreads.h ****  *
 277:../../os/rt/include/chthreads.h ****  * @api
 278:../../os/rt/include/chthreads.h ****  */
 279:../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 280:../../os/rt/include/chthreads.h **** /** @} */
 281:../../os/rt/include/chthreads.h **** 
 282:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 283:../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 284:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 285:../../os/rt/include/chthreads.h **** 
 286:../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 287:../../os/rt/include/chthreads.h **** extern "C" {
 288:../../os/rt/include/chthreads.h **** #endif
 289:../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 290:../../os/rt/include/chthreads.h ****                                thread_t *tp,
 291:../../os/rt/include/chthreads.h ****                                const char *name,
 292:../../os/rt/include/chthreads.h ****                                tprio_t prio);
 293:../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 294:../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 295:../../os/rt/include/chthreads.h **** #endif
 296:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 297:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 298:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 299:../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 300:../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 301:../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 302:../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 303:../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 304:../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 305:../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 306:../../os/rt/include/chthreads.h **** #endif
 307:../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 308:../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 309:../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 310:../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 311:../../os/rt/include/chthreads.h **** #endif
 312:../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 313:../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 314:../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 315:../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 316:../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 317:../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 318:../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 319:../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 320:../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 321:../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 322:../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 323:../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 324:../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 325:../../os/rt/include/chthreads.h ****   void chThdYield(void);
 326:../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 327:../../os/rt/include/chthreads.h **** }
 328:../../os/rt/include/chthreads.h **** #endif
 329:../../os/rt/include/chthreads.h **** 
 330:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 331:../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 332:../../os/rt/include/chthreads.h **** /*===========================================================================*/
 333:../../os/rt/include/chthreads.h **** 
 334:../../os/rt/include/chthreads.h **** /**
 335:../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 336:../../os/rt/include/chthreads.h ****  *
 337:../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 338:../../os/rt/include/chthreads.h ****  *
 339:../../os/rt/include/chthreads.h ****  * @xclass
 340:../../os/rt/include/chthreads.h ****  */
 341:../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 342:../../os/rt/include/chthreads.h **** 
 343:../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
  35               		.loc 2 343 0
  36 0006 6091 0000 		lds r22,ch0+5
  37 000a 7091 0000 		lds r23,ch0+5+1
  38               	.LVL1:
  39               	.LBE161:
  40               	.LBE160:
 107:../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 108:../../os/rt/src/chevents.c **** 
 109:../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 110:../../os/rt/src/chevents.c ****   chDbgCheck((esp != NULL) && (elp != NULL));
 111:../../os/rt/src/chevents.c **** 
 112:../../os/rt/src/chevents.c ****   elp->next     = esp->next;
  41               		.loc 1 112 0
  42 000e EC01      		movw r28,r24
  43 0010 A881      		ld r26,Y
  44 0012 B981      		ldd r27,Y+1
  45 0014 B183      		std Z+1,r27
  46 0016 A083      		st Z,r26
 113:../../os/rt/src/chevents.c ****   esp->next     = elp;
  47               		.loc 1 113 0
  48 0018 F983      		std Y+1,r31
  49 001a E883      		st Y,r30
 114:../../os/rt/src/chevents.c ****   elp->listener = currtp;
  50               		.loc 1 114 0
  51 001c 7383      		std Z+3,r23
  52 001e 6283      		std Z+2,r22
 115:../../os/rt/src/chevents.c ****   elp->events   = events;
  53               		.loc 1 115 0
  54 0020 4483      		std Z+4,r20
 116:../../os/rt/src/chevents.c ****   elp->flags    = (eventflags_t)0;
  55               		.loc 1 116 0
  56 0022 1582      		std Z+5,__zero_reg__
 117:../../os/rt/src/chevents.c ****   elp->wflags   = wflags;
  57               		.loc 1 117 0
  58 0024 2683      		std Z+6,r18
  59               	/* epilogue start */
 118:../../os/rt/src/chevents.c **** }
  60               		.loc 1 118 0
  61 0026 DF91      		pop r29
  62 0028 CF91      		pop r28
  63 002a 0895      		ret
  64               		.cfi_endproc
  65               	.LFE190:
  67               		.section	.text.chEvtRegisterMaskWithFlags,"ax",@progbits
  68               	.global	chEvtRegisterMaskWithFlags
  70               	chEvtRegisterMaskWithFlags:
  71               	.LFB191:
 119:../../os/rt/src/chevents.c **** 
 120:../../os/rt/src/chevents.c **** /**
 121:../../os/rt/src/chevents.c ****  * @brief   Registers an Event Listener on an Event Source.
 122:../../os/rt/src/chevents.c ****  * @details Once a thread has registered as listener on an event source it
 123:../../os/rt/src/chevents.c ****  *          will be notified of all events broadcasted there.
 124:../../os/rt/src/chevents.c ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
 125:../../os/rt/src/chevents.c ****  *          different threads.
 126:../../os/rt/src/chevents.c ****  *
 127:../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the  @p event_source_t structure
 128:../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 129:../../os/rt/src/chevents.c ****  * @param[in] events    events to be ORed to the thread when
 130:../../os/rt/src/chevents.c ****  *                      the event source is broadcasted
 131:../../os/rt/src/chevents.c ****  * @param[in] wflags    mask of flags the listening thread is interested in
 132:../../os/rt/src/chevents.c ****  *
 133:../../os/rt/src/chevents.c ****  * @api
 134:../../os/rt/src/chevents.c ****  */
 135:../../os/rt/src/chevents.c **** void chEvtRegisterMaskWithFlags(event_source_t *esp,
 136:../../os/rt/src/chevents.c ****                                 event_listener_t *elp,
 137:../../os/rt/src/chevents.c ****                                 eventmask_t events,
 138:../../os/rt/src/chevents.c ****                                 eventflags_t wflags) {
  72               		.loc 1 138 0
  73               		.cfi_startproc
  74               	.LVL2:
  75 0000 CF93      		push r28
  76               	.LCFI2:
  77               		.cfi_def_cfa_offset 3
  78               		.cfi_offset 28, -2
  79 0002 DF93      		push r29
  80               	.LCFI3:
  81               		.cfi_def_cfa_offset 4
  82               		.cfi_offset 29, -3
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 2 */
  86               	.L__stack_usage = 2
  87 0004 FB01      		movw r30,r22
  88               	.LBB162:
  89               	.LBB163:
  90               	.LBB164:
  91               		.file 3 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  92               		.loc 3 430 0
  93               	/* #APP */
  94               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
  95 0006 F894      		cli
  96               	 ;  0 "" 2
  97               	.LVL3:
  98               	/* #NOAPP */
  99               	.LBE164:
 100               	.LBE163:
 101               	.LBE162:
 102               	.LBB165:
 103               	.LBB166:
 104               	.LBB167:
 105               	.LBB168:
 106               		.loc 2 343 0
 107 0008 6091 0000 		lds r22,ch0+5
 108 000c 7091 0000 		lds r23,ch0+5+1
 109               	.LVL4:
 110               	.LBE168:
 111               	.LBE167:
 112:../../os/rt/src/chevents.c ****   esp->next     = elp;
 112               		.loc 1 112 0
 113 0010 EC01      		movw r28,r24
 114 0012 A881      		ld r26,Y
 115 0014 B981      		ldd r27,Y+1
 116 0016 B183      		std Z+1,r27
 117 0018 A083      		st Z,r26
 113:../../os/rt/src/chevents.c ****   elp->listener = currtp;
 118               		.loc 1 113 0
 119 001a F983      		std Y+1,r31
 120 001c E883      		st Y,r30
 114:../../os/rt/src/chevents.c ****   elp->events   = events;
 121               		.loc 1 114 0
 122 001e 7383      		std Z+3,r23
 123 0020 6283      		std Z+2,r22
 115:../../os/rt/src/chevents.c ****   elp->flags    = (eventflags_t)0;
 124               		.loc 1 115 0
 125 0022 4483      		std Z+4,r20
 116:../../os/rt/src/chevents.c ****   elp->wflags   = wflags;
 126               		.loc 1 116 0
 127 0024 1582      		std Z+5,__zero_reg__
 117:../../os/rt/src/chevents.c **** }
 128               		.loc 1 117 0
 129 0026 2683      		std Z+6,r18
 130               	.LVL5:
 131               	.LBE166:
 132               	.LBE165:
 133               	.LBB169:
 134               	.LBB170:
 135               	.LBB171:
 136               	.LBB172:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 137               		.loc 3 440 0
 138               	/* #APP */
 139               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 140 0028 7894      		sei
 141               	 ;  0 "" 2
 142               	/* epilogue start */
 143               	/* #NOAPP */
 144               	.LBE172:
 145               	.LBE171:
 146               	.LBE170:
 147               	.LBE169:
 139:../../os/rt/src/chevents.c **** 
 140:../../os/rt/src/chevents.c ****   chSysLock();
 141:../../os/rt/src/chevents.c ****   chEvtRegisterMaskWithFlagsI(esp, elp, events, wflags);
 142:../../os/rt/src/chevents.c ****   chSysUnlock();
 143:../../os/rt/src/chevents.c **** }
 148               		.loc 1 143 0
 149 002a DF91      		pop r29
 150 002c CF91      		pop r28
 151 002e 0895      		ret
 152               		.cfi_endproc
 153               	.LFE191:
 155               		.section	.text.chEvtUnregister,"ax",@progbits
 156               	.global	chEvtUnregister
 158               	chEvtUnregister:
 159               	.LFB192:
 144:../../os/rt/src/chevents.c **** 
 145:../../os/rt/src/chevents.c **** /**
 146:../../os/rt/src/chevents.c ****  * @brief   Unregisters an Event Listener from its Event Source.
 147:../../os/rt/src/chevents.c ****  * @note    If the event listener is not registered on the specified event
 148:../../os/rt/src/chevents.c ****  *          source then the function does nothing.
 149:../../os/rt/src/chevents.c ****  * @note    For optimal performance it is better to perform the unregister
 150:../../os/rt/src/chevents.c ****  *          operations in inverse order of the register operations (elements
 151:../../os/rt/src/chevents.c ****  *          are found on top of the list).
 152:../../os/rt/src/chevents.c ****  *
 153:../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the  @p event_source_t structure
 154:../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 155:../../os/rt/src/chevents.c ****  *
 156:../../os/rt/src/chevents.c ****  * @api
 157:../../os/rt/src/chevents.c ****  */
 158:../../os/rt/src/chevents.c **** void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
 160               		.loc 1 158 0
 161               		.cfi_startproc
 162               	.LVL6:
 163               	/* prologue: function */
 164               	/* frame size = 0 */
 165               	/* stack size = 0 */
 166               	.L__stack_usage = 0
 167               	.LBB173:
 168               	.LBB174:
 169               	.LBB175:
 430:../../os/common/ports/AVR/chcore.h **** }
 170               		.loc 3 430 0
 171               	/* #APP */
 172               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 173 0000 F894      		cli
 174               	 ;  0 "" 2
 175               	/* #NOAPP */
 176               	.LBE175:
 177               	.LBE174:
 178               	.LBE173:
 159:../../os/rt/src/chevents.c ****   event_listener_t *p;
 160:../../os/rt/src/chevents.c **** 
 161:../../os/rt/src/chevents.c ****   chDbgCheck((esp != NULL) && (elp != NULL));
 162:../../os/rt/src/chevents.c **** 
 163:../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 164:../../os/rt/src/chevents.c ****   p = (event_listener_t *)esp;
 179               		.loc 1 164 0
 180 0002 FC01      		movw r30,r24
 181 0004 00C0      		rjmp .L5
 182               	.LVL7:
 183               	.L7:
 165:../../os/rt/src/chevents.c ****   /*lint -restore*/
 166:../../os/rt/src/chevents.c ****   chSysLock();
 167:../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 168:../../os/rt/src/chevents.c ****   while (p->next != (event_listener_t *)esp) {
 169:../../os/rt/src/chevents.c ****   /*lint -restore*/
 170:../../os/rt/src/chevents.c ****     if (p->next == elp) {
 184               		.loc 1 170 0
 185 0006 2617      		cp r18,r22
 186 0008 3707      		cpc r19,r23
 187 000a 01F0      		breq .L9
 188 000c F901      		movw r30,r18
 189               	.LVL8:
 190               	.L5:
 168:../../os/rt/src/chevents.c ****   /*lint -restore*/
 191               		.loc 1 168 0
 192 000e 2081      		ld r18,Z
 193 0010 3181      		ldd r19,Z+1
 194 0012 2817      		cp r18,r24
 195 0014 3907      		cpc r19,r25
 196 0016 01F4      		brne .L7
 197               	.LBB176:
 198               	.LBB177:
 199               	.LBB178:
 200               	.LBB179:
 201               		.loc 3 440 0
 202               	/* #APP */
 203               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 204 0018 7894      		sei
 205               	 ;  0 "" 2
 206               	/* epilogue start */
 207               	/* #NOAPP */
 208               	.LBE179:
 209               	.LBE178:
 210               	.LBE177:
 211               	.LBE176:
 171:../../os/rt/src/chevents.c ****       p->next = elp->next;
 172:../../os/rt/src/chevents.c ****       break;
 173:../../os/rt/src/chevents.c ****     }
 174:../../os/rt/src/chevents.c ****     p = p->next;
 175:../../os/rt/src/chevents.c ****   }
 176:../../os/rt/src/chevents.c ****   chSysUnlock();
 177:../../os/rt/src/chevents.c **** }
 212               		.loc 1 177 0
 213 001a 0895      		ret
 214               	.L9:
 171:../../os/rt/src/chevents.c ****       p->next = elp->next;
 215               		.loc 1 171 0
 216 001c DB01      		movw r26,r22
 217 001e 8D91      		ld r24,X+
 218 0020 9C91      		ld r25,X
 219               	.LVL9:
 220 0022 9183      		std Z+1,r25
 221 0024 8083      		st Z,r24
 222               	.LBB183:
 223               	.LBB182:
 224               	.LBB181:
 225               	.LBB180:
 226               		.loc 3 440 0
 227               	/* #APP */
 228               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 229 0026 7894      		sei
 230               	 ;  0 "" 2
 231               	/* epilogue start */
 232               	/* #NOAPP */
 233               	.LBE180:
 234               	.LBE181:
 235               	.LBE182:
 236               	.LBE183:
 237               		.loc 1 177 0
 238 0028 0895      		ret
 239               		.cfi_endproc
 240               	.LFE192:
 242               		.section	.text.chEvtGetAndClearEventsI,"ax",@progbits
 243               	.global	chEvtGetAndClearEventsI
 245               	chEvtGetAndClearEventsI:
 246               	.LFB193:
 178:../../os/rt/src/chevents.c **** 
 179:../../os/rt/src/chevents.c **** /**
 180:../../os/rt/src/chevents.c ****  * @brief   Clears the pending events specified in the events mask.
 181:../../os/rt/src/chevents.c ****  *
 182:../../os/rt/src/chevents.c ****  * @param[in] events    the events to be cleared
 183:../../os/rt/src/chevents.c ****  * @return              The mask of pending events that were cleared.
 184:../../os/rt/src/chevents.c ****  *
 185:../../os/rt/src/chevents.c ****  * @iclass
 186:../../os/rt/src/chevents.c ****  */
 187:../../os/rt/src/chevents.c **** eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
 247               		.loc 1 187 0
 248               		.cfi_startproc
 249               	.LVL10:
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 0 */
 253               	.L__stack_usage = 0
 254               	.LBB184:
 255               	.LBB185:
 256               		.loc 2 343 0
 257 0000 E091 0000 		lds r30,ch0+5
 258 0004 F091 0000 		lds r31,ch0+5+1
 259               	.LBE185:
 260               	.LBE184:
 188:../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 189:../../os/rt/src/chevents.c ****   eventmask_t m;
 190:../../os/rt/src/chevents.c **** 
 191:../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 192:../../os/rt/src/chevents.c **** 
 193:../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 261               		.loc 1 193 0
 262 0008 228D      		ldd r18,Z+26
 263               	.LVL11:
 194:../../os/rt/src/chevents.c ****   currtp->epending &= ~events;
 264               		.loc 1 194 0
 265 000a 982F      		mov r25,r24
 266 000c 9095      		com r25
 267 000e 9223      		and r25,r18
 268 0010 928F      		std Z+26,r25
 195:../../os/rt/src/chevents.c **** 
 196:../../os/rt/src/chevents.c ****   return m;
 197:../../os/rt/src/chevents.c **** }
 269               		.loc 1 197 0
 270 0012 8223      		and r24,r18
 271               	.LVL12:
 272               	/* epilogue start */
 273 0014 0895      		ret
 274               		.cfi_endproc
 275               	.LFE193:
 277               		.section	.text.chEvtGetAndClearEvents,"ax",@progbits
 278               	.global	chEvtGetAndClearEvents
 280               	chEvtGetAndClearEvents:
 281               	.LFB194:
 198:../../os/rt/src/chevents.c **** 
 199:../../os/rt/src/chevents.c **** /**
 200:../../os/rt/src/chevents.c ****  * @brief   Clears the pending events specified in the events mask.
 201:../../os/rt/src/chevents.c ****  *
 202:../../os/rt/src/chevents.c ****  * @param[in] events    the events to be cleared
 203:../../os/rt/src/chevents.c ****  * @return              The mask of pending events that were cleared.
 204:../../os/rt/src/chevents.c ****  *
 205:../../os/rt/src/chevents.c ****  * @api
 206:../../os/rt/src/chevents.c ****  */
 207:../../os/rt/src/chevents.c **** eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 282               		.loc 1 207 0
 283               		.cfi_startproc
 284               	.LVL13:
 285               	/* prologue: function */
 286               	/* frame size = 0 */
 287               	/* stack size = 0 */
 288               	.L__stack_usage = 0
 289               	.LBB186:
 290               	.LBB187:
 291               	.LBB188:
 430:../../os/common/ports/AVR/chcore.h **** }
 292               		.loc 3 430 0
 293               	/* #APP */
 294               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 295 0000 F894      		cli
 296               	 ;  0 "" 2
 297               	.LVL14:
 298               	/* #NOAPP */
 299               	.LBE188:
 300               	.LBE187:
 301               	.LBE186:
 302               	.LBB189:
 303               	.LBB190:
 304               	.LBB191:
 305               	.LBB192:
 306               		.loc 2 343 0
 307 0002 E091 0000 		lds r30,ch0+5
 308 0006 F091 0000 		lds r31,ch0+5+1
 309               	.LBE192:
 310               	.LBE191:
 193:../../os/rt/src/chevents.c ****   currtp->epending &= ~events;
 311               		.loc 1 193 0
 312 000a 228D      		ldd r18,Z+26
 313               	.LVL15:
 194:../../os/rt/src/chevents.c **** 
 314               		.loc 1 194 0
 315 000c 982F      		mov r25,r24
 316 000e 9095      		com r25
 317 0010 9223      		and r25,r18
 318 0012 928F      		std Z+26,r25
 319               	.LVL16:
 320               	.LBE190:
 321               	.LBE189:
 322               	.LBB193:
 323               	.LBB194:
 324               	.LBB195:
 325               	.LBB196:
 326               		.loc 3 440 0
 327               	/* #APP */
 328               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 329 0014 7894      		sei
 330               	 ;  0 "" 2
 331               	/* #NOAPP */
 332               	.LBE196:
 333               	.LBE195:
 334               	.LBE194:
 335               	.LBE193:
 208:../../os/rt/src/chevents.c ****   eventmask_t m;
 209:../../os/rt/src/chevents.c **** 
 210:../../os/rt/src/chevents.c ****   chSysLock();
 211:../../os/rt/src/chevents.c ****   m = chEvtGetAndClearEventsI(events);
 212:../../os/rt/src/chevents.c ****   chSysUnlock();
 213:../../os/rt/src/chevents.c **** 
 214:../../os/rt/src/chevents.c ****   return m;
 215:../../os/rt/src/chevents.c **** }
 336               		.loc 1 215 0
 337 0016 8223      		and r24,r18
 338               	.LVL17:
 339               	/* epilogue start */
 340 0018 0895      		ret
 341               		.cfi_endproc
 342               	.LFE194:
 344               		.section	.text.chEvtAddEvents,"ax",@progbits
 345               	.global	chEvtAddEvents
 347               	chEvtAddEvents:
 348               	.LFB195:
 216:../../os/rt/src/chevents.c **** 
 217:../../os/rt/src/chevents.c **** /**
 218:../../os/rt/src/chevents.c ****  * @brief   Adds (OR) a set of events to the current thread, this is
 219:../../os/rt/src/chevents.c ****  *          @b much faster than using @p chEvtBroadcast() or @p chEvtSignal().
 220:../../os/rt/src/chevents.c ****  *
 221:../../os/rt/src/chevents.c ****  * @param[in] events    the events to be added
 222:../../os/rt/src/chevents.c ****  * @return              The mask of currently pending events.
 223:../../os/rt/src/chevents.c ****  *
 224:../../os/rt/src/chevents.c ****  * @api
 225:../../os/rt/src/chevents.c ****  */
 226:../../os/rt/src/chevents.c **** eventmask_t chEvtAddEvents(eventmask_t events) {
 349               		.loc 1 226 0
 350               		.cfi_startproc
 351               	.LVL18:
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 0 */
 355               	.L__stack_usage = 0
 356               	.LBB197:
 357               	.LBB198:
 358               	.LBB199:
 430:../../os/common/ports/AVR/chcore.h **** }
 359               		.loc 3 430 0
 360               	/* #APP */
 361               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 362 0000 F894      		cli
 363               	 ;  0 "" 2
 364               	.LVL19:
 365               	/* #NOAPP */
 366               	.LBE199:
 367               	.LBE198:
 368               	.LBE197:
 369               	.LBB200:
 370               	.LBB201:
 371               		.file 4 "../../os/rt/include/chevents.h"
   1:../../os/rt/include/chevents.h **** /*
   2:../../os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/rt/include/chevents.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/rt/include/chevents.h **** 
   5:../../os/rt/include/chevents.h ****     This file is part of ChibiOS.
   6:../../os/rt/include/chevents.h **** 
   7:../../os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/rt/include/chevents.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/rt/include/chevents.h **** 
  11:../../os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:../../os/rt/include/chevents.h **** 
  16:../../os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:../../os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/rt/include/chevents.h **** */
  19:../../os/rt/include/chevents.h **** /*
  20:../../os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../os/rt/include/chevents.h ****  */
  22:../../os/rt/include/chevents.h **** 
  23:../../os/rt/include/chevents.h **** /**
  24:../../os/rt/include/chevents.h ****  * @file    rt/include/chevents.h
  25:../../os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:../../os/rt/include/chevents.h ****  *
  27:../../os/rt/include/chevents.h ****  * @addtogroup events
  28:../../os/rt/include/chevents.h ****  * @{
  29:../../os/rt/include/chevents.h ****  */
  30:../../os/rt/include/chevents.h **** 
  31:../../os/rt/include/chevents.h **** #ifndef CHEVENTS_H
  32:../../os/rt/include/chevents.h **** #define CHEVENTS_H
  33:../../os/rt/include/chevents.h **** 
  34:../../os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:../../os/rt/include/chevents.h **** 
  36:../../os/rt/include/chevents.h **** /*===========================================================================*/
  37:../../os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:../../os/rt/include/chevents.h **** /*===========================================================================*/
  39:../../os/rt/include/chevents.h **** 
  40:../../os/rt/include/chevents.h **** /*===========================================================================*/
  41:../../os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:../../os/rt/include/chevents.h **** /*===========================================================================*/
  43:../../os/rt/include/chevents.h **** 
  44:../../os/rt/include/chevents.h **** /*===========================================================================*/
  45:../../os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:../../os/rt/include/chevents.h **** /*===========================================================================*/
  47:../../os/rt/include/chevents.h **** 
  48:../../os/rt/include/chevents.h **** /*===========================================================================*/
  49:../../os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:../../os/rt/include/chevents.h **** /*===========================================================================*/
  51:../../os/rt/include/chevents.h **** 
  52:../../os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  53:../../os/rt/include/chevents.h **** 
  54:../../os/rt/include/chevents.h **** /**
  55:../../os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  56:../../os/rt/include/chevents.h ****  */
  57:../../os/rt/include/chevents.h **** struct event_listener {
  58:../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief Next Event Listener
  59:../../os/rt/include/chevents.h ****                                                     registered on the event
  60:../../os/rt/include/chevents.h ****                                                     source.                 */
  61:../../os/rt/include/chevents.h ****   thread_t              *listener;      /**< @brief Thread interested in the
  62:../../os/rt/include/chevents.h ****                                                     event source.           */
  63:../../os/rt/include/chevents.h ****   eventmask_t           events;         /**< @brief Events to be set in
  64:../../os/rt/include/chevents.h ****                                                     the listening thread.   */
  65:../../os/rt/include/chevents.h ****   eventflags_t          flags;          /**< @brief Flags added to the listener
  66:../../os/rt/include/chevents.h ****                                                     by the event source.    */
  67:../../os/rt/include/chevents.h ****   eventflags_t          wflags;         /**< @brief Flags that this listener
  68:../../os/rt/include/chevents.h ****                                                     interested in.          */
  69:../../os/rt/include/chevents.h **** };
  70:../../os/rt/include/chevents.h **** 
  71:../../os/rt/include/chevents.h **** /**
  72:../../os/rt/include/chevents.h ****  * @brief   Event Source structure.
  73:../../os/rt/include/chevents.h ****  */
  74:../../os/rt/include/chevents.h **** typedef struct event_source {
  75:../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief First Event Listener
  76:../../os/rt/include/chevents.h ****                                                     registered on the Event
  77:../../os/rt/include/chevents.h ****                                                     Source.                 */
  78:../../os/rt/include/chevents.h **** } event_source_t;
  79:../../os/rt/include/chevents.h **** 
  80:../../os/rt/include/chevents.h **** /**
  81:../../os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  82:../../os/rt/include/chevents.h ****  */
  83:../../os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  84:../../os/rt/include/chevents.h **** 
  85:../../os/rt/include/chevents.h **** /*===========================================================================*/
  86:../../os/rt/include/chevents.h **** /* Module macros.                                                            */
  87:../../os/rt/include/chevents.h **** /*===========================================================================*/
  88:../../os/rt/include/chevents.h **** 
  89:../../os/rt/include/chevents.h **** /**
  90:../../os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  91:../../os/rt/include/chevents.h ****  */
  92:../../os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  93:../../os/rt/include/chevents.h **** 
  94:../../os/rt/include/chevents.h **** /**
  95:../../os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  96:../../os/rt/include/chevents.h ****  */
  97:../../os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
  98:../../os/rt/include/chevents.h **** 
  99:../../os/rt/include/chevents.h **** /**
 100:../../os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 101:../../os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 102:../../os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 103:../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 104:../../os/rt/include/chevents.h ****  */
 105:../../os/rt/include/chevents.h **** #define __EVENTSOURCE_DATA(name) {(event_listener_t *)(&name)}
 106:../../os/rt/include/chevents.h **** 
 107:../../os/rt/include/chevents.h **** /**
 108:../../os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 109:../../os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 110:../../os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 111:../../os/rt/include/chevents.h ****  *
 112:../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 113:../../os/rt/include/chevents.h ****  */
 114:../../os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = __EVENTSOURCE_DATA(name)
 115:../../os/rt/include/chevents.h **** 
 116:../../os/rt/include/chevents.h **** /*===========================================================================*/
 117:../../os/rt/include/chevents.h **** /* External declarations.                                                    */
 118:../../os/rt/include/chevents.h **** /*===========================================================================*/
 119:../../os/rt/include/chevents.h **** 
 120:../../os/rt/include/chevents.h **** #ifdef __cplusplus
 121:../../os/rt/include/chevents.h **** extern "C" {
 122:../../os/rt/include/chevents.h **** #endif
 123:../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlagsI(event_source_t *esp,
 124:../../os/rt/include/chevents.h ****                                    event_listener_t *elp,
 125:../../os/rt/include/chevents.h ****                                    eventmask_t events,
 126:../../os/rt/include/chevents.h ****                                    eventflags_t wflags);
 127:../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 128:../../os/rt/include/chevents.h ****                                   event_listener_t *elp,
 129:../../os/rt/include/chevents.h ****                                   eventmask_t events,
 130:../../os/rt/include/chevents.h ****                                   eventflags_t wflags);
 131:../../os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 132:../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEventsI(eventmask_t events);
 133:../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 134:../../os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 135:../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 136:../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 137:../../os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 138:../../os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 139:../../os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 140:../../os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 141:../../os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 142:../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 143:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 144:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 145:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 146:../../os/rt/include/chevents.h **** #endif
 147:../../os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 148:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout);
 149:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout);
 150:../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout);
 151:../../os/rt/include/chevents.h **** #endif
 152:../../os/rt/include/chevents.h **** #ifdef __cplusplus
 153:../../os/rt/include/chevents.h **** }
 154:../../os/rt/include/chevents.h **** #endif
 155:../../os/rt/include/chevents.h **** 
 156:../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 157:../../os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 158:../../os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 159:../../os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 160:../../os/rt/include/chevents.h **** #endif
 161:../../os/rt/include/chevents.h **** 
 162:../../os/rt/include/chevents.h **** /*===========================================================================*/
 163:../../os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 164:../../os/rt/include/chevents.h **** /*===========================================================================*/
 165:../../os/rt/include/chevents.h **** 
 166:../../os/rt/include/chevents.h **** /**
 167:../../os/rt/include/chevents.h ****  * @brief   Initializes an Event Source.
 168:../../os/rt/include/chevents.h ****  * @note    This function can be invoked before the kernel is initialized
 169:../../os/rt/include/chevents.h ****  *          because it just prepares a @p event_source_t structure.
 170:../../os/rt/include/chevents.h ****  *
 171:../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 172:../../os/rt/include/chevents.h ****  *
 173:../../os/rt/include/chevents.h ****  * @init
 174:../../os/rt/include/chevents.h ****  */
 175:../../os/rt/include/chevents.h **** static inline void chEvtObjectInit(event_source_t *esp) {
 176:../../os/rt/include/chevents.h **** 
 177:../../os/rt/include/chevents.h ****   esp->next = (event_listener_t *)esp;
 178:../../os/rt/include/chevents.h **** }
 179:../../os/rt/include/chevents.h **** 
 180:../../os/rt/include/chevents.h **** /**
 181:../../os/rt/include/chevents.h ****  * @brief   Registers an Event Listener on an Event Source.
 182:../../os/rt/include/chevents.h ****  * @details Once a thread has registered as listener on an event source it
 183:../../os/rt/include/chevents.h ****  *          will be notified of all events broadcasted there.
 184:../../os/rt/include/chevents.h ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
 185:../../os/rt/include/chevents.h ****  *          different threads.
 186:../../os/rt/include/chevents.h ****  *
 187:../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 188:../../os/rt/include/chevents.h ****  * @param[out] elp      pointer to the @p event_listener_t structure
 189:../../os/rt/include/chevents.h ****  * @param[in] events    the mask of events to be ORed to the thread when
 190:../../os/rt/include/chevents.h ****  *                      the event source is broadcasted
 191:../../os/rt/include/chevents.h ****  *
 192:../../os/rt/include/chevents.h ****  * @api
 193:../../os/rt/include/chevents.h ****  */
 194:../../os/rt/include/chevents.h **** static inline void chEvtRegisterMask(event_source_t *esp,
 195:../../os/rt/include/chevents.h ****                                      event_listener_t *elp,
 196:../../os/rt/include/chevents.h ****                                      eventmask_t events) {
 197:../../os/rt/include/chevents.h **** 
 198:../../os/rt/include/chevents.h ****   chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 199:../../os/rt/include/chevents.h **** }
 200:../../os/rt/include/chevents.h **** 
 201:../../os/rt/include/chevents.h **** /**
 202:../../os/rt/include/chevents.h ****  * @brief   Registers an Event Listener on an Event Source.
 203:../../os/rt/include/chevents.h ****  * @note    Multiple Event Listeners can use the same event identifier, the
 204:../../os/rt/include/chevents.h ****  *          listener will share the callback function.
 205:../../os/rt/include/chevents.h ****  *
 206:../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the  @p event_source_t structure
 207:../../os/rt/include/chevents.h ****  * @param[out] elp      pointer to the @p event_listener_t structure
 208:../../os/rt/include/chevents.h ****  * @param[in] event     numeric identifier assigned to the Event Listener.
 209:../../os/rt/include/chevents.h ****  *                      The value must range between zero and the size, in bit,
 210:../../os/rt/include/chevents.h ****  *                      of the @p eventmask_t type minus one.
 211:../../os/rt/include/chevents.h ****  *
 212:../../os/rt/include/chevents.h ****  * @api
 213:../../os/rt/include/chevents.h ****  */
 214:../../os/rt/include/chevents.h **** static inline void chEvtRegister(event_source_t *esp,
 215:../../os/rt/include/chevents.h ****                                  event_listener_t *elp,
 216:../../os/rt/include/chevents.h ****                                  eventid_t event) {
 217:../../os/rt/include/chevents.h **** 
 218:../../os/rt/include/chevents.h ****   chEvtRegisterMask(esp, elp, EVENT_MASK(event));
 219:../../os/rt/include/chevents.h **** }
 220:../../os/rt/include/chevents.h **** 
 221:../../os/rt/include/chevents.h **** /**
 222:../../os/rt/include/chevents.h ****  * @brief   Verifies if there is at least one @p event_listener_t registered.
 223:../../os/rt/include/chevents.h ****  *
 224:../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 225:../../os/rt/include/chevents.h ****  * @return              The event source status.
 226:../../os/rt/include/chevents.h ****  *
 227:../../os/rt/include/chevents.h ****  * @iclass
 228:../../os/rt/include/chevents.h ****  */
 229:../../os/rt/include/chevents.h **** static inline bool chEvtIsListeningI(event_source_t *esp) {
 230:../../os/rt/include/chevents.h **** 
 231:../../os/rt/include/chevents.h ****   return (bool)(esp != (event_source_t *)esp->next);
 232:../../os/rt/include/chevents.h **** }
 233:../../os/rt/include/chevents.h **** 
 234:../../os/rt/include/chevents.h **** /**
 235:../../os/rt/include/chevents.h ****  * @brief   Signals all the Event Listeners registered on the specified Event
 236:../../os/rt/include/chevents.h ****  *          Source.
 237:../../os/rt/include/chevents.h ****  *
 238:../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 239:../../os/rt/include/chevents.h ****  *
 240:../../os/rt/include/chevents.h ****  * @api
 241:../../os/rt/include/chevents.h ****  */
 242:../../os/rt/include/chevents.h **** static inline void chEvtBroadcast(event_source_t *esp) {
 243:../../os/rt/include/chevents.h **** 
 244:../../os/rt/include/chevents.h ****   chEvtBroadcastFlags(esp, (eventflags_t)0);
 245:../../os/rt/include/chevents.h **** }
 246:../../os/rt/include/chevents.h **** 
 247:../../os/rt/include/chevents.h **** /**
 248:../../os/rt/include/chevents.h ****  * @brief   Signals all the Event Listeners registered on the specified Event
 249:../../os/rt/include/chevents.h ****  *          Source.
 250:../../os/rt/include/chevents.h ****  * @post    This function does not reschedule so a call to a rescheduling
 251:../../os/rt/include/chevents.h ****  *          function must be performed before unlocking the kernel. Note that
 252:../../os/rt/include/chevents.h ****  *          interrupt handlers always reschedule on exit so an explicit
 253:../../os/rt/include/chevents.h ****  *          reschedule must not be performed in ISRs.
 254:../../os/rt/include/chevents.h ****  *
 255:../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 256:../../os/rt/include/chevents.h ****  *
 257:../../os/rt/include/chevents.h ****  * @iclass
 258:../../os/rt/include/chevents.h ****  */
 259:../../os/rt/include/chevents.h **** static inline void chEvtBroadcastI(event_source_t *esp) {
 260:../../os/rt/include/chevents.h **** 
 261:../../os/rt/include/chevents.h ****   chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 262:../../os/rt/include/chevents.h **** }
 263:../../os/rt/include/chevents.h **** 
 264:../../os/rt/include/chevents.h **** /**
 265:../../os/rt/include/chevents.h ****  * @brief   Adds (OR) a set of events to the current thread, this is
 266:../../os/rt/include/chevents.h ****  *          @b much faster than using @p chEvtBroadcast() or @p chEvtSignal().
 267:../../os/rt/include/chevents.h ****  *
 268:../../os/rt/include/chevents.h ****  * @param[in] events    the events to be added
 269:../../os/rt/include/chevents.h ****  * @return              The mask of currently pending events.
 270:../../os/rt/include/chevents.h ****  *
 271:../../os/rt/include/chevents.h ****  * @iclass
 272:../../os/rt/include/chevents.h ****  */
 273:../../os/rt/include/chevents.h **** static inline eventmask_t chEvtAddEventsI(eventmask_t events) {
 274:../../os/rt/include/chevents.h **** 
 275:../../os/rt/include/chevents.h ****   return __sch_get_currthread()->epending |= events;
 372               		.loc 4 275 0
 373 0002 E091 0000 		lds r30,ch0+5
 374 0006 F091 0000 		lds r31,ch0+5+1
 375 000a 928D      		ldd r25,Z+26
 376 000c 892B      		or r24,r25
 377               	.LVL20:
 378 000e 828F      		std Z+26,r24
 379               	.LVL21:
 380               	.LBE201:
 381               	.LBE200:
 382               	.LBB202:
 383               	.LBB203:
 384               	.LBB204:
 385               	.LBB205:
 386               		.loc 3 440 0
 387               	/* #APP */
 388               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 389 0010 7894      		sei
 390               	 ;  0 "" 2
 391               	/* epilogue start */
 392               	/* #NOAPP */
 393               	.LBE205:
 394               	.LBE204:
 395               	.LBE203:
 396               	.LBE202:
 227:../../os/rt/src/chevents.c ****   eventmask_t newevt;
 228:../../os/rt/src/chevents.c **** 
 229:../../os/rt/src/chevents.c ****   chSysLock();
 230:../../os/rt/src/chevents.c ****   newevt = chEvtAddEventsI(events);
 231:../../os/rt/src/chevents.c ****   chSysUnlock();
 232:../../os/rt/src/chevents.c **** 
 233:../../os/rt/src/chevents.c ****   return newevt;
 234:../../os/rt/src/chevents.c **** }
 397               		.loc 1 234 0
 398 0012 0895      		ret
 399               		.cfi_endproc
 400               	.LFE195:
 402               		.section	.text.chEvtGetAndClearFlagsI,"ax",@progbits
 403               	.global	chEvtGetAndClearFlagsI
 405               	chEvtGetAndClearFlagsI:
 406               	.LFB196:
 235:../../os/rt/src/chevents.c **** 
 236:../../os/rt/src/chevents.c **** /**
 237:../../os/rt/src/chevents.c ****  * @brief   Returns the unmasked flags associated to an @p event_listener_t.
 238:../../os/rt/src/chevents.c ****  * @details The flags are returned and the @p event_listener_t flags mask is
 239:../../os/rt/src/chevents.c ****  *          cleared.
 240:../../os/rt/src/chevents.c ****  *
 241:../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 242:../../os/rt/src/chevents.c ****  * @return              The flags added to the listener by the associated
 243:../../os/rt/src/chevents.c ****  *                      event source.
 244:../../os/rt/src/chevents.c ****  *
 245:../../os/rt/src/chevents.c ****  * @iclass
 246:../../os/rt/src/chevents.c ****  */
 247:../../os/rt/src/chevents.c **** eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp) {
 407               		.loc 1 247 0
 408               		.cfi_startproc
 409               	.LVL22:
 410               	/* prologue: function */
 411               	/* frame size = 0 */
 412               	/* stack size = 0 */
 413               	.L__stack_usage = 0
 414 0000 FC01      		movw r30,r24
 248:../../os/rt/src/chevents.c ****   eventflags_t flags;
 249:../../os/rt/src/chevents.c **** 
 250:../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 251:../../os/rt/src/chevents.c ****   chDbgCheck(elp != NULL);
 252:../../os/rt/src/chevents.c **** 
 253:../../os/rt/src/chevents.c ****   flags = elp->flags;
 415               		.loc 1 253 0
 416 0002 9581      		ldd r25,Z+5
 417               	.LVL23:
 254:../../os/rt/src/chevents.c ****   elp->flags = (eventflags_t)0;
 418               		.loc 1 254 0
 419 0004 1582      		std Z+5,__zero_reg__
 255:../../os/rt/src/chevents.c **** 
 256:../../os/rt/src/chevents.c ****   return flags & elp->wflags;
 420               		.loc 1 256 0
 421 0006 8681      		ldd r24,Z+6
 422               	.LVL24:
 257:../../os/rt/src/chevents.c **** }
 423               		.loc 1 257 0
 424 0008 8923      		and r24,r25
 425               	/* epilogue start */
 426 000a 0895      		ret
 427               		.cfi_endproc
 428               	.LFE196:
 430               		.section	.text.chEvtGetAndClearFlags,"ax",@progbits
 431               	.global	chEvtGetAndClearFlags
 433               	chEvtGetAndClearFlags:
 434               	.LFB197:
 258:../../os/rt/src/chevents.c **** 
 259:../../os/rt/src/chevents.c **** /**
 260:../../os/rt/src/chevents.c ****  * @brief   Returns the flags associated to an @p event_listener_t.
 261:../../os/rt/src/chevents.c ****  * @details The flags are returned and the @p event_listener_t flags mask is
 262:../../os/rt/src/chevents.c ****  *          cleared.
 263:../../os/rt/src/chevents.c ****  *
 264:../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 265:../../os/rt/src/chevents.c ****  * @return              The flags added to the listener by the associated
 266:../../os/rt/src/chevents.c ****  *                      event source.
 267:../../os/rt/src/chevents.c ****  *
 268:../../os/rt/src/chevents.c ****  * @api
 269:../../os/rt/src/chevents.c ****  */
 270:../../os/rt/src/chevents.c **** eventflags_t chEvtGetAndClearFlags(event_listener_t *elp) {
 435               		.loc 1 270 0
 436               		.cfi_startproc
 437               	.LVL25:
 438               	/* prologue: function */
 439               	/* frame size = 0 */
 440               	/* stack size = 0 */
 441               	.L__stack_usage = 0
 442 0000 FC01      		movw r30,r24
 443               	.LBB206:
 444               	.LBB207:
 445               	.LBB208:
 430:../../os/common/ports/AVR/chcore.h **** }
 446               		.loc 3 430 0
 447               	/* #APP */
 448               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 449 0002 F894      		cli
 450               	 ;  0 "" 2
 451               	/* #NOAPP */
 452               	.LBE208:
 453               	.LBE207:
 454               	.LBE206:
 271:../../os/rt/src/chevents.c ****   eventflags_t flags;
 272:../../os/rt/src/chevents.c **** 
 273:../../os/rt/src/chevents.c ****   chDbgCheck(elp != NULL);
 274:../../os/rt/src/chevents.c **** 
 275:../../os/rt/src/chevents.c ****   chSysLock();
 276:../../os/rt/src/chevents.c ****   flags = elp->flags;
 455               		.loc 1 276 0
 456 0004 9581      		ldd r25,Z+5
 457               	.LVL26:
 277:../../os/rt/src/chevents.c ****   elp->flags = (eventflags_t)0;
 458               		.loc 1 277 0
 459 0006 1582      		std Z+5,__zero_reg__
 460               	.LBB209:
 461               	.LBB210:
 462               	.LBB211:
 463               	.LBB212:
 464               		.loc 3 440 0
 465               	/* #APP */
 466               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 467 0008 7894      		sei
 468               	 ;  0 "" 2
 469               	/* #NOAPP */
 470               	.LBE212:
 471               	.LBE211:
 472               	.LBE210:
 473               	.LBE209:
 278:../../os/rt/src/chevents.c ****   chSysUnlock();
 279:../../os/rt/src/chevents.c **** 
 280:../../os/rt/src/chevents.c ****   return flags & elp->wflags;
 474               		.loc 1 280 0
 475 000a 8681      		ldd r24,Z+6
 476               	.LVL27:
 281:../../os/rt/src/chevents.c **** }
 477               		.loc 1 281 0
 478 000c 8923      		and r24,r25
 479               	/* epilogue start */
 480 000e 0895      		ret
 481               		.cfi_endproc
 482               	.LFE197:
 484               		.section	.text.chEvtSignalI,"ax",@progbits
 485               	.global	chEvtSignalI
 487               	chEvtSignalI:
 488               	.LFB198:
 282:../../os/rt/src/chevents.c **** 
 283:../../os/rt/src/chevents.c **** /**
 284:../../os/rt/src/chevents.c ****  * @brief   Adds a set of event flags directly to the specified @p thread_t.
 285:../../os/rt/src/chevents.c ****  * @post    This function does not reschedule so a call to a rescheduling
 286:../../os/rt/src/chevents.c ****  *          function must be performed before unlocking the kernel. Note that
 287:../../os/rt/src/chevents.c ****  *          interrupt handlers always reschedule on exit so an explicit
 288:../../os/rt/src/chevents.c ****  *          reschedule must not be performed in ISRs.
 289:../../os/rt/src/chevents.c ****  *
 290:../../os/rt/src/chevents.c ****  * @param[in] tp        the thread to be signaled
 291:../../os/rt/src/chevents.c ****  * @param[in] events    the events set to be ORed
 292:../../os/rt/src/chevents.c ****  *
 293:../../os/rt/src/chevents.c ****  * @iclass
 294:../../os/rt/src/chevents.c ****  */
 295:../../os/rt/src/chevents.c **** void chEvtSignalI(thread_t *tp, eventmask_t events) {
 489               		.loc 1 295 0
 490               		.cfi_startproc
 491               	.LVL28:
 492               	/* prologue: function */
 493               	/* frame size = 0 */
 494               	/* stack size = 0 */
 495               	.L__stack_usage = 0
 496 0000 FC01      		movw r30,r24
 296:../../os/rt/src/chevents.c **** 
 297:../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 298:../../os/rt/src/chevents.c ****   chDbgCheck(tp != NULL);
 299:../../os/rt/src/chevents.c **** 
 300:../../os/rt/src/chevents.c ****   tp->epending |= events;
 497               		.loc 1 300 0
 498 0002 828D      		ldd r24,Z+26
 499               	.LVL29:
 500 0004 682B      		or r22,r24
 501               	.LVL30:
 502 0006 628F      		std Z+26,r22
 301:../../os/rt/src/chevents.c ****   /* Test on the AND/OR conditions wait states.*/
 302:../../os/rt/src/chevents.c ****   if (((tp->state == CH_STATE_WTOREVT) &&
 503               		.loc 1 302 0
 504 0008 8785      		ldd r24,Z+15
 505 000a 8A30      		cpi r24,lo8(10)
 506 000c 01F0      		breq .L19
 303:../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 507               		.loc 1 303 0
 508 000e 8B30      		cpi r24,lo8(11)
 509 0010 01F0      		breq .L20
 510               	.L15:
 511               	/* epilogue start */
 304:../../os/rt/src/chevents.c ****       ((tp->state == CH_STATE_WTANDEVT) &&
 305:../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 306:../../os/rt/src/chevents.c ****     tp->u.rdymsg = MSG_OK;
 307:../../os/rt/src/chevents.c ****     (void) chSchReadyI(tp);
 308:../../os/rt/src/chevents.c ****   }
 309:../../os/rt/src/chevents.c **** }
 512               		.loc 1 309 0
 513 0012 0895      		ret
 514               	.L20:
 305:../../os/rt/src/chevents.c ****     tp->u.rdymsg = MSG_OK;
 515               		.loc 1 305 0
 516 0014 8289      		ldd r24,Z+18
 517 0016 6823      		and r22,r24
 304:../../os/rt/src/chevents.c ****       ((tp->state == CH_STATE_WTANDEVT) &&
 518               		.loc 1 304 0
 519 0018 8613      		cpse r24,r22
 520 001a 00C0      		rjmp .L15
 521               	.L17:
 306:../../os/rt/src/chevents.c ****     (void) chSchReadyI(tp);
 522               		.loc 1 306 0
 523 001c 138A      		std Z+19,__zero_reg__
 524 001e 128A      		std Z+18,__zero_reg__
 307:../../os/rt/src/chevents.c ****   }
 525               		.loc 1 307 0
 526 0020 CF01      		movw r24,r30
 527 0022 0C94 0000 		jmp chSchReadyI
 528               	.LVL31:
 529               	.L19:
 303:../../os/rt/src/chevents.c ****       ((tp->state == CH_STATE_WTANDEVT) &&
 530               		.loc 1 303 0 discriminator 1
 531 0026 8289      		ldd r24,Z+18
 532 0028 6823      		and r22,r24
 302:../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 533               		.loc 1 302 0 discriminator 1
 534 002a 01F4      		brne .L17
 535 002c 0895      		ret
 536               		.cfi_endproc
 537               	.LFE198:
 539               		.section	.text.chEvtSignal,"ax",@progbits
 540               	.global	chEvtSignal
 542               	chEvtSignal:
 543               	.LFB199:
 310:../../os/rt/src/chevents.c **** 
 311:../../os/rt/src/chevents.c **** /**
 312:../../os/rt/src/chevents.c ****  * @brief   Adds a set of event flags directly to the specified @p thread_t.
 313:../../os/rt/src/chevents.c ****  *
 314:../../os/rt/src/chevents.c ****  * @param[in] tp        the thread to be signaled
 315:../../os/rt/src/chevents.c ****  * @param[in] events    the events set to be ORed
 316:../../os/rt/src/chevents.c ****  *
 317:../../os/rt/src/chevents.c ****  * @api
 318:../../os/rt/src/chevents.c ****  */
 319:../../os/rt/src/chevents.c **** void chEvtSignal(thread_t *tp, eventmask_t events) {
 544               		.loc 1 319 0
 545               		.cfi_startproc
 546               	.LVL32:
 547               	/* prologue: function */
 548               	/* frame size = 0 */
 549               	/* stack size = 0 */
 550               	.L__stack_usage = 0
 551               	.LBB213:
 552               	.LBB214:
 553               	.LBB215:
 430:../../os/common/ports/AVR/chcore.h **** }
 554               		.loc 3 430 0
 555               	/* #APP */
 556               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 557 0000 F894      		cli
 558               	 ;  0 "" 2
 559               	/* #NOAPP */
 560               	.LBE215:
 561               	.LBE214:
 562               	.LBE213:
 320:../../os/rt/src/chevents.c **** 
 321:../../os/rt/src/chevents.c ****   chDbgCheck(tp != NULL);
 322:../../os/rt/src/chevents.c **** 
 323:../../os/rt/src/chevents.c ****   chSysLock();
 324:../../os/rt/src/chevents.c ****   chEvtSignalI(tp, events);
 563               		.loc 1 324 0
 564 0002 0E94 0000 		call chEvtSignalI
 565               	.LVL33:
 325:../../os/rt/src/chevents.c ****   chSchRescheduleS();
 566               		.loc 1 325 0
 567 0006 0E94 0000 		call chSchRescheduleS
 568               	.LVL34:
 569               	.LBB216:
 570               	.LBB217:
 571               	.LBB218:
 572               	.LBB219:
 573               		.loc 3 440 0
 574               	/* #APP */
 575               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 576 000a 7894      		sei
 577               	 ;  0 "" 2
 578               	/* epilogue start */
 579               	/* #NOAPP */
 580               	.LBE219:
 581               	.LBE218:
 582               	.LBE217:
 583               	.LBE216:
 326:../../os/rt/src/chevents.c ****   chSysUnlock();
 327:../../os/rt/src/chevents.c **** }
 584               		.loc 1 327 0
 585 000c 0895      		ret
 586               		.cfi_endproc
 587               	.LFE199:
 589               		.section	.text.chEvtBroadcastFlagsI,"ax",@progbits
 590               	.global	chEvtBroadcastFlagsI
 592               	chEvtBroadcastFlagsI:
 593               	.LFB200:
 328:../../os/rt/src/chevents.c **** 
 329:../../os/rt/src/chevents.c **** /**
 330:../../os/rt/src/chevents.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 331:../../os/rt/src/chevents.c ****  *          Source.
 332:../../os/rt/src/chevents.c ****  * @details This function variants ORs the specified event flags to all the
 333:../../os/rt/src/chevents.c ****  *          threads registered on the @p event_source_t in addition to the
 334:../../os/rt/src/chevents.c ****  *          event flags specified by the threads themselves in the
 335:../../os/rt/src/chevents.c ****  *          @p event_listener_t objects.
 336:../../os/rt/src/chevents.c ****  * @post    This function does not reschedule so a call to a rescheduling
 337:../../os/rt/src/chevents.c ****  *          function must be performed before unlocking the kernel. Note that
 338:../../os/rt/src/chevents.c ****  *          interrupt handlers always reschedule on exit so an explicit
 339:../../os/rt/src/chevents.c ****  *          reschedule must not be performed in ISRs.
 340:../../os/rt/src/chevents.c ****  *
 341:../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the @p event_source_t structure
 342:../../os/rt/src/chevents.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 343:../../os/rt/src/chevents.c ****  *
 344:../../os/rt/src/chevents.c ****  * @iclass
 345:../../os/rt/src/chevents.c ****  */
 346:../../os/rt/src/chevents.c **** void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 594               		.loc 1 346 0
 595               		.cfi_startproc
 596               	.LVL35:
 597 0000 EF92      		push r14
 598               	.LCFI4:
 599               		.cfi_def_cfa_offset 3
 600               		.cfi_offset 14, -2
 601 0002 FF92      		push r15
 602               	.LCFI5:
 603               		.cfi_def_cfa_offset 4
 604               		.cfi_offset 15, -3
 605 0004 1F93      		push r17
 606               	.LCFI6:
 607               		.cfi_def_cfa_offset 5
 608               		.cfi_offset 17, -4
 609 0006 CF93      		push r28
 610               	.LCFI7:
 611               		.cfi_def_cfa_offset 6
 612               		.cfi_offset 28, -5
 613 0008 DF93      		push r29
 614               	.LCFI8:
 615               		.cfi_def_cfa_offset 7
 616               		.cfi_offset 29, -6
 617               	/* prologue: function */
 618               	/* frame size = 0 */
 619               	/* stack size = 5 */
 620               	.L__stack_usage = 5
 621 000a 7C01      		movw r14,r24
 622 000c 162F      		mov r17,r22
 347:../../os/rt/src/chevents.c ****   event_listener_t *elp;
 348:../../os/rt/src/chevents.c **** 
 349:../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 350:../../os/rt/src/chevents.c ****   chDbgCheck(esp != NULL);
 351:../../os/rt/src/chevents.c **** 
 352:../../os/rt/src/chevents.c ****   elp = esp->next;
 623               		.loc 1 352 0
 624 000e FC01      		movw r30,r24
 625 0010 C081      		ld r28,Z
 626 0012 D181      		ldd r29,Z+1
 627               	.LVL36:
 353:../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 354:../../os/rt/src/chevents.c ****   while (elp != (event_listener_t *)esp) {
 628               		.loc 1 354 0
 629 0014 8C17      		cp r24,r28
 630 0016 9D07      		cpc r25,r29
 631 0018 01F0      		breq .L22
 632               	.LVL37:
 633               	.L26:
 355:../../os/rt/src/chevents.c ****   /*lint -restore*/
 356:../../os/rt/src/chevents.c ****     elp->flags |= flags;
 634               		.loc 1 356 0
 635 001a 8D81      		ldd r24,Y+5
 636 001c 812B      		or r24,r17
 637 001e 8D83      		std Y+5,r24
 357:../../os/rt/src/chevents.c ****     /* When flags == 0 the thread will always be signaled because the
 358:../../os/rt/src/chevents.c ****        source does not emit any flag.*/
 359:../../os/rt/src/chevents.c ****     if ((flags == (eventflags_t)0) ||
 638               		.loc 1 359 0
 639 0020 1123      		tst r17
 640 0022 01F0      		breq .L24
 360:../../os/rt/src/chevents.c ****         ((flags & elp->wflags) != (eventflags_t)0)) {
 641               		.loc 1 360 0 discriminator 1
 642 0024 8E81      		ldd r24,Y+6
 643 0026 8123      		and r24,r17
 359:../../os/rt/src/chevents.c ****         ((flags & elp->wflags) != (eventflags_t)0)) {
 644               		.loc 1 359 0 discriminator 1
 645 0028 01F0      		breq .L25
 646               	.L24:
 361:../../os/rt/src/chevents.c ****       chEvtSignalI(elp->listener, elp->events);
 647               		.loc 1 361 0
 648 002a 6C81      		ldd r22,Y+4
 649 002c 8A81      		ldd r24,Y+2
 650 002e 9B81      		ldd r25,Y+3
 651 0030 0E94 0000 		call chEvtSignalI
 652               	.LVL38:
 653               	.L25:
 362:../../os/rt/src/chevents.c ****     }
 363:../../os/rt/src/chevents.c ****     elp = elp->next;
 654               		.loc 1 363 0
 655 0034 0990      		ld __tmp_reg__,Y+
 656 0036 D881      		ld r29,Y
 657 0038 C02D      		mov r28,__tmp_reg__
 658               	.LVL39:
 354:../../os/rt/src/chevents.c ****   /*lint -restore*/
 659               		.loc 1 354 0
 660 003a EC16      		cp r14,r28
 661 003c FD06      		cpc r15,r29
 662 003e 01F4      		brne .L26
 663               	.L22:
 664               	/* epilogue start */
 364:../../os/rt/src/chevents.c ****   }
 365:../../os/rt/src/chevents.c **** }
 665               		.loc 1 365 0
 666 0040 DF91      		pop r29
 667 0042 CF91      		pop r28
 668               	.LVL40:
 669 0044 1F91      		pop r17
 670               	.LVL41:
 671 0046 FF90      		pop r15
 672 0048 EF90      		pop r14
 673               	.LVL42:
 674 004a 0895      		ret
 675               		.cfi_endproc
 676               	.LFE200:
 678               		.section	.text.chEvtBroadcastFlags,"ax",@progbits
 679               	.global	chEvtBroadcastFlags
 681               	chEvtBroadcastFlags:
 682               	.LFB201:
 366:../../os/rt/src/chevents.c **** 
 367:../../os/rt/src/chevents.c **** /**
 368:../../os/rt/src/chevents.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 369:../../os/rt/src/chevents.c ****  *          Source.
 370:../../os/rt/src/chevents.c ****  * @details This function variants ORs the specified event flags to all the
 371:../../os/rt/src/chevents.c ****  *          threads registered on the @p event_source_t in addition to the
 372:../../os/rt/src/chevents.c ****  *          event flags specified by the threads themselves in the
 373:../../os/rt/src/chevents.c ****  *          @p event_listener_t objects.
 374:../../os/rt/src/chevents.c ****  *
 375:../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to the @p event_source_t structure
 376:../../os/rt/src/chevents.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 377:../../os/rt/src/chevents.c ****  *
 378:../../os/rt/src/chevents.c ****  * @api
 379:../../os/rt/src/chevents.c ****  */
 380:../../os/rt/src/chevents.c **** void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 683               		.loc 1 380 0
 684               		.cfi_startproc
 685               	.LVL43:
 686               	/* prologue: function */
 687               	/* frame size = 0 */
 688               	/* stack size = 0 */
 689               	.L__stack_usage = 0
 690               	.LBB220:
 691               	.LBB221:
 692               	.LBB222:
 430:../../os/common/ports/AVR/chcore.h **** }
 693               		.loc 3 430 0
 694               	/* #APP */
 695               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 696 0000 F894      		cli
 697               	 ;  0 "" 2
 698               	/* #NOAPP */
 699               	.LBE222:
 700               	.LBE221:
 701               	.LBE220:
 381:../../os/rt/src/chevents.c **** 
 382:../../os/rt/src/chevents.c ****   chSysLock();
 383:../../os/rt/src/chevents.c ****   chEvtBroadcastFlagsI(esp, flags);
 702               		.loc 1 383 0
 703 0002 0E94 0000 		call chEvtBroadcastFlagsI
 704               	.LVL44:
 384:../../os/rt/src/chevents.c ****   chSchRescheduleS();
 705               		.loc 1 384 0
 706 0006 0E94 0000 		call chSchRescheduleS
 707               	.LVL45:
 708               	.LBB223:
 709               	.LBB224:
 710               	.LBB225:
 711               	.LBB226:
 712               		.loc 3 440 0
 713               	/* #APP */
 714               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 715 000a 7894      		sei
 716               	 ;  0 "" 2
 717               	/* epilogue start */
 718               	/* #NOAPP */
 719               	.LBE226:
 720               	.LBE225:
 721               	.LBE224:
 722               	.LBE223:
 385:../../os/rt/src/chevents.c ****   chSysUnlock();
 386:../../os/rt/src/chevents.c **** }
 723               		.loc 1 386 0
 724 000c 0895      		ret
 725               		.cfi_endproc
 726               	.LFE201:
 728               		.section	.text.chEvtDispatch,"ax",@progbits
 729               	.global	chEvtDispatch
 731               	chEvtDispatch:
 732               	.LFB202:
 387:../../os/rt/src/chevents.c **** 
 388:../../os/rt/src/chevents.c **** /**
 389:../../os/rt/src/chevents.c ****  * @brief   Invokes the event handlers associated to an event flags mask.
 390:../../os/rt/src/chevents.c ****  *
 391:../../os/rt/src/chevents.c ****  * @param[in] events    mask of events to be dispatched
 392:../../os/rt/src/chevents.c ****  * @param[in] handlers  an array of @p evhandler_t. The array must have size
 393:../../os/rt/src/chevents.c ****  *                      equal to the number of bits in eventmask_t.
 394:../../os/rt/src/chevents.c ****  *
 395:../../os/rt/src/chevents.c ****  * @api
 396:../../os/rt/src/chevents.c ****  */
 397:../../os/rt/src/chevents.c **** void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 733               		.loc 1 397 0
 734               		.cfi_startproc
 735               	.LVL46:
 736 0000 AF92      		push r10
 737               	.LCFI9:
 738               		.cfi_def_cfa_offset 3
 739               		.cfi_offset 10, -2
 740 0002 BF92      		push r11
 741               	.LCFI10:
 742               		.cfi_def_cfa_offset 4
 743               		.cfi_offset 11, -3
 744 0004 CF92      		push r12
 745               	.LCFI11:
 746               		.cfi_def_cfa_offset 5
 747               		.cfi_offset 12, -4
 748 0006 DF92      		push r13
 749               	.LCFI12:
 750               		.cfi_def_cfa_offset 6
 751               		.cfi_offset 13, -5
 752 0008 EF92      		push r14
 753               	.LCFI13:
 754               		.cfi_def_cfa_offset 7
 755               		.cfi_offset 14, -6
 756 000a FF92      		push r15
 757               	.LCFI14:
 758               		.cfi_def_cfa_offset 8
 759               		.cfi_offset 15, -7
 760 000c 0F93      		push r16
 761               	.LCFI15:
 762               		.cfi_def_cfa_offset 9
 763               		.cfi_offset 16, -8
 764 000e 1F93      		push r17
 765               	.LCFI16:
 766               		.cfi_def_cfa_offset 10
 767               		.cfi_offset 17, -9
 768 0010 CF93      		push r28
 769               	.LCFI17:
 770               		.cfi_def_cfa_offset 11
 771               		.cfi_offset 28, -10
 772               	/* prologue: function */
 773               	/* frame size = 0 */
 774               	/* stack size = 9 */
 775               	.L__stack_usage = 9
 776 0012 C62F      		mov r28,r22
 777               	.LVL47:
 398:../../os/rt/src/chevents.c ****   eventid_t eid;
 399:../../os/rt/src/chevents.c **** 
 400:../../os/rt/src/chevents.c ****   chDbgCheck(handlers != NULL);
 401:../../os/rt/src/chevents.c **** 
 402:../../os/rt/src/chevents.c ****   eid = (eventid_t)0;
 403:../../os/rt/src/chevents.c ****   while (events != (eventmask_t)0) {
 778               		.loc 1 403 0
 779 0014 6623      		tst r22
 780 0016 01F0      		breq .L35
 781 0018 8C01      		movw r16,r24
 402:../../os/rt/src/chevents.c ****   while (events != (eventmask_t)0) {
 782               		.loc 1 402 0
 783 001a C12C      		mov r12,__zero_reg__
 784 001c D12C      		mov r13,__zero_reg__
 785 001e 7601      		movw r14,r12
 786 0020 462F      		mov r20,r22
 787 0022 50E0      		ldi r21,0
 404:../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 405:../../os/rt/src/chevents.c ****       chDbgAssert(handlers[eid] != NULL, "null handler");
 406:../../os/rt/src/chevents.c ****       events &= ~EVENT_MASK(eid);
 788               		.loc 1 406 0
 789 0024 AA24      		clr r10
 790 0026 A394      		inc r10
 791 0028 B12C      		mov r11,__zero_reg__
 792               	.LVL48:
 793               	.L37:
 404:../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 794               		.loc 1 404 0
 795 002a 9A01      		movw r18,r20
 796 002c 0C2C      		mov r0,r12
 797 002e 00C0      		rjmp 2f
 798               		1:
 799 0030 3595      		asr r19
 800 0032 2795      		ror r18
 801               		2:
 802 0034 0A94      		dec r0
 803 0036 02F4      		brpl 1b
 804 0038 20FF      		sbrs r18,0
 805 003a 00C0      		rjmp .L38
 806               		.loc 1 406 0
 807 003c 9501      		movw r18,r10
 808 003e 0C2C      		mov r0,r12
 809 0040 00C0      		rjmp 2f
 810               		1:
 811 0042 220F      		lsl r18
 812 0044 331F      		rol r19
 813               		2:
 814 0046 0A94      		dec r0
 815 0048 02F4      		brpl 1b
 816 004a C901      		movw r24,r18
 817 004c 8095      		com r24
 818 004e C823      		and r28,r24
 819               	.LVL49:
 407:../../os/rt/src/chevents.c ****       handlers[eid](eid);
 820               		.loc 1 407 0
 821 0050 D801      		movw r26,r16
 822 0052 ED91      		ld r30,X+
 823 0054 FD91      		ld r31,X+
 824 0056 8D01      		movw r16,r26
 825 0058 C701      		movw r24,r14
 826 005a B601      		movw r22,r12
 827 005c 0995      		icall
 828               	.LVL50:
 408:../../os/rt/src/chevents.c ****     }
 409:../../os/rt/src/chevents.c ****     eid++;
 829               		.loc 1 409 0
 830 005e BFEF      		ldi r27,-1
 831 0060 CB1A      		sub r12,r27
 832 0062 DB0A      		sbc r13,r27
 833 0064 EB0A      		sbc r14,r27
 834 0066 FB0A      		sbc r15,r27
 835               	.LVL51:
 403:../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 836               		.loc 1 403 0
 837 0068 CC23      		tst r28
 838 006a 01F0      		breq .L35
 839 006c 4C2F      		mov r20,r28
 840 006e 50E0      		ldi r21,0
 841 0070 00C0      		rjmp .L37
 842               	.LVL52:
 843               	.L35:
 844               	/* epilogue start */
 410:../../os/rt/src/chevents.c ****   }
 411:../../os/rt/src/chevents.c **** }
 845               		.loc 1 411 0
 846 0072 CF91      		pop r28
 847               	.LVL53:
 848 0074 1F91      		pop r17
 849 0076 0F91      		pop r16
 850 0078 FF90      		pop r15
 851 007a EF90      		pop r14
 852 007c DF90      		pop r13
 853 007e CF90      		pop r12
 854 0080 BF90      		pop r11
 855 0082 AF90      		pop r10
 856 0084 0895      		ret
 857               	.LVL54:
 858               	.L38:
 409:../../os/rt/src/chevents.c ****   }
 859               		.loc 1 409 0
 860 0086 2FEF      		ldi r18,-1
 861 0088 C21A      		sub r12,r18
 862 008a D20A      		sbc r13,r18
 863 008c E20A      		sbc r14,r18
 864 008e F20A      		sbc r15,r18
 865               	.LVL55:
 866 0090 0E5F      		subi r16,-2
 867 0092 1F4F      		sbci r17,-1
 868 0094 00C0      		rjmp .L37
 869               		.cfi_endproc
 870               	.LFE202:
 872               		.section	.text.chEvtWaitOne,"ax",@progbits
 873               	.global	chEvtWaitOne
 875               	chEvtWaitOne:
 876               	.LFB203:
 412:../../os/rt/src/chevents.c **** 
 413:../../os/rt/src/chevents.c **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) ||                                      \
 414:../../os/rt/src/chevents.c ****     (CH_CFG_USE_EVENTS_TIMEOUT == FALSE) ||                                 \
 415:../../os/rt/src/chevents.c ****     defined(__DOXYGEN__)
 416:../../os/rt/src/chevents.c **** /**
 417:../../os/rt/src/chevents.c ****  * @brief   Waits for exactly one of the specified events.
 418:../../os/rt/src/chevents.c ****  * @details The function waits for one event among those specified in
 419:../../os/rt/src/chevents.c ****  *          @p events to become pending then the event is cleared and returned.
 420:../../os/rt/src/chevents.c ****  * @note    One and only one event is served in the function, the one with the
 421:../../os/rt/src/chevents.c ****  *          lowest event id. The function is meant to be invoked into a loop in
 422:../../os/rt/src/chevents.c ****  *          order to serve all the pending events.<br>
 423:../../os/rt/src/chevents.c ****  *          This means that Event Listeners with a lower event identifier have
 424:../../os/rt/src/chevents.c ****  *          an higher priority.
 425:../../os/rt/src/chevents.c ****  *
 426:../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 427:../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 428:../../os/rt/src/chevents.c ****  * @return              The mask of the lowest event id served and cleared.
 429:../../os/rt/src/chevents.c ****  *
 430:../../os/rt/src/chevents.c ****  * @api
 431:../../os/rt/src/chevents.c ****  */
 432:../../os/rt/src/chevents.c **** eventmask_t chEvtWaitOne(eventmask_t events) {
 877               		.loc 1 432 0
 878               		.cfi_startproc
 879               	.LVL56:
 880 0000 1F93      		push r17
 881               	.LCFI18:
 882               		.cfi_def_cfa_offset 3
 883               		.cfi_offset 17, -2
 884 0002 CF93      		push r28
 885               	.LCFI19:
 886               		.cfi_def_cfa_offset 4
 887               		.cfi_offset 28, -3
 888 0004 DF93      		push r29
 889               	.LCFI20:
 890               		.cfi_def_cfa_offset 5
 891               		.cfi_offset 29, -4
 892               	/* prologue: function */
 893               	/* frame size = 0 */
 894               	/* stack size = 3 */
 895               	.L__stack_usage = 3
 896               	.LBB227:
 897               	.LBB228:
 898               		.loc 2 343 0
 899 0006 C091 0000 		lds r28,ch0+5
 900 000a D091 0000 		lds r29,ch0+5+1
 901               	.LBE228:
 902               	.LBE227:
 903               	.LBB229:
 904               	.LBB230:
 905               	.LBB231:
 430:../../os/common/ports/AVR/chcore.h **** }
 906               		.loc 3 430 0
 907               	/* #APP */
 908               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 909 000e F894      		cli
 910               	 ;  0 "" 2
 911               	/* #NOAPP */
 912               	.LBE231:
 913               	.LBE230:
 914               	.LBE229:
 433:../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 434:../../os/rt/src/chevents.c ****   eventmask_t m;
 435:../../os/rt/src/chevents.c **** 
 436:../../os/rt/src/chevents.c ****   chSysLock();
 437:../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 915               		.loc 1 437 0
 916 0010 2A8D      		ldd r18,Y+26
 917 0012 922F      		mov r25,r18
 918 0014 9823      		and r25,r24
 919               	.LVL57:
 438:../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 920               		.loc 1 438 0
 921 0016 01F4      		brne .L45
 922 0018 182F      		mov r17,r24
 439:../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 923               		.loc 1 439 0
 924 001a 8A8B      		std Y+18,r24
 440:../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTOREVT);
 925               		.loc 1 440 0
 926 001c 8AE0      		ldi r24,lo8(10)
 927               	.LVL58:
 928 001e 0E94 0000 		call chSchGoSleepS
 929               	.LVL59:
 441:../../os/rt/src/chevents.c ****     m = currtp->epending & events;
 930               		.loc 1 441 0
 931 0022 2A8D      		ldd r18,Y+26
 932 0024 922F      		mov r25,r18
 933 0026 9123      		and r25,r17
 934               	.LVL60:
 935               	.L45:
 442:../../os/rt/src/chevents.c ****   }
 443:../../os/rt/src/chevents.c ****   m ^= m & (m - (eventmask_t)1);
 936               		.loc 1 443 0
 937 0028 892F      		mov r24,r25
 938 002a 8195      		neg r24
 939 002c 8923      		and r24,r25
 940               	.LVL61:
 444:../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 941               		.loc 1 444 0
 942 002e 982F      		mov r25,r24
 943 0030 9095      		com r25
 944 0032 9223      		and r25,r18
 945 0034 9A8F      		std Y+26,r25
 946               	.LBB232:
 947               	.LBB233:
 948               	.LBB234:
 949               	.LBB235:
 950               		.loc 3 440 0
 951               	/* #APP */
 952               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 953 0036 7894      		sei
 954               	 ;  0 "" 2
 955               	/* epilogue start */
 956               	/* #NOAPP */
 957               	.LBE235:
 958               	.LBE234:
 959               	.LBE233:
 960               	.LBE232:
 445:../../os/rt/src/chevents.c ****   chSysUnlock();
 446:../../os/rt/src/chevents.c **** 
 447:../../os/rt/src/chevents.c ****   return m;
 448:../../os/rt/src/chevents.c **** }
 961               		.loc 1 448 0
 962 0038 DF91      		pop r29
 963 003a CF91      		pop r28
 964 003c 1F91      		pop r17
 965 003e 0895      		ret
 966               		.cfi_endproc
 967               	.LFE203:
 969               		.section	.text.chEvtWaitAny,"ax",@progbits
 970               	.global	chEvtWaitAny
 972               	chEvtWaitAny:
 973               	.LFB204:
 449:../../os/rt/src/chevents.c **** 
 450:../../os/rt/src/chevents.c **** /**
 451:../../os/rt/src/chevents.c ****  * @brief   Waits for any of the specified events.
 452:../../os/rt/src/chevents.c ****  * @details The function waits for any event among those specified in
 453:../../os/rt/src/chevents.c ****  *          @p events to become pending then the events are cleared and
 454:../../os/rt/src/chevents.c ****  *          returned.
 455:../../os/rt/src/chevents.c ****  *
 456:../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 457:../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 458:../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 459:../../os/rt/src/chevents.c ****  *
 460:../../os/rt/src/chevents.c ****  * @api
 461:../../os/rt/src/chevents.c ****  */
 462:../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAny(eventmask_t events) {
 974               		.loc 1 462 0
 975               		.cfi_startproc
 976               	.LVL62:
 977 0000 1F93      		push r17
 978               	.LCFI21:
 979               		.cfi_def_cfa_offset 3
 980               		.cfi_offset 17, -2
 981 0002 CF93      		push r28
 982               	.LCFI22:
 983               		.cfi_def_cfa_offset 4
 984               		.cfi_offset 28, -3
 985 0004 DF93      		push r29
 986               	.LCFI23:
 987               		.cfi_def_cfa_offset 5
 988               		.cfi_offset 29, -4
 989               	/* prologue: function */
 990               	/* frame size = 0 */
 991               	/* stack size = 3 */
 992               	.L__stack_usage = 3
 993 0006 182F      		mov r17,r24
 994               	.LBB236:
 995               	.LBB237:
 996               		.loc 2 343 0
 997 0008 C091 0000 		lds r28,ch0+5
 998 000c D091 0000 		lds r29,ch0+5+1
 999               	.LBE237:
 1000               	.LBE236:
 1001               	.LBB238:
 1002               	.LBB239:
 1003               	.LBB240:
 430:../../os/common/ports/AVR/chcore.h **** }
 1004               		.loc 3 430 0
 1005               	/* #APP */
 1006               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1007 0010 F894      		cli
 1008               	 ;  0 "" 2
 1009               	/* #NOAPP */
 1010               	.LBE240:
 1011               	.LBE239:
 1012               	.LBE238:
 463:../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 464:../../os/rt/src/chevents.c ****   eventmask_t m;
 465:../../os/rt/src/chevents.c **** 
 466:../../os/rt/src/chevents.c ****   chSysLock();
 467:../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 1013               		.loc 1 467 0
 1014 0012 2A8D      		ldd r18,Y+26
 1015 0014 822F      		mov r24,r18
 1016               	.LVL63:
 1017 0016 8123      		and r24,r17
 1018               	.LVL64:
 468:../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 1019               		.loc 1 468 0
 1020 0018 01F4      		brne .L47
 469:../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 1021               		.loc 1 469 0
 1022 001a 1A8B      		std Y+18,r17
 470:../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTOREVT);
 1023               		.loc 1 470 0
 1024 001c 8AE0      		ldi r24,lo8(10)
 1025               	.LVL65:
 1026 001e 0E94 0000 		call chSchGoSleepS
 1027               	.LVL66:
 471:../../os/rt/src/chevents.c ****     m = currtp->epending & events;
 1028               		.loc 1 471 0
 1029 0022 2A8D      		ldd r18,Y+26
 1030 0024 822F      		mov r24,r18
 1031 0026 8123      		and r24,r17
 1032               	.LVL67:
 1033               	.L47:
 472:../../os/rt/src/chevents.c ****   }
 473:../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 1034               		.loc 1 473 0
 1035 0028 982F      		mov r25,r24
 1036 002a 9095      		com r25
 1037 002c 9223      		and r25,r18
 1038 002e 9A8F      		std Y+26,r25
 1039               	.LBB241:
 1040               	.LBB242:
 1041               	.LBB243:
 1042               	.LBB244:
 1043               		.loc 3 440 0
 1044               	/* #APP */
 1045               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1046 0030 7894      		sei
 1047               	 ;  0 "" 2
 1048               	/* epilogue start */
 1049               	/* #NOAPP */
 1050               	.LBE244:
 1051               	.LBE243:
 1052               	.LBE242:
 1053               	.LBE241:
 474:../../os/rt/src/chevents.c ****   chSysUnlock();
 475:../../os/rt/src/chevents.c **** 
 476:../../os/rt/src/chevents.c ****   return m;
 477:../../os/rt/src/chevents.c **** }
 1054               		.loc 1 477 0
 1055 0032 DF91      		pop r29
 1056 0034 CF91      		pop r28
 1057 0036 1F91      		pop r17
 1058               	.LVL68:
 1059 0038 0895      		ret
 1060               		.cfi_endproc
 1061               	.LFE204:
 1063               		.section	.text.chEvtWaitAll,"ax",@progbits
 1064               	.global	chEvtWaitAll
 1066               	chEvtWaitAll:
 1067               	.LFB205:
 478:../../os/rt/src/chevents.c **** 
 479:../../os/rt/src/chevents.c **** /**
 480:../../os/rt/src/chevents.c ****  * @brief   Waits for all the specified events.
 481:../../os/rt/src/chevents.c ****  * @details The function waits for all the events specified in @p events to
 482:../../os/rt/src/chevents.c ****  *          become pending then the events are cleared and returned.
 483:../../os/rt/src/chevents.c ****  *
 484:../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 485:../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS requires all the events
 486:../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 487:../../os/rt/src/chevents.c ****  *
 488:../../os/rt/src/chevents.c ****  * @api
 489:../../os/rt/src/chevents.c ****  */
 490:../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAll(eventmask_t events) {
 1068               		.loc 1 490 0
 1069               		.cfi_startproc
 1070               	.LVL69:
 1071 0000 0F93      		push r16
 1072               	.LCFI24:
 1073               		.cfi_def_cfa_offset 3
 1074               		.cfi_offset 16, -2
 1075 0002 1F93      		push r17
 1076               	.LCFI25:
 1077               		.cfi_def_cfa_offset 4
 1078               		.cfi_offset 17, -3
 1079 0004 CF93      		push r28
 1080               	.LCFI26:
 1081               		.cfi_def_cfa_offset 5
 1082               		.cfi_offset 28, -4
 1083               	/* prologue: function */
 1084               	/* frame size = 0 */
 1085               	/* stack size = 3 */
 1086               	.L__stack_usage = 3
 1087 0006 C82F      		mov r28,r24
 1088               	.LBB245:
 1089               	.LBB246:
 1090               		.loc 2 343 0
 1091 0008 0091 0000 		lds r16,ch0+5
 1092 000c 1091 0000 		lds r17,ch0+5+1
 1093               	.LBE246:
 1094               	.LBE245:
 1095               	.LBB247:
 1096               	.LBB248:
 1097               	.LBB249:
 430:../../os/common/ports/AVR/chcore.h **** }
 1098               		.loc 3 430 0
 1099               	/* #APP */
 1100               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1101 0010 F894      		cli
 1102               	 ;  0 "" 2
 1103               	/* #NOAPP */
 1104               	.LBE249:
 1105               	.LBE248:
 1106               	.LBE247:
 491:../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 492:../../os/rt/src/chevents.c **** 
 493:../../os/rt/src/chevents.c ****   chSysLock();
 494:../../os/rt/src/chevents.c ****   if ((currtp->epending & events) != events) {
 1107               		.loc 1 494 0
 1108 0012 F801      		movw r30,r16
 1109 0014 928D      		ldd r25,Z+26
 1110 0016 892F      		mov r24,r25
 1111               	.LVL70:
 1112 0018 8C23      		and r24,r28
 1113 001a 8C17      		cp r24,r28
 1114 001c 01F0      		breq .L49
 495:../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 1115               		.loc 1 495 0
 1116 001e C28B      		std Z+18,r28
 496:../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTANDEVT);
 1117               		.loc 1 496 0
 1118 0020 8BE0      		ldi r24,lo8(11)
 1119 0022 0E94 0000 		call chSchGoSleepS
 1120               	.LVL71:
 1121 0026 F801      		movw r30,r16
 1122 0028 928D      		ldd r25,Z+26
 1123               	.L49:
 497:../../os/rt/src/chevents.c ****   }
 498:../../os/rt/src/chevents.c ****   currtp->epending &= ~events;
 1124               		.loc 1 498 0
 1125 002a 8C2F      		mov r24,r28
 1126 002c 8095      		com r24
 1127 002e 8923      		and r24,r25
 1128 0030 F801      		movw r30,r16
 1129 0032 828F      		std Z+26,r24
 1130               	.LBB250:
 1131               	.LBB251:
 1132               	.LBB252:
 1133               	.LBB253:
 1134               		.loc 3 440 0
 1135               	/* #APP */
 1136               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1137 0034 7894      		sei
 1138               	 ;  0 "" 2
 1139               	/* #NOAPP */
 1140               	.LBE253:
 1141               	.LBE252:
 1142               	.LBE251:
 1143               	.LBE250:
 499:../../os/rt/src/chevents.c ****   chSysUnlock();
 500:../../os/rt/src/chevents.c **** 
 501:../../os/rt/src/chevents.c ****   return events;
 502:../../os/rt/src/chevents.c **** }
 1144               		.loc 1 502 0
 1145 0036 8C2F      		mov r24,r28
 1146               	/* epilogue start */
 1147 0038 CF91      		pop r28
 1148               	.LVL72:
 1149 003a 1F91      		pop r17
 1150 003c 0F91      		pop r16
 1151 003e 0895      		ret
 1152               		.cfi_endproc
 1153               	.LFE205:
 1155               		.section	.text.chEvtWaitOneTimeout,"ax",@progbits
 1156               	.global	chEvtWaitOneTimeout
 1158               	chEvtWaitOneTimeout:
 1159               	.LFB206:
 503:../../os/rt/src/chevents.c **** #endif /* CH_CFG_OPTIMIZE_SPEED || !CH_CFG_USE_EVENTS_TIMEOUT */
 504:../../os/rt/src/chevents.c **** 
 505:../../os/rt/src/chevents.c **** #if (CH_CFG_USE_EVENTS_TIMEOUT == TRUE) || defined(__DOXYGEN__)
 506:../../os/rt/src/chevents.c **** /**
 507:../../os/rt/src/chevents.c ****  * @brief   Waits for exactly one of the specified events.
 508:../../os/rt/src/chevents.c ****  * @details The function waits for one event among those specified in
 509:../../os/rt/src/chevents.c ****  *          @p events to become pending then the event is cleared and returned.
 510:../../os/rt/src/chevents.c ****  * @note    One and only one event is served in the function, the one with the
 511:../../os/rt/src/chevents.c ****  *          lowest event id. The function is meant to be invoked into a loop
 512:../../os/rt/src/chevents.c ****  *          in order to serve all the pending events.<br>
 513:../../os/rt/src/chevents.c ****  *          This means that Event Listeners with a lower event identifier have
 514:../../os/rt/src/chevents.c ****  *          an higher priority.
 515:../../os/rt/src/chevents.c ****  *
 516:../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 517:../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 518:../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 519:../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 520:../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 521:../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 522:../../os/rt/src/chevents.c ****  *                      .
 523:../../os/rt/src/chevents.c ****  * @return              The mask of the lowest event id served and cleared.
 524:../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 525:../../os/rt/src/chevents.c ****  *
 526:../../os/rt/src/chevents.c ****  * @api
 527:../../os/rt/src/chevents.c ****  */
 528:../../os/rt/src/chevents.c **** eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 1160               		.loc 1 528 0
 1161               		.cfi_startproc
 1162               	.LVL73:
 1163 0000 0F93      		push r16
 1164               	.LCFI27:
 1165               		.cfi_def_cfa_offset 3
 1166               		.cfi_offset 16, -2
 1167 0002 1F93      		push r17
 1168               	.LCFI28:
 1169               		.cfi_def_cfa_offset 4
 1170               		.cfi_offset 17, -3
 1171 0004 CF93      		push r28
 1172               	.LCFI29:
 1173               		.cfi_def_cfa_offset 5
 1174               		.cfi_offset 28, -4
 1175 0006 DF93      		push r29
 1176               	.LCFI30:
 1177               		.cfi_def_cfa_offset 6
 1178               		.cfi_offset 29, -5
 1179               	/* prologue: function */
 1180               	/* frame size = 0 */
 1181               	/* stack size = 4 */
 1182               	.L__stack_usage = 4
 1183               	.LBB254:
 1184               	.LBB255:
 1185               		.loc 2 343 0
 1186 0008 0091 0000 		lds r16,ch0+5
 1187 000c 1091 0000 		lds r17,ch0+5+1
 1188               	.LBE255:
 1189               	.LBE254:
 1190               	.LBB256:
 1191               	.LBB257:
 1192               	.LBB258:
 430:../../os/common/ports/AVR/chcore.h **** }
 1193               		.loc 3 430 0
 1194               	/* #APP */
 1195               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1196 0010 F894      		cli
 1197               	 ;  0 "" 2
 1198               	/* #NOAPP */
 1199               	.LBE258:
 1200               	.LBE257:
 1201               	.LBE256:
 529:../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 530:../../os/rt/src/chevents.c ****   eventmask_t m;
 531:../../os/rt/src/chevents.c **** 
 532:../../os/rt/src/chevents.c ****   chSysLock();
 533:../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 1202               		.loc 1 533 0
 1203 0012 F801      		movw r30,r16
 1204 0014 928D      		ldd r25,Z+26
 1205 0016 C92F      		mov r28,r25
 1206 0018 C823      		and r28,r24
 1207               	.LVL74:
 534:../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 1208               		.loc 1 534 0
 1209 001a 01F4      		brne .L51
 535:../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1210               		.loc 1 535 0
 1211 001c 6115      		cp r22,__zero_reg__
 1212 001e 7105      		cpc r23,__zero_reg__
 1213 0020 01F4      		brne .L52
 1214               	.LVL75:
 1215               	.L55:
 1216               	.LBB259:
 1217               	.LBB260:
 1218               	.LBB261:
 1219               	.LBB262:
 1220               		.loc 3 440 0
 1221               	/* #APP */
 1222               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1223 0022 7894      		sei
 1224               	 ;  0 "" 2
 1225               	/* #NOAPP */
 1226               	.LBE262:
 1227               	.LBE261:
 1228               	.LBE260:
 1229               	.LBE259:
 536:../../os/rt/src/chevents.c ****       chSysUnlock();
 537:../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 538:../../os/rt/src/chevents.c ****     }
 539:../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 540:../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 541:../../os/rt/src/chevents.c ****       chSysUnlock();
 542:../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 543:../../os/rt/src/chevents.c ****     }
 544:../../os/rt/src/chevents.c ****     m = currtp->epending & events;
 545:../../os/rt/src/chevents.c ****   }
 546:../../os/rt/src/chevents.c ****   m ^= m & (m - (eventmask_t)1);
 547:../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 548:../../os/rt/src/chevents.c ****   chSysUnlock();
 549:../../os/rt/src/chevents.c **** 
 550:../../os/rt/src/chevents.c ****   return m;
 551:../../os/rt/src/chevents.c **** }
 1230               		.loc 1 551 0
 1231 0024 8C2F      		mov r24,r28
 1232               	/* epilogue start */
 1233 0026 DF91      		pop r29
 1234 0028 CF91      		pop r28
 1235               	.LVL76:
 1236 002a 1F91      		pop r17
 1237 002c 0F91      		pop r16
 1238 002e 0895      		ret
 1239               	.LVL77:
 1240               	.L52:
 1241 0030 D82F      		mov r29,r24
 539:../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 1242               		.loc 1 539 0
 1243 0032 828B      		std Z+18,r24
 540:../../os/rt/src/chevents.c ****       chSysUnlock();
 1244               		.loc 1 540 0
 1245 0034 8AE0      		ldi r24,lo8(10)
 1246               	.LVL78:
 1247 0036 0E94 0000 		call chSchGoSleepTimeoutS
 1248               	.LVL79:
 1249 003a 97FD      		sbrc r25,7
 1250 003c 00C0      		rjmp .L55
 544:../../os/rt/src/chevents.c ****   }
 1251               		.loc 1 544 0
 1252 003e F801      		movw r30,r16
 1253 0040 928D      		ldd r25,Z+26
 1254 0042 C92F      		mov r28,r25
 1255               	.LVL80:
 1256 0044 CD23      		and r28,r29
 1257               	.LVL81:
 1258               	.L51:
 546:../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 1259               		.loc 1 546 0
 1260 0046 8C2F      		mov r24,r28
 1261 0048 8195      		neg r24
 1262 004a C823      		and r28,r24
 1263               	.LVL82:
 547:../../os/rt/src/chevents.c ****   chSysUnlock();
 1264               		.loc 1 547 0
 1265 004c 8C2F      		mov r24,r28
 1266 004e 8095      		com r24
 1267 0050 9823      		and r25,r24
 1268 0052 F801      		movw r30,r16
 1269 0054 928F      		std Z+26,r25
 1270               	.LBB266:
 1271               	.LBB265:
 1272               	.LBB264:
 1273               	.LBB263:
 1274               		.loc 3 440 0
 1275               	/* #APP */
 1276               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1277 0056 7894      		sei
 1278               	 ;  0 "" 2
 1279               	/* #NOAPP */
 1280               	.LBE263:
 1281               	.LBE264:
 1282               	.LBE265:
 1283               	.LBE266:
 1284               		.loc 1 551 0
 1285 0058 8C2F      		mov r24,r28
 1286               	/* epilogue start */
 1287 005a DF91      		pop r29
 1288 005c CF91      		pop r28
 1289               	.LVL83:
 1290 005e 1F91      		pop r17
 1291 0060 0F91      		pop r16
 1292 0062 0895      		ret
 1293               		.cfi_endproc
 1294               	.LFE206:
 1296               		.section	.text.chEvtWaitAnyTimeout,"ax",@progbits
 1297               	.global	chEvtWaitAnyTimeout
 1299               	chEvtWaitAnyTimeout:
 1300               	.LFB207:
 552:../../os/rt/src/chevents.c **** 
 553:../../os/rt/src/chevents.c **** /**
 554:../../os/rt/src/chevents.c ****  * @brief   Waits for any of the specified events.
 555:../../os/rt/src/chevents.c ****  * @details The function waits for any event among those specified in
 556:../../os/rt/src/chevents.c ****  *          @p events to become pending then the events are cleared and
 557:../../os/rt/src/chevents.c ****  *          returned.
 558:../../os/rt/src/chevents.c ****  *
 559:../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 560:../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 561:../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 562:../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 563:../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 564:../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 565:../../os/rt/src/chevents.c ****  *                      .
 566:../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 567:../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 568:../../os/rt/src/chevents.c ****  *
 569:../../os/rt/src/chevents.c ****  * @api
 570:../../os/rt/src/chevents.c ****  */
 571:../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 1301               		.loc 1 571 0
 1302               		.cfi_startproc
 1303               	.LVL84:
 1304 0000 0F93      		push r16
 1305               	.LCFI31:
 1306               		.cfi_def_cfa_offset 3
 1307               		.cfi_offset 16, -2
 1308 0002 1F93      		push r17
 1309               	.LCFI32:
 1310               		.cfi_def_cfa_offset 4
 1311               		.cfi_offset 17, -3
 1312 0004 CF93      		push r28
 1313               	.LCFI33:
 1314               		.cfi_def_cfa_offset 5
 1315               		.cfi_offset 28, -4
 1316 0006 DF93      		push r29
 1317               	.LCFI34:
 1318               		.cfi_def_cfa_offset 6
 1319               		.cfi_offset 29, -5
 1320               	/* prologue: function */
 1321               	/* frame size = 0 */
 1322               	/* stack size = 4 */
 1323               	.L__stack_usage = 4
 1324               	.LBB267:
 1325               	.LBB268:
 1326               		.loc 2 343 0
 1327 0008 0091 0000 		lds r16,ch0+5
 1328 000c 1091 0000 		lds r17,ch0+5+1
 1329               	.LBE268:
 1330               	.LBE267:
 1331               	.LBB269:
 1332               	.LBB270:
 1333               	.LBB271:
 430:../../os/common/ports/AVR/chcore.h **** }
 1334               		.loc 3 430 0
 1335               	/* #APP */
 1336               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1337 0010 F894      		cli
 1338               	 ;  0 "" 2
 1339               	/* #NOAPP */
 1340               	.LBE271:
 1341               	.LBE270:
 1342               	.LBE269:
 572:../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 573:../../os/rt/src/chevents.c ****   eventmask_t m;
 574:../../os/rt/src/chevents.c **** 
 575:../../os/rt/src/chevents.c ****   chSysLock();
 576:../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 1343               		.loc 1 576 0
 1344 0012 F801      		movw r30,r16
 1345 0014 928D      		ldd r25,Z+26
 1346 0016 C92F      		mov r28,r25
 1347 0018 C823      		and r28,r24
 1348               	.LVL85:
 577:../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 1349               		.loc 1 577 0
 1350 001a 01F4      		brne .L57
 578:../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1351               		.loc 1 578 0
 1352 001c 6115      		cp r22,__zero_reg__
 1353 001e 7105      		cpc r23,__zero_reg__
 1354 0020 01F4      		brne .L58
 1355               	.LVL86:
 1356               	.L61:
 1357               	.LBB272:
 1358               	.LBB273:
 1359               	.LBB274:
 1360               	.LBB275:
 1361               		.loc 3 440 0
 1362               	/* #APP */
 1363               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1364 0022 7894      		sei
 1365               	 ;  0 "" 2
 1366               	/* #NOAPP */
 1367               	.LBE275:
 1368               	.LBE274:
 1369               	.LBE273:
 1370               	.LBE272:
 579:../../os/rt/src/chevents.c ****       chSysUnlock();
 580:../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 581:../../os/rt/src/chevents.c ****     }
 582:../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 583:../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 584:../../os/rt/src/chevents.c ****       chSysUnlock();
 585:../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 586:../../os/rt/src/chevents.c ****     }
 587:../../os/rt/src/chevents.c ****     m = currtp->epending & events;
 588:../../os/rt/src/chevents.c ****   }
 589:../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 590:../../os/rt/src/chevents.c ****   chSysUnlock();
 591:../../os/rt/src/chevents.c **** 
 592:../../os/rt/src/chevents.c ****   return m;
 593:../../os/rt/src/chevents.c **** }
 1371               		.loc 1 593 0
 1372 0024 8C2F      		mov r24,r28
 1373               	/* epilogue start */
 1374 0026 DF91      		pop r29
 1375 0028 CF91      		pop r28
 1376               	.LVL87:
 1377 002a 1F91      		pop r17
 1378 002c 0F91      		pop r16
 1379 002e 0895      		ret
 1380               	.LVL88:
 1381               	.L58:
 1382 0030 D82F      		mov r29,r24
 582:../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 1383               		.loc 1 582 0
 1384 0032 828B      		std Z+18,r24
 583:../../os/rt/src/chevents.c ****       chSysUnlock();
 1385               		.loc 1 583 0
 1386 0034 8AE0      		ldi r24,lo8(10)
 1387               	.LVL89:
 1388 0036 0E94 0000 		call chSchGoSleepTimeoutS
 1389               	.LVL90:
 1390 003a 97FD      		sbrc r25,7
 1391 003c 00C0      		rjmp .L61
 587:../../os/rt/src/chevents.c ****   }
 1392               		.loc 1 587 0
 1393 003e F801      		movw r30,r16
 1394 0040 928D      		ldd r25,Z+26
 1395 0042 C92F      		mov r28,r25
 1396               	.LVL91:
 1397 0044 CD23      		and r28,r29
 1398               	.LVL92:
 1399               	.L57:
 589:../../os/rt/src/chevents.c ****   chSysUnlock();
 1400               		.loc 1 589 0
 1401 0046 8C2F      		mov r24,r28
 1402 0048 8095      		com r24
 1403 004a 9823      		and r25,r24
 1404 004c F801      		movw r30,r16
 1405 004e 928F      		std Z+26,r25
 1406               	.LBB279:
 1407               	.LBB278:
 1408               	.LBB277:
 1409               	.LBB276:
 1410               		.loc 3 440 0
 1411               	/* #APP */
 1412               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1413 0050 7894      		sei
 1414               	 ;  0 "" 2
 1415               	/* #NOAPP */
 1416               	.LBE276:
 1417               	.LBE277:
 1418               	.LBE278:
 1419               	.LBE279:
 1420               		.loc 1 593 0
 1421 0052 8C2F      		mov r24,r28
 1422               	/* epilogue start */
 1423 0054 DF91      		pop r29
 1424 0056 CF91      		pop r28
 1425               	.LVL93:
 1426 0058 1F91      		pop r17
 1427 005a 0F91      		pop r16
 1428 005c 0895      		ret
 1429               		.cfi_endproc
 1430               	.LFE207:
 1432               		.section	.text.chEvtWaitAllTimeout,"ax",@progbits
 1433               	.global	chEvtWaitAllTimeout
 1435               	chEvtWaitAllTimeout:
 1436               	.LFB208:
 594:../../os/rt/src/chevents.c **** 
 595:../../os/rt/src/chevents.c **** /**
 596:../../os/rt/src/chevents.c ****  * @brief   Waits for all the specified events.
 597:../../os/rt/src/chevents.c ****  * @details The function waits for all the events specified in @p events to
 598:../../os/rt/src/chevents.c ****  *          become pending then the events are cleared and returned.
 599:../../os/rt/src/chevents.c ****  *
 600:../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 601:../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS requires all the events
 602:../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 603:../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 604:../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 605:../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 606:../../os/rt/src/chevents.c ****  *                      .
 607:../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 608:../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 609:../../os/rt/src/chevents.c ****  *
 610:../../os/rt/src/chevents.c ****  * @api
 611:../../os/rt/src/chevents.c ****  */
 612:../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
 1437               		.loc 1 612 0
 1438               		.cfi_startproc
 1439               	.LVL94:
 1440 0000 0F93      		push r16
 1441               	.LCFI35:
 1442               		.cfi_def_cfa_offset 3
 1443               		.cfi_offset 16, -2
 1444 0002 1F93      		push r17
 1445               	.LCFI36:
 1446               		.cfi_def_cfa_offset 4
 1447               		.cfi_offset 17, -3
 1448 0004 CF93      		push r28
 1449               	.LCFI37:
 1450               		.cfi_def_cfa_offset 5
 1451               		.cfi_offset 28, -4
 1452               	/* prologue: function */
 1453               	/* frame size = 0 */
 1454               	/* stack size = 3 */
 1455               	.L__stack_usage = 3
 1456 0006 C82F      		mov r28,r24
 1457               	.LBB280:
 1458               	.LBB281:
 1459               		.loc 2 343 0
 1460 0008 0091 0000 		lds r16,ch0+5
 1461 000c 1091 0000 		lds r17,ch0+5+1
 1462               	.LBE281:
 1463               	.LBE280:
 1464               	.LBB282:
 1465               	.LBB283:
 1466               	.LBB284:
 430:../../os/common/ports/AVR/chcore.h **** }
 1467               		.loc 3 430 0
 1468               	/* #APP */
 1469               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 1470 0010 F894      		cli
 1471               	 ;  0 "" 2
 1472               	/* #NOAPP */
 1473               	.LBE284:
 1474               	.LBE283:
 1475               	.LBE282:
 613:../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 614:../../os/rt/src/chevents.c **** 
 615:../../os/rt/src/chevents.c ****   chSysLock();
 616:../../os/rt/src/chevents.c ****   if ((currtp->epending & events) != events) {
 1476               		.loc 1 616 0
 1477 0012 F801      		movw r30,r16
 1478 0014 828D      		ldd r24,Z+26
 1479               	.LVL95:
 1480 0016 982F      		mov r25,r24
 1481 0018 9C23      		and r25,r28
 1482 001a 9C17      		cp r25,r28
 1483 001c 01F0      		breq .L63
 617:../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1484               		.loc 1 617 0
 1485 001e 6115      		cp r22,__zero_reg__
 1486 0020 7105      		cpc r23,__zero_reg__
 1487 0022 01F4      		brne .L64
 1488               	.LVL96:
 1489               	.L66:
 1490               	.LBB285:
 1491               	.LBB286:
 1492               	.LBB287:
 1493               	.LBB288:
 1494               		.loc 3 440 0
 1495               	/* #APP */
 1496               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1497 0024 7894      		sei
 1498               	 ;  0 "" 2
 1499               	/* #NOAPP */
 1500               	.LBE288:
 1501               	.LBE287:
 1502               	.LBE286:
 1503               	.LBE285:
 618:../../os/rt/src/chevents.c ****       chSysUnlock();
 619:../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 620:../../os/rt/src/chevents.c ****     }
 621:../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 622:../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 623:../../os/rt/src/chevents.c ****       chSysUnlock();
 624:../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 1504               		.loc 1 624 0
 1505 0026 80E0      		ldi r24,0
 1506               	/* epilogue start */
 625:../../os/rt/src/chevents.c ****     }
 626:../../os/rt/src/chevents.c ****   }
 627:../../os/rt/src/chevents.c ****   currtp->epending &= ~events;
 628:../../os/rt/src/chevents.c ****   chSysUnlock();
 629:../../os/rt/src/chevents.c **** 
 630:../../os/rt/src/chevents.c ****   return events;
 631:../../os/rt/src/chevents.c **** }
 1507               		.loc 1 631 0
 1508 0028 CF91      		pop r28
 1509               	.LVL97:
 1510 002a 1F91      		pop r17
 1511 002c 0F91      		pop r16
 1512 002e 0895      		ret
 1513               	.LVL98:
 1514               	.L64:
 621:../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 1515               		.loc 1 621 0
 1516 0030 C28B      		std Z+18,r28
 622:../../os/rt/src/chevents.c ****       chSysUnlock();
 1517               		.loc 1 622 0
 1518 0032 8BE0      		ldi r24,lo8(11)
 1519 0034 0E94 0000 		call chSchGoSleepTimeoutS
 1520               	.LVL99:
 1521 0038 97FD      		sbrc r25,7
 1522 003a 00C0      		rjmp .L66
 1523 003c F801      		movw r30,r16
 1524 003e 828D      		ldd r24,Z+26
 1525               	.L63:
 627:../../os/rt/src/chevents.c ****   chSysUnlock();
 1526               		.loc 1 627 0
 1527 0040 9C2F      		mov r25,r28
 1528 0042 9095      		com r25
 1529 0044 8923      		and r24,r25
 1530 0046 F801      		movw r30,r16
 1531 0048 828F      		std Z+26,r24
 1532               	.LBB289:
 1533               	.LBB290:
 1534               	.LBB291:
 1535               	.LBB292:
 1536               		.loc 3 440 0
 1537               	/* #APP */
 1538               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 1539 004a 7894      		sei
 1540               	 ;  0 "" 2
 1541               	/* #NOAPP */
 1542               	.LBE292:
 1543               	.LBE291:
 1544               	.LBE290:
 1545               	.LBE289:
 630:../../os/rt/src/chevents.c **** }
 1546               		.loc 1 630 0
 1547 004c 8C2F      		mov r24,r28
 1548               	/* epilogue start */
 1549               		.loc 1 631 0
 1550 004e CF91      		pop r28
 1551               	.LVL100:
 1552 0050 1F91      		pop r17
 1553 0052 0F91      		pop r16
 1554 0054 0895      		ret
 1555               		.cfi_endproc
 1556               	.LFE208:
 1558               		.text
 1559               	.Letext0:
 1560               		.file 5 "/usr/lib/avr/include/stdint.h"
 1561               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1562               		.file 7 "../../os/rt/include/chearly.h"
 1563               		.file 8 "../../os/rt/include/chobjects.h"
 1564               		.file 9 "../../os/rt/include/chrfcu.h"
 1565               		.file 10 "../../os/rt/include/chdebug.h"
 1566               		.file 11 "../../os/rt/include/chtime.h"
 1567               		.file 12 "../../os/rt/include/chlists.h"
 1568               		.file 13 "../../os/rt/include/chsem.h"
 1569               		.file 14 "../../os/rt/include/chmtx.h"
 1570               		.file 15 "../../os/rt/include/chsys.h"
 1571               		.file 16 "../../os/rt/include/chregistry.h"
 1572               		.file 17 "../../os/oslib/include/chmemcore.h"
 1573               		.file 18 "../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chevents.c
     /tmp/ccfPDEnB.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccfPDEnB.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccfPDEnB.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccfPDEnB.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfPDEnB.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfPDEnB.s:13     .text.chEvtRegisterMaskWithFlagsI:0000000000000000 chEvtRegisterMaskWithFlagsI
     /tmp/ccfPDEnB.s:70     .text.chEvtRegisterMaskWithFlags:0000000000000000 chEvtRegisterMaskWithFlags
     /tmp/ccfPDEnB.s:158    .text.chEvtUnregister:0000000000000000 chEvtUnregister
     /tmp/ccfPDEnB.s:245    .text.chEvtGetAndClearEventsI:0000000000000000 chEvtGetAndClearEventsI
     /tmp/ccfPDEnB.s:280    .text.chEvtGetAndClearEvents:0000000000000000 chEvtGetAndClearEvents
     /tmp/ccfPDEnB.s:347    .text.chEvtAddEvents:0000000000000000 chEvtAddEvents
     /tmp/ccfPDEnB.s:405    .text.chEvtGetAndClearFlagsI:0000000000000000 chEvtGetAndClearFlagsI
     /tmp/ccfPDEnB.s:433    .text.chEvtGetAndClearFlags:0000000000000000 chEvtGetAndClearFlags
     /tmp/ccfPDEnB.s:487    .text.chEvtSignalI:0000000000000000 chEvtSignalI
     /tmp/ccfPDEnB.s:542    .text.chEvtSignal:0000000000000000 chEvtSignal
     /tmp/ccfPDEnB.s:592    .text.chEvtBroadcastFlagsI:0000000000000000 chEvtBroadcastFlagsI
     /tmp/ccfPDEnB.s:681    .text.chEvtBroadcastFlags:0000000000000000 chEvtBroadcastFlags
     /tmp/ccfPDEnB.s:731    .text.chEvtDispatch:0000000000000000 chEvtDispatch
     /tmp/ccfPDEnB.s:875    .text.chEvtWaitOne:0000000000000000 chEvtWaitOne
     /tmp/ccfPDEnB.s:972    .text.chEvtWaitAny:0000000000000000 chEvtWaitAny
     /tmp/ccfPDEnB.s:1066   .text.chEvtWaitAll:0000000000000000 chEvtWaitAll
     /tmp/ccfPDEnB.s:1158   .text.chEvtWaitOneTimeout:0000000000000000 chEvtWaitOneTimeout
     /tmp/ccfPDEnB.s:1299   .text.chEvtWaitAnyTimeout:0000000000000000 chEvtWaitAnyTimeout
     /tmp/ccfPDEnB.s:1435   .text.chEvtWaitAllTimeout:0000000000000000 chEvtWaitAllTimeout

UNDEFINED SYMBOLS
ch0
chSchReadyI
chSchRescheduleS
chSchGoSleepS
chSchGoSleepTimeoutS
