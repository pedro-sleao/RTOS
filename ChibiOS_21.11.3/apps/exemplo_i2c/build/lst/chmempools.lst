   1               		.file	"chmempools.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chPoolAllocI.part.0,"ax",@progbits
  12               	chPoolAllocI.part.0:
  13               	.LFB201:
  14               		.file 1 "../../os/oslib/src/chmempools.c"
   1:../../os/oslib/src/chmempools.c **** /*
   2:../../os/oslib/src/chmempools.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/oslib/src/chmempools.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/oslib/src/chmempools.c **** 
   5:../../os/oslib/src/chmempools.c ****     This file is part of ChibiOS.
   6:../../os/oslib/src/chmempools.c **** 
   7:../../os/oslib/src/chmempools.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/oslib/src/chmempools.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/oslib/src/chmempools.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/oslib/src/chmempools.c **** 
  11:../../os/oslib/src/chmempools.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/oslib/src/chmempools.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/oslib/src/chmempools.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/oslib/src/chmempools.c ****     GNU General Public License for more details.
  15:../../os/oslib/src/chmempools.c **** 
  16:../../os/oslib/src/chmempools.c ****     You should have received a copy of the GNU General Public License
  17:../../os/oslib/src/chmempools.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/oslib/src/chmempools.c **** */
  19:../../os/oslib/src/chmempools.c **** 
  20:../../os/oslib/src/chmempools.c **** /**
  21:../../os/oslib/src/chmempools.c ****  * @file    oslib/src/chmempools.c
  22:../../os/oslib/src/chmempools.c ****  * @brief   Memory Pools code.
  23:../../os/oslib/src/chmempools.c ****  *
  24:../../os/oslib/src/chmempools.c ****  * @addtogroup oslib_mempools
  25:../../os/oslib/src/chmempools.c ****  * @details Memory Pools related APIs and services.
  26:../../os/oslib/src/chmempools.c ****  *          <h2>Operation mode</h2>
  27:../../os/oslib/src/chmempools.c ****  *          The Memory Pools APIs allow to allocate/free fixed size objects in
  28:../../os/oslib/src/chmempools.c ****  *          <b>constant time</b> and reliably without memory fragmentation
  29:../../os/oslib/src/chmempools.c ****  *          problems.<br>
  30:../../os/oslib/src/chmempools.c ****  *          Memory Pools do not enforce any alignment constraint on the
  31:../../os/oslib/src/chmempools.c ****  *          contained object however the objects must be properly aligned
  32:../../os/oslib/src/chmempools.c ****  *          to contain a pointer to void.
  33:../../os/oslib/src/chmempools.c ****  * @pre     In order to use the memory pools APIs the @p CH_CFG_USE_MEMPOOLS option
  34:../../os/oslib/src/chmempools.c ****  *          must be enabled in @p chconf.h.
  35:../../os/oslib/src/chmempools.c ****  * @note    Compatible with RT and NIL.
  36:../../os/oslib/src/chmempools.c ****  * @{
  37:../../os/oslib/src/chmempools.c ****  */
  38:../../os/oslib/src/chmempools.c **** 
  39:../../os/oslib/src/chmempools.c **** #include "ch.h"
  40:../../os/oslib/src/chmempools.c **** 
  41:../../os/oslib/src/chmempools.c **** #if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
  42:../../os/oslib/src/chmempools.c **** 
  43:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  44:../../os/oslib/src/chmempools.c **** /* Module exported variables.                                                */
  45:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  46:../../os/oslib/src/chmempools.c **** 
  47:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  48:../../os/oslib/src/chmempools.c **** /* Module local types.                                                       */
  49:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  50:../../os/oslib/src/chmempools.c **** 
  51:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  52:../../os/oslib/src/chmempools.c **** /* Module local variables.                                                   */
  53:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  54:../../os/oslib/src/chmempools.c **** 
  55:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  56:../../os/oslib/src/chmempools.c **** /* Module local functions.                                                   */
  57:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  58:../../os/oslib/src/chmempools.c **** 
  59:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  60:../../os/oslib/src/chmempools.c **** /* Module exported functions.                                                */
  61:../../os/oslib/src/chmempools.c **** /*===========================================================================*/
  62:../../os/oslib/src/chmempools.c **** 
  63:../../os/oslib/src/chmempools.c **** /**
  64:../../os/oslib/src/chmempools.c ****  * @brief   Initializes an empty memory pool.
  65:../../os/oslib/src/chmempools.c ****  *
  66:../../os/oslib/src/chmempools.c ****  * @param[out] mp       pointer to a @p memory_pool_t structure
  67:../../os/oslib/src/chmempools.c ****  * @param[in] size      the size of the objects contained in this memory pool,
  68:../../os/oslib/src/chmempools.c ****  *                      the minimum accepted size is the size of a pointer to
  69:../../os/oslib/src/chmempools.c ****  *                      void.
  70:../../os/oslib/src/chmempools.c ****  * @param[in] align     required memory alignment
  71:../../os/oslib/src/chmempools.c ****  * @param[in] provider  memory provider function for the memory pool or
  72:../../os/oslib/src/chmempools.c ****  *                      @p NULL if the pool is not allowed to grow
  73:../../os/oslib/src/chmempools.c ****  *                      automatically
  74:../../os/oslib/src/chmempools.c ****  *
  75:../../os/oslib/src/chmempools.c ****  * @init
  76:../../os/oslib/src/chmempools.c ****  */
  77:../../os/oslib/src/chmempools.c **** void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
  78:../../os/oslib/src/chmempools.c ****                              unsigned align, memgetfunc_t provider) {
  79:../../os/oslib/src/chmempools.c **** 
  80:../../os/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) &&
  81:../../os/oslib/src/chmempools.c ****              (size >= sizeof(void *)) &&
  82:../../os/oslib/src/chmempools.c ****              (align >= PORT_NATURAL_ALIGN) &&
  83:../../os/oslib/src/chmempools.c ****              MEM_IS_VALID_ALIGNMENT(align));
  84:../../os/oslib/src/chmempools.c **** 
  85:../../os/oslib/src/chmempools.c ****   mp->next = NULL;
  86:../../os/oslib/src/chmempools.c ****   mp->object_size = size;
  87:../../os/oslib/src/chmempools.c ****   mp->align = align;
  88:../../os/oslib/src/chmempools.c ****   mp->provider = provider;
  89:../../os/oslib/src/chmempools.c **** }
  90:../../os/oslib/src/chmempools.c **** 
  91:../../os/oslib/src/chmempools.c **** /**
  92:../../os/oslib/src/chmempools.c ****  * @brief   Loads a memory pool with an array of static objects.
  93:../../os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
  94:../../os/oslib/src/chmempools.c ****  * @pre     The array elements must be of the right size for the specified
  95:../../os/oslib/src/chmempools.c ****  *          memory pool.
  96:../../os/oslib/src/chmempools.c ****  * @pre     The array elements size must be a multiple of the alignment
  97:../../os/oslib/src/chmempools.c ****  *          requirement for the pool.
  98:../../os/oslib/src/chmempools.c ****  * @post    The memory pool contains the elements of the input array.
  99:../../os/oslib/src/chmempools.c ****  *
 100:../../os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 101:../../os/oslib/src/chmempools.c ****  * @param[in] p         pointer to the array first element
 102:../../os/oslib/src/chmempools.c ****  * @param[in] n         number of elements in the array
 103:../../os/oslib/src/chmempools.c ****  *
 104:../../os/oslib/src/chmempools.c ****  * @api
 105:../../os/oslib/src/chmempools.c ****  */
 106:../../os/oslib/src/chmempools.c **** void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 107:../../os/oslib/src/chmempools.c **** 
 108:../../os/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (n != 0U));
 109:../../os/oslib/src/chmempools.c **** 
 110:../../os/oslib/src/chmempools.c ****   while (n != 0U) {
 111:../../os/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 112:../../os/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 113:../../os/oslib/src/chmempools.c ****     p = (void *)(((uint8_t *)p) + mp->object_size);
 114:../../os/oslib/src/chmempools.c ****     /*lint -restore*/
 115:../../os/oslib/src/chmempools.c ****     n--;
 116:../../os/oslib/src/chmempools.c ****   }
 117:../../os/oslib/src/chmempools.c **** }
 118:../../os/oslib/src/chmempools.c **** 
 119:../../os/oslib/src/chmempools.c **** /**
 120:../../os/oslib/src/chmempools.c ****  * @brief   Allocates an object from a memory pool.
 121:../../os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 122:../../os/oslib/src/chmempools.c ****  *
 123:../../os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 124:../../os/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 125:../../os/oslib/src/chmempools.c ****  * @retval NULL         if pool is empty.
 126:../../os/oslib/src/chmempools.c ****  *
 127:../../os/oslib/src/chmempools.c ****  * @iclass
 128:../../os/oslib/src/chmempools.c ****  */
 129:../../os/oslib/src/chmempools.c **** void *chPoolAllocI(memory_pool_t *mp) {
  15               		.loc 1 129 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 DC01      		movw r26,r24
 130:../../os/oslib/src/chmempools.c ****   void *objp;
 131:../../os/oslib/src/chmempools.c **** 
 132:../../os/oslib/src/chmempools.c ****   chDbgCheckClassI();
 133:../../os/oslib/src/chmempools.c ****   chDbgCheck(mp != NULL);
 134:../../os/oslib/src/chmempools.c **** 
 135:../../os/oslib/src/chmempools.c ****   objp = mp->next;
 136:../../os/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 137:../../os/oslib/src/chmempools.c ****   if (objp != NULL) {
 138:../../os/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 139:../../os/oslib/src/chmempools.c ****   }
 140:../../os/oslib/src/chmempools.c ****   else if (mp->provider != NULL) {
  23               		.loc 1 140 0
  24 0002 1696      		adiw r26,6
  25 0004 ED91      		ld r30,X+
  26 0006 FC91      		ld r31,X
  27 0008 1797      		sbiw r26,6+1
  28 000a 3097      		sbiw r30,0
  29 000c 01F0      		breq .L2
 141:../../os/oslib/src/chmempools.c ****     objp = mp->provider(mp->object_size, mp->align);
  30               		.loc 1 141 0
  31 000e 1496      		adiw r26,4
  32 0010 6D91      		ld r22,X+
  33 0012 7C91      		ld r23,X
  34 0014 1597      		sbiw r26,4+1
  35 0016 1296      		adiw r26,2
  36 0018 8D91      		ld r24,X+
  37 001a 9C91      		ld r25,X
  38               	.LVL1:
  39 001c 0994      		ijmp
  40               	.LVL2:
  41               	.L2:
 142:../../os/oslib/src/chmempools.c **** 
 143:../../os/oslib/src/chmempools.c ****     chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 144:../../os/oslib/src/chmempools.c ****                 "returned object not aligned");
 145:../../os/oslib/src/chmempools.c ****   }
 146:../../os/oslib/src/chmempools.c ****   /*lint -restore*/
 147:../../os/oslib/src/chmempools.c **** 
 148:../../os/oslib/src/chmempools.c ****   return objp;
 149:../../os/oslib/src/chmempools.c **** }
  42               		.loc 1 149 0
  43 001e 90E0      		ldi r25,0
  44 0020 80E0      		ldi r24,0
  45               	.LVL3:
  46               	/* epilogue start */
  47 0022 0895      		ret
  48               		.cfi_endproc
  49               	.LFE201:
  51               		.section	.text.chPoolObjectInitAligned,"ax",@progbits
  52               	.global	chPoolObjectInitAligned
  54               	chPoolObjectInitAligned:
  55               	.LFB190:
  78:../../os/oslib/src/chmempools.c **** 
  56               		.loc 1 78 0
  57               		.cfi_startproc
  58               	.LVL4:
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  63 0000 FC01      		movw r30,r24
  85:../../os/oslib/src/chmempools.c ****   mp->object_size = size;
  64               		.loc 1 85 0
  65 0002 1182      		std Z+1,__zero_reg__
  66 0004 1082      		st Z,__zero_reg__
  86:../../os/oslib/src/chmempools.c ****   mp->align = align;
  67               		.loc 1 86 0
  68 0006 7383      		std Z+3,r23
  69 0008 6283      		std Z+2,r22
  87:../../os/oslib/src/chmempools.c ****   mp->provider = provider;
  70               		.loc 1 87 0
  71 000a 5583      		std Z+5,r21
  72 000c 4483      		std Z+4,r20
  88:../../os/oslib/src/chmempools.c **** }
  73               		.loc 1 88 0
  74 000e 3783      		std Z+7,r19
  75 0010 2683      		std Z+6,r18
  76               	/* epilogue start */
  89:../../os/oslib/src/chmempools.c **** 
  77               		.loc 1 89 0
  78 0012 0895      		ret
  79               		.cfi_endproc
  80               	.LFE190:
  82               		.section	.text.chPoolLoadArray,"ax",@progbits
  83               	.global	chPoolLoadArray
  85               	chPoolLoadArray:
  86               	.LFB191:
 106:../../os/oslib/src/chmempools.c **** 
  87               		.loc 1 106 0
  88               		.cfi_startproc
  89               	.LVL5:
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  94 0000 DC01      		movw r26,r24
  95 0002 FB01      		movw r30,r22
 110:../../os/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
  96               		.loc 1 110 0
  97 0004 4115      		cp r20,__zero_reg__
  98 0006 5105      		cpc r21,__zero_reg__
  99 0008 01F0      		breq .L5
 100               	.LVL6:
 101               	.L7:
 102               	.LBB113:
 103               	.LBB114:
 104               	.LBB115:
 105               	.LBB116:
 106               	.LBB117:
 107               		.file 2 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 108               		.loc 2 430 0
 109               	/* #APP */
 110               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 111 000a F894      		cli
 112               	 ;  0 "" 2
 113               	.LVL7:
 114               	/* #NOAPP */
 115               	.LBE117:
 116               	.LBE116:
 117               	.LBE115:
 118               	.LBB118:
 119               	.LBB119:
 150:../../os/oslib/src/chmempools.c **** 
 151:../../os/oslib/src/chmempools.c **** /**
 152:../../os/oslib/src/chmempools.c ****  * @brief   Allocates an object from a memory pool.
 153:../../os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 154:../../os/oslib/src/chmempools.c ****  *
 155:../../os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 156:../../os/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 157:../../os/oslib/src/chmempools.c ****  * @retval NULL         if pool is empty.
 158:../../os/oslib/src/chmempools.c ****  *
 159:../../os/oslib/src/chmempools.c ****  * @api
 160:../../os/oslib/src/chmempools.c ****  */
 161:../../os/oslib/src/chmempools.c **** void *chPoolAlloc(memory_pool_t *mp) {
 162:../../os/oslib/src/chmempools.c ****   void *objp;
 163:../../os/oslib/src/chmempools.c **** 
 164:../../os/oslib/src/chmempools.c ****   chSysLock();
 165:../../os/oslib/src/chmempools.c ****   objp = chPoolAllocI(mp);
 166:../../os/oslib/src/chmempools.c ****   chSysUnlock();
 167:../../os/oslib/src/chmempools.c **** 
 168:../../os/oslib/src/chmempools.c ****   return objp;
 169:../../os/oslib/src/chmempools.c **** }
 170:../../os/oslib/src/chmempools.c **** 
 171:../../os/oslib/src/chmempools.c **** /**
 172:../../os/oslib/src/chmempools.c ****  * @brief   Releases an object into a memory pool.
 173:../../os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 174:../../os/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 175:../../os/oslib/src/chmempools.c ****  *          memory pool.
 176:../../os/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 177:../../os/oslib/src/chmempools.c ****  *
 178:../../os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 179:../../os/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 180:../../os/oslib/src/chmempools.c ****  *
 181:../../os/oslib/src/chmempools.c ****  * @iclass
 182:../../os/oslib/src/chmempools.c ****  */
 183:../../os/oslib/src/chmempools.c **** void chPoolFreeI(memory_pool_t *mp, void *objp) {
 184:../../os/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 185:../../os/oslib/src/chmempools.c **** 
 186:../../os/oslib/src/chmempools.c ****   chDbgCheckClassI();
 187:../../os/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) &&
 188:../../os/oslib/src/chmempools.c ****              (objp != NULL) &&
 189:../../os/oslib/src/chmempools.c ****              MEM_IS_ALIGNED(objp, mp->align));
 190:../../os/oslib/src/chmempools.c **** 
 191:../../os/oslib/src/chmempools.c ****   php->next = mp->next;
 120               		.loc 1 191 0
 121 000c 8D91      		ld r24,X+
 122 000e 9C91      		ld r25,X
 123 0010 1197      		sbiw r26,1
 124 0012 9183      		std Z+1,r25
 125 0014 8083      		st Z,r24
 192:../../os/oslib/src/chmempools.c ****   mp->next = php;
 126               		.loc 1 192 0
 127 0016 1196      		adiw r26,1
 128 0018 FC93      		st X,r31
 129 001a EE93      		st -X,r30
 130               	.LVL8:
 131               	.LBE119:
 132               	.LBE118:
 133               	.LBB120:
 134               	.LBB121:
 135               	.LBB122:
 136               	.LBB123:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 137               		.loc 2 440 0
 138               	/* #APP */
 139               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 140 001c 7894      		sei
 141               	 ;  0 "" 2
 142               	.LVL9:
 143               	/* #NOAPP */
 144               	.LBE123:
 145               	.LBE122:
 146               	.LBE121:
 147               	.LBE120:
 148               	.LBE114:
 149               	.LBE113:
 113:../../os/oslib/src/chmempools.c ****     /*lint -restore*/
 150               		.loc 1 113 0
 151 001e 1296      		adiw r26,2
 152 0020 8D91      		ld r24,X+
 153 0022 9C91      		ld r25,X
 154 0024 1397      		sbiw r26,2+1
 155 0026 E80F      		add r30,r24
 156 0028 F91F      		adc r31,r25
 157               	.LVL10:
 115:../../os/oslib/src/chmempools.c ****   }
 158               		.loc 1 115 0
 159 002a 4150      		subi r20,1
 160 002c 5109      		sbc r21,__zero_reg__
 161               	.LVL11:
 110:../../os/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 162               		.loc 1 110 0
 163 002e 01F4      		brne .L7
 164               	.LVL12:
 165               	.L5:
 166               	/* epilogue start */
 117:../../os/oslib/src/chmempools.c **** 
 167               		.loc 1 117 0
 168 0030 0895      		ret
 169               		.cfi_endproc
 170               	.LFE191:
 172               		.section	.text.chPoolAllocI,"ax",@progbits
 173               	.global	chPoolAllocI
 175               	chPoolAllocI:
 176               	.LFB192:
 129:../../os/oslib/src/chmempools.c ****   void *objp;
 177               		.loc 1 129 0
 178               		.cfi_startproc
 179               	.LVL13:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 135:../../os/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 184               		.loc 1 135 0
 185 0000 DC01      		movw r26,r24
 186 0002 ED91      		ld r30,X+
 187 0004 FC91      		ld r31,X
 188 0006 1197      		sbiw r26,1
 189               	.LVL14:
 137:../../os/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 190               		.loc 1 137 0
 191 0008 3097      		sbiw r30,0
 192 000a 01F0      		breq .L17
 138:../../os/oslib/src/chmempools.c ****   }
 193               		.loc 1 138 0
 194 000c 2081      		ld r18,Z
 195 000e 3181      		ldd r19,Z+1
 196 0010 2D93      		st X+,r18
 197 0012 3C93      		st X,r19
 149:../../os/oslib/src/chmempools.c **** 
 198               		.loc 1 149 0
 199 0014 CF01      		movw r24,r30
 200               	.LVL15:
 201               	/* epilogue start */
 202 0016 0895      		ret
 203               	.LVL16:
 204               	.L17:
 205 0018 0C94 0000 		jmp chPoolAllocI.part.0
 206               	.LVL17:
 207               		.cfi_endproc
 208               	.LFE192:
 210               		.section	.text.chPoolAlloc,"ax",@progbits
 211               	.global	chPoolAlloc
 213               	chPoolAlloc:
 214               	.LFB193:
 161:../../os/oslib/src/chmempools.c ****   void *objp;
 215               		.loc 1 161 0
 216               		.cfi_startproc
 217               	.LVL18:
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 0 */
 221               	.L__stack_usage = 0
 222               	.LBB124:
 223               	.LBB125:
 224               	.LBB126:
 430:../../os/common/ports/AVR/chcore.h **** }
 225               		.loc 2 430 0
 226               	/* #APP */
 227               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 228 0000 F894      		cli
 229               	 ;  0 "" 2
 230               	.LVL19:
 231               	/* #NOAPP */
 232               	.LBE126:
 233               	.LBE125:
 234               	.LBE124:
 235               	.LBB127:
 236               	.LBB128:
 135:../../os/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 237               		.loc 1 135 0
 238 0002 DC01      		movw r26,r24
 239 0004 ED91      		ld r30,X+
 240 0006 FC91      		ld r31,X
 241 0008 1197      		sbiw r26,1
 242               	.LVL20:
 137:../../os/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 243               		.loc 1 137 0
 244 000a 3097      		sbiw r30,0
 245 000c 01F0      		breq .L19
 138:../../os/oslib/src/chmempools.c ****   }
 246               		.loc 1 138 0
 247 000e 2081      		ld r18,Z
 248 0010 3181      		ldd r19,Z+1
 249 0012 2D93      		st X+,r18
 250 0014 3C93      		st X,r19
 251               	.LVL21:
 252               	.LBE128:
 253               	.LBE127:
 254               	.LBB130:
 255               	.LBB131:
 256               	.LBB132:
 257               	.LBB133:
 258               		.loc 2 440 0
 259               	/* #APP */
 260               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 261 0016 7894      		sei
 262               	 ;  0 "" 2
 263               	/* #NOAPP */
 264               	.LBE133:
 265               	.LBE132:
 266               	.LBE131:
 267               	.LBE130:
 169:../../os/oslib/src/chmempools.c **** 
 268               		.loc 1 169 0
 269 0018 CF01      		movw r24,r30
 270               	.LVL22:
 271               	/* epilogue start */
 272 001a 0895      		ret
 273               	.LVL23:
 274               	.L19:
 275               	.LBB137:
 276               	.LBB129:
 277 001c 0E94 0000 		call chPoolAllocI.part.0
 278               	.LVL24:
 279 0020 FC01      		movw r30,r24
 280               	.LVL25:
 281               	.LBE129:
 282               	.LBE137:
 283               	.LBB138:
 284               	.LBB136:
 285               	.LBB135:
 286               	.LBB134:
 287               		.loc 2 440 0
 288               	/* #APP */
 289               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 290 0022 7894      		sei
 291               	 ;  0 "" 2
 292               	/* #NOAPP */
 293               	.LBE134:
 294               	.LBE135:
 295               	.LBE136:
 296               	.LBE138:
 169:../../os/oslib/src/chmempools.c **** 
 297               		.loc 1 169 0
 298 0024 CF01      		movw r24,r30
 299               	/* epilogue start */
 300 0026 0895      		ret
 301               		.cfi_endproc
 302               	.LFE193:
 304               		.section	.text.chPoolFreeI,"ax",@progbits
 305               	.global	chPoolFreeI
 307               	chPoolFreeI:
 308               	.LFB194:
 183:../../os/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 309               		.loc 1 183 0
 310               		.cfi_startproc
 311               	.LVL26:
 312               	/* prologue: function */
 313               	/* frame size = 0 */
 314               	/* stack size = 0 */
 315               	.L__stack_usage = 0
 191:../../os/oslib/src/chmempools.c ****   mp->next = php;
 316               		.loc 1 191 0
 317 0000 FC01      		movw r30,r24
 318 0002 2081      		ld r18,Z
 319 0004 3181      		ldd r19,Z+1
 320 0006 FB01      		movw r30,r22
 321 0008 3183      		std Z+1,r19
 322 000a 2083      		st Z,r18
 323               		.loc 1 192 0
 324 000c FC01      		movw r30,r24
 325 000e 7183      		std Z+1,r23
 326 0010 6083      		st Z,r22
 327               	/* epilogue start */
 193:../../os/oslib/src/chmempools.c **** }
 328               		.loc 1 193 0
 329 0012 0895      		ret
 330               		.cfi_endproc
 331               	.LFE194:
 333               		.section	.text.chPoolFree,"ax",@progbits
 334               	.global	chPoolFree
 336               	chPoolFree:
 337               	.LFB195:
 194:../../os/oslib/src/chmempools.c **** 
 195:../../os/oslib/src/chmempools.c **** /**
 196:../../os/oslib/src/chmempools.c ****  * @brief   Releases an object into a memory pool.
 197:../../os/oslib/src/chmempools.c ****  * @pre     The memory pool must already be initialized.
 198:../../os/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 199:../../os/oslib/src/chmempools.c ****  *          memory pool.
 200:../../os/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 201:../../os/oslib/src/chmempools.c ****  *
 202:../../os/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 203:../../os/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 204:../../os/oslib/src/chmempools.c ****  *
 205:../../os/oslib/src/chmempools.c ****  * @api
 206:../../os/oslib/src/chmempools.c ****  */
 207:../../os/oslib/src/chmempools.c **** void chPoolFree(memory_pool_t *mp, void *objp) {
 338               		.loc 1 207 0
 339               		.cfi_startproc
 340               	.LVL27:
 341               	/* prologue: function */
 342               	/* frame size = 0 */
 343               	/* stack size = 0 */
 344               	.L__stack_usage = 0
 345               	.LBB139:
 346               	.LBB140:
 347               	.LBB141:
 430:../../os/common/ports/AVR/chcore.h **** }
 348               		.loc 2 430 0
 349               	/* #APP */
 350               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 351 0000 F894      		cli
 352               	 ;  0 "" 2
 353               	.LVL28:
 354               	/* #NOAPP */
 355               	.LBE141:
 356               	.LBE140:
 357               	.LBE139:
 358               	.LBB142:
 359               	.LBB143:
 191:../../os/oslib/src/chmempools.c ****   mp->next = php;
 360               		.loc 1 191 0
 361 0002 FC01      		movw r30,r24
 362 0004 2081      		ld r18,Z
 363 0006 3181      		ldd r19,Z+1
 364 0008 FB01      		movw r30,r22
 365 000a 3183      		std Z+1,r19
 366 000c 2083      		st Z,r18
 192:../../os/oslib/src/chmempools.c **** }
 367               		.loc 1 192 0
 368 000e FC01      		movw r30,r24
 369 0010 7183      		std Z+1,r23
 370 0012 6083      		st Z,r22
 371               	.LVL29:
 372               	.LBE143:
 373               	.LBE142:
 374               	.LBB144:
 375               	.LBB145:
 376               	.LBB146:
 377               	.LBB147:
 378               		.loc 2 440 0
 379               	/* #APP */
 380               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 381 0014 7894      		sei
 382               	 ;  0 "" 2
 383               	/* epilogue start */
 384               	/* #NOAPP */
 385               	.LBE147:
 386               	.LBE146:
 387               	.LBE145:
 388               	.LBE144:
 208:../../os/oslib/src/chmempools.c **** 
 209:../../os/oslib/src/chmempools.c ****   chSysLock();
 210:../../os/oslib/src/chmempools.c ****   chPoolFreeI(mp, objp);
 211:../../os/oslib/src/chmempools.c ****   chSysUnlock();
 212:../../os/oslib/src/chmempools.c **** }
 389               		.loc 1 212 0
 390 0016 0895      		ret
 391               		.cfi_endproc
 392               	.LFE195:
 394               		.section	.text.chGuardedPoolObjectInitAligned,"ax",@progbits
 395               	.global	chGuardedPoolObjectInitAligned
 397               	chGuardedPoolObjectInitAligned:
 398               	.LFB196:
 213:../../os/oslib/src/chmempools.c **** 
 214:../../os/oslib/src/chmempools.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 215:../../os/oslib/src/chmempools.c **** /**
 216:../../os/oslib/src/chmempools.c ****  * @brief   Initializes an empty guarded memory pool.
 217:../../os/oslib/src/chmempools.c ****  *
 218:../../os/oslib/src/chmempools.c ****  * @param[out] gmp      pointer to a @p guarded_memory_pool_t structure
 219:../../os/oslib/src/chmempools.c ****  * @param[in] size      the size of the objects contained in this guarded
 220:../../os/oslib/src/chmempools.c ****  *                      memory pool, the minimum accepted size is the size
 221:../../os/oslib/src/chmempools.c ****  *                      of a pointer to void.
 222:../../os/oslib/src/chmempools.c ****  * @param[in] align     required memory alignment
 223:../../os/oslib/src/chmempools.c ****  *
 224:../../os/oslib/src/chmempools.c ****  * @init
 225:../../os/oslib/src/chmempools.c ****  */
 226:../../os/oslib/src/chmempools.c **** void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
 227:../../os/oslib/src/chmempools.c ****                                     size_t size,
 228:../../os/oslib/src/chmempools.c ****                                     unsigned align) {
 399               		.loc 1 228 0
 400               		.cfi_startproc
 401               	.LVL30:
 402               	/* prologue: function */
 403               	/* frame size = 0 */
 404               	/* stack size = 0 */
 405               	.L__stack_usage = 0
 406               	.LBB148:
 407               	.LBB149:
  85:../../os/oslib/src/chmempools.c ****   mp->object_size = size;
 408               		.loc 1 85 0
 409 0000 FC01      		movw r30,r24
 410 0002 1682      		std Z+6,__zero_reg__
 411 0004 1582      		std Z+5,__zero_reg__
  86:../../os/oslib/src/chmempools.c ****   mp->align = align;
 412               		.loc 1 86 0
 413 0006 7087      		std Z+8,r23
 414 0008 6783      		std Z+7,r22
  87:../../os/oslib/src/chmempools.c ****   mp->provider = provider;
 415               		.loc 1 87 0
 416 000a 5287      		std Z+10,r21
 417 000c 4187      		std Z+9,r20
  88:../../os/oslib/src/chmempools.c **** }
 418               		.loc 1 88 0
 419 000e 1486      		std Z+12,__zero_reg__
 420 0010 1386      		std Z+11,__zero_reg__
 421               	.LVL31:
 422               	.LBE149:
 423               	.LBE148:
 229:../../os/oslib/src/chmempools.c **** 
 230:../../os/oslib/src/chmempools.c ****   chPoolObjectInitAligned(&gmp->pool, size, align, NULL);
 231:../../os/oslib/src/chmempools.c ****   chSemObjectInit(&gmp->sem, (cnt_t)0);
 424               		.loc 1 231 0
 425 0012 60E0      		ldi r22,0
 426               	.LVL32:
 427 0014 0C94 0000 		jmp chSemObjectInit
 428               	.LVL33:
 429               		.cfi_endproc
 430               	.LFE196:
 432               		.section	.text.chGuardedPoolLoadArray,"ax",@progbits
 433               	.global	chGuardedPoolLoadArray
 435               	chGuardedPoolLoadArray:
 436               	.LFB197:
 232:../../os/oslib/src/chmempools.c **** }
 233:../../os/oslib/src/chmempools.c **** 
 234:../../os/oslib/src/chmempools.c **** /**
 235:../../os/oslib/src/chmempools.c ****  * @brief   Loads a guarded memory pool with an array of static objects.
 236:../../os/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 237:../../os/oslib/src/chmempools.c ****  * @pre     The array elements must be of the right size for the specified
 238:../../os/oslib/src/chmempools.c ****  *          guarded memory pool.
 239:../../os/oslib/src/chmempools.c ****  * @post    The guarded memory pool contains the elements of the input array.
 240:../../os/oslib/src/chmempools.c ****  *
 241:../../os/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 242:../../os/oslib/src/chmempools.c ****  * @param[in] p         pointer to the array first element
 243:../../os/oslib/src/chmempools.c ****  * @param[in] n         number of elements in the array
 244:../../os/oslib/src/chmempools.c ****  *
 245:../../os/oslib/src/chmempools.c ****  * @api
 246:../../os/oslib/src/chmempools.c ****  */
 247:../../os/oslib/src/chmempools.c **** void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 437               		.loc 1 247 0
 438               		.cfi_startproc
 439               	.LVL34:
 440 0000 EF92      		push r14
 441               	.LCFI0:
 442               		.cfi_def_cfa_offset 3
 443               		.cfi_offset 14, -2
 444 0002 FF92      		push r15
 445               	.LCFI1:
 446               		.cfi_def_cfa_offset 4
 447               		.cfi_offset 15, -3
 448 0004 0F93      		push r16
 449               	.LCFI2:
 450               		.cfi_def_cfa_offset 5
 451               		.cfi_offset 16, -4
 452 0006 1F93      		push r17
 453               	.LCFI3:
 454               		.cfi_def_cfa_offset 6
 455               		.cfi_offset 17, -5
 456 0008 CF93      		push r28
 457               	.LCFI4:
 458               		.cfi_def_cfa_offset 7
 459               		.cfi_offset 28, -6
 460 000a DF93      		push r29
 461               	.LCFI5:
 462               		.cfi_def_cfa_offset 8
 463               		.cfi_offset 29, -7
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 6 */
 467               	.L__stack_usage = 6
 468 000c 8C01      		movw r16,r24
 469 000e EB01      		movw r28,r22
 470 0010 7A01      		movw r14,r20
 248:../../os/oslib/src/chmempools.c **** 
 249:../../os/oslib/src/chmempools.c ****   chDbgCheck((gmp != NULL) && (n != 0U));
 250:../../os/oslib/src/chmempools.c **** 
 251:../../os/oslib/src/chmempools.c ****   while (n != 0U) {
 471               		.loc 1 251 0
 472 0012 452B      		or r20,r21
 473 0014 01F0      		breq .L24
 474               	.LVL35:
 475               	.L26:
 476               	.LBB150:
 477               	.LBB151:
 478               	.LBB152:
 479               	.LBB153:
 480               	.LBB154:
 481               	.LBB155:
 430:../../os/common/ports/AVR/chcore.h **** }
 482               		.loc 2 430 0
 483               	/* #APP */
 484               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 485 0016 F894      		cli
 486               	 ;  0 "" 2
 487               	.LVL36:
 488               	/* #NOAPP */
 489               	.LBE155:
 490               	.LBE154:
 491               	.LBE153:
 492               	.LBB156:
 493               	.LBB157:
 494               	.LBB158:
 495               	.LBB159:
 191:../../os/oslib/src/chmempools.c ****   mp->next = php;
 496               		.loc 1 191 0
 497 0018 F801      		movw r30,r16
 498 001a 8581      		ldd r24,Z+5
 499 001c 9681      		ldd r25,Z+6
 500 001e 9983      		std Y+1,r25
 501 0020 8883      		st Y,r24
 192:../../os/oslib/src/chmempools.c **** }
 502               		.loc 1 192 0
 503 0022 D683      		std Z+6,r29
 504 0024 C583      		std Z+5,r28
 505               	.LVL37:
 506               	.LBE159:
 507               	.LBE158:
 508               		.file 3 "../../os/oslib/include/chmempools.h"
   1:../../os/oslib/include/chmempools.h **** /*
   2:../../os/oslib/include/chmempools.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/oslib/include/chmempools.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/oslib/include/chmempools.h **** 
   5:../../os/oslib/include/chmempools.h ****     This file is part of ChibiOS.
   6:../../os/oslib/include/chmempools.h **** 
   7:../../os/oslib/include/chmempools.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/oslib/include/chmempools.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/oslib/include/chmempools.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/oslib/include/chmempools.h **** 
  11:../../os/oslib/include/chmempools.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/oslib/include/chmempools.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/oslib/include/chmempools.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/oslib/include/chmempools.h ****     GNU General Public License for more details.
  15:../../os/oslib/include/chmempools.h **** 
  16:../../os/oslib/include/chmempools.h ****     You should have received a copy of the GNU General Public License
  17:../../os/oslib/include/chmempools.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/oslib/include/chmempools.h **** */
  19:../../os/oslib/include/chmempools.h **** 
  20:../../os/oslib/include/chmempools.h **** /**
  21:../../os/oslib/include/chmempools.h ****  * @file    oslib/include/chmempools.h
  22:../../os/oslib/include/chmempools.h ****  * @brief   Memory Pools macros and structures.
  23:../../os/oslib/include/chmempools.h ****  *
  24:../../os/oslib/include/chmempools.h ****  * @addtogroup oslib_mempools
  25:../../os/oslib/include/chmempools.h ****  * @{
  26:../../os/oslib/include/chmempools.h ****  */
  27:../../os/oslib/include/chmempools.h **** 
  28:../../os/oslib/include/chmempools.h **** #ifndef CHMEMPOOLS_H
  29:../../os/oslib/include/chmempools.h **** #define CHMEMPOOLS_H
  30:../../os/oslib/include/chmempools.h **** 
  31:../../os/oslib/include/chmempools.h **** #if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
  32:../../os/oslib/include/chmempools.h **** 
  33:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  34:../../os/oslib/include/chmempools.h **** /* Module constants.                                                         */
  35:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  36:../../os/oslib/include/chmempools.h **** 
  37:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  38:../../os/oslib/include/chmempools.h **** /* Module pre-compile time settings.                                         */
  39:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  40:../../os/oslib/include/chmempools.h **** 
  41:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  42:../../os/oslib/include/chmempools.h **** /* Derived constants and error checks.                                       */
  43:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  44:../../os/oslib/include/chmempools.h **** 
  45:../../os/oslib/include/chmempools.h **** #if CH_CFG_USE_MEMCORE == FALSE
  46:../../os/oslib/include/chmempools.h **** #error "CH_CFG_USE_MEMPOOLS requires CH_CFG_USE_MEMCORE"
  47:../../os/oslib/include/chmempools.h **** #endif
  48:../../os/oslib/include/chmempools.h **** 
  49:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  50:../../os/oslib/include/chmempools.h **** /* Module data structures and types.                                         */
  51:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  52:../../os/oslib/include/chmempools.h **** 
  53:../../os/oslib/include/chmempools.h **** /**
  54:../../os/oslib/include/chmempools.h ****  * @brief   Memory pool free object header.
  55:../../os/oslib/include/chmempools.h ****  */
  56:../../os/oslib/include/chmempools.h **** struct pool_header {
  57:../../os/oslib/include/chmempools.h ****   struct pool_header    *next;          /**< @brief Pointer to the next pool
  58:../../os/oslib/include/chmempools.h ****                                                     header in the list.     */
  59:../../os/oslib/include/chmempools.h **** };
  60:../../os/oslib/include/chmempools.h **** 
  61:../../os/oslib/include/chmempools.h **** /**
  62:../../os/oslib/include/chmempools.h ****  * @brief   Memory pool descriptor.
  63:../../os/oslib/include/chmempools.h ****  */
  64:../../os/oslib/include/chmempools.h **** typedef struct {
  65:../../os/oslib/include/chmempools.h ****   struct pool_header    *next;          /**< @brief Pointer to the header.  */
  66:../../os/oslib/include/chmempools.h ****   size_t                object_size;    /**< @brief Memory pool objects
  67:../../os/oslib/include/chmempools.h ****                                                     size.                   */
  68:../../os/oslib/include/chmempools.h ****   unsigned              align;          /**< @brief Required alignment.     */
  69:../../os/oslib/include/chmempools.h ****   memgetfunc_t          provider;       /**< @brief Memory blocks provider
  70:../../os/oslib/include/chmempools.h ****                                                     for this pool.          */
  71:../../os/oslib/include/chmempools.h **** } memory_pool_t;
  72:../../os/oslib/include/chmempools.h **** 
  73:../../os/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  74:../../os/oslib/include/chmempools.h **** /**
  75:../../os/oslib/include/chmempools.h ****  * @brief   Guarded memory pool descriptor.
  76:../../os/oslib/include/chmempools.h ****  */
  77:../../os/oslib/include/chmempools.h **** typedef struct {
  78:../../os/oslib/include/chmempools.h ****   semaphore_t           sem;            /**< @brief Counter semaphore guarding
  79:../../os/oslib/include/chmempools.h ****                                                     the memory pool.        */
  80:../../os/oslib/include/chmempools.h ****   memory_pool_t         pool;           /**< @brief The memory pool itself. */
  81:../../os/oslib/include/chmempools.h **** } guarded_memory_pool_t;
  82:../../os/oslib/include/chmempools.h **** #endif /* CH_CFG_USE_SEMAPHORES == TRUE */
  83:../../os/oslib/include/chmempools.h **** 
  84:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  85:../../os/oslib/include/chmempools.h **** /* Module macros.                                                            */
  86:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
  87:../../os/oslib/include/chmempools.h **** 
  88:../../os/oslib/include/chmempools.h **** /**
  89:../../os/oslib/include/chmempools.h ****  * @brief   Data part of a static memory pool initializer.
  90:../../os/oslib/include/chmempools.h ****  * @details This macro should be used when statically initializing a
  91:../../os/oslib/include/chmempools.h ****  *          memory pool that is part of a bigger structure.
  92:../../os/oslib/include/chmempools.h ****  *
  93:../../os/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
  94:../../os/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
  95:../../os/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
  96:../../os/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool
  97:../../os/oslib/include/chmempools.h ****  */
  98:../../os/oslib/include/chmempools.h **** #define __MEMORYPOOL_DATA(name, size, align, provider)                      \
  99:../../os/oslib/include/chmempools.h ****   {NULL, size, align, provider}
 100:../../os/oslib/include/chmempools.h **** 
 101:../../os/oslib/include/chmempools.h **** /**
 102:../../os/oslib/include/chmempools.h ****  * @brief   Static memory pool initializer.
 103:../../os/oslib/include/chmempools.h ****  * @details Statically initialized memory pools require no explicit
 104:../../os/oslib/include/chmempools.h ****  *          initialization using @p chPoolInit().
 105:../../os/oslib/include/chmempools.h ****  *
 106:../../os/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
 107:../../os/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 108:../../os/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 109:../../os/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool or @p NULL
 110:../../os/oslib/include/chmempools.h ****  *                      if the pool is not allowed to grow automatically
 111:../../os/oslib/include/chmempools.h ****  */
 112:../../os/oslib/include/chmempools.h **** #define MEMORYPOOL_DECL(name, size, align, provider)                        \
 113:../../os/oslib/include/chmempools.h ****   memory_pool_t name = __MEMORYPOOL_DATA(name, size, align, provider)
 114:../../os/oslib/include/chmempools.h **** 
 115:../../os/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 116:../../os/oslib/include/chmempools.h **** /**
 117:../../os/oslib/include/chmempools.h ****  * @brief   Data part of a static guarded memory pool initializer.
 118:../../os/oslib/include/chmempools.h ****  * @details This macro should be used when statically initializing a
 119:../../os/oslib/include/chmempools.h ****  *          memory pool that is part of a bigger structure.
 120:../../os/oslib/include/chmempools.h ****  *
 121:../../os/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
 122:../../os/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 123:../../os/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 124:../../os/oslib/include/chmempools.h ****  */
 125:../../os/oslib/include/chmempools.h **** #define __GUARDEDMEMORYPOOL_DATA(name, size, align) {                       \
 126:../../os/oslib/include/chmempools.h ****   __SEMAPHORE_DATA(name.sem, (cnt_t)0),                                     \
 127:../../os/oslib/include/chmempools.h ****   __MEMORYPOOL_DATA(NULL, size, align, NULL)                                \
 128:../../os/oslib/include/chmempools.h **** }
 129:../../os/oslib/include/chmempools.h **** 
 130:../../os/oslib/include/chmempools.h **** /**
 131:../../os/oslib/include/chmempools.h ****  * @brief   Static guarded memory pool initializer.
 132:../../os/oslib/include/chmempools.h ****  * @details Statically initialized guarded memory pools require no explicit
 133:../../os/oslib/include/chmempools.h ****  *          initialization using @p chGuardedPoolInit().
 134:../../os/oslib/include/chmempools.h ****  *
 135:../../os/oslib/include/chmempools.h ****  * @param[in] name      the name of the guarded memory pool variable
 136:../../os/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 137:../../os/oslib/include/chmempools.h ****  * @param[in] align     required memory alignment
 138:../../os/oslib/include/chmempools.h ****  */
 139:../../os/oslib/include/chmempools.h **** #define GUARDEDMEMORYPOOL_DECL(name, size, align)                           \
 140:../../os/oslib/include/chmempools.h ****   guarded_memory_pool_t name = __GUARDEDMEMORYPOOL_DATA(name, size, align)
 141:../../os/oslib/include/chmempools.h **** #endif /* CH_CFG_USE_SEMAPHORES == TRUE */
 142:../../os/oslib/include/chmempools.h **** 
 143:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
 144:../../os/oslib/include/chmempools.h **** /* External declarations.                                                    */
 145:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
 146:../../os/oslib/include/chmempools.h **** 
 147:../../os/oslib/include/chmempools.h **** #ifdef __cplusplus
 148:../../os/oslib/include/chmempools.h **** extern "C" {
 149:../../os/oslib/include/chmempools.h **** #endif
 150:../../os/oslib/include/chmempools.h ****   void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
 151:../../os/oslib/include/chmempools.h ****                                unsigned align, memgetfunc_t provider);
 152:../../os/oslib/include/chmempools.h ****   void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n);
 153:../../os/oslib/include/chmempools.h ****   void *chPoolAllocI(memory_pool_t *mp);
 154:../../os/oslib/include/chmempools.h ****   void *chPoolAlloc(memory_pool_t *mp);
 155:../../os/oslib/include/chmempools.h ****   void chPoolFreeI(memory_pool_t *mp, void *objp);
 156:../../os/oslib/include/chmempools.h ****   void chPoolFree(memory_pool_t *mp, void *objp);
 157:../../os/oslib/include/chmempools.h **** #if CH_CFG_USE_SEMAPHORES == TRUE
 158:../../os/oslib/include/chmempools.h ****   void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
 159:../../os/oslib/include/chmempools.h ****                                       size_t size,
 160:../../os/oslib/include/chmempools.h ****                                       unsigned align);
 161:../../os/oslib/include/chmempools.h ****   void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n);
 162:../../os/oslib/include/chmempools.h ****   void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
 163:../../os/oslib/include/chmempools.h ****                                    sysinterval_t timeout);
 164:../../os/oslib/include/chmempools.h ****   void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 165:../../os/oslib/include/chmempools.h ****                                   sysinterval_t timeout);
 166:../../os/oslib/include/chmempools.h ****   void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp);
 167:../../os/oslib/include/chmempools.h **** #endif
 168:../../os/oslib/include/chmempools.h **** #ifdef __cplusplus
 169:../../os/oslib/include/chmempools.h **** }
 170:../../os/oslib/include/chmempools.h **** #endif
 171:../../os/oslib/include/chmempools.h **** 
 172:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
 173:../../os/oslib/include/chmempools.h **** /* Module inline functions.                                                  */
 174:../../os/oslib/include/chmempools.h **** /*===========================================================================*/
 175:../../os/oslib/include/chmempools.h **** 
 176:../../os/oslib/include/chmempools.h **** /**
 177:../../os/oslib/include/chmempools.h ****  * @brief   Initializes an empty memory pool.
 178:../../os/oslib/include/chmempools.h ****  *
 179:../../os/oslib/include/chmempools.h ****  * @param[out] mp       pointer to a @p memory_pool_t structure
 180:../../os/oslib/include/chmempools.h ****  * @param[in] size      the size of the objects contained in this memory pool,
 181:../../os/oslib/include/chmempools.h ****  *                      the minimum accepted size is the size of a pointer to
 182:../../os/oslib/include/chmempools.h ****  *                      void.
 183:../../os/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool or
 184:../../os/oslib/include/chmempools.h ****  *                      @p NULL if the pool is not allowed to grow
 185:../../os/oslib/include/chmempools.h ****  *                      automatically
 186:../../os/oslib/include/chmempools.h ****  *
 187:../../os/oslib/include/chmempools.h ****  * @init
 188:../../os/oslib/include/chmempools.h ****  */
 189:../../os/oslib/include/chmempools.h **** static inline void chPoolObjectInit(memory_pool_t *mp,
 190:../../os/oslib/include/chmempools.h ****                                     size_t size,
 191:../../os/oslib/include/chmempools.h ****                                     memgetfunc_t provider) {
 192:../../os/oslib/include/chmempools.h **** 
 193:../../os/oslib/include/chmempools.h ****   chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 194:../../os/oslib/include/chmempools.h **** }
 195:../../os/oslib/include/chmempools.h **** 
 196:../../os/oslib/include/chmempools.h **** /**
 197:../../os/oslib/include/chmempools.h ****  * @brief   Adds an object to a memory pool.
 198:../../os/oslib/include/chmempools.h ****  * @pre     The memory pool must be already been initialized.
 199:../../os/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 200:../../os/oslib/include/chmempools.h ****  *          memory pool.
 201:../../os/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 202:../../os/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chPoolFree() and has been
 203:../../os/oslib/include/chmempools.h ****  *          added for clarity.
 204:../../os/oslib/include/chmempools.h ****  *
 205:../../os/oslib/include/chmempools.h ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 206:../../os/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 207:../../os/oslib/include/chmempools.h ****  *
 208:../../os/oslib/include/chmempools.h ****  * @api
 209:../../os/oslib/include/chmempools.h ****  */
 210:../../os/oslib/include/chmempools.h **** static inline void chPoolAdd(memory_pool_t *mp, void *objp) {
 211:../../os/oslib/include/chmempools.h **** 
 212:../../os/oslib/include/chmempools.h ****   chPoolFree(mp, objp);
 213:../../os/oslib/include/chmempools.h **** }
 214:../../os/oslib/include/chmempools.h **** 
 215:../../os/oslib/include/chmempools.h **** /**
 216:../../os/oslib/include/chmempools.h ****  * @brief   Adds an object to a memory pool.
 217:../../os/oslib/include/chmempools.h ****  * @pre     The memory pool must be already been initialized.
 218:../../os/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 219:../../os/oslib/include/chmempools.h ****  *          memory pool.
 220:../../os/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 221:../../os/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chPoolFreeI() and has been
 222:../../os/oslib/include/chmempools.h ****  *          added for clarity.
 223:../../os/oslib/include/chmempools.h ****  *
 224:../../os/oslib/include/chmempools.h ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 225:../../os/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 226:../../os/oslib/include/chmempools.h ****  *
 227:../../os/oslib/include/chmempools.h ****  * @iclass
 228:../../os/oslib/include/chmempools.h ****  */
 229:../../os/oslib/include/chmempools.h **** static inline void chPoolAddI(memory_pool_t *mp, void *objp) {
 230:../../os/oslib/include/chmempools.h **** 
 231:../../os/oslib/include/chmempools.h ****   chPoolFreeI(mp, objp);
 232:../../os/oslib/include/chmempools.h **** }
 233:../../os/oslib/include/chmempools.h **** 
 234:../../os/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 235:../../os/oslib/include/chmempools.h **** /**
 236:../../os/oslib/include/chmempools.h ****  * @brief   Initializes an empty guarded memory pool.
 237:../../os/oslib/include/chmempools.h ****  *
 238:../../os/oslib/include/chmempools.h ****  * @param[out] gmp      pointer to a @p guarded_memory_pool_t structure
 239:../../os/oslib/include/chmempools.h ****  * @param[in] size      the size of the objects contained in this guarded
 240:../../os/oslib/include/chmempools.h ****  *                      memory pool, the minimum accepted size is the size
 241:../../os/oslib/include/chmempools.h ****  *                      of a pointer to void.
 242:../../os/oslib/include/chmempools.h ****  *
 243:../../os/oslib/include/chmempools.h ****  * @init
 244:../../os/oslib/include/chmempools.h ****  */
 245:../../os/oslib/include/chmempools.h **** static inline void chGuardedPoolObjectInit(guarded_memory_pool_t *gmp,
 246:../../os/oslib/include/chmempools.h ****                                            size_t size) {
 247:../../os/oslib/include/chmempools.h **** 
 248:../../os/oslib/include/chmempools.h ****   chGuardedPoolObjectInitAligned(gmp, size, PORT_NATURAL_ALIGN);
 249:../../os/oslib/include/chmempools.h **** }
 250:../../os/oslib/include/chmempools.h **** 
 251:../../os/oslib/include/chmempools.h **** /**
 252:../../os/oslib/include/chmempools.h ****  * @brief   Gets the count of objects in a guarded memory pool.
 253:../../os/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must be already been initialized.
 254:../../os/oslib/include/chmempools.h ****  *
 255:../../os/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 256:../../os/oslib/include/chmempools.h ****  * @return              The counter of the guard semaphore.
 257:../../os/oslib/include/chmempools.h ****  *
 258:../../os/oslib/include/chmempools.h ****  * @iclass
 259:../../os/oslib/include/chmempools.h ****  */
 260:../../os/oslib/include/chmempools.h **** static inline cnt_t chGuardedPoolGetCounterI(guarded_memory_pool_t *gmp) {
 261:../../os/oslib/include/chmempools.h **** 
 262:../../os/oslib/include/chmempools.h ****   return chSemGetCounterI(&gmp->sem);
 263:../../os/oslib/include/chmempools.h **** }
 264:../../os/oslib/include/chmempools.h **** 
 265:../../os/oslib/include/chmempools.h **** /**
 266:../../os/oslib/include/chmempools.h ****  * @brief   Allocates an object from a guarded memory pool.
 267:../../os/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must be already been initialized.
 268:../../os/oslib/include/chmempools.h ****  *
 269:../../os/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 270:../../os/oslib/include/chmempools.h ****  * @return              The pointer to the allocated object.
 271:../../os/oslib/include/chmempools.h ****  * @retval NULL         if the pool is empty.
 272:../../os/oslib/include/chmempools.h ****  *
 273:../../os/oslib/include/chmempools.h ****  * @iclass
 274:../../os/oslib/include/chmempools.h ****  */
 275:../../os/oslib/include/chmempools.h **** static inline void *chGuardedPoolAllocI(guarded_memory_pool_t *gmp) {
 276:../../os/oslib/include/chmempools.h ****   void *p;
 277:../../os/oslib/include/chmempools.h **** 
 278:../../os/oslib/include/chmempools.h ****   p = chPoolAllocI(&gmp->pool);
 279:../../os/oslib/include/chmempools.h ****   if (p != NULL) {
 280:../../os/oslib/include/chmempools.h ****     chSemFastWaitI(&gmp->sem);
 281:../../os/oslib/include/chmempools.h ****     chDbgAssert(chSemGetCounterI(&gmp->sem) >= (cnt_t)0,
 282:../../os/oslib/include/chmempools.h ****                 "semaphore out of sync");
 283:../../os/oslib/include/chmempools.h ****   }
 284:../../os/oslib/include/chmempools.h ****   return p;
 285:../../os/oslib/include/chmempools.h **** }
 286:../../os/oslib/include/chmempools.h **** 
 287:../../os/oslib/include/chmempools.h **** /**
 288:../../os/oslib/include/chmempools.h ****  * @brief   Releases an object into a guarded memory pool.
 289:../../os/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must already be initialized.
 290:../../os/oslib/include/chmempools.h ****  * @pre     The freed object must be of the right size for the specified
 291:../../os/oslib/include/chmempools.h ****  *          guarded memory pool.
 292:../../os/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 293:../../os/oslib/include/chmempools.h ****  *
 294:../../os/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 295:../../os/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be released
 296:../../os/oslib/include/chmempools.h ****  *
 297:../../os/oslib/include/chmempools.h ****  * @iclass
 298:../../os/oslib/include/chmempools.h ****  */
 299:../../os/oslib/include/chmempools.h **** static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {
 300:../../os/oslib/include/chmempools.h **** 
 301:../../os/oslib/include/chmempools.h ****   chPoolFreeI(&gmp->pool, objp);
 302:../../os/oslib/include/chmempools.h ****   chSemSignalI(&gmp->sem);
 509               		.loc 3 302 0
 510 0026 C801      		movw r24,r16
 511 0028 0E94 0000 		call chSemSignalI
 512               	.LVL38:
 513               	.LBE157:
 514               	.LBE156:
 252:../../os/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 253:../../os/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 254:../../os/oslib/src/chmempools.c ****     p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 255:../../os/oslib/src/chmempools.c ****     /*lint -restore*/
 256:../../os/oslib/src/chmempools.c ****     n--;
 257:../../os/oslib/src/chmempools.c ****   }
 258:../../os/oslib/src/chmempools.c **** }
 259:../../os/oslib/src/chmempools.c **** 
 260:../../os/oslib/src/chmempools.c **** /**
 261:../../os/oslib/src/chmempools.c ****  * @brief   Allocates an object from a guarded memory pool.
 262:../../os/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 263:../../os/oslib/src/chmempools.c ****  *
 264:../../os/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 265:../../os/oslib/src/chmempools.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 266:../../os/oslib/src/chmempools.c ****  *                      the following special values are allowed:
 267:../../os/oslib/src/chmempools.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 268:../../os/oslib/src/chmempools.c ****  *                      - @a TIME_INFINITE no timeout.
 269:../../os/oslib/src/chmempools.c ****  *                      .
 270:../../os/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 271:../../os/oslib/src/chmempools.c ****  * @retval NULL         if the operation timed out.
 272:../../os/oslib/src/chmempools.c ****  *
 273:../../os/oslib/src/chmempools.c ****  * @sclass
 274:../../os/oslib/src/chmempools.c ****  */
 275:../../os/oslib/src/chmempools.c **** void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
 276:../../os/oslib/src/chmempools.c ****                                  sysinterval_t timeout) {
 277:../../os/oslib/src/chmempools.c ****   msg_t msg;
 278:../../os/oslib/src/chmempools.c **** 
 279:../../os/oslib/src/chmempools.c ****   msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 280:../../os/oslib/src/chmempools.c ****   if (msg != MSG_OK) {
 281:../../os/oslib/src/chmempools.c ****     return NULL;
 282:../../os/oslib/src/chmempools.c ****   }
 283:../../os/oslib/src/chmempools.c **** 
 284:../../os/oslib/src/chmempools.c ****   return chPoolAllocI(&gmp->pool);
 285:../../os/oslib/src/chmempools.c **** }
 286:../../os/oslib/src/chmempools.c **** 
 287:../../os/oslib/src/chmempools.c **** /**
 288:../../os/oslib/src/chmempools.c ****  * @brief   Allocates an object from a guarded memory pool.
 289:../../os/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 290:../../os/oslib/src/chmempools.c ****  *
 291:../../os/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 292:../../os/oslib/src/chmempools.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 293:../../os/oslib/src/chmempools.c ****  *                      the following special values are allowed:
 294:../../os/oslib/src/chmempools.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 295:../../os/oslib/src/chmempools.c ****  *                      - @a TIME_INFINITE no timeout.
 296:../../os/oslib/src/chmempools.c ****  *                      .
 297:../../os/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 298:../../os/oslib/src/chmempools.c ****  * @retval NULL         if the operation timed out.
 299:../../os/oslib/src/chmempools.c ****  *
 300:../../os/oslib/src/chmempools.c ****  * @api
 301:../../os/oslib/src/chmempools.c ****  */
 302:../../os/oslib/src/chmempools.c **** void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 303:../../os/oslib/src/chmempools.c ****                                 sysinterval_t timeout) {
 304:../../os/oslib/src/chmempools.c ****   void *p;
 305:../../os/oslib/src/chmempools.c **** 
 306:../../os/oslib/src/chmempools.c ****   chSysLock();
 307:../../os/oslib/src/chmempools.c ****   p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 308:../../os/oslib/src/chmempools.c ****   chSysUnlock();
 309:../../os/oslib/src/chmempools.c **** 
 310:../../os/oslib/src/chmempools.c ****   return p;
 311:../../os/oslib/src/chmempools.c **** }
 312:../../os/oslib/src/chmempools.c **** 
 313:../../os/oslib/src/chmempools.c **** /**
 314:../../os/oslib/src/chmempools.c ****  * @brief   Releases an object into a guarded memory pool.
 315:../../os/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must already be initialized.
 316:../../os/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 317:../../os/oslib/src/chmempools.c ****  *          guarded memory pool.
 318:../../os/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 319:../../os/oslib/src/chmempools.c ****  *
 320:../../os/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 321:../../os/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 322:../../os/oslib/src/chmempools.c ****  *
 323:../../os/oslib/src/chmempools.c ****  * @api
 324:../../os/oslib/src/chmempools.c ****  */
 325:../../os/oslib/src/chmempools.c **** void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 326:../../os/oslib/src/chmempools.c **** 
 327:../../os/oslib/src/chmempools.c ****   chSysLock();
 328:../../os/oslib/src/chmempools.c ****   chGuardedPoolFreeI(gmp, objp);
 329:../../os/oslib/src/chmempools.c ****   chSchRescheduleS();
 515               		.loc 1 329 0
 516 002c 0E94 0000 		call chSchRescheduleS
 517               	.LVL39:
 518               	.LBB160:
 519               	.LBB161:
 520               	.LBB162:
 521               	.LBB163:
 522               		.loc 2 440 0
 523               	/* #APP */
 524               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 525 0030 7894      		sei
 526               	 ;  0 "" 2
 527               	.LVL40:
 528               	/* #NOAPP */
 529               	.LBE163:
 530               	.LBE162:
 531               	.LBE161:
 532               	.LBE160:
 533               	.LBE152:
 534               	.LBE151:
 535               	.LBE150:
 254:../../os/oslib/src/chmempools.c ****     /*lint -restore*/
 536               		.loc 1 254 0
 537 0032 F801      		movw r30,r16
 538 0034 8781      		ldd r24,Z+7
 539 0036 9085      		ldd r25,Z+8
 540 0038 C80F      		add r28,r24
 541 003a D91F      		adc r29,r25
 542               	.LVL41:
 256:../../os/oslib/src/chmempools.c ****   }
 543               		.loc 1 256 0
 544 003c F1E0      		ldi r31,1
 545 003e EF1A      		sub r14,r31
 546 0040 F108      		sbc r15,__zero_reg__
 547               	.LVL42:
 251:../../os/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 548               		.loc 1 251 0
 549 0042 01F4      		brne .L26
 550               	.L24:
 551               	/* epilogue start */
 258:../../os/oslib/src/chmempools.c **** 
 552               		.loc 1 258 0
 553 0044 DF91      		pop r29
 554 0046 CF91      		pop r28
 555               	.LVL43:
 556 0048 1F91      		pop r17
 557 004a 0F91      		pop r16
 558               	.LVL44:
 559 004c FF90      		pop r15
 560 004e EF90      		pop r14
 561               	.LVL45:
 562 0050 0895      		ret
 563               		.cfi_endproc
 564               	.LFE197:
 566               		.section	.text.chGuardedPoolAllocTimeoutS,"ax",@progbits
 567               	.global	chGuardedPoolAllocTimeoutS
 569               	chGuardedPoolAllocTimeoutS:
 570               	.LFB198:
 276:../../os/oslib/src/chmempools.c ****   msg_t msg;
 571               		.loc 1 276 0
 572               		.cfi_startproc
 573               	.LVL46:
 574 0000 CF93      		push r28
 575               	.LCFI6:
 576               		.cfi_def_cfa_offset 3
 577               		.cfi_offset 28, -2
 578 0002 DF93      		push r29
 579               	.LCFI7:
 580               		.cfi_def_cfa_offset 4
 581               		.cfi_offset 29, -3
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 2 */
 585               	.L__stack_usage = 2
 586 0004 EC01      		movw r28,r24
 279:../../os/oslib/src/chmempools.c ****   if (msg != MSG_OK) {
 587               		.loc 1 279 0
 588 0006 0E94 0000 		call chSemWaitTimeoutS
 589               	.LVL47:
 280:../../os/oslib/src/chmempools.c ****     return NULL;
 590               		.loc 1 280 0
 591 000a 892B      		or r24,r25
 592 000c 01F4      		brne .L34
 593               	.LVL48:
 594               	.LBB164:
 595               	.LBB165:
 135:../../os/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 596               		.loc 1 135 0
 597 000e 8D81      		ldd r24,Y+5
 598 0010 9E81      		ldd r25,Y+6
 599               	.LVL49:
 137:../../os/oslib/src/chmempools.c ****     mp->next = mp->next->next;
 600               		.loc 1 137 0
 601 0012 0097      		sbiw r24,0
 602 0014 01F0      		breq .L33
 138:../../os/oslib/src/chmempools.c ****   }
 603               		.loc 1 138 0
 604 0016 FC01      		movw r30,r24
 605 0018 2081      		ld r18,Z
 606 001a 3181      		ldd r19,Z+1
 607 001c 3E83      		std Y+6,r19
 608 001e 2D83      		std Y+5,r18
 609               	.LVL50:
 610               	.L31:
 611               	/* epilogue start */
 612               	.LBE165:
 613               	.LBE164:
 285:../../os/oslib/src/chmempools.c **** 
 614               		.loc 1 285 0
 615 0020 DF91      		pop r29
 616 0022 CF91      		pop r28
 617               	.LVL51:
 618 0024 0895      		ret
 619               	.LVL52:
 620               	.L33:
 621               	.LBB168:
 622               	.LBB166:
 623 0026 CE01      		movw r24,r28
 624               	.LVL53:
 625 0028 0596      		adiw r24,5
 626               	/* epilogue start */
 627               	.LBE166:
 628               	.LBE168:
 629 002a DF91      		pop r29
 630 002c CF91      		pop r28
 631               	.LVL54:
 632               	.LBB169:
 633               	.LBB167:
 634 002e 0C94 0000 		jmp chPoolAllocI.part.0
 635               	.LVL55:
 636               	.L34:
 637               	.LBE167:
 638               	.LBE169:
 281:../../os/oslib/src/chmempools.c ****   }
 639               		.loc 1 281 0
 640 0032 90E0      		ldi r25,0
 641 0034 80E0      		ldi r24,0
 642               	.LVL56:
 643 0036 00C0      		rjmp .L31
 644               		.cfi_endproc
 645               	.LFE198:
 647               		.section	.text.chGuardedPoolAllocTimeout,"ax",@progbits
 648               	.global	chGuardedPoolAllocTimeout
 650               	chGuardedPoolAllocTimeout:
 651               	.LFB199:
 303:../../os/oslib/src/chmempools.c ****   void *p;
 652               		.loc 1 303 0
 653               		.cfi_startproc
 654               	.LVL57:
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 0 */
 658               	.L__stack_usage = 0
 659               	.LBB170:
 660               	.LBB171:
 661               	.LBB172:
 430:../../os/common/ports/AVR/chcore.h **** }
 662               		.loc 2 430 0
 663               	/* #APP */
 664               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 665 0000 F894      		cli
 666               	 ;  0 "" 2
 667               	/* #NOAPP */
 668               	.LBE172:
 669               	.LBE171:
 670               	.LBE170:
 307:../../os/oslib/src/chmempools.c ****   chSysUnlock();
 671               		.loc 1 307 0
 672 0002 0E94 0000 		call chGuardedPoolAllocTimeoutS
 673               	.LVL58:
 674               	.LBB173:
 675               	.LBB174:
 676               	.LBB175:
 677               	.LBB176:
 678               		.loc 2 440 0
 679               	/* #APP */
 680               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 681 0006 7894      		sei
 682               	 ;  0 "" 2
 683               	/* epilogue start */
 684               	/* #NOAPP */
 685               	.LBE176:
 686               	.LBE175:
 687               	.LBE174:
 688               	.LBE173:
 311:../../os/oslib/src/chmempools.c **** 
 689               		.loc 1 311 0
 690 0008 0895      		ret
 691               		.cfi_endproc
 692               	.LFE199:
 694               		.section	.text.chGuardedPoolFree,"ax",@progbits
 695               	.global	chGuardedPoolFree
 697               	chGuardedPoolFree:
 698               	.LFB200:
 325:../../os/oslib/src/chmempools.c **** 
 699               		.loc 1 325 0
 700               		.cfi_startproc
 701               	.LVL59:
 702               	/* prologue: function */
 703               	/* frame size = 0 */
 704               	/* stack size = 0 */
 705               	.L__stack_usage = 0
 706               	.LBB177:
 707               	.LBB178:
 708               	.LBB179:
 430:../../os/common/ports/AVR/chcore.h **** }
 709               		.loc 2 430 0
 710               	/* #APP */
 711               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 712 0000 F894      		cli
 713               	 ;  0 "" 2
 714               	.LVL60:
 715               	/* #NOAPP */
 716               	.LBE179:
 717               	.LBE178:
 718               	.LBE177:
 719               	.LBB180:
 720               	.LBB181:
 721               	.LBB182:
 722               	.LBB183:
 191:../../os/oslib/src/chmempools.c ****   mp->next = php;
 723               		.loc 1 191 0
 724 0002 FC01      		movw r30,r24
 725 0004 2581      		ldd r18,Z+5
 726 0006 3681      		ldd r19,Z+6
 727 0008 FB01      		movw r30,r22
 728 000a 3183      		std Z+1,r19
 729 000c 2083      		st Z,r18
 192:../../os/oslib/src/chmempools.c **** }
 730               		.loc 1 192 0
 731 000e FC01      		movw r30,r24
 732 0010 7683      		std Z+6,r23
 733 0012 6583      		std Z+5,r22
 734               	.LVL61:
 735               	.LBE183:
 736               	.LBE182:
 737               		.loc 3 302 0
 738 0014 0E94 0000 		call chSemSignalI
 739               	.LVL62:
 740               	.LBE181:
 741               	.LBE180:
 742               		.loc 1 329 0
 743 0018 0E94 0000 		call chSchRescheduleS
 744               	.LVL63:
 745               	.LBB184:
 746               	.LBB185:
 747               	.LBB186:
 748               	.LBB187:
 749               		.loc 2 440 0
 750               	/* #APP */
 751               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 752 001c 7894      		sei
 753               	 ;  0 "" 2
 754               	/* epilogue start */
 755               	/* #NOAPP */
 756               	.LBE187:
 757               	.LBE186:
 758               	.LBE185:
 759               	.LBE184:
 330:../../os/oslib/src/chmempools.c ****   chSysUnlock();
 331:../../os/oslib/src/chmempools.c **** }
 760               		.loc 1 331 0
 761 001e 0895      		ret
 762               		.cfi_endproc
 763               	.LFE200:
 765               		.text
 766               	.Letext0:
 767               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 768               		.file 5 "/usr/lib/avr/include/stdint.h"
 769               		.file 6 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 770               		.file 7 "../../os/rt/include/chearly.h"
 771               		.file 8 "../../os/rt/include/chobjects.h"
 772               		.file 9 "../../os/rt/include/chrfcu.h"
 773               		.file 10 "../../os/rt/include/chdebug.h"
 774               		.file 11 "../../os/rt/include/chtime.h"
 775               		.file 12 "../../os/rt/include/chlists.h"
 776               		.file 13 "../../os/rt/include/chsem.h"
 777               		.file 14 "../../os/rt/include/chmtx.h"
 778               		.file 15 "../../os/rt/include/chsys.h"
 779               		.file 16 "../../os/rt/include/chregistry.h"
 780               		.file 17 "../../os/oslib/include/chmemcore.h"
 781               		.file 18 "../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmempools.c
     /tmp/cc5h1Opj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc5h1Opj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc5h1Opj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc5h1Opj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc5h1Opj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc5h1Opj.s:12     .text.chPoolAllocI.part.0:0000000000000000 chPoolAllocI.part.0
     /tmp/cc5h1Opj.s:54     .text.chPoolObjectInitAligned:0000000000000000 chPoolObjectInitAligned
     /tmp/cc5h1Opj.s:85     .text.chPoolLoadArray:0000000000000000 chPoolLoadArray
     /tmp/cc5h1Opj.s:175    .text.chPoolAllocI:0000000000000000 chPoolAllocI
     /tmp/cc5h1Opj.s:213    .text.chPoolAlloc:0000000000000000 chPoolAlloc
     /tmp/cc5h1Opj.s:307    .text.chPoolFreeI:0000000000000000 chPoolFreeI
     /tmp/cc5h1Opj.s:336    .text.chPoolFree:0000000000000000 chPoolFree
     /tmp/cc5h1Opj.s:397    .text.chGuardedPoolObjectInitAligned:0000000000000000 chGuardedPoolObjectInitAligned
     /tmp/cc5h1Opj.s:435    .text.chGuardedPoolLoadArray:0000000000000000 chGuardedPoolLoadArray
     /tmp/cc5h1Opj.s:569    .text.chGuardedPoolAllocTimeoutS:0000000000000000 chGuardedPoolAllocTimeoutS
     /tmp/cc5h1Opj.s:650    .text.chGuardedPoolAllocTimeout:0000000000000000 chGuardedPoolAllocTimeout
     /tmp/cc5h1Opj.s:697    .text.chGuardedPoolFree:0000000000000000 chGuardedPoolFree

UNDEFINED SYMBOLS
chSemObjectInit
chSemSignalI
chSchRescheduleS
chSemWaitTimeoutS
