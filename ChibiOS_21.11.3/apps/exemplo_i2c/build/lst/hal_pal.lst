   1               		.file	"hal_pal.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.palReadBus,"ax",@progbits
  11               	.global	palReadBus
  13               	palReadBus:
  14               	.LFB238:
  15               		.file 1 "../../os/hal/src/hal_pal.c"
   1:../../os/hal/src/hal_pal.c **** /*
   2:../../os/hal/src/hal_pal.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/src/hal_pal.c **** 
   4:../../os/hal/src/hal_pal.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/src/hal_pal.c ****     you may not use this file except in compliance with the License.
   6:../../os/hal/src/hal_pal.c ****     You may obtain a copy of the License at
   7:../../os/hal/src/hal_pal.c **** 
   8:../../os/hal/src/hal_pal.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/src/hal_pal.c **** 
  10:../../os/hal/src/hal_pal.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/src/hal_pal.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/src/hal_pal.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/src/hal_pal.c ****     See the License for the specific language governing permissions and
  14:../../os/hal/src/hal_pal.c ****     limitations under the License.
  15:../../os/hal/src/hal_pal.c **** */
  16:../../os/hal/src/hal_pal.c **** 
  17:../../os/hal/src/hal_pal.c **** /**
  18:../../os/hal/src/hal_pal.c ****  * @file    hal_pal.c
  19:../../os/hal/src/hal_pal.c ****  * @brief   I/O Ports Abstraction Layer code.
  20:../../os/hal/src/hal_pal.c ****  *
  21:../../os/hal/src/hal_pal.c ****  * @addtogroup PAL
  22:../../os/hal/src/hal_pal.c ****  * @{
  23:../../os/hal/src/hal_pal.c ****  */
  24:../../os/hal/src/hal_pal.c **** 
  25:../../os/hal/src/hal_pal.c **** #include "hal.h"
  26:../../os/hal/src/hal_pal.c **** 
  27:../../os/hal/src/hal_pal.c **** #if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  28:../../os/hal/src/hal_pal.c **** 
  29:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  30:../../os/hal/src/hal_pal.c **** /* Driver local definitions.                                                 */
  31:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  32:../../os/hal/src/hal_pal.c **** 
  33:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  34:../../os/hal/src/hal_pal.c **** /* Driver exported variables.                                                */
  35:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  36:../../os/hal/src/hal_pal.c **** 
  37:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  38:../../os/hal/src/hal_pal.c **** /* Driver local variables and types.                                         */
  39:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  40:../../os/hal/src/hal_pal.c **** 
  41:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  42:../../os/hal/src/hal_pal.c **** /* Driver local functions.                                                   */
  43:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  44:../../os/hal/src/hal_pal.c **** 
  45:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  46:../../os/hal/src/hal_pal.c **** /* Driver exported functions.                                                */
  47:../../os/hal/src/hal_pal.c **** /*===========================================================================*/
  48:../../os/hal/src/hal_pal.c **** 
  49:../../os/hal/src/hal_pal.c **** /**
  50:../../os/hal/src/hal_pal.c ****  * @brief   Read from an I/O bus.
  51:../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
  52:../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
  53:../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
  54:../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
  55:../../os/hal/src/hal_pal.c ****  * @note    The function internally uses the @p palReadGroup() macro. The use
  56:../../os/hal/src/hal_pal.c ****  *          of this function is preferred when you value code size, readability
  57:../../os/hal/src/hal_pal.c ****  *          and error checking over speed.
  58:../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
  59:../../os/hal/src/hal_pal.c ****  *
  60:../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
  61:../../os/hal/src/hal_pal.c ****  * @return              The bus logical states.
  62:../../os/hal/src/hal_pal.c ****  *
  63:../../os/hal/src/hal_pal.c ****  * @special
  64:../../os/hal/src/hal_pal.c ****  */
  65:../../os/hal/src/hal_pal.c **** ioportmask_t palReadBus(const IOBus *bus) {
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
  66:../../os/hal/src/hal_pal.c **** 
  67:../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
  68:../../os/hal/src/hal_pal.c **** 
  69:../../os/hal/src/hal_pal.c ****   return palReadGroup(bus->portid, bus->mask, bus->offset);
  24               		.loc 1 69 0
  25 0002 A081      		ld r26,Z
  26 0004 B181      		ldd r27,Z+1
  27 0006 2C91      		ld r18,X
  28 0008 30E0      		ldi r19,0
  29 000a 8381      		ldd r24,Z+3
  30               	.LVL1:
  31 000c 00C0      		rjmp 2f
  32               		1:
  33 000e 3595      		asr r19
  34 0010 2795      		ror r18
  35               		2:
  36 0012 8A95      		dec r24
  37 0014 02F4      		brpl 1b
  38 0016 8281      		ldd r24,Z+2
  70:../../os/hal/src/hal_pal.c **** }
  39               		.loc 1 70 0
  40 0018 8223      		and r24,r18
  41               	/* epilogue start */
  42 001a 0895      		ret
  43               		.cfi_endproc
  44               	.LFE238:
  46               		.section	.text.palWriteBus,"ax",@progbits
  47               	.global	palWriteBus
  49               	palWriteBus:
  50               	.LFB239:
  71:../../os/hal/src/hal_pal.c **** 
  72:../../os/hal/src/hal_pal.c **** /**
  73:../../os/hal/src/hal_pal.c ****  * @brief   Write to an I/O bus.
  74:../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
  75:../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
  76:../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
  77:../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
  78:../../os/hal/src/hal_pal.c ****  * @note    The default implementation is non atomic and not necessarily
  79:../../os/hal/src/hal_pal.c ****  *          optimal. Low level drivers may  optimize the function by using
  80:../../os/hal/src/hal_pal.c ****  *          specific hardware or coding.
  81:../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
  82:../../os/hal/src/hal_pal.c ****  *
  83:../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
  84:../../os/hal/src/hal_pal.c ****  * @param[in] bits      the bits to be written on the I/O bus. Values exceeding
  85:../../os/hal/src/hal_pal.c ****  *                      the bus width are masked so most significant bits are
  86:../../os/hal/src/hal_pal.c ****  *                      lost.
  87:../../os/hal/src/hal_pal.c ****  *
  88:../../os/hal/src/hal_pal.c ****  * @special
  89:../../os/hal/src/hal_pal.c ****  */
  90:../../os/hal/src/hal_pal.c **** void palWriteBus(const IOBus *bus, ioportmask_t bits) {
  51               		.loc 1 90 0
  52               		.cfi_startproc
  53               	.LVL2:
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 0 */
  57               	.L__stack_usage = 0
  58 0000 FC01      		movw r30,r24
  91:../../os/hal/src/hal_pal.c **** 
  92:../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
  93:../../os/hal/src/hal_pal.c **** 
  94:../../os/hal/src/hal_pal.c ****   palWriteGroup(bus->portid, bus->mask, bus->offset, bits);
  59               		.loc 1 94 0
  60 0002 A081      		ld r26,Z
  61 0004 B181      		ldd r27,Z+1
  62 0006 1296      		adiw r26,2
  63 0008 4C91      		ld r20,X
  64 000a 1297      		sbiw r26,2
  65 000c 2281      		ldd r18,Z+2
  66 000e 3381      		ldd r19,Z+3
  67 0010 822F      		mov r24,r18
  68               	.LVL3:
  69 0012 032E      		mov r0,r19
  70 0014 00C0      		rjmp 2f
  71               		1:
  72 0016 880F      		lsl r24
  73               		2:
  74 0018 0A94      		dec r0
  75 001a 02F4      		brpl 1b
  76 001c 8095      		com r24
  77 001e 8423      		and r24,r20
  78 0020 6223      		and r22,r18
  79               	.LVL4:
  80 0022 00C0      		rjmp 2f
  81               		1:
  82 0024 660F      		lsl r22
  83               		2:
  84 0026 3A95      		dec r19
  85 0028 02F4      		brpl 1b
  86 002a 862B      		or r24,r22
  87 002c 1296      		adiw r26,2
  88 002e 8C93      		st X,r24
  89               	/* epilogue start */
  95:../../os/hal/src/hal_pal.c **** }
  90               		.loc 1 95 0
  91 0030 0895      		ret
  92               		.cfi_endproc
  93               	.LFE239:
  95               		.section	.text.palSetBusMode,"ax",@progbits
  96               	.global	palSetBusMode
  98               	palSetBusMode:
  99               	.LFB240:
  96:../../os/hal/src/hal_pal.c **** 
  97:../../os/hal/src/hal_pal.c **** /**
  98:../../os/hal/src/hal_pal.c ****  * @brief   Programs a bus with the specified mode.
  99:../../os/hal/src/hal_pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
 100:../../os/hal/src/hal_pal.c ****  *          architectures, for atomicity and/or portability reasons you may
 101:../../os/hal/src/hal_pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
 102:../../os/hal/src/hal_pal.c ****  *          @p osalSysUnlock().
 103:../../os/hal/src/hal_pal.c ****  * @note    The default implementation is non atomic and not necessarily
 104:../../os/hal/src/hal_pal.c ****  *          optimal. Low level drivers may  optimize the function by using
 105:../../os/hal/src/hal_pal.c ****  *          specific hardware or coding.
 106:../../os/hal/src/hal_pal.c ****  * @note    The function can be called from any context.
 107:../../os/hal/src/hal_pal.c ****  *
 108:../../os/hal/src/hal_pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
 109:../../os/hal/src/hal_pal.c ****  * @param[in] mode      the mode
 110:../../os/hal/src/hal_pal.c ****  *
 111:../../os/hal/src/hal_pal.c ****  * @special
 112:../../os/hal/src/hal_pal.c ****  */
 113:../../os/hal/src/hal_pal.c **** void palSetBusMode(const IOBus *bus, iomode_t mode) {
 100               		.loc 1 113 0
 101               		.cfi_startproc
 102               	.LVL5:
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
 107 0000 FC01      		movw r30,r24
 108 0002 462F      		mov r20,r22
 114:../../os/hal/src/hal_pal.c **** 
 115:../../os/hal/src/hal_pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 116:../../os/hal/src/hal_pal.c **** 
 117:../../os/hal/src/hal_pal.c ****   palSetGroupMode(bus->portid, bus->mask, bus->offset, mode);
 109               		.loc 1 117 0
 110 0004 2281      		ldd r18,Z+2
 111 0006 8381      		ldd r24,Z+3
 112               	.LVL6:
 113 0008 00C0      		rjmp 2f
 114               		1:
 115 000a 220F      		lsl r18
 116               		2:
 117 000c 8A95      		dec r24
 118 000e 02F4      		brpl 1b
 119 0010 622F      		mov r22,r18
 120               	.LVL7:
 121 0012 8081      		ld r24,Z
 122 0014 9181      		ldd r25,Z+1
 123 0016 0C94 0000 		jmp _pal_lld_setgroupmode
 124               	.LVL8:
 125               		.cfi_endproc
 126               	.LFE240:
 128               		.text
 129               	.Letext0:
 130               		.file 2 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 131               		.file 3 "/usr/lib/avr/include/stdint.h"
 132               		.file 4 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 133               		.file 5 "../../os/rt/include/chearly.h"
 134               		.file 6 "../../os/rt/include/chobjects.h"
 135               		.file 7 "../../os/rt/include/chrfcu.h"
 136               		.file 8 "../../os/rt/include/chdebug.h"
 137               		.file 9 "../../os/rt/include/chtime.h"
 138               		.file 10 "../../os/rt/include/chlists.h"
 139               		.file 11 "../../os/common/ports/AVR/chcore.h"
 140               		.file 12 "../../os/rt/include/chsem.h"
 141               		.file 13 "../../os/rt/include/chmtx.h"
 142               		.file 14 "../../os/rt/include/chsys.h"
 143               		.file 15 "../../os/rt/include/chregistry.h"
 144               		.file 16 "../../os/rt/include/chevents.h"
 145               		.file 17 "../../os/oslib/include/chmemcore.h"
 146               		.file 18 "../../os/hal/include/hal_queues.h"
 147               		.file 19 "../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 148               		.file 20 "../../os/hal/include/hal_pal.h"
 149               		.file 21 "../../os/hal/include/hal_gpt.h"
 150               		.file 22 "../../os/hal/ports/AVR/MEGA/LLD/TIMv1/hal_gpt_lld.h"
 151               		.file 23 "../../os/hal/include/hal_i2c.h"
 152               		.file 24 "../../os/hal/ports/AVR/MEGA/LLD/I2Cv1/hal_i2c_lld.h"
 153               		.file 25 "../../os/hal/include/hal_serial.h"
 154               		.file 26 "../../os/hal/ports/AVR/MEGA/LLD/USARTv1/hal_serial_lld.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_pal.c
     /tmp/ccs92rDq.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccs92rDq.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccs92rDq.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccs92rDq.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccs92rDq.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccs92rDq.s:13     .text.palReadBus:0000000000000000 palReadBus
     /tmp/ccs92rDq.s:49     .text.palWriteBus:0000000000000000 palWriteBus
     /tmp/ccs92rDq.s:98     .text.palSetBusMode:0000000000000000 palSetBusMode

UNDEFINED SYMBOLS
_pal_lld_setgroupmode
